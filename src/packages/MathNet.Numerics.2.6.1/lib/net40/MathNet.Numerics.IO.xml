<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MathNet.Numerics.IO</name>
    </assembly>
    <members>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.IO.DelimitedReader`1">
            <summary>
            Creates a <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/> from a delimited text file. If the user does not
            specify a delimiter, then any whitespace is used.
            </summary>
            <typeparam name="TMatrix">The type of the matrix to return.</typeparam>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.IO.DelimitedReader`2">
            <summary>
            Creates a <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/> from a delimited text file. If the user does not
            specify a delimiter, then any whitespace is used.
            </summary>
            <typeparam name="TMatrix">The type of the matrix to return.</typeparam>
            <typeparam name="TDataType">The data type of the Matrix. It can be either: double, float, Complex, or Complex32.</typeparam>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.IO.MatrixReader`2">
            <summary>
            Base class to read a single <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/> from a file or stream.
            </summary>
            <typeparam name="TMatrix">The type of Matrix to return.</typeparam>
            <typeparam name="TDataType">The data type of the Matrix. It can be either: double, float, Complex, or Complex32.</typeparam>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.MatrixReader`2.ReadMatrix(System.String)">
            <summary>
            Reads a <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/> from a file.
            </summary>
            <param name="file">The file to read the matrix from.</param>
            <returns>A <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/> containing the data from the file. <see langword="null"/> is returned if the file is empty.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="file"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.IOException">If the file doesn't exist.</exception>
            <exception cref="T:System.FormatException">If a value is not a number or not in a valid format.</exception>
            <exception cref="T:System.OverflowException">If a value represents a number less than <see cref="F:System.Double.MinValue"/> or greater than <see cref="F:System.Double.MaxValue"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.MatrixReader`2.ReadMatrix(System.IO.Stream)">
            <summary>
            Reads a <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/> from a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read the matrix from.</param>
            <returns>A matrix containing the data from the <see cref="T:System.IO.Stream"/>. <see langword="null"/> is returned if the <see cref="T:System.IO.Stream"/> is empty.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="stream"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.FormatException">If a value is not a number or not in a valid format.</exception>
            <exception cref="T:System.OverflowException">If a value represents a number less than <see cref="F:System.Double.MinValue"/> or greater than <see cref="F:System.Double.MaxValue"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.MatrixReader`2.DoReadMatrix(System.IO.Stream)">
            <summary>
            Subclasses override this method to do the actual reading.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read the matrix from.</param>
            <returns>A matrix containing the data from the <see cref="T:System.IO.Stream"/>. <see langword="null"/> is returned if the <see cref="T:System.IO.Stream"/> is empty.</returns>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.DelimitedReader`2._parseFunction">
            <summary>
            The function that will do the conversion for a given type.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.DelimitedReader`2.SetParser">
            <summary>
            Initializes static members of the <see cref="T:MathNet.Numerics.LinearAlgebra.IO.DelimitedReader`2"/> class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.DelimitedReader`2.ConvertComplex32(System.String)">
            <summary>
            Converts the string into a Complex32.
            </summary>
            <param name="number">The number to convert.</param>
            <returns>The converted number.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.DelimitedReader`2.ConvertComplex(System.String)">
            <summary>
            Converts the string into a Complex.
            </summary>
            <param name="number">The number to convert.</param>
            <returns>The converted number.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.DelimitedReader`2.ConvertDouble(System.String)">
            <summary>
            Converts the string into a double.
            </summary>
            <param name="number">The number to convert.</param>
            <returns>The converted number.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.DelimitedReader`2.ConvertFloat(System.String)">
            <summary>
            Converts the string into a float.
            </summary>
            <param name="number">The number to convert.</param>
            <returns>The converted number.</returns>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.DelimitedReader`2.Constructor">
            <summary>
            Constructor to create matrix instance.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.DelimitedReader`2.Base">
            <summary>
            The base regular expression.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.DelimitedReader`2._regex">
            <summary>
            The regular expression to use.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.DelimitedReader`2._cultureInfo">
            <summary>
            The <see cref="P:MathNet.Numerics.LinearAlgebra.IO.DelimitedReader`2.CultureInfo"/> to use.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.DelimitedReader`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.IO.DelimitedReader`2"/> class using
            any whitespace as the delimiter.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.DelimitedReader`2.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.IO.DelimitedReader`2"/> class.
            </summary>
            <param name="delimiter">The delimiter to use.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.DelimitedReader`2.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.IO.DelimitedReader`2"/> class. 
            </summary>
            <param name="delimiter">
            The delimiter to use.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="delimiter"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.DelimitedReader`2.DoReadMatrix(System.IO.Stream)">
            <summary>
            Performs the actual reading.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read the matrix from.</param>
            <returns>
            A matrix containing the data from the <see cref="T:System.IO.Stream"/>. <see langword="null"/> is returned if the <see cref="T:System.IO.Stream"/> is empty.
            </returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.IO.DelimitedReader`2.CultureInfo">
            <summary>
            Gets or sets the <see cref="P:MathNet.Numerics.LinearAlgebra.IO.DelimitedReader`2.CultureInfo"/> to use when parsing the numbers.
            </summary>
            <value>The culture info.</value>
            <remarks>Defaults to <c>CultureInfo.CurrentCulture</c>.</remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.IO.DelimitedReader`2.HasHeaderRow">
            <summary>
            Gets or sets a value indicating whether the files has a header row.
            </summary>
            <value>
            <c>true</c> if this instance has a header row; otherwise, <c>false</c>.
            </value>
            <remarks>Defaults to <see langword="false"/>.</remarks>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.IO.DelimitedReader`2.ParseNumber">
            <summary>
            Converts a string into the given data type.
            </summary>
            <param name="number">
            The number as a string to convert.
            </param>
            <returns>The converted number.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.IO.DelimitedReader`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.IO.DelimitedReader`1"/> class using
            any whitespace as the delimiter.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.IO.DelimitedReader`1.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.IO.DelimitedReader`1"/> class.
            </summary>
            <param name="delimiter">The delimiter to use.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.IO.DelimitedReader`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.IO.DelimitedReader`1"/> class. 
            </summary>
            <param name="delimiter">
            The delimiter to use.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="delimiter"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.IO.MatlabMatrixReader">
            <summary>
            Creates matrices from Matlab files.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.IO.MatlabMatrixReader`1">
            <summary>
            Creates matrices from Matlab files.
            </summary>
            <typeparam name="TDataType">The data type of the Matrix. It can be either: double, float, Complex, or Complex32.</typeparam>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.MatlabMatrixReader`1._filename">
            <summary>
            The name of the file to read from.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.MatlabMatrixReader`1._stream">
            <summary>
            The stream to read from if we are not reading from a file directly.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.MatlabMatrixReader`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.IO.MatlabMatrixReader`1"/> class.
            </summary>
            <param name="filename">Name of the file to read matrices from.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.MatlabMatrixReader`1.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.IO.MatlabMatrixReader`1"/> class.
            </summary>
            <param name="stream">The stream to reader matrices from.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.MatlabMatrixReader`1.ReadMatrix">
            <summary>
            Reads the first matrix from the file or stream.
            </summary>
            <returns>
            A sparse or dense matrix depending on how the matrix
            is defined in the Matlab file.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.MatlabMatrixReader`1.ReadMatrix(System.String)">
            <summary>
            Reads the named matrix from the file or stream.
            </summary>
            <param name="matrixName">The name of the matrix to read.</param>
            <returns>
            A sparse or dense matrix depending on how the matrix
            is defined in the Matlab file.
            <see langword="null"/> is returned if a matrix with the requests name doesn't exist.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.MatlabMatrixReader`1.ReadMatrices">
            <summary>
            Reads all matrices from the file or stream.
            </summary>
            <returns>All matrices from the file or stream. The key to the <see cref="T:System.Collections.Generic.IDictionary`2"/> 
            is the matrix's name.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.MatlabMatrixReader`1.ReadMatrices(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Reads the named matrices from the file or stream.
            </summary>
            <param name="names">The names of the matrices to retrieve.</param>
            <returns>
            The named matrices from the file or stream. The key to the <see cref="T:System.Collections.Generic.IDictionary`2"/> 
            is the matrix's name.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.IO.MatlabMatrixReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.IO.MatlabMatrixReader"/> class.
            </summary>
            <param name="filename">Name of the file to read matrices from.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.IO.MatlabMatrixReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.IO.MatlabMatrixReader"/> class.
            </summary>
            <param name="stream">The stream to reader matrices from.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.IO.DelimitedReader`1">
            <summary>
            Creates a <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/> from a delimited text file. If the user does not
            specify a delimiter, then any whitespace is used.
            </summary>
            <typeparam name="TMatrix">The type of the matrix to return.</typeparam>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.IO.DelimitedReader`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.IO.DelimitedReader`1"/> class using
            any whitespace as the delimiter.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.IO.DelimitedReader`1.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.IO.DelimitedReader`1"/> class.
            </summary>
            <param name="delimiter">The delimiter to use.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.IO.DelimitedReader`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.IO.DelimitedReader`1"/> class. 
            </summary>
            <param name="delimiter">
            The delimiter to use.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="delimiter"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.IO.MatlabMatrixReader">
            <summary>
            Creates matrices from Matlab files.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.IO.MatlabMatrixReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.IO.MatlabMatrixReader"/> class.
            </summary>
            <param name="filename">Name of the file to read matrices from.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.IO.MatlabMatrixReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.IO.MatlabMatrixReader"/> class.
            </summary>
            <param name="stream">The stream to reader matrices from.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.IO.DelimitedReader`1">
            <summary>
            Creates a <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/> from a delimited text file. If the user does not
            specify a delimiter, then any whitespace is used.
            </summary>
            <typeparam name="TMatrix">The type of the matrix to return.</typeparam>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.IO.DelimitedReader`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.IO.DelimitedReader`1"/> class using
            any whitespace as the delimiter.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.IO.DelimitedReader`1.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.IO.DelimitedReader`1"/> class.
            </summary>
            <param name="delimiter">The delimiter to use.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.IO.DelimitedReader`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.IO.DelimitedReader`1"/> class. 
            </summary>
            <param name="delimiter">
            The delimiter to use.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="delimiter"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.IO.MatlabMatrixReader">
            <summary>
            Creates matrices from Matlab files.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.IO.MatlabMatrixReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.IO.MatlabMatrixReader"/> class.
            </summary>
            <param name="filename">Name of the file to read matrices from.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.IO.MatlabMatrixReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.IO.MatlabMatrixReader"/> class.
            </summary>
            <param name="stream">The stream to reader matrices from.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.IO.DelimitedWriter">
            <summary>
            Writes an <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/> to delimited text file. If the user does not
            specify a delimiter, a tab separator is used.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.IO.MatrixWriter">
            <summary>
            Base class to write a single <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/> to a file or stream.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.MatrixWriter._cultureInfo">
            <summary>
            The <see cref="P:MathNet.Numerics.LinearAlgebra.IO.MatrixWriter.CultureInfo"/> to use.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.MatrixWriter.WriteMatrix``1(MathNet.Numerics.LinearAlgebra.Generic.Matrix{``0},System.String)">
            <summary>
            Writes the given <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/> to the given file. If the file already exists, 
            the file will be overwritten.
            </summary>
            <param name="matrix">The matrix to write.</param>
            <param name="file">The file to write the matrix to.</param>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="matrix"/> or <paramref name="file"/> is <c>null</c>.</exception>
            <typeparam name="TDataType">The data type of the Matrix. It can be either: double, float, Complex, or Complex32.</typeparam>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.MatrixWriter.WriteMatrix``1(MathNet.Numerics.LinearAlgebra.Generic.Matrix{``0},System.IO.Stream)">
            <summary>
            Writes the given <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/> to the given stream.
            </summary>
            <param name="matrix">The matrix to write.</param>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to write the matrix to.</param>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="matrix"/> or <paramref name="stream"/> is <c>null</c>.</exception>
            <typeparam name="TDataType">The data type of the Matrix. It can be either: double, float, Complex, or Complex32.</typeparam>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.MatrixWriter.WriteMatrix``1(MathNet.Numerics.LinearAlgebra.Generic.Matrix{``0},System.IO.TextWriter)">
            <summary>
            Writes the given <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/> to the given <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="matrix">The matrix to write.</param>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to write the matrix to.</param>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="matrix"/> or <paramref name="writer"/> is <c>null</c>.</exception>
            <typeparam name="TDataType">The data type of the Matrix. It can be either: double, float, Complex, or Complex32.</typeparam>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.MatrixWriter.DoWriteMatrix``1(MathNet.Numerics.LinearAlgebra.Generic.Matrix{``0},System.IO.TextWriter,System.String,System.Globalization.CultureInfo)">
            <summary>
            Subclasses must implement this method to do the actually writing.
            </summary>
            <typeparam name="TDataType">The data type of the Matrix. It can be either: double, float, Complex, or Complex32.</typeparam>
            <param name="matrix">The matrix to serialize.</param>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to write the matrix to.</param>
            <param name="format">The number format to use.</param>
            <param name="cultureInfo">The culture to use.</param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.IO.MatrixWriter.CultureInfo">
            <summary>
            Gets or sets the <see cref="P:MathNet.Numerics.LinearAlgebra.IO.MatrixWriter.CultureInfo"/> to use when parsing the numbers.
            </summary>
            <value>The culture info.</value>
            <remarks>Defaults to <c>CultureInfo.CurrentCulture</c>.</remarks>
            <remarks>This property is only used for matrix writers that write out text files.</remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.IO.MatrixWriter.Format">
            <summary>
            Gets or sets he number format to use.
            </summary>
            <value>The number format to use when writing out each element.</value>
            <remarks>This property is only used for matrix writers that write out text files.</remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.DelimitedWriter._delimiter">
            <summary>
            The delimiter to use.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.DelimitedWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.IO.DelimitedWriter"/> class. 
            a comma as the delimiter.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.DelimitedWriter.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.IO.DelimitedWriter"/> class. 
            using the given delimiter.
            </summary>
            <param name="delimiter">
            the delimiter to use.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.DelimitedWriter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.IO.DelimitedWriter"/> class. 
            using the given delimiter.
            </summary>
            <param name="delimiter">
            the delimiter to use.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.DelimitedWriter.DoWriteMatrix``1(MathNet.Numerics.LinearAlgebra.Generic.Matrix{``0},System.IO.TextWriter,System.String,System.Globalization.CultureInfo)">
            <summary>
            Writes the given <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/> to the given <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <typeparam name="TDataType">The data type of the Matrix. It can be either: double, float, Complex, or Complex32.</typeparam>
            <param name="matrix">The matrix to write.</param>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to write the matrix to.</param>
            <param name="format">The number format to use on each element.</param>
            <param name="cultureInfo">The culture to use.</param>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="matrix"/> or <paramref name="writer"/> is <c>null</c>.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.IO.DelimitedWriter.ColumnHeaders">
            <summary>
            Gets or sets the column header values.
            </summary>
            <value>The column header values.</value>
            <remarks>Will write the column headers if the list is not empty or <c>null</c>.</remarks>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.IO.MatlabMatrixWriter">
            <summary>
            Writes matrices to a Matlab file.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.MatlabMatrixWriter.HeaderText">
            <summary>
            The file header value
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.MatlabMatrixWriter.HeaderTextLength">
            <summary>
            The length of the header text.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.MatlabMatrixWriter._headerWritten">
            <summary>
            Have we written the header yet.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.MatlabMatrixWriter._writer">
            <summary>
            The binary writer to write to.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.MatlabMatrixWriter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.IO.MatlabMatrixWriter"/> class.
            </summary>
            <param name="filename">The name of the Matlab file to save the matrices to.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.MatlabMatrixWriter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.MatlabMatrixWriter.WriteMatrix``1(MathNet.Numerics.LinearAlgebra.Generic.Matrix{``0},System.String)">
            <summary>
            Writes the given <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/> to the file. 
            </summary>
            <param name="matrix">The matrix to write.</param>
            <param name="name">The name of the matrix to store in the file.</param>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="matrix"/> or <paramref name="name"/> is <c>null</c>.</exception>
            <typeparam name="TDataType">The data type of the Matrix. It can be either: double, float, Complex, or Complex32.</typeparam>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.MatlabMatrixWriter.WriteMatrices``1(System.Collections.Generic.IList{MathNet.Numerics.LinearAlgebra.Generic.Matrix{``0}},System.Collections.Generic.IList{System.String})">
            <summary>
            Writes the given <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/> to the file.
            </summary>
            <param name="matrices">The matrices to write.</param>
            <param name="names">The names of the matrices to store in the file.</param>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="matrices"/> or <paramref name="names"/> is null.</exception>
            <typeparam name="TDataType">The data type of the Matrix. It can be either: double, float, Complex, or Complex32.</typeparam>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.MatlabMatrixWriter.Close">
            <summary>
            Closes the stream the being written to.
            </summary>
            <remarks>Calls <see cref="M:System.IDisposable.Dispose"/>.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.MatlabMatrixWriter.WriteMatrixTagAndName(System.IO.BinaryWriter,MathNet.Numerics.LinearAlgebra.IO.Matlab.ArrayClass,System.Boolean,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes the matrix tag and name.
            </summary>
            <param name="writer">The writer we are using.</param>
            <param name="arrayClass">The array class we are writing.</param>
            <param name="isComplex">if set to <c>true</c> if this a complex matrix.</param>
            <param name="name">The name name of the matrix.</param>
            <param name="rows">The number of rows.</param>
            <param name="columns">The columns of columns.</param>
            <param name="nzmax">The maximum number of non-zero elements.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.MatlabMatrixWriter.CompressData(System.Byte[])">
            <summary>
            Compresses the data array.
            </summary>
            <param name="data">The data to compress.</param>
            <returns>The compressed data.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.MatlabMatrixWriter.GetDenseDataArray(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},System.String)">
            <summary>
            Gets the dense data array.
            </summary>
            <param name="matrix">The matrix to get the data from.</param>
            <param name="name">The name of the matrix.</param>
            <returns>The matrix data as an array.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.MatlabMatrixWriter.GetDenseDataArray(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},System.String)">
            <summary>
            Gets the dense data array.
            </summary>
            <param name="matrix">The matrix to get the data from.</param>
            <param name="name">The name of the matrix.</param>
            <returns>The matrix data as an array.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.MatlabMatrixWriter.GetDenseDataArray(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},System.String)">
            <summary>
            Gets the dense data array.
            </summary>
            <param name="matrix">The matrix to get the data from.</param>
            <param name="name">The name of the matrix.</param>
            <returns>The matrix data as an array.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.MatlabMatrixWriter.GetDenseDataArray(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},System.String)">
            <summary>
            Gets the dense data array.
            </summary>
            <param name="matrix">The matrix to get the data from.</param>
            <param name="name">The name of the matrix.</param>
            <returns>The matrix data as an array.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.MatlabMatrixWriter.GetSparseDataArray(MathNet.Numerics.LinearAlgebra.Double.SparseMatrix,System.String)">
            <summary>
            Gets the sparse data array.
            </summary>
            <param name="matrix">The matrix to get the data from.</param>
            <param name="name">The name of the matrix.</param>
            <returns>The matrix data as an array.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.MatlabMatrixWriter.GetSparseDataArray(MathNet.Numerics.LinearAlgebra.Single.SparseMatrix,System.String)">
            <summary>
            Gets the sparse data array.
            </summary>
            <param name="matrix">The matrix to get the data from.</param>
            <param name="name">The name of the matrix.</param>
            <returns>The matrix data as an array.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.MatlabMatrixWriter.GetSparseDataArray(MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix,System.String)">
            <summary>
            Gets the sparse data array.
            </summary>
            <param name="matrix">The matrix to get the data from.</param>
            <param name="name">The name of the matrix.</param>
            <returns>The matrix data as an array.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.MatlabMatrixWriter.GetSparseDataArray(MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix,System.String)">
            <summary>
            Gets the sparse data array.
            </summary>
            <param name="matrix">The matrix to get the data from.</param>
            <param name="name">The name of the matrix.</param>
            <returns>The matrix data as an array.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.MatlabMatrixWriter.WriteCompressedData(System.Byte[])">
            <summary>
            Writes the compressed data.
            </summary>
            <param name="data">The data to write.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.MatlabMatrixWriter.WriteHeader">
            <summary>
            Writes the file header.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.MatlabMatrixWriter.PadData(System.IO.BinaryWriter,System.Int32,System.Byte)">
            <summary>
            Pads the data with the given byte.
            </summary>
            <param name="writer">Where to write the pad values.</param>
            <param name="bytes">The number of bytes to pad.</param>
            <param name="pad">What value to pad with.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.Matlab.Adler32.Compute(System.Byte[])">
            <summary>
            Computes the Adler-32 checksum of the given data.
            </summary>
            <param name="data">The data to create the checksum.</param>
            <returns>The checksum</returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.IO.Matlab.ArrayClass">
            <summary>
            Enumeration for the Matlab array types
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.Matlab.ArrayClass.Unknown">
            <summary>
            mxUNKNOWN CLASS
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.Matlab.ArrayClass.Cell">
            <summary>
            mxCELL CLASS
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.Matlab.ArrayClass.Structure">
            <summary>
             mxSTRUCT CLASS
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.Matlab.ArrayClass.Object">
            <summary>
             mxOBJECT CLASS
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.Matlab.ArrayClass.Character">
            <summary>
            mxCHAR CLASS
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.Matlab.ArrayClass.Sparse">
            <summary>
            mxSPARSE CLASS
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.Matlab.ArrayClass.Double">
            <summary>
            mxDOUBLE CLASS
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.Matlab.ArrayClass.Single">
            <summary>
            mxSINGLE CLASS
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.Matlab.ArrayClass.Int8">
            <summary>
            mxINT8 CLASS
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.Matlab.ArrayClass.UInt8">
            <summary>
            mxUINT8 CLASS
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.Matlab.ArrayClass.Int16">
            <summary>
            mxINT16 CLASS
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.Matlab.ArrayClass.UInt16">
            <summary>
            mxUINT16 CLASS
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.Matlab.ArrayClass.Int32">
            <summary>
            mxINT32 CLASS
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.Matlab.ArrayClass.UInt32">
            <summary>
            mxUINT32 CLASS
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.Matlab.ArrayClass.Int64">
            <summary>
             mxINT64 CLASS
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.Matlab.ArrayClass.UInt64">
            <summary>
            mxUINT64 CLASS
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.Matlab.ArrayClass.Function">
            <summary>
             mxFUNCTION CLASS
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.IO.Matlab.ArrayFlags">
            <summary>
            Matlab Array Flags
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.Matlab.ArrayFlags.Complex">
            <summary>
            Complex flag
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.Matlab.ArrayFlags.Global">
            <summary>
            Global flag
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.Matlab.ArrayFlags.Logical">
            <summary>
            Logical flag
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.IO.Matlab.DataType">
            <summary>
            Matlab data types
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.Matlab.DataType.Unknown">
            <summary>
            Unkown type
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.Matlab.DataType.Int8">
            <summary>
            miINT8 type
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.Matlab.DataType.UInt8">
            <summary>
             miUINT8 type
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.Matlab.DataType.Int16">
            <summary>
             miINT16 type
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.Matlab.DataType.UInt16">
            <summary>
             miUINT16 type
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.Matlab.DataType.Int32">
            <summary>
             miINT32 type
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.Matlab.DataType.UInt32">
            <summary>
             miUINT32 type
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.Matlab.DataType.Single">
            <summary>
             miSINGLE type
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.Matlab.DataType.Double">
            <summary>
             miDOUBLE type
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.Matlab.DataType.Int64">
            <summary>
             miINT64 type
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.Matlab.DataType.UInt64">
            <summary>
             miUINT6 4type
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.Matlab.DataType.Matrix">
            <summary>
            miMATRIX type
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.Matlab.DataType.Compressed">
            <summary>
             miCOMPRESSED type
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.Matlab.DataType.Utf8">
            <summary>
             miUTF8 type
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.Matlab.DataType.Utf16">
            <summary>
             miUTF16 type
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.Matlab.DataType.Utf32">
            <summary>
             miUTF32 type
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.IO.Matlab.MatlabFile`1">
            <summary>
            Represents a Matlab file
            </summary>
            <typeparam name="TDataType">The data type of the matrix to return.</typeparam>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.Matlab.MatlabFile`1._matrices">
            <summary>
            Matrices in a matlab file stored as 1-D arrays
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.IO.Matlab.MatlabFile`1.HeaderText">
            <summary>
            Gets or sets the header text.
            </summary>
            <value>The header text.</value>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.IO.Matlab.MatlabFile`1.FirstMatrixName">
            <summary>
            Gets or sets the first name of the matrix.
            </summary>
            <value>The first name of the matrix.</value>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.IO.Matlab.MatlabFile`1.FirstMatrix">
            <summary>
            Gets the first matrix.
            </summary>
            <value>The first matrix.</value>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.IO.Matlab.MatlabFile`1.Matrices">
            <summary>
            Gets the matrices.
            </summary>
            <value>The matrices.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.IO.Matlab.MatlabParser`1">
            <summary>
            Parse a Matlab file
            </summary>
            <typeparam name="TDataType">The data type of the matrix.</typeparam>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.Matlab.MatlabParser`1.LargeBlockSize">
            <summary>
            Large Block Size
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.Matlab.MatlabParser`1.LittleEndianIndicator">
            <summary>
            Little Endian Indicator
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.Matlab.MatlabParser`1.SmallBlockSize">
            <summary>
            Small Block Size
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.Matlab.MatlabParser`1._names">
            <summary>
            Holds the names of the matrices in the file.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.IO.Matlab.MatlabParser`1._stream">
            <summary>
            The stream to read the matlab file from.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.Matlab.MatlabParser`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.IO.Matlab.MatlabParser`1"/> class.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.Matlab.MatlabParser`1.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.IO.Matlab.MatlabParser`1"/> class.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.Matlab.MatlabParser`1.#ctor(System.IO.Stream,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.IO.Matlab.MatlabParser`1"/> class.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="objectNames">The name of the objects to retrieve.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.Matlab.MatlabParser`1.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.IO.Matlab.MatlabParser`1"/> class.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="objectNames">The name of the objects to retrieve.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.Matlab.MatlabParser`1.SetNames(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Copies the names of the objects to retrieve to a local field.
            </summary>
            <param name="objectNames">The name of the objects to retrieve.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.Matlab.MatlabParser`1.Parse">
            <summary>
            Parses the file.
            </summary>
            <returns>The parsed Matlab file as a <see cref="T:MathNet.Numerics.LinearAlgebra.IO.Matlab.MatlabFile`1"/> object.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.Matlab.MatlabParser`1.AlignData(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Aligns the data.
            </summary>
            <param name="stream">The stream.</param>
            <param name="size">The size of the array.</param>
            <param name="smallBlock">if set to <c>true</c> if reading from a small block.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.Matlab.MatlabParser`1.DecompressBlock(System.Byte[],MathNet.Numerics.LinearAlgebra.IO.Matlab.DataType@)">
            <summary>
            Decompresses the block.
            </summary>
            <param name="compressed">The compressed data.</param>
            <param name="type">The type data type contained in the block.</param>
            <returns>The decompressed block.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.Matlab.MatlabParser`1.AddMatrix(System.Byte[],MathNet.Numerics.LinearAlgebra.IO.Matlab.MatlabFile{`0})">
            <summary>
            Adds a matrix from the actual file into our presentation of a matlab file.
            </summary>
            <param name="data">The data of the matrix.</param>
            <param name="file">The <see cref="T:MathNet.Numerics.LinearAlgebra.IO.Matlab.MatlabFile`1"/> instance.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.Matlab.MatlabParser`1.PopulateSparseMatrix(System.IO.BinaryReader,System.Boolean,System.Int32,System.Int32,System.Int32)">
            <summary>
            Populates a sparse matrix.
            </summary>
            <param name="reader">The reader.</param>
            <param name="isComplex">if set to <c>true</c> if the Matlab complex flag is set.</param>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
            <param name="size">The size of the block.</param>
            <returns>A populated sparse matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.Matlab.MatlabParser`1.PopulateDoubleSparseMatrix(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.IO.Matlab.DataType,System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.IO.BinaryReader)">
            <summary>
            Populates the double sparse matrix.
            </summary>
            <param name="matrix">The matrix to populate</param>
            <param name="type">The Matlab data type.</param>
            <param name="ir">The row indices.</param>
            <param name="jc">The column indices.</param>
            <param name="reader">The reader to read from.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.Matlab.MatlabParser`1.PopulateSingleSparseMatrix(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.IO.Matlab.DataType,System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.IO.BinaryReader)">
            <summary>
            Populates the float sparse matrix.
            </summary>
            <param name="matrix">The matrix to populate</param>
            <param name="type">The Matlab data type.</param>
            <param name="ir">The row indices.</param>
            <param name="jc">The column indices.</param>
            <param name="reader">The reader to read from.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.Matlab.MatlabParser`1.PopulateComplexSparseMatrix(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.IO.Matlab.DataType,System.Boolean,System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.IO.BinaryReader,System.Int32)">
            <summary>
            Populates the complex sparse matrix.
            </summary>
            <param name="matrix">The matrix to populate</param>
            <param name="type">The Matlab data type.</param>
            <param name="isComplex">if set to <c>true</c> if the Matlab complex flag is set.</param>
            <param name="ir">The row indices.</param>
            <param name="jc">The column indices.</param>
            <param name="reader">The reader to read from.</param>
            <param name="dataSize">The length of the stored data.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.Matlab.MatlabParser`1.PopulateComplex32SparseMatrix(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.IO.Matlab.DataType,System.Boolean,System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.IO.BinaryReader,System.Int32)">
            <summary>
            Populates the complex32 sparse matrix.
            </summary>
            <param name="matrix">The matrix to populate</param>
            <param name="type">The Matlab data type.</param>
            <param name="isComplex">if set to <c>true</c> if the Matlab complex flag is set.</param>
            <param name="ir">The row indices.</param>
            <param name="jc">The column indices.</param>
            <param name="reader">The reader to read from.</param>
            <param name="dataSize">The length of the stored data.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.Matlab.MatlabParser`1.PopulateDenseMatrix(MathNet.Numerics.LinearAlgebra.IO.Matlab.DataType,System.IO.BinaryReader,System.Boolean,System.Int32,System.Int32,System.Int32)">
            <summary>
            Populates a dense matrix.
            </summary>
            <param name="type">The Matlab data type.</param>
            <param name="reader">The reader to read from.</param>
            <param name="isComplex">if set to <c>true</c> if the Matlab complex flag is set.</param>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
            <param name="size">The length of the stored data.</param>
            <returns>Returns a populated dense matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.Matlab.MatlabParser`1.PopulateDoubleDenseMatrix(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.IO.Matlab.DataType,System.IO.BinaryReader,System.Int32,System.Int32)">
            <summary>
            Populates the double dense matrix.
            </summary>
            <param name="matrix">The matrix to populate.</param>
            <param name="type">The Matlab data type.</param>
            <param name="reader">The reader to read from.</param>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.Matlab.MatlabParser`1.PopulateComplexDenseMatrix(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.IO.Matlab.DataType,System.Boolean,System.IO.BinaryReader,System.Int32,System.Int32,System.Int32)">
            <summary>
            Populates the complex dense matrix.
            </summary>
            <param name="matrix">The matrix to populate.</param>
            <param name="type">The Matlab data type.</param>
            <param name="isComplex">if set to <c>true</c> if the Matlab complex flag is set.</param>
            <param name="reader">The reader to read from.</param>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
            <param name="dataSize">The length of the stored data.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.Matlab.MatlabParser`1.PopulateComplex32DenseMatrix(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.IO.Matlab.DataType,System.Boolean,System.IO.BinaryReader,System.Int32,System.Int32,System.Int32)">
            <summary>
            Populates the complex32 dense matrix.
            </summary>
            <param name="matrix">The matrix to populate.</param>
            <param name="type">The Matlab data type.</param>
            <param name="isComplex">if set to <c>true</c> if the Matlab complex flag is set.</param>
            <param name="reader">The reader to read from.</param>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
            <param name="dataSize">The length of the stored data.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.Matlab.MatlabParser`1.PopulateSingleDenseMatrix(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.IO.Matlab.DataType,System.IO.BinaryReader,System.Int32,System.Int32)">
            <summary>
            Populates the float dense matrix.
            </summary>
            <param name="matrix">The matrix to populate.</param>
            <param name="type">The Matlab data type.</param>
            <param name="reader">The reader to read from.</param>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IO.Matlab.MatlabParser`1.CreateMatrix(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Creates a matrix.
            </summary>
            <param name="sparse">if set to <c>true</c>, creates a sparse matrix.</param>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
            <returns>A matrix with the specified storage.</returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.IO.DelimitedReader`1">
            <summary>
            Creates a <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/> from a delimited text file. If the user does not
            specify a delimiter, then any whitespace is used.
            </summary>
            <typeparam name="TMatrix">The type of the matrix to return.</typeparam>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.IO.DelimitedReader`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.IO.DelimitedReader`1"/> class using
            any whitespace as the delimiter.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.IO.DelimitedReader`1.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.IO.DelimitedReader`1"/> class.
            </summary>
            <param name="delimiter">The delimiter to use.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.IO.DelimitedReader`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.IO.DelimitedReader`1"/> class. 
            </summary>
            <param name="delimiter">
            The delimiter to use.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="delimiter"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.IO.MatlabMatrixReader">
            <summary>
            Creates matrices from Matlab files.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.IO.MatlabMatrixReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.IO.MatlabMatrixReader"/> class.
            </summary>
            <param name="filename">Name of the file to read matrices from.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.IO.MatlabMatrixReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.IO.MatlabMatrixReader"/> class.
            </summary>
            <param name="stream">The stream to reader matrices from.</param>
        </member>
    </members>
</doc>
