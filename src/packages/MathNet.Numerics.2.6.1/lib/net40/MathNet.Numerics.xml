<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MathNet.Numerics</name>
    </assembly>
    <members>
        <member name="T:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider">
            <summary>
            The managed linear algebra provider.
            </summary>
            <summary>
            The managed linear algebra provider.
            </summary>
            <summary>
            The managed linear algebra provider.
            </summary>
            <summary>
            The managed linear algebra provider.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider">
            <summary>
            Interface to linear algebra algorithms that work off 1-D arrays.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1">
            <summary>
            Interface to linear algebra algorithms that work off 1-D arrays.
            </summary>
            <typeparam name="T">Supported data types are double, single, Complex, and Complex32.</typeparam>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.AddVectorToScaledVector(`0[],`0,`0[],`0[])">
            <summary>
            Adds a scaled vector to another: <c>result = y + alpha*x</c>.
            </summary>
            <param name="y">The vector to update.</param>
            <param name="alpha">The value to scale <paramref name="x"/> by.</param>
            <param name="x">The vector to add to <paramref name="y"/>.</param>
            <param name="result">The result of the addition.</param>
            <remarks>This is similar to the AXPY BLAS routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.ScaleArray(`0,`0[],`0[])">
            <summary>
            Scales an array. Can be used to scale a vector and a matrix.
            </summary>
            <param name="alpha">The scalar.</param>
            <param name="x">The values to scale.</param>
            <param name="result">This result of the scaling.</param>
            <remarks>This is similar to the SCAL BLAS routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.DotProduct(`0[],`0[])">
            <summary>
            Computes the dot product of x and y.
            </summary>
            <param name="x">The vector x.</param>
            <param name="y">The vector y.</param>
            <returns>The dot product of x and y.</returns>
            <remarks>This is equivalent to the DOT BLAS routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.AddArrays(`0[],`0[],`0[])">
            <summary>
            Does a point wise add of two arrays <c>z = x + y</c>. This can be used 
            to add vectors or matrices.
            </summary>
            <param name="x">The array x.</param>
            <param name="y">The array y.</param>
            <param name="result">The result of the addition.</param>
            <remarks>There is no equivalent BLAS routine, but many libraries
            provide optimized (parallel and/or vectorized) versions of this
            routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.SubtractArrays(`0[],`0[],`0[])">
            <summary>
            Does a point wise subtraction of two arrays <c>z = x - y</c>. This can be used 
            to subtract vectors or matrices.
            </summary>
            <param name="x">The array x.</param>
            <param name="y">The array y.</param>
            <param name="result">The result of the subtraction.</param>
            <remarks>There is no equivalent BLAS routine, but many libraries
            provide optimized (parallel and/or vectorized) versions of this
            routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.PointWiseMultiplyArrays(`0[],`0[],`0[])">
            <summary>
            Does a point wise multiplication of two arrays <c>z = x * y</c>. This can be used
            to multiply elements of vectors or matrices.
            </summary>
            <param name="x">The array x.</param>
            <param name="y">The array y.</param>
            <param name="result">The result of the point wise multiplication.</param>
            <remarks>There is no equivalent BLAS routine, but many libraries
            provide optimized (parallel and/or vectorized) versions of this
            routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.PointWiseDivideArrays(`0[],`0[],`0[])">
            <summary>
            Does a point wise division of two arrays <c>z = x / y</c>. This can be used
            to divide elements of vectors or matrices.
            </summary>
            <param name="x">The array x.</param>
            <param name="y">The array y.</param>
            <param name="result">The result of the point wise division.</param>
            <remarks>There is no equivalent BLAS routine, but many libraries
            provide optimized (parallel and/or vectorized) versions of this
            routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.MatrixNorm(MathNet.Numerics.Algorithms.LinearAlgebra.Norm,System.Int32,System.Int32,`0[])">
            <summary>
            Computes the requested <see cref="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm"/> of the matrix.
            </summary>
            <param name="norm">The type of norm to compute.</param>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
            <param name="matrix">The matrix to compute the norm from.</param>
            <returns>
            The requested <see cref="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm"/> of the matrix.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.MatrixMultiply(`0[],System.Int32,System.Int32,`0[],System.Int32,System.Int32,`0[])">
            <summary>
            Multiples two matrices. <c>result = x * y</c>
            </summary>
            <param name="x">The x matrix.</param>
            <param name="rowsX">The number of rows in the x matrix.</param>
            <param name="columnsX">The number of columns in the x matrix.</param>
            <param name="y">The y matrix.</param>
            <param name="rowsY">The number of rows in the y matrix.</param>
            <param name="columnsY">The number of columns in the y matrix.</param>
            <param name="result">Where to store the result of the multiplication.</param>
            <remarks>This is a simplified version of the BLAS GEMM routine with alpha
            set to 1.0 and beta set to 0.0, and x and y are not transposed.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.MatrixMultiplyWithUpdate(MathNet.Numerics.Algorithms.LinearAlgebra.Transpose,MathNet.Numerics.Algorithms.LinearAlgebra.Transpose,`0,`0[],System.Int32,System.Int32,`0[],System.Int32,System.Int32,`0,`0[])">
            <summary>
            Multiplies two matrices and updates another with the result. <c>c = alpha*op(a)*op(b) + beta*c</c>
            </summary>
            <param name="transposeA">How to transpose the <paramref name="a"/> matrix.</param>
            <param name="transposeB">How to transpose the <paramref name="b"/> matrix.</param>
            <param name="alpha">The value to scale <paramref name="a"/> matrix.</param>
            <param name="a">The a matrix.</param>
            <param name="rowsA">The number of rows in the <paramref name="a"/> matrix.</param>
            <param name="columnsA">The number of columns in the <paramref name="a"/> matrix.</param>
            <param name="b">The b matrix</param>
            <param name="rowsB">The number of rows in the <paramref name="b"/> matrix.</param>
            <param name="columnsB">The number of columns in the <paramref name="b"/> matrix.</param>
            <param name="beta">The value to scale the <paramref name="c"/> matrix.</param>
            <param name="c">The c matrix.</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.LUFactor(`0[],System.Int32,System.Int32[])">
            <summary>
            Computes the LUP factorization of A. P*A = L*U.
            </summary>
            <param name="data">An <paramref name="order"/> by <paramref name="order"/> matrix. The matrix is overwritten with the
            the LU factorization on exit. The lower triangular factor L is stored in under the diagonal of <paramref name="data"/> (the diagonal is always 1.0
            for the L factor). The upper triangular factor U is stored on and above the diagonal of <paramref name="data"/>.</param>
            <param name="order">The order of the square matrix <paramref name="data"/>.</param>
            <param name="ipiv">On exit, it contains the pivot indices. The size of the array must be <paramref name="order"/>.</param>
            <remarks>This is equivalent to the GETRF LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.LUInverse(`0[],System.Int32)">
            <summary>
            Computes the inverse of matrix using LU factorization.
            </summary>
            <param name="a">The N by N matrix to invert. Contains the inverse On exit.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <remarks>This is equivalent to the GETRF and GETRI LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.LUInverseFactored(`0[],System.Int32,System.Int32[])">
            <summary>
            Computes the inverse of a previously factored matrix.
            </summary>
            <param name="a">The LU factored N by N matrix.  Contains the inverse On exit.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <param name="ipiv">The pivot indices of <paramref name="a"/>.</param>
            <remarks>This is equivalent to the GETRI LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.LUInverse(`0[],System.Int32,`0[])">
            <summary>
            Computes the inverse of matrix using LU factorization.
            </summary>
            <param name="a">The N by N matrix to invert. Contains the inverse On exit.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <param name="work">The work array. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <remarks>This is equivalent to the GETRF and GETRI LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.LUInverseFactored(`0[],System.Int32,System.Int32[],`0[])">
            <summary>
            Computes the inverse of a previously factored matrix.
            </summary>
            <param name="a">The LU factored N by N matrix.  Contains the inverse On exit.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <param name="ipiv">The pivot indices of <paramref name="a"/>.</param>
            <param name="work">The work array. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent.  On exit, work[0] contains the optimal
            work size value.</param>
            <remarks>This is equivalent to the GETRI LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.LUSolve(System.Int32,`0[],System.Int32,`0[])">
            <summary>
            Solves A*X=B for X using LU factorization.
            </summary>
            <param name="columnsOfB">The number of columns of B.</param>
            <param name="a">The square matrix A.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <remarks>This is equivalent to the GETRF and GETRS LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.LUSolveFactored(System.Int32,`0[],System.Int32,System.Int32[],`0[])">
            <summary>
            Solves A*X=B for X using a previously factored A matrix.
            </summary>
            <param name="columnsOfB">The number of columns of B.</param>
            <param name="a">The factored A matrix.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <param name="ipiv">The pivot indices of <paramref name="a"/>.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <remarks>This is equivalent to the GETRS LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.CholeskyFactor(`0[],System.Int32)">
            <summary>
            Computes the Cholesky factorization of A.
            </summary>
            <param name="a">On entry, a square, positive definite matrix. On exit, the matrix is overwritten with the
            the Cholesky factorization.</param>
            <param name="order">The number of rows or columns in the matrix.</param>
            <remarks>This is equivalent to the POTRF LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.CholeskySolve(`0[],System.Int32,`0[],System.Int32)">
            <summary>
            Solves A*X=B for X using Cholesky factorization.
            </summary>
            <param name="a">The square, positive definite matrix A.</param>
            <param name="orderA">The number of rows and columns in A.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <param name="columnsB">The number of columns in the B matrix.</param>
            <remarks>This is equivalent to the POTRF add POTRS LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.CholeskySolveFactored(`0[],System.Int32,`0[],System.Int32)">
            <summary>
            Solves A*X=B for X using a previously factored A matrix.
            </summary>
            <param name="a">The square, positive definite matrix A.</param>
            <param name="orderA">The number of rows and columns in A.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <param name="columnsB">The number of columns in the B matrix.</param>
            <remarks>This is equivalent to the POTRS LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.QRFactor(`0[],System.Int32,System.Int32,`0[],`0[])">
            <summary>
            Computes the full QR factorization of A.
            </summary>
            <param name="a">On entry, it is the M by N A matrix to factor. On exit,
            it is overwritten with the R matrix of the QR factorization.</param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="q">On exit, A M by M matrix that holds the Q matrix of the
            QR factorization.</param>
            <param name="tau">A min(m,n) vector. On exit, contains additional information
            to be used by the QR solve routine.</param>
            <remarks>This is similar to the GEQRF and ORGQR LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.QRFactor(`0[],System.Int32,System.Int32,`0[],`0[],`0[])">
            <summary>
            Computes the full QR factorization of A.
            </summary>
            <param name="a">On entry, it is the M by N A matrix to factor. On exit,
            it is overwritten with the R matrix of the QR factorization.</param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="q">On exit, A M by M matrix that holds the Q matrix of the
            QR factorization.</param>
            <param name="tau">A min(m,n) vector. On exit, contains additional information
            to be used by the QR solve routine.</param>
            <param name="work">The work array. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <remarks>This is similar to the GEQRF and ORGQR LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.ThinQRFactor(`0[],System.Int32,System.Int32,`0[],`0[])">
            <summary>
            Computes the thin QR factorization of A where M &gt; N.
            </summary>
            <param name="a">On entry, it is the M by N A matrix to factor. On exit,
            it is overwritten with the Q matrix of the QR factorization.</param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="r">On exit, A N by N matrix that holds the R matrix of the
            QR factorization.</param>
            <param name="tau">A min(m,n) vector. On exit, contains additional information
            to be used by the QR solve routine.</param>
            <remarks>This is similar to the GEQRF and ORGQR LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.ThinQRFactor(`0[],System.Int32,System.Int32,`0[],`0[],`0[])">
            <summary>
            Computes the thin QR factorization of A where M &gt; N.
            </summary>
            <param name="a">On entry, it is the M by N A matrix to factor. On exit,
            it is overwritten with the Q matrix of the QR factorization.</param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="r">On exit, A N by N matrix that holds the R matrix of the
            QR factorization.</param>
            <param name="tau">A min(m,n) vector. On exit, contains additional information
            to be used by the QR solve routine.</param>
            <param name="work">The work array. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <remarks>This is similar to the GEQRF and ORGQR LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.QRSolve(`0[],System.Int32,System.Int32,`0[],System.Int32,`0[],MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Solves A*X=B for X using QR factorization of A.
            </summary>
            <param name="a">The A matrix.</param>
            <param name="rows">The number of rows in the A matrix.</param>
            <param name="columns">The number of columns in the A matrix.</param>
            <param name="b">The B matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
            <param name="method">The type of QR factorization to perform. <seealso cref="T:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod"/></param>
            <remarks>Rows must be greater or equal to columns.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.QRSolve(`0[],System.Int32,System.Int32,`0[],System.Int32,`0[],`0[],MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Solves A*X=B for X using QR factorization of A.
            </summary>
            <param name="a">The A matrix.</param>
            <param name="rows">The number of rows in the A matrix.</param>
            <param name="columns">The number of columns in the A matrix.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
            <param name="work">The work array. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <param name="method">The type of QR factorization to perform. <seealso cref="T:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod"/></param>
            <remarks>Rows must be greater or equal to columns.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.QRSolveFactored(`0[],`0[],System.Int32,System.Int32,`0[],`0[],System.Int32,`0[],MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Solves A*X=B for X using a previously QR factored matrix.
            </summary>
            <param name="q">The Q matrix obtained by QR factor. This is only used for the managed provider and can be
            <c>null</c> for the native provider. The native provider uses the Q portion stored in the R matrix.</param>
            <param name="r">The R matrix obtained by calling <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.QRFactor(`0[],System.Int32,System.Int32,`0[],`0[])"/>. </param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="tau">Contains additional information on Q. Only used for the native solver
            and can be <c>null</c> for the managed provider.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
            <remarks>Rows must be greater or equal to columns.</remarks>
            <param name="method">The type of QR factorization to perform. <seealso cref="T:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod"/></param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.QRSolveFactored(`0[],`0[],System.Int32,System.Int32,`0[],`0[],System.Int32,`0[],`0[],MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Solves A*X=B for X using a previously QR factored matrix.
            </summary>
            <param name="q">The Q matrix obtained by QR factor. This is only used for the managed provider and can be
            <c>null</c> for the native provider. The native provider uses the Q portion stored in the R matrix.</param>
            <param name="r">The R matrix obtained by calling <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.QRFactor(`0[],System.Int32,System.Int32,`0[],`0[])"/>. </param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="tau">Contains additional information on Q. Only used for the native solver
            and can be <c>null</c> for the managed provider.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
            <param name="work">The work array - only used in the native provider. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <remarks>Rows must be greater or equal to columns.</remarks>
            <param name="method">The type of QR factorization to perform. <seealso cref="T:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod"/></param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.SingularValueDecomposition(System.Boolean,`0[],System.Int32,System.Int32,`0[],`0[],`0[])">
            <summary>
            Computes the singular value decomposition of A.
            </summary>
            <param name="computeVectors">Compute the singular U and VT vectors or not.</param>
            <param name="a">On entry, the M by N matrix to decompose. On exit, A may be overwritten.</param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="s">The singular values of A in ascending value. </param>
            <param name="u">If <paramref name="computeVectors"/> is <c>true</c>, on exit U contains the left
            singular vectors.</param>
            <param name="vt">If <paramref name="computeVectors"/> is <c>true</c>, on exit VT contains the transposed
            right singular vectors.</param>
            <remarks>This is equivalent to the GESVD LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.SingularValueDecomposition(System.Boolean,`0[],System.Int32,System.Int32,`0[],`0[],`0[],`0[])">
            <summary>
            Computes the singular value decomposition of A.
            </summary>
            <param name="computeVectors">Compute the singular U and VT vectors or not.</param>
            <param name="a">On entry, the M by N matrix to decompose. On exit, A may be overwritten.</param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="s">The singular values of A in ascending value. </param>
            <param name="u">If <paramref name="computeVectors"/> is <c>true</c>, on exit U contains the left
            singular vectors.</param>
            <param name="vt">If <paramref name="computeVectors"/> is <c>true</c>, on exit VT contains the transposed
            right singular vectors.</param>
            <param name="work">The work array. On exit, work[0] contains the optimal work size value.
            </param>
            <remarks>This is equivalent to the GESVD LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.SvdSolve(`0[],System.Int32,System.Int32,`0[],System.Int32,`0[])">
            <summary>
            Solves A*X=B for X using the singular value decomposition of A.
            </summary>
            <param name="a">On entry, the M by N matrix to decompose.</param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="b">The B matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.SvdSolveFactored(System.Int32,System.Int32,`0[],`0[],`0[],`0[],System.Int32,`0[])">
            <summary>
            Solves A*X=B for X using a previously SVD decomposed matrix.
            </summary>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="s">The s values returned by <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.SingularValueDecomposition(System.Boolean,`0[],System.Int32,System.Int32,`0[],`0[],`0[])"/>.</param>
            <param name="u">The left singular vectors returned by  <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.SingularValueDecomposition(System.Boolean,`0[],System.Int32,System.Int32,`0[],`0[],`0[])"/>.</param>
            <param name="vt">The right singular  vectors returned by  <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider`1.SingularValueDecomposition(System.Boolean,`0[],System.Int32,System.Int32,`0[],`0[],`0[],`0[])"/>.</param>
            <param name="b">The B matrix</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider.MatrixNorm(MathNet.Numerics.Algorithms.LinearAlgebra.Norm,System.Int32,System.Int32,System.Single[],System.Single[])">
            <summary>
            Computes the requested <see cref="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm"/> of the matrix.
            </summary>
            <param name="norm">The type of norm to compute.</param>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
            <param name="matrix">The matrix to compute the norm from.</param>
            <param name="work">The work array. Only used when <see cref="F:MathNet.Numerics.Algorithms.LinearAlgebra.Norm.InfinityNorm"/>
            and needs to be have a length of at least M (number of rows of <paramref name="matrix"/>.</param>
            <returns>
            The requested <see cref="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm"/> of the matrix.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider.MatrixNorm(MathNet.Numerics.Algorithms.LinearAlgebra.Norm,System.Int32,System.Int32,System.Double[],System.Double[])">
            <summary>
            Computes the requested <see cref="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm"/> of the matrix.
            </summary>
            <param name="norm">The type of norm to compute.</param>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
            <param name="matrix">The matrix to compute the norm from.</param>
            <param name="work">The work array. Only used when <see cref="F:MathNet.Numerics.Algorithms.LinearAlgebra.Norm.InfinityNorm"/>
            and needs to be have a length of at least M (number of rows of <paramref name="matrix"/>.</param>
            <returns>
            The requested <see cref="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm"/> of the matrix.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider.MatrixNorm(MathNet.Numerics.Algorithms.LinearAlgebra.Norm,System.Int32,System.Int32,MathNet.Numerics.Complex32[],System.Single[])">
            <summary>
            Computes the requested <see cref="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm"/> of the matrix.
            </summary>
            <param name="norm">The type of norm to compute.</param>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
            <param name="matrix">The matrix to compute the norm from.</param>
            <param name="work">The work array. Only used when <see cref="F:MathNet.Numerics.Algorithms.LinearAlgebra.Norm.InfinityNorm"/>
            and needs to be have a length of at least M (number of rows of <paramref name="matrix"/>.</param>
            <returns>
            The requested <see cref="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm"/> of the matrix.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider.MatrixNorm(MathNet.Numerics.Algorithms.LinearAlgebra.Norm,System.Int32,System.Int32,System.Numerics.Complex[],System.Double[])">
            <summary>
            Computes the requested <see cref="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm"/> of the matrix.
            </summary>
            <param name="norm">The type of norm to compute.</param>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
            <param name="matrix">The matrix to compute the norm from.</param>
            <param name="work">The work array. Only used when <see cref="F:MathNet.Numerics.Algorithms.LinearAlgebra.Norm.InfinityNorm"/>
            and needs to be have a length of at least M (number of rows of <paramref name="matrix"/>.</param>
            <returns>
            The requested <see cref="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm"/> of the matrix.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider.EigenDecomp(System.Boolean,System.Int32,System.Single[],System.Single[],System.Numerics.Complex[],System.Single[])">
            <summary>
            Computes the eigenvalues and eigenvectors of a matrix.
            </summary>
            <param name="isSymmetric">Wether the matrix is symmetric or not.</param>
            <param name="order">The order of the matrix.</param>
            <param name="matrix">The matrix to decompose. The lenth of the array must be order * order.</param>
            <param name="matrixEv">On output, the matrix contains the eigen vectors. The lenth of the array must be order * order.</param>
            <param name="vectorEv">On output, the eigen values (λ) of matrix in ascending value. The length of the arry must <paramref name="order"/>.</param>
            <param name="matrixD">On output, the block diagonal eigenvalue matrix. The lenth of the array must be order * order.</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider.EigenDecomp(System.Boolean,System.Int32,System.Double[],System.Double[],System.Numerics.Complex[],System.Double[])">
            <summary>
            Computes the eigenvalues and eigenvectors of a matrix.
            </summary>
            <param name="isSymmetric">Wether the matrix is symmetric or not.</param>
            <param name="order">The order of the matrix.</param>
            <param name="matrix">The matrix to decompose. The lenth of the array must be order * order.</param>
            <param name="matrixEv">On output, the matrix contains the eigen vectors. The lenth of the array must be order * order.</param>
            <param name="vectorEv">On output, the eigen values (λ) of matrix in ascending value. The length of the arry must <paramref name="order"/>.</param>
            <param name="matrixD">On output, the block diagonal eigenvalue matrix. The lenth of the array must be order * order.</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider.EigenDecomp(System.Boolean,System.Int32,MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[],System.Numerics.Complex[],MathNet.Numerics.Complex32[])">
            <summary>
            Computes the eigenvalues and eigenvectors of a matrix.
            </summary>
            <param name="isSymmetric">Wether the matrix is symmetric or not.</param>
            <param name="order">The order of the matrix.</param>
            <param name="matrix">The matrix to decompose. The lenth of the array must be order * order.</param>
            <param name="matrixEv">On output, the matrix contains the eigen vectors. The lenth of the array must be order * order.</param>
            <param name="vectorEv">On output, the eigen values (λ) of matrix in ascending value. The length of the arry must <paramref name="order"/>.</param>
            <param name="matrixD">On output, the block diagonal eigenvalue matrix. The lenth of the array must be order * order.</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ILinearAlgebraProvider.EigenDecomp(System.Boolean,System.Int32,System.Numerics.Complex[],System.Numerics.Complex[],System.Numerics.Complex[],System.Numerics.Complex[])">
            <summary>
            Computes the eigenvalues and eigenvectors of a matrix.
            </summary>
            <param name="isSymmetric">Wether the matrix is symmetric or not.</param>
            <param name="order">The order of the matrix.</param>
            <param name="matrix">The matrix to decompose. The lenth of the array must be order * order.</param>
            <param name="matrixEv">On output, the matrix contains the eigen vectors. The lenth of the array must be order * order.</param>
            <param name="vectorEv">On output, the eigen values (λ) of matrix in ascending value. The length of the arry must <paramref name="order"/>.</param>
            <param name="matrixD">On output, the block diagonal eigenvalue matrix. The lenth of the array must be order * order.</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.AddVectorToScaledVector(MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32,MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[])">
            <summary>
            Adds a scaled vector to another: <c>result = y + alpha*x</c>.
            </summary>
            <param name="y">The vector to update.</param>
            <param name="alpha">The value to scale <paramref name="x"/> by.</param>
            <param name="x">The vector to add to <paramref name="y"/>.</param>
            <param name="result">The result of the addition.</param>
            <remarks>This is similar to the AXPY BLAS routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.ScaleArray(MathNet.Numerics.Complex32,MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[])">
            <summary>
            Scales an array. Can be used to scale a vector and a matrix.
            </summary>
            <param name="alpha">The scalar.</param>
            <param name="x">The values to scale.</param>
            <param name="result">This result of the scaling.</param>
            <remarks>This is similar to the SCAL BLAS routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.DotProduct(MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[])">
            <summary>
            Computes the dot product of x and y.
            </summary>
            <param name="x">The vector x.</param>
            <param name="y">The vector y.</param>
            <returns>The dot product of x and y.</returns>
            <remarks>This is equivalent to the DOT BLAS routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.AddArrays(MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[])">
            <summary>
            Does a point wise add of two arrays <c>z = x + y</c>. This can be used 
            to add vectors or matrices.
            </summary>
            <param name="x">The array x.</param>
            <param name="y">The array y.</param>
            <param name="result">The result of the addition.</param>
            <remarks>There is no equivalent BLAS routine, but many libraries
            provide optimized (parallel and/or vectorized) versions of this
            routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.SubtractArrays(MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[])">
            <summary>
            Does a point wise subtraction of two arrays <c>z = x - y</c>. This can be used 
            to subtract vectors or matrices.
            </summary>
            <param name="x">The array x.</param>
            <param name="y">The array y.</param>
            <param name="result">The result of the subtraction.</param>
            <remarks>There is no equivalent BLAS routine, but many libraries
            provide optimized (parallel and/or vectorized) versions of this
            routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.PointWiseMultiplyArrays(MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[])">
            <summary>
            Does a point wise multiplication of two arrays <c>z = x * y</c>. This can be used
            to multiple elements of vectors or matrices.
            </summary>
            <param name="x">The array x.</param>
            <param name="y">The array y.</param>
            <param name="result">The result of the point wise multiplication.</param>
            <remarks>There is no equivalent BLAS routine, but many libraries
            provide optimized (parallel and/or vectorized) versions of this
            routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.PointWiseDivideArrays(MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[])">
            <summary>
            Does a point wise division of two arrays <c>z = x / y</c>. This can be used
            to divide elements of vectors or matrices.
            </summary>
            <param name="x">The array x.</param>
            <param name="y">The array y.</param>
            <param name="result">The result of the point wise division.</param>
            <remarks>There is no equivalent BLAS routine, but many libraries
            provide optimized (parallel and/or vectorized) versions of this
            routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.MatrixNorm(MathNet.Numerics.Algorithms.LinearAlgebra.Norm,System.Int32,System.Int32,MathNet.Numerics.Complex32[])">
            <summary>
            Computes the requested <see cref="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm"/> of the matrix.
            </summary>
            <param name="norm">The type of norm to compute.</param>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
            <param name="matrix">The matrix to compute the norm from.</param>
            <returns>
            The requested <see cref="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm"/> of the matrix.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.MatrixNorm(MathNet.Numerics.Algorithms.LinearAlgebra.Norm,System.Int32,System.Int32,MathNet.Numerics.Complex32[],System.Single[])">
            <summary>
            Computes the requested <see cref="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm"/> of the matrix.
            </summary>
            <param name="norm">The type of norm to compute.</param>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
            <param name="matrix">The matrix to compute the norm from.</param>
            <param name="work">The work array. Only used when <see cref="F:MathNet.Numerics.Algorithms.LinearAlgebra.Norm.InfinityNorm"/>
            and needs to be have a length of at least M (number of rows of <paramref name="matrix"/>.</param>
            <returns>
            The requested <see cref="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm"/> of the matrix.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.MatrixMultiply(MathNet.Numerics.Complex32[],System.Int32,System.Int32,MathNet.Numerics.Complex32[],System.Int32,System.Int32,MathNet.Numerics.Complex32[])">
            <summary>
            Multiples two matrices. <c>result = x * y</c>
            </summary>
            <param name="x">The x matrix.</param>
            <param name="rowsX">The number of rows in the x matrix.</param>
            <param name="columnsX">The number of columns in the x matrix.</param>
            <param name="y">The y matrix.</param>
            <param name="rowsY">The number of rows in the y matrix.</param>
            <param name="columnsY">The number of columns in the y matrix.</param>
            <param name="result">Where to store the result of the multiplication.</param>
            <remarks>This is a simplified version of the BLAS GEMM routine with alpha
            set to 1.0 and beta set to 0.0, and x and y are not transposed.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.MatrixMultiplyWithUpdate(MathNet.Numerics.Algorithms.LinearAlgebra.Transpose,MathNet.Numerics.Algorithms.LinearAlgebra.Transpose,MathNet.Numerics.Complex32,MathNet.Numerics.Complex32[],System.Int32,System.Int32,MathNet.Numerics.Complex32[],System.Int32,System.Int32,MathNet.Numerics.Complex32,MathNet.Numerics.Complex32[])">
            <summary>
            Multiplies two matrices and updates another with the result. <c>c = alpha*op(a)*op(b) + beta*c</c>
            </summary>
            <param name="transposeA">How to transpose the <paramref name="a"/> matrix.</param>
            <param name="transposeB">How to transpose the <paramref name="b"/> matrix.</param>
            <param name="alpha">The value to scale <paramref name="a"/> matrix.</param>
            <param name="a">The a matrix.</param>
            <param name="rowsA">The number of rows in the <paramref name="a"/> matrix.</param>
            <param name="columnsA">The number of columns in the <paramref name="a"/> matrix.</param>
            <param name="b">The b matrix</param>
            <param name="rowsB">The number of rows in the <paramref name="b"/> matrix.</param>
            <param name="columnsB">The number of columns in the <paramref name="b"/> matrix.</param>
            <param name="beta">The value to scale the <paramref name="c"/> matrix.</param>
            <param name="c">The c matrix.</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.CacheObliviousMatrixMultiply(MathNet.Numerics.Algorithms.LinearAlgebra.Transpose,MathNet.Numerics.Algorithms.LinearAlgebra.Transpose,MathNet.Numerics.Complex32,MathNet.Numerics.Complex32[],System.Int32,System.Int32,MathNet.Numerics.Complex32[],System.Int32,System.Int32,MathNet.Numerics.Complex32[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Cache-Oblivious Matrix Multiplication
            </summary>
            <param name="transposeA">if set to <c>true</c> transpose matrix A.</param>
            <param name="transposeB">if set to <c>true</c> transpose matrix B.</param>
            <param name="alpha">The value to scale the matrix A with.</param>
            <param name="matrixA">The matrix A.</param>
            <param name="shiftArow">Row-shift of the left matrix</param>
            <param name="shiftAcol">Column-shift of the left matrix</param>
            <param name="matrixB">The matrix B.</param>
            <param name="shiftBrow">Row-shift of the right matrix</param>
            <param name="shiftBcol">Column-shift of the right matrix</param>
            <param name="result">The matrix C.</param>
            <param name="shiftCrow">Row-shift of the result matrix</param>
            <param name="shiftCcol">Column-shift of the result matrix</param>
            <param name="m">The number of rows of matrix op(A) and of the matrix C.</param>
            <param name="n">The number of columns of matrix op(B) and of the matrix C.</param>
            <param name="k">The number of columns of matrix op(A) and the rows of the matrix op(B).</param>
            <param name="constM">The constant number of rows of matrix op(A) and of the matrix C.</param>
            <param name="constN">The constant number of columns of matrix op(B) and of the matrix C.</param>
            <param name="constK">The constant number of columns of matrix op(A) and the rows of the matrix op(B).</param>
            <param name="first">Indicates if this is the first recursion.</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.LUFactor(MathNet.Numerics.Complex32[],System.Int32,System.Int32[])">
            <summary>
            Computes the LUP factorization of A. P*A = L*U.
            </summary>
            <param name="data">An <paramref name="order"/> by <paramref name="order"/> matrix. The matrix is overwritten with the
            the LU factorization on exit. The lower triangular factor L is stored in under the diagonal of <paramref name="data"/> (the diagonal is always 1.0
            for the L factor). The upper triangular factor U is stored on and above the diagonal of <paramref name="data"/>.</param>
            <param name="order">The order of the square matrix <paramref name="data"/>.</param>
            <param name="ipiv">On exit, it contains the pivot indices. The size of the array must be <paramref name="order"/>.</param>
            <remarks>This is equivalent to the GETRF LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.LUInverse(MathNet.Numerics.Complex32[],System.Int32)">
            <summary>
            Computes the inverse of matrix using LU factorization.
            </summary>
            <param name="a">The N by N matrix to invert. Contains the inverse On exit.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <remarks>This is equivalent to the GETRF and GETRI LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.LUInverseFactored(MathNet.Numerics.Complex32[],System.Int32,System.Int32[])">
            <summary>
            Computes the inverse of a previously factored matrix.
            </summary>
            <param name="a">The LU factored N by N matrix.  Contains the inverse On exit.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <param name="ipiv">The pivot indices of <paramref name="a"/>.</param>
            <remarks>This is equivalent to the GETRI LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.LUInverse(MathNet.Numerics.Complex32[],System.Int32,MathNet.Numerics.Complex32[])">
            <summary>
            Computes the inverse of matrix using LU factorization.
            </summary>
            <param name="a">The N by N matrix to invert. Contains the inverse On exit.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <param name="work">The work array. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <remarks>This is equivalent to the GETRF and GETRI LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.LUInverseFactored(MathNet.Numerics.Complex32[],System.Int32,System.Int32[],MathNet.Numerics.Complex32[])">
            <summary>
            Computes the inverse of a previously factored matrix.
            </summary>
            <param name="a">The LU factored N by N matrix.  Contains the inverse On exit.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <param name="ipiv">The pivot indices of <paramref name="a"/>.</param>
            <param name="work">The work array. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <remarks>This is equivalent to the GETRI LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.LUSolve(System.Int32,MathNet.Numerics.Complex32[],System.Int32,MathNet.Numerics.Complex32[])">
            <summary>
            Solves A*X=B for X using LU factorization.
            </summary>
            <param name="columnsOfB">The number of columns of B.</param>
            <param name="a">The square matrix A.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <remarks>This is equivalent to the GETRF and GETRS LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.LUSolveFactored(System.Int32,MathNet.Numerics.Complex32[],System.Int32,System.Int32[],MathNet.Numerics.Complex32[])">
            <summary>
            Solves A*X=B for X using a previously factored A matrix.
            </summary>
            <param name="columnsOfB">The number of columns of B.</param>
            <param name="a">The factored A matrix.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <param name="ipiv">The pivot indices of <paramref name="a"/>.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <remarks>This is equivalent to the GETRS LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.CholeskyFactor(MathNet.Numerics.Complex32[],System.Int32)">
            <summary>
            Computes the Cholesky factorization of A.
            </summary>
            <param name="a">On entry, a square, positive definite matrix. On exit, the matrix is overwritten with the
            the Cholesky factorization.</param>
            <param name="order">The number of rows or columns in the matrix.</param>
            <remarks>This is equivalent to the POTRF LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.DoCholeskyStep(MathNet.Numerics.Complex32[],System.Int32,System.Int32,System.Int32,MathNet.Numerics.Complex32[],System.Int32)">
            <summary>
            Calculate Cholesky step
            </summary>
            <param name="data">Factor matrix</param>
            <param name="rowDim">Number of rows</param>
            <param name="firstCol">Column start</param>
            <param name="colLimit">Total columns</param>
            <param name="multipliers">Multipliers calculated previously</param>
            <param name="availableCores">Number of available processors</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.CholeskySolve(MathNet.Numerics.Complex32[],System.Int32,MathNet.Numerics.Complex32[],System.Int32)">
            <summary>
            Solves A*X=B for X using Cholesky factorization.
            </summary>
            <param name="a">The square, positive definite matrix A.</param>
            <param name="orderA">The number of rows and columns in A.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <param name="columnsB">The number of columns in the B matrix.</param>
            <remarks>This is equivalent to the POTRF add POTRS LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.CholeskySolveFactored(MathNet.Numerics.Complex32[],System.Int32,MathNet.Numerics.Complex32[],System.Int32)">
            <summary>
            Solves A*X=B for X using a previously factored A matrix.
            </summary>
            <param name="a">The square, positive definite matrix A.</param>
            <param name="orderA">The number of rows and columns in A.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <param name="columnsB">The number of columns in the B matrix.</param>
            <remarks>This is equivalent to the POTRS LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.DoCholeskySolve(MathNet.Numerics.Complex32[],System.Int32,MathNet.Numerics.Complex32[],System.Int32)">
            <summary>
            Solves A*X=B for X using a previously factored A matrix.
            </summary>
            <param name="a">The square, positive definite matrix A. Has to be different than <paramref name="b"/>.</param>
            <param name="orderA">The number of rows and columns in A.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <param name="index">The column to solve for.</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.QRFactor(MathNet.Numerics.Complex32[],System.Int32,System.Int32,MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[])">
            <summary>
            Computes the QR factorization of A.
            </summary>
            <param name="r">On entry, it is the M by N A matrix to factor. On exit,
            it is overwritten with the R matrix of the QR factorization. </param>
            <param name="rowsR">The number of rows in the A matrix.</param>
            <param name="columnsR">The number of columns in the A matrix.</param>
            <param name="q">On exit, A M by M matrix that holds the Q matrix of the
            QR factorization.</param>
            <param name="tau">A min(m,n) vector. On exit, contains additional information
            to be used by the QR solve routine.</param>
            <remarks>This is similar to the GEQRF and ORGQR LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.QRFactor(MathNet.Numerics.Complex32[],System.Int32,System.Int32,MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[])">
            <summary>
            Computes the QR factorization of A.
            </summary>
            <param name="r">On entry, it is the M by N A matrix to factor. On exit,
            it is overwritten with the R matrix of the QR factorization. </param>
            <param name="rowsR">The number of rows in the A matrix.</param>
            <param name="columnsR">The number of columns in the A matrix.</param>
            <param name="q">On exit, A M by M matrix that holds the Q matrix of the 
            QR factorization.</param>
            <param name="tau">A min(m,n) vector. On exit, contains additional information
            to be used by the QR solve routine.</param>
            <param name="work">The work array. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <remarks>This is similar to the GEQRF and ORGQR LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.ThinQRFactor(MathNet.Numerics.Complex32[],System.Int32,System.Int32,MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[])">
            <summary>
            Computes the QR factorization of A.
            </summary>
            <param name="a">On entry, it is the M by N A matrix to factor. On exit,
            it is overwritten with the Q matrix of the QR factorization.</param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="r">On exit, A N by N matrix that holds the R matrix of the
            QR factorization.</param>
            <param name="tau">A min(m,n) vector. On exit, contains additional information
            to be used by the QR solve routine.</param>
            <remarks>This is similar to the GEQRF and ORGQR LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.ThinQRFactor(MathNet.Numerics.Complex32[],System.Int32,System.Int32,MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[])">
            <summary>
            Computes the QR factorization of A where M &gt; N.
            </summary>
            <param name="a">On entry, it is the M by N A matrix to factor. On exit,
            it is overwritten with the Q matrix of the QR factorization.</param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="r">On exit, A N by N matrix that holds the R matrix of the
            QR factorization.</param>
            <param name="tau">A min(m,n) vector. On exit, contains additional information
            to be used by the QR solve routine.</param>
            <param name="work">The work array. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <remarks>This is similar to the GEQRF and ORGQR LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.ComputeQR(MathNet.Numerics.Complex32[],System.Int32,MathNet.Numerics.Complex32[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Perform calculation of Q or R
            </summary>
            <param name="work">Work array</param>
            <param name="workIndex">Index of column in work array</param>
            <param name="a">Q or R matrices</param>
            <param name="rowStart">The first row in </param>
            <param name="rowCount">The last row</param>
            <param name="columnStart">The first column</param>
            <param name="columnCount">The last column</param>
            <param name="availableCores">Number of available CPUs</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.GenerateColumn(MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Generate column from initial matrix to work array
            </summary>
            <param name="work">Work array</param>
            <param name="a">Initial matrix</param>
            <param name="rowCount">The number of rows in matrix</param>
            <param name="row">The first row</param>
            <param name="column">Column index</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.QRSolve(MathNet.Numerics.Complex32[],System.Int32,System.Int32,MathNet.Numerics.Complex32[],System.Int32,MathNet.Numerics.Complex32[],MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Solves A*X=B for X using QR factorization of A.
            </summary>
            <param name="a">The A matrix.</param>
            <param name="rows">The number of rows in the A matrix.</param>
            <param name="columns">The number of columns in the A matrix.</param>
            <param name="b">The B matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
            <param name="method">The type of QR factorization to perform. <seealso cref="T:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod"/></param>
            <remarks>Rows must be greater or equal to columns.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.QRSolve(MathNet.Numerics.Complex32[],System.Int32,System.Int32,MathNet.Numerics.Complex32[],System.Int32,MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[],MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Solves A*X=B for X using QR factorization of A.
            </summary>
            <param name="a">The A matrix.</param>
            <param name="rows">The number of rows in the A matrix.</param>
            <param name="columns">The number of columns in the A matrix.</param>
            <param name="b">The B matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
            <param name="work">The work array. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <param name="method">The type of QR factorization to perform. <seealso cref="T:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod"/></param>
            <remarks>Rows must be greater or equal to columns.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.QRSolveFactored(MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[],System.Int32,System.Int32,MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[],System.Int32,MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[],MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Solves A*X=B for X using a previously QR factored matrix.
            </summary>
            <param name="q">The Q matrix obtained by QR factor. This is only used for the managed provider and can be
            <c>null</c> for the native provider. The native provider uses the Q portion stored in the R matrix.</param>
            <param name="r">The R matrix obtained by calling <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.QRFactor(MathNet.Numerics.Complex32[],System.Int32,System.Int32,MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[])"/>. </param>
            <param name="rowsR">The number of rows in the A matrix.</param>
            <param name="columnsR">The number of columns in the A matrix.</param>
            <param name="tau">Contains additional information on Q. Only used for the native solver
            and can be <c>null</c> for the managed provider.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
            <param name="work">The work array - only used in the native provider. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <param name="method">The type of QR factorization to perform. <seealso cref="T:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod"/></param>
            <remarks>Rows must be greater or equal to columns.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.QRSolveFactored(MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[],System.Int32,System.Int32,MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[],System.Int32,MathNet.Numerics.Complex32[],MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Solves A*X=B for X using a previously QR factored matrix.
            </summary>
            <param name="q">The Q matrix obtained by calling <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.QRFactor(MathNet.Numerics.Complex32[],System.Int32,System.Int32,MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[])"/>.</param>
            <param name="r">The R matrix obtained by calling <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.QRFactor(MathNet.Numerics.Complex32[],System.Int32,System.Int32,MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[])"/>. </param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="tau">Contains additional information on Q. Only used for the native solver
            and can be <c>null</c> for the managed provider.</param>
            <param name="b">The B matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
            <param name="method">The type of QR factorization to perform. <seealso cref="T:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod"/></param>
            <remarks>Rows must be greater or equal to columns.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.SingularValueDecomposition(System.Boolean,MathNet.Numerics.Complex32[],System.Int32,System.Int32,MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[])">
            <summary>
            Computes the singular value decomposition of A.
            </summary>
            <param name="computeVectors">Compute the singular U and VT vectors or not.</param>
            <param name="a">On entry, the M by N matrix to decompose. On exit, A may be overwritten.</param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="s">The singular values of A in ascending value.</param>
            <param name="u">If <paramref name="computeVectors"/> is <c>true</c>, on exit U contains the left
            singular vectors.</param>
            <param name="vt">If <paramref name="computeVectors"/> is <c>true</c>, on exit VT contains the transposed
            right singular vectors.</param>
            <remarks>This is equivalent to the GESVD LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.SingularValueDecomposition(System.Boolean,MathNet.Numerics.Complex32[],System.Int32,System.Int32,MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[])">
            <summary>
            Computes the singular value decomposition of A.
            </summary>
            <param name="computeVectors">Compute the singular U and VT vectors or not.</param>
            <param name="a">On entry, the M by N matrix to decompose. On exit, A may be overwritten.</param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="s">The singular values of A in ascending value.</param>
            <param name="u">If <paramref name="computeVectors"/> is <c>true</c>, on exit U contains the left
            singular vectors.</param>
            <param name="vt">If <paramref name="computeVectors"/> is <c>true</c>, on exit VT contains the transposed
            right singular vectors.</param>
            <param name="work">The work array. Length should be at least <paramref name="rowsA"/>.</param>
            <remarks>This is equivalent to the GESVD LAPACK routine.</remarks>
            <exception cref="T:MathNet.Numerics.NonConvergenceException"></exception>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.SvdSolve(MathNet.Numerics.Complex32[],System.Int32,System.Int32,MathNet.Numerics.Complex32[],System.Int32,MathNet.Numerics.Complex32[])">
            <summary>
            Solves A*X=B for X using the singular value decomposition of A.
            </summary>
            <param name="a">On entry, the M by N matrix to decompose.</param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="b">The B matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.SvdSolveFactored(System.Int32,System.Int32,MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[],System.Int32,MathNet.Numerics.Complex32[])">
            <summary>
            Solves A*X=B for X using a previously SVD decomposed matrix.
            </summary>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="s">The s values returned by <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.SingularValueDecomposition(System.Boolean,MathNet.Numerics.Complex32[],System.Int32,System.Int32,MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[])"/>.</param>
            <param name="u">The left singular vectors returned by  <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.SingularValueDecomposition(System.Boolean,MathNet.Numerics.Complex32[],System.Int32,System.Int32,MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[])"/>.</param>
            <param name="vt">The right singular  vectors returned by  <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.SingularValueDecomposition(System.Boolean,MathNet.Numerics.Complex32[],System.Int32,System.Int32,MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[])"/>.</param>
            <param name="b">The B matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.EigenDecomp(System.Boolean,System.Int32,MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[],System.Numerics.Complex[],MathNet.Numerics.Complex32[])">
            <summary>
            Computes the eigenvalues and eigenvectors of a matrix.
            </summary>
            <param name="isSymmetric">Wether the matrix is symmetric or not.</param>
            <param name="order">The order of the matrix.</param>
            <param name="matrix">The matrix to decompose. The lenth of the array must be order * order.</param>
            <param name="matrixEv">On output, the matrix contains the eigen vectors. The lenth of the array must be order * order.</param>
            <param name="vectorEv">On output, the eigen values (λ) of matrix in ascending value. The length of the arry must <paramref name="order"/>.</param>
            <param name="matrixD">On output, the block diagonal eigenvalue matrix. The lenth of the array must be order * order.</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.AddVectorToScaledVector(System.Numerics.Complex[],System.Numerics.Complex,System.Numerics.Complex[],System.Numerics.Complex[])">
            <summary>
            Adds a scaled vector to another: <c>result = y + alpha*x</c>.
            </summary>
            <param name="y">The vector to update.</param>
            <param name="alpha">The value to scale <paramref name="x"/> by.</param>
            <param name="x">The vector to add to <paramref name="y"/>.</param>
            <param name="result">The result of the addition.</param>
            <remarks>This is similar to the AXPY BLAS routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.ScaleArray(System.Numerics.Complex,System.Numerics.Complex[],System.Numerics.Complex[])">
            <summary>
            Scales an array. Can be used to scale a vector and a matrix.
            </summary>
            <param name="alpha">The scalar.</param>
            <param name="x">The values to scale.</param>
            <param name="result">This result of the scaling.</param>
            <remarks>This is similar to the SCAL BLAS routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.DotProduct(System.Numerics.Complex[],System.Numerics.Complex[])">
            <summary>
            Computes the dot product of x and y.
            </summary>
            <param name="x">The vector x.</param>
            <param name="y">The vector y.</param>
            <returns>The dot product of x and y.</returns>
            <remarks>This is equivalent to the DOT BLAS routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.AddArrays(System.Numerics.Complex[],System.Numerics.Complex[],System.Numerics.Complex[])">
            <summary>
            Does a point wise add of two arrays <c>z = x + y</c>. This can be used 
            to add vectors or matrices.
            </summary>
            <param name="x">The array x.</param>
            <param name="y">The array y.</param>
            <param name="result">The result of the addition.</param>
            <remarks>There is no equivalent BLAS routine, but many libraries
            provide optimized (parallel and/or vectorized) versions of this
            routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.SubtractArrays(System.Numerics.Complex[],System.Numerics.Complex[],System.Numerics.Complex[])">
            <summary>
            Does a point wise subtraction of two arrays <c>z = x - y</c>. This can be used 
            to subtract vectors or matrices.
            </summary>
            <param name="x">The array x.</param>
            <param name="y">The array y.</param>
            <param name="result">The result of the subtraction.</param>
            <remarks>There is no equivalent BLAS routine, but many libraries
            provide optimized (parallel and/or vectorized) versions of this
            routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.PointWiseMultiplyArrays(System.Numerics.Complex[],System.Numerics.Complex[],System.Numerics.Complex[])">
            <summary>
            Does a point wise multiplication of two arrays <c>z = x * y</c>. This can be used
            to multiple elements of vectors or matrices.
            </summary>
            <param name="x">The array x.</param>
            <param name="y">The array y.</param>
            <param name="result">The result of the point wise multiplication.</param>
            <remarks>There is no equivalent BLAS routine, but many libraries
            provide optimized (parallel and/or vectorized) versions of this
            routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.PointWiseDivideArrays(System.Numerics.Complex[],System.Numerics.Complex[],System.Numerics.Complex[])">
            <summary>
            Does a point wise division of two arrays <c>z = x / y</c>. This can be used
            to divide elements of vectors or matrices.
            </summary>
            <param name="x">The array x.</param>
            <param name="y">The array y.</param>
            <param name="result">The result of the point wise division.</param>
            <remarks>There is no equivalent BLAS routine, but many libraries
            provide optimized (parallel and/or vectorized) versions of this
            routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.MatrixNorm(MathNet.Numerics.Algorithms.LinearAlgebra.Norm,System.Int32,System.Int32,System.Numerics.Complex[])">
            <summary>
            Computes the requested <see cref="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm"/> of the matrix.
            </summary>
            <param name="norm">The type of norm to compute.</param>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
            <param name="matrix">The matrix to compute the norm from.</param>
            <returns>
            The requested <see cref="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm"/> of the matrix.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.MatrixNorm(MathNet.Numerics.Algorithms.LinearAlgebra.Norm,System.Int32,System.Int32,System.Numerics.Complex[],System.Double[])">
            <summary>
            Computes the requested <see cref="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm"/> of the matrix.
            </summary>
            <param name="norm">The type of norm to compute.</param>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
            <param name="matrix">The matrix to compute the norm from.</param>
            <param name="work">The work array. Only used when <see cref="F:MathNet.Numerics.Algorithms.LinearAlgebra.Norm.InfinityNorm"/>
            and needs to be have a length of at least M (number of rows of <paramref name="matrix"/>.</param>
            <returns>
            The requested <see cref="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm"/> of the matrix.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.MatrixMultiply(System.Numerics.Complex[],System.Int32,System.Int32,System.Numerics.Complex[],System.Int32,System.Int32,System.Numerics.Complex[])">
            <summary>
            Multiples two matrices. <c>result = x * y</c>
            </summary>
            <param name="x">The x matrix.</param>
            <param name="rowsX">The number of rows in the x matrix.</param>
            <param name="columnsX">The number of columns in the x matrix.</param>
            <param name="y">The y matrix.</param>
            <param name="rowsY">The number of rows in the y matrix.</param>
            <param name="columnsY">The number of columns in the y matrix.</param>
            <param name="result">Where to store the result of the multiplication.</param>
            <remarks>This is a simplified version of the BLAS GEMM routine with alpha
            set to 1.0 and beta set to 0.0, and x and y are not transposed.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.MatrixMultiplyWithUpdate(MathNet.Numerics.Algorithms.LinearAlgebra.Transpose,MathNet.Numerics.Algorithms.LinearAlgebra.Transpose,System.Numerics.Complex,System.Numerics.Complex[],System.Int32,System.Int32,System.Numerics.Complex[],System.Int32,System.Int32,System.Numerics.Complex,System.Numerics.Complex[])">
            <summary>
            Multiplies two matrices and updates another with the result. <c>c = alpha*op(a)*op(b) + beta*c</c>
            </summary>
            <param name="transposeA">How to transpose the <paramref name="a"/> matrix.</param>
            <param name="transposeB">How to transpose the <paramref name="b"/> matrix.</param>
            <param name="alpha">The value to scale <paramref name="a"/> matrix.</param>
            <param name="a">The a matrix.</param>
            <param name="rowsA">The number of rows in the <paramref name="a"/> matrix.</param>
            <param name="columnsA">The number of columns in the <paramref name="a"/> matrix.</param>
            <param name="b">The b matrix</param>
            <param name="rowsB">The number of rows in the <paramref name="b"/> matrix.</param>
            <param name="columnsB">The number of columns in the <paramref name="b"/> matrix.</param>
            <param name="beta">The value to scale the <paramref name="c"/> matrix.</param>
            <param name="c">The c matrix.</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.CacheObliviousMatrixMultiply(MathNet.Numerics.Algorithms.LinearAlgebra.Transpose,MathNet.Numerics.Algorithms.LinearAlgebra.Transpose,System.Numerics.Complex,System.Numerics.Complex[],System.Int32,System.Int32,System.Numerics.Complex[],System.Int32,System.Int32,System.Numerics.Complex[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Cache-Oblivious Matrix Multiplication
            </summary>
            <param name="transposeA">if set to <c>true</c> transpose matrix A.</param>
            <param name="transposeB">if set to <c>true</c> transpose matrix B.</param>
            <param name="alpha">The value to scale the matrix A with.</param>
            <param name="matrixA">The matrix A.</param>
            <param name="shiftArow">Row-shift of the left matrix</param>
            <param name="shiftAcol">Column-shift of the left matrix</param>
            <param name="matrixB">The matrix B.</param>
            <param name="shiftBrow">Row-shift of the right matrix</param>
            <param name="shiftBcol">Column-shift of the right matrix</param>
            <param name="result">The matrix C.</param>
            <param name="shiftCrow">Row-shift of the result matrix</param>
            <param name="shiftCcol">Column-shift of the result matrix</param>
            <param name="m">The number of rows of matrix op(A) and of the matrix C.</param>
            <param name="n">The number of columns of matrix op(B) and of the matrix C.</param>
            <param name="k">The number of columns of matrix op(A) and the rows of the matrix op(B).</param>
            <param name="constM">The constant number of rows of matrix op(A) and of the matrix C.</param>
            <param name="constN">The constant number of columns of matrix op(B) and of the matrix C.</param>
            <param name="constK">The constant number of columns of matrix op(A) and the rows of the matrix op(B).</param>
            <param name="first">Indicates if this is the first recursion.</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.LUFactor(System.Numerics.Complex[],System.Int32,System.Int32[])">
            <summary>
            Computes the LUP factorization of A. P*A = L*U.
            </summary>
            <param name="data">An <paramref name="order"/> by <paramref name="order"/> matrix. The matrix is overwritten with the
            the LU factorization on exit. The lower triangular factor L is stored in under the diagonal of <paramref name="data"/> (the diagonal is always 1.0
            for the L factor). The upper triangular factor U is stored on and above the diagonal of <paramref name="data"/>.</param>
            <param name="order">The order of the square matrix <paramref name="data"/>.</param>
            <param name="ipiv">On exit, it contains the pivot indices. The size of the array must be <paramref name="order"/>.</param>
            <remarks>This is equivalent to the GETRF LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.LUInverse(System.Numerics.Complex[],System.Int32)">
            <summary>
            Computes the inverse of matrix using LU factorization.
            </summary>
            <param name="a">The N by N matrix to invert. Contains the inverse On exit.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <remarks>This is equivalent to the GETRF and GETRI LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.LUInverseFactored(System.Numerics.Complex[],System.Int32,System.Int32[])">
            <summary>
            Computes the inverse of a previously factored matrix.
            </summary>
            <param name="a">The LU factored N by N matrix.  Contains the inverse On exit.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <param name="ipiv">The pivot indices of <paramref name="a"/>.</param>
            <remarks>This is equivalent to the GETRI LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.LUInverse(System.Numerics.Complex[],System.Int32,System.Numerics.Complex[])">
            <summary>
            Computes the inverse of matrix using LU factorization.
            </summary>
            <param name="a">The N by N matrix to invert. Contains the inverse On exit.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <param name="work">The work array. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <remarks>This is equivalent to the GETRF and GETRI LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.LUInverseFactored(System.Numerics.Complex[],System.Int32,System.Int32[],System.Numerics.Complex[])">
            <summary>
            Computes the inverse of a previously factored matrix.
            </summary>
            <param name="a">The LU factored N by N matrix.  Contains the inverse On exit.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <param name="ipiv">The pivot indices of <paramref name="a"/>.</param>
            <param name="work">The work array. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <remarks>This is equivalent to the GETRI LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.LUSolve(System.Int32,System.Numerics.Complex[],System.Int32,System.Numerics.Complex[])">
            <summary>
            Solves A*X=B for X using LU factorization.
            </summary>
            <param name="columnsOfB">The number of columns of B.</param>
            <param name="a">The square matrix A.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <remarks>This is equivalent to the GETRF and GETRS LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.LUSolveFactored(System.Int32,System.Numerics.Complex[],System.Int32,System.Int32[],System.Numerics.Complex[])">
            <summary>
            Solves A*X=B for X using a previously factored A matrix.
            </summary>
            <param name="columnsOfB">The number of columns of B.</param>
            <param name="a">The factored A matrix.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <param name="ipiv">The pivot indices of <paramref name="a"/>.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <remarks>This is equivalent to the GETRS LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.CholeskyFactor(System.Numerics.Complex[],System.Int32)">
            <summary>
            Computes the Cholesky factorization of A.
            </summary>
            <param name="a">On entry, a square, positive definite matrix. On exit, the matrix is overwritten with the
            the Cholesky factorization.</param>
            <param name="order">The number of rows or columns in the matrix.</param>
            <remarks>This is equivalent to the POTRF LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.DoCholeskyStep(System.Numerics.Complex[],System.Int32,System.Int32,System.Int32,System.Numerics.Complex[],System.Int32)">
            <summary>
            Calculate Cholesky step
            </summary>
            <param name="data">Factor matrix</param>
            <param name="rowDim">Number of rows</param>
            <param name="firstCol">Column start</param>
            <param name="colLimit">Total columns</param>
            <param name="multipliers">Multipliers calculated previously</param>
            <param name="availableCores">Number of available processors</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.CholeskySolve(System.Numerics.Complex[],System.Int32,System.Numerics.Complex[],System.Int32)">
            <summary>
            Solves A*X=B for X using Cholesky factorization.
            </summary>
            <param name="a">The square, positive definite matrix A.</param>
            <param name="orderA">The number of rows and columns in A.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <param name="columnsB">The number of columns in the B matrix.</param>
            <remarks>This is equivalent to the POTRF add POTRS LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.CholeskySolveFactored(System.Numerics.Complex[],System.Int32,System.Numerics.Complex[],System.Int32)">
            <summary>
            Solves A*X=B for X using a previously factored A matrix.
            </summary>
            <param name="a">The square, positive definite matrix A.</param>
            <param name="orderA">The number of rows and columns in A.</param>
            <param name="b">The B matrix.</param>
            <param name="columnsB">The number of columns in the B matrix.</param>
            <remarks>This is equivalent to the POTRS LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.DoCholeskySolve(System.Numerics.Complex[],System.Int32,System.Numerics.Complex[],System.Int32)">
            <summary>
            Solves A*X=B for X using a previously factored A matrix.
            </summary>
            <param name="a">The square, positive definite matrix A. Has to be different than <paramref name="b"/>.</param>
            <param name="orderA">The number of rows and columns in A.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <param name="index">The column to solve for.</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.QRFactor(System.Numerics.Complex[],System.Int32,System.Int32,System.Numerics.Complex[],System.Numerics.Complex[])">
            <summary>
            Computes the QR factorization of A.
            </summary>
            <param name="r">On entry, it is the M by N A matrix to factor. On exit,
            it is overwritten with the R matrix of the QR factorization. </param>
            <param name="rowsR">The number of rows in the A matrix.</param>
            <param name="columnsR">The number of columns in the A matrix.</param>
            <param name="q">On exit, A M by M matrix that holds the Q matrix of the
            QR factorization.</param>
            <param name="tau">A min(m,n) vector. On exit, contains additional information
            to be used by the QR solve routine.</param>
            <remarks>This is similar to the GEQRF and ORGQR LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.QRFactor(System.Numerics.Complex[],System.Int32,System.Int32,System.Numerics.Complex[],System.Numerics.Complex[],System.Numerics.Complex[])">
            <summary>
            Computes the QR factorization of A.
            </summary>
            <param name="r">On entry, it is the M by N A matrix to factor. On exit,
            it is overwritten with the R matrix of the QR factorization. </param>
            <param name="rowsR">The number of rows in the A matrix.</param>
            <param name="columnsR">The number of columns in the A matrix.</param>
            <param name="q">On exit, A M by M matrix that holds the Q matrix of the 
            QR factorization.</param>
            <param name="tau">A min(m,n) vector. On exit, contains additional information
            to be used by the QR solve routine.</param>
            <param name="work">The work array. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <remarks>This is similar to the GEQRF and ORGQR LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.ThinQRFactor(System.Numerics.Complex[],System.Int32,System.Int32,System.Numerics.Complex[],System.Numerics.Complex[])">
            <summary>
            Computes the QR factorization of A.
            </summary>
            <param name="a">On entry, it is the M by N A matrix to factor. On exit,
            it is overwritten with the Q matrix of the QR factorization.</param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="r">On exit, A N by N matrix that holds the R matrix of the
            QR factorization.</param>
            <param name="tau">A min(m,n) vector. On exit, contains additional information
            to be used by the QR solve routine.</param>
            <remarks>This is similar to the GEQRF and ORGQR LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.ThinQRFactor(System.Numerics.Complex[],System.Int32,System.Int32,System.Numerics.Complex[],System.Numerics.Complex[],System.Numerics.Complex[])">
            <summary>
            Computes the QR factorization of A where M &gt; N.
            </summary>
            <param name="a">On entry, it is the M by N A matrix to factor. On exit,
            it is overwritten with the Q matrix of the QR factorization.</param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="r">On exit, A N by N matrix that holds the R matrix of the
            QR factorization.</param>
            <param name="tau">A min(m,n) vector. On exit, contains additional information
            to be used by the QR solve routine.</param>
            <param name="work">The work array. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <remarks>This is similar to the GEQRF and ORGQR LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.ComputeQR(System.Numerics.Complex[],System.Int32,System.Numerics.Complex[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Perform calculation of Q or R
            </summary>
            <param name="work">Work array</param>
            <param name="workIndex">Index of column in work array</param>
            <param name="a">Q or R matrices</param>
            <param name="rowStart">The first row in </param>
            <param name="rowCount">The last row</param>
            <param name="columnStart">The first column</param>
            <param name="columnCount">The last column</param>
            <param name="availableCores">Number of available CPUs</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.GenerateColumn(System.Numerics.Complex[],System.Numerics.Complex[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Generate column from initial matrix to work array
            </summary>
            <param name="work">Work array</param>
            <param name="a">Initial matrix</param>
            <param name="rowCount">The number of rows in matrix</param>
            <param name="row">The first row</param>
            <param name="column">Column index</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.QRSolve(System.Numerics.Complex[],System.Int32,System.Int32,System.Numerics.Complex[],System.Int32,System.Numerics.Complex[],MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Solves A*X=B for X using QR factorization of A.
            </summary>
            <param name="a">The A matrix.</param>
            <param name="rows">The number of rows in the A matrix.</param>
            <param name="columns">The number of columns in the A matrix.</param>
            <param name="b">The B matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
            <param name="method">The type of QR factorization to perform. <seealso cref="T:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod"/></param>
            <remarks>Rows must be greater or equal to columns.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.QRSolve(System.Numerics.Complex[],System.Int32,System.Int32,System.Numerics.Complex[],System.Int32,System.Numerics.Complex[],System.Numerics.Complex[],MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Solves A*X=B for X using QR factorization of A.
            </summary>
            <param name="a">The A matrix.</param>
            <param name="rows">The number of rows in the A matrix.</param>
            <param name="columns">The number of columns in the A matrix.</param>
            <param name="b">The B matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
            <param name="work">The work array. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <param name="method">The type of QR factorization to perform. <seealso cref="T:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod"/></param>
            <remarks>Rows must be greater or equal to columns.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.QRSolveFactored(System.Numerics.Complex[],System.Numerics.Complex[],System.Int32,System.Int32,System.Numerics.Complex[],System.Numerics.Complex[],System.Int32,System.Numerics.Complex[],System.Numerics.Complex[],MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Solves A*X=B for X using a previously QR factored matrix.
            </summary>
            <param name="q">The Q matrix obtained by QR factor. This is only used for the managed provider and can be
            <c>null</c> for the native provider. The native provider uses the Q portion stored in the R matrix.</param>
            <param name="r">The R matrix obtained by calling <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.QRFactor(System.Numerics.Complex[],System.Int32,System.Int32,System.Numerics.Complex[],System.Numerics.Complex[])"/>. </param>
            <param name="rowsR">The number of rows in the A matrix.</param>
            <param name="columnsR">The number of columns in the A matrix.</param>
            <param name="tau">Contains additional information on Q. Only used for the native solver
            and can be <c>null</c> for the managed provider.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
            <param name="work">The work array - only used in the native provider. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <param name="method">The type of QR factorization to perform. <seealso cref="T:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod"/></param>
            <remarks>Rows must be greater or equal to columns.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.QRSolveFactored(System.Numerics.Complex[],System.Numerics.Complex[],System.Int32,System.Int32,System.Numerics.Complex[],System.Numerics.Complex[],System.Int32,System.Numerics.Complex[],MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Solves A*X=B for X using a previously QR factored matrix.
            </summary>
            <param name="q">The Q matrix obtained by calling <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.QRFactor(System.Numerics.Complex[],System.Int32,System.Int32,System.Numerics.Complex[],System.Numerics.Complex[])"/>.</param>
            <param name="r">The R matrix obtained by calling <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.QRFactor(System.Numerics.Complex[],System.Int32,System.Int32,System.Numerics.Complex[],System.Numerics.Complex[])"/>. </param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="tau">Contains additional information on Q. Only used for the native solver
            and can be <c>null</c> for the managed provider.</param>
            <param name="b">The B matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
            <param name="method">The type of QR factorization to perform. <seealso cref="T:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod"/></param>
            <remarks>Rows must be greater or equal to columns.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.SingularValueDecomposition(System.Boolean,System.Numerics.Complex[],System.Int32,System.Int32,System.Numerics.Complex[],System.Numerics.Complex[],System.Numerics.Complex[])">
            <summary>
            Computes the singular value decomposition of A.
            </summary>
            <param name="computeVectors">Compute the singular U and VT vectors or not.</param>
            <param name="a">On entry, the M by N matrix to decompose. On exit, A may be overwritten.</param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="s">The singular values of A in ascending value.</param>
            <param name="u">If <paramref name="computeVectors"/> is <c>true</c>, on exit U contains the left
            singular vectors.</param>
            <param name="vt">If <paramref name="computeVectors"/> is <c>true</c>, on exit VT contains the transposed
            right singular vectors.</param>
            <remarks>This is equivalent to the GESVD LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.SingularValueDecomposition(System.Boolean,System.Numerics.Complex[],System.Int32,System.Int32,System.Numerics.Complex[],System.Numerics.Complex[],System.Numerics.Complex[],System.Numerics.Complex[])">
            <summary>
            Computes the singular value decomposition of A.
            </summary>
            <param name="computeVectors">Compute the singular U and VT vectors or not.</param>
            <param name="a">On entry, the M by N matrix to decompose. On exit, A may be overwritten.</param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="s">The singular values of A in ascending value.</param>
            <param name="u">If <paramref name="computeVectors"/> is <c>true</c>, on exit U contains the left
            singular vectors.</param>
            <param name="vt">If <paramref name="computeVectors"/> is <c>true</c>, on exit VT contains the transposed
            right singular vectors.</param>
            <param name="work">The work array. Length should be at least <paramref name="rowsA"/>.</param>
            <remarks>This is equivalent to the GESVD LAPACK routine.</remarks>
            <exception cref="T:MathNet.Numerics.NonConvergenceException"></exception>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.SvdSolve(System.Numerics.Complex[],System.Int32,System.Int32,System.Numerics.Complex[],System.Int32,System.Numerics.Complex[])">
            <summary>
            Solves A*X=B for X using the singular value decomposition of A.
            </summary>
            <param name="a">On entry, the M by N matrix to decompose.</param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="b">The B matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.SvdSolveFactored(System.Int32,System.Int32,System.Numerics.Complex[],System.Numerics.Complex[],System.Numerics.Complex[],System.Numerics.Complex[],System.Int32,System.Numerics.Complex[])">
            <summary>
            Solves A*X=B for X using a previously SVD decomposed matrix.
            </summary>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="s">The s values returned by <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.SingularValueDecomposition(System.Boolean,System.Numerics.Complex[],System.Int32,System.Int32,System.Numerics.Complex[],System.Numerics.Complex[],System.Numerics.Complex[])"/>.</param>
            <param name="u">The left singular vectors returned by  <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.SingularValueDecomposition(System.Boolean,System.Numerics.Complex[],System.Int32,System.Int32,System.Numerics.Complex[],System.Numerics.Complex[],System.Numerics.Complex[])"/>.</param>
            <param name="vt">The right singular  vectors returned by  <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.SingularValueDecomposition(System.Boolean,System.Numerics.Complex[],System.Int32,System.Int32,System.Numerics.Complex[],System.Numerics.Complex[],System.Numerics.Complex[])"/>.</param>
            <param name="b">The B matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.EigenDecomp(System.Boolean,System.Int32,System.Numerics.Complex[],System.Numerics.Complex[],System.Numerics.Complex[],System.Numerics.Complex[])">
            <summary>
            Computes the eigenvalues and eigenvectors of a matrix.
            </summary>
            <param name="isSymmetric">Wether the matrix is symmetric or not.</param>
            <param name="order">The order of the matrix.</param>
            <param name="matrix">The matrix to decompose. The lenth of the array must be order * order.</param>
            <param name="matrixEv">On output, the matrix contains the eigen vectors. The lenth of the array must be order * order.</param>
            <param name="vectorEv">On output, the eigen values (λ) of matrix in ascending value. The length of the arry must <paramref name="order"/>.</param>
            <param name="matrixD">On output, the block diagonal eigenvalue matrix. The lenth of the array must be order * order.</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.AddVectorToScaledVector(System.Single[],System.Single,System.Single[],System.Single[])">
            <summary>
            Adds a scaled vector to another: <c>result = y + alpha*x</c>.
            </summary>
            <param name="y">The vector to update.</param>
            <param name="alpha">The value to scale <paramref name="x"/> by.</param>
            <param name="x">The vector to add to <paramref name="y"/>.</param>
            <param name="result">The result of the addition.</param>
            <remarks>This is similar to the AXPY BLAS routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.ScaleArray(System.Single,System.Single[],System.Single[])">
            <summary>
            Scales an array. Can be used to scale a vector and a matrix.
            </summary>
            <param name="alpha">The scalar.</param>
            <param name="x">The values to scale.</param>
            <param name="result">This result of the scaling.</param>
            <remarks>This is similar to the SCAL BLAS routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.DotProduct(System.Single[],System.Single[])">
            <summary>
            Computes the dot product of x and y.
            </summary>
            <param name="x">The vector x.</param>
            <param name="y">The vector y.</param>
            <returns>The dot product of x and y.</returns>
            <remarks>This is equivalent to the DOT BLAS routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.AddArrays(System.Single[],System.Single[],System.Single[])">
            <summary>
            Does a point wise add of two arrays <c>z = x + y</c>. This can be used 
            to add vectors or matrices.
            </summary>
            <param name="x">The array x.</param>
            <param name="y">The array y.</param>
            <param name="result">The result of the addition.</param>
            <remarks>There is no equivalent BLAS routine, but many libraries
            provide optimized (parallel and/or vectorized) versions of this
            routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.SubtractArrays(System.Single[],System.Single[],System.Single[])">
            <summary>
            Does a point wise subtraction of two arrays <c>z = x - y</c>. This can be used 
            to subtract vectors or matrices.
            </summary>
            <param name="x">The array x.</param>
            <param name="y">The array y.</param>
            <param name="result">The result of the subtraction.</param>
            <remarks>There is no equivalent BLAS routine, but many libraries
            provide optimized (parallel and/or vectorized) versions of this
            routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.PointWiseMultiplyArrays(System.Single[],System.Single[],System.Single[])">
            <summary>
            Does a point wise multiplication of two arrays <c>z = x * y</c>. This can be used
            to multiple elements of vectors or matrices.
            </summary>
            <param name="x">The array x.</param>
            <param name="y">The array y.</param>
            <param name="result">The result of the point wise multiplication.</param>
            <remarks>There is no equivalent BLAS routine, but many libraries
            provide optimized (parallel and/or vectorized) versions of this
            routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.PointWiseDivideArrays(System.Single[],System.Single[],System.Single[])">
            <summary>
            Does a point wise division of two arrays <c>z = x / y</c>. This can be used
            to divide elements of vectors or matrices.
            </summary>
            <param name="x">The array x.</param>
            <param name="y">The array y.</param>
            <param name="result">The result of the point wise division.</param>
            <remarks>There is no equivalent BLAS routine, but many libraries
            provide optimized (parallel and/or vectorized) versions of this
            routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.MatrixNorm(MathNet.Numerics.Algorithms.LinearAlgebra.Norm,System.Int32,System.Int32,System.Single[])">
            <summary>
            Computes the requested <see cref="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm"/> of the matrix.
            </summary>
            <param name="norm">The type of norm to compute.</param>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
            <param name="matrix">The matrix to compute the norm from.</param>
            <returns>
            The requested <see cref="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm"/> of the matrix.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.MatrixNorm(MathNet.Numerics.Algorithms.LinearAlgebra.Norm,System.Int32,System.Int32,System.Single[],System.Single[])">
            <summary>
            Computes the requested <see cref="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm"/> of the matrix.
            </summary>
            <param name="norm">The type of norm to compute.</param>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
            <param name="matrix">The matrix to compute the norm from.</param>
            <param name="work">The work array. Only used when <see cref="F:MathNet.Numerics.Algorithms.LinearAlgebra.Norm.InfinityNorm"/>
            and needs to be have a length of at least M (number of rows of <paramref name="matrix"/>.</param>
            <returns>
            The requested <see cref="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm"/> of the matrix.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.MatrixMultiply(System.Single[],System.Int32,System.Int32,System.Single[],System.Int32,System.Int32,System.Single[])">
            <summary>
            Multiples two matrices. <c>result = x * y</c>
            </summary>
            <param name="x">The x matrix.</param>
            <param name="rowsX">The number of rows in the x matrix.</param>
            <param name="columnsX">The number of columns in the x matrix.</param>
            <param name="y">The y matrix.</param>
            <param name="rowsY">The number of rows in the y matrix.</param>
            <param name="columnsY">The number of columns in the y matrix.</param>
            <param name="result">Where to store the result of the multiplication.</param>
            <remarks>This is a simplified version of the BLAS GEMM routine with alpha
            set to 1.0 and beta set to 0.0, and x and y are not transposed.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.MatrixMultiplyWithUpdate(MathNet.Numerics.Algorithms.LinearAlgebra.Transpose,MathNet.Numerics.Algorithms.LinearAlgebra.Transpose,System.Single,System.Single[],System.Int32,System.Int32,System.Single[],System.Int32,System.Int32,System.Single,System.Single[])">
            <summary>
            Multiplies two matrices and updates another with the result. <c>c = alpha*op(a)*op(b) + beta*c</c>
            </summary>
            <param name="transposeA">How to transpose the <paramref name="a"/> matrix.</param>
            <param name="transposeB">How to transpose the <paramref name="b"/> matrix.</param>
            <param name="alpha">The value to scale <paramref name="a"/> matrix.</param>
            <param name="a">The a matrix.</param>
            <param name="rowsA">The number of rows in the <paramref name="a"/> matrix.</param>
            <param name="columnsA">The number of columns in the <paramref name="a"/> matrix.</param>
            <param name="b">The b matrix</param>
            <param name="rowsB">The number of rows in the <paramref name="b"/> matrix.</param>
            <param name="columnsB">The number of columns in the <paramref name="b"/> matrix.</param>
            <param name="beta">The value to scale the <paramref name="c"/> matrix.</param>
            <param name="c">The c matrix.</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.CacheObliviousMatrixMultiply(MathNet.Numerics.Algorithms.LinearAlgebra.Transpose,MathNet.Numerics.Algorithms.LinearAlgebra.Transpose,System.Single,System.Single[],System.Int32,System.Int32,System.Single[],System.Int32,System.Int32,System.Single[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Cache-Oblivious Matrix Multiplication
            </summary>
            <param name="transposeA">if set to <c>true</c> transpose matrix A.</param>
            <param name="transposeB">if set to <c>true</c> transpose matrix B.</param>
            <param name="alpha">The value to scale the matrix A with.</param>
            <param name="matrixA">The matrix A.</param>
            <param name="shiftArow">Row-shift of the left matrix</param>
            <param name="shiftAcol">Column-shift of the left matrix</param>
            <param name="matrixB">The matrix B.</param>
            <param name="shiftBrow">Row-shift of the right matrix</param>
            <param name="shiftBcol">Column-shift of the right matrix</param>
            <param name="result">The matrix C.</param>
            <param name="shiftCrow">Row-shift of the result matrix</param>
            <param name="shiftCcol">Column-shift of the result matrix</param>
            <param name="m">The number of rows of matrix op(A) and of the matrix C.</param>
            <param name="n">The number of columns of matrix op(B) and of the matrix C.</param>
            <param name="k">The number of columns of matrix op(A) and the rows of the matrix op(B).</param>
            <param name="constM">The constant number of rows of matrix op(A) and of the matrix C.</param>
            <param name="constN">The constant number of columns of matrix op(B) and of the matrix C.</param>
            <param name="constK">The constant number of columns of matrix op(A) and the rows of the matrix op(B).</param>
            <param name="first">Indicates if this is the first recursion.</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.LUFactor(System.Single[],System.Int32,System.Int32[])">
            <summary>
            Computes the LUP factorization of A. P*A = L*U.
            </summary>
            <param name="data">An <paramref name="order"/> by <paramref name="order"/> matrix. The matrix is overwritten with the
            the LU factorization on exit. The lower triangular factor L is stored in under the diagonal of <paramref name="data"/> (the diagonal is always 1.0
            for the L factor). The upper triangular factor U is stored on and above the diagonal of <paramref name="data"/>.</param>
            <param name="order">The order of the square matrix <paramref name="data"/>.</param>
            <param name="ipiv">On exit, it contains the pivot indices. The size of the array must be <paramref name="order"/>.</param>
            <remarks>This is equivalent to the GETRF LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.LUInverse(System.Single[],System.Int32)">
            <summary>
            Computes the inverse of matrix using LU factorization.
            </summary>
            <param name="a">The N by N matrix to invert. Contains the inverse On exit.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <remarks>This is equivalent to the GETRF and GETRI LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.LUInverseFactored(System.Single[],System.Int32,System.Int32[])">
            <summary>
            Computes the inverse of a previously factored matrix.
            </summary>
            <param name="a">The LU factored N by N matrix.  Contains the inverse On exit.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <param name="ipiv">The pivot indices of <paramref name="a"/>.</param>
            <remarks>This is equivalent to the GETRI LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.LUInverse(System.Single[],System.Int32,System.Single[])">
            <summary>
            Computes the inverse of matrix using LU factorization.
            </summary>
            <param name="a">The N by N matrix to invert. Contains the inverse On exit.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <param name="work">The work array. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <remarks>This is equivalent to the GETRF and GETRI LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.LUInverseFactored(System.Single[],System.Int32,System.Int32[],System.Single[])">
            <summary>
            Computes the inverse of a previously factored matrix.
            </summary>
            <param name="a">The LU factored N by N matrix.  Contains the inverse On exit.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <param name="ipiv">The pivot indices of <paramref name="a"/>.</param>
            <param name="work">The work array. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <remarks>This is equivalent to the GETRI LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.LUSolve(System.Int32,System.Single[],System.Int32,System.Single[])">
            <summary>
            Solves A*X=B for X using LU factorization.
            </summary>
            <param name="columnsOfB">The number of columns of B.</param>
            <param name="a">The square matrix A.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <remarks>This is equivalent to the GETRF and GETRS LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.LUSolveFactored(System.Int32,System.Single[],System.Int32,System.Int32[],System.Single[])">
            <summary>
            Solves A*X=B for X using a previously factored A matrix.
            </summary>
            <param name="columnsOfB">The number of columns of B.</param>
            <param name="a">The factored A matrix.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <param name="ipiv">The pivot indices of <paramref name="a"/>.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <remarks>This is equivalent to the GETRS LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.CholeskyFactor(System.Single[],System.Int32)">
            <summary>
            Computes the Cholesky factorization of A.
            </summary>
            <param name="a">On entry, a square, positive definite matrix. On exit, the matrix is overwritten with the
            the Cholesky factorization.</param>
            <param name="order">The number of rows or columns in the matrix.</param>
            <remarks>This is equivalent to the POTRF LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.DoCholeskyStep(System.Single[],System.Int32,System.Int32,System.Int32,System.Single[],System.Int32)">
            <summary>
            Calculate Cholesky step
            </summary>
            <param name="data">Factor matrix</param>
            <param name="rowDim">Number of rows</param>
            <param name="firstCol">Column start</param>
            <param name="colLimit">Total columns</param>
            <param name="multipliers">Multipliers calculated previously</param>
            <param name="availableCores">Number of available processors</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.CholeskySolve(System.Single[],System.Int32,System.Single[],System.Int32)">
            <summary>
            Solves A*X=B for X using Cholesky factorization.
            </summary>
            <param name="a">The square, positive definite matrix A.</param>
            <param name="orderA">The number of rows and columns in A.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <param name="columnsB">The number of columns in the B matrix.</param>
            <remarks>This is equivalent to the POTRF add POTRS LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.CholeskySolveFactored(System.Single[],System.Int32,System.Single[],System.Int32)">
            <summary>
            Solves A*X=B for X using a previously factored A matrix.
            </summary>
            <param name="a">The square, positive definite matrix A.</param>
            <param name="orderA">The number of rows and columns in A.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <param name="columnsB">The number of columns in the B matrix.</param>
            <remarks>This is equivalent to the POTRS LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.DoCholeskySolve(System.Single[],System.Int32,System.Single[],System.Int32)">
            <summary>
            Solves A*X=B for X using a previously factored A matrix.
            </summary>
            <param name="a">The square, positive definite matrix A. Has to be different than <paramref name="b"/>.</param>
            <param name="orderA">The number of rows and columns in A.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <param name="index">The column to solve for.</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.QRFactor(System.Single[],System.Int32,System.Int32,System.Single[],System.Single[])">
            <summary>
            Computes the QR factorization of A.
            </summary>
            <param name="r">On entry, it is the M by N A matrix to factor. On exit,
            it is overwritten with the R matrix of the QR factorization. </param>
            <param name="rowsR">The number of rows in the A matrix.</param>
            <param name="columnsR">The number of columns in the A matrix.</param>
            <param name="q">On exit, A M by M matrix that holds the Q matrix of the
            QR factorization.</param>
            <param name="tau">A min(m,n) vector. On exit, contains additional information
            to be used by the QR solve routine.</param>
            <remarks>This is similar to the GEQRF and ORGQR LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.QRFactor(System.Single[],System.Int32,System.Int32,System.Single[],System.Single[],System.Single[])">
            <summary>
            Computes the QR factorization of A.
            </summary>
            <param name="r">On entry, it is the M by N A matrix to factor. On exit,
            it is overwritten with the R matrix of the QR factorization. </param>
            <param name="rowsR">The number of rows in the A matrix.</param>
            <param name="columnsR">The number of columns in the A matrix.</param>
            <param name="q">On exit, A M by M matrix that holds the Q matrix of the 
            QR factorization.</param>
            <param name="tau">A min(m,n) vector. On exit, contains additional information
            to be used by the QR solve routine.</param>
            <param name="work">The work array. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <remarks>This is similar to the GEQRF and ORGQR LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.ThinQRFactor(System.Single[],System.Int32,System.Int32,System.Single[],System.Single[])">
            <summary>
            Computes the QR factorization of A.
            </summary>
            <param name="a">On entry, it is the M by N A matrix to factor. On exit,
            it is overwritten with the Q matrix of the QR factorization.</param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="r">On exit, A N by N matrix that holds the R matrix of the
            QR factorization.</param>
            <param name="tau">A min(m,n) vector. On exit, contains additional information
            to be used by the QR solve routine.</param>
            <remarks>This is similar to the GEQRF and ORGQR LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.ThinQRFactor(System.Single[],System.Int32,System.Int32,System.Single[],System.Single[],System.Single[])">
            <summary>
            Computes the QR factorization of A where M &gt; N.
            </summary>
            <param name="a">On entry, it is the M by N A matrix to factor. On exit,
            it is overwritten with the Q matrix of the QR factorization.</param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="r">On exit, A N by N matrix that holds the R matrix of the
            QR factorization.</param>
            <param name="tau">A min(m,n) vector. On exit, contains additional information
            to be used by the QR solve routine.</param>
            <param name="work">The work array. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <remarks>This is similar to the GEQRF and ORGQR LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.ComputeQR(System.Single[],System.Int32,System.Single[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Perform calculation of Q or R
            </summary>
            <param name="work">Work array</param>
            <param name="workIndex">Index of column in work array</param>
            <param name="a">Q or R matrices</param>
            <param name="rowStart">The first row in </param>
            <param name="rowCount">The last row</param>
            <param name="columnStart">The first column</param>
            <param name="columnCount">The last column</param>
            <param name="availableCores">Number of available CPUs</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.GenerateColumn(System.Single[],System.Single[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Generate column from initial matrix to work array
            </summary>
            <param name="work">Work array</param>
            <param name="a">Initial matrix</param>
            <param name="rowCount">The number of rows in matrix</param>
            <param name="row">The first row</param>
            <param name="column">Column index</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.QRSolve(System.Single[],System.Int32,System.Int32,System.Single[],System.Int32,System.Single[],MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Solves A*X=B for X using QR factorization of A.
            </summary>
            <param name="a">The A matrix.</param>
            <param name="rows">The number of rows in the A matrix.</param>
            <param name="columns">The number of columns in the A matrix.</param>
            <param name="b">The B matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
            <param name="method">The type of QR factorization to perform. <seealso cref="T:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod"/></param>
            <remarks>Rows must be greater or equal to columns.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.QRSolve(System.Single[],System.Int32,System.Int32,System.Single[],System.Int32,System.Single[],System.Single[],MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Solves A*X=B for X using QR factorization of A.
            </summary>
            <param name="a">The A matrix.</param>
            <param name="rows">The number of rows in the A matrix.</param>
            <param name="columns">The number of columns in the A matrix.</param>
            <param name="b">The B matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
            <param name="work">The work array. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <param name="method">The type of QR factorization to perform. <seealso cref="T:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod"/></param>
            <remarks>Rows must be greater or equal to columns.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.QRSolveFactored(System.Single[],System.Single[],System.Int32,System.Int32,System.Single[],System.Single[],System.Int32,System.Single[],System.Single[],MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Solves A*X=B for X using a previously QR factored matrix.
            </summary>
            <param name="q">The Q matrix obtained by QR factor. This is only used for the managed provider and can be
            <c>null</c> for the native provider. The native provider uses the Q portion stored in the R matrix.</param>
            <param name="r">The R matrix obtained by calling <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.QRFactor(System.Single[],System.Int32,System.Int32,System.Single[],System.Single[])"/>. </param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="tau">Contains additional information on Q. Only used for the native solver
            and can be <c>null</c> for the managed provider.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
            <param name="work">The work array - only used in the native provider. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <param name="method">The type of QR factorization to perform. <seealso cref="T:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod"/></param>
            <remarks>Rows must be greater or equal to columns.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.QRSolveFactored(System.Single[],System.Single[],System.Int32,System.Int32,System.Single[],System.Single[],System.Int32,System.Single[],MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Solves A*X=B for X using a previously QR factored matrix.
            </summary>
            <param name="q">The Q matrix obtained by calling <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.QRFactor(System.Single[],System.Int32,System.Int32,System.Single[],System.Single[])"/>.</param>
            <param name="r">The R matrix obtained by calling <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.QRFactor(System.Single[],System.Int32,System.Int32,System.Single[],System.Single[])"/>. </param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="tau">Contains additional information on Q. Only used for the native solver
            and can be <c>null</c> for the managed provider.</param>
            <param name="b">The B matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
            <param name="method">The type of QR factorization to perform. <seealso cref="T:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod"/></param>
            <remarks>Rows must be greater or equal to columns.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.SingularValueDecomposition(System.Boolean,System.Single[],System.Int32,System.Int32,System.Single[],System.Single[],System.Single[])">
            <summary>
            Computes the singular value decomposition of A.
            </summary>
            <param name="computeVectors">Compute the singular U and VT vectors or not.</param>
            <param name="a">On entry, the M by N matrix to decompose. On exit, A may be overwritten.</param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="s">The singular values of A in ascending value.</param>
            <param name="u">If <paramref name="computeVectors"/> is <c>true</c>, on exit U contains the left
            singular vectors.</param>
            <param name="vt">If <paramref name="computeVectors"/> is <c>true</c>, on exit VT contains the transposed
            right singular vectors.</param>
            <remarks>This is equivalent to the GESVD LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.SingularValueDecomposition(System.Boolean,System.Single[],System.Int32,System.Int32,System.Single[],System.Single[],System.Single[],System.Single[])">
            <summary>
            Computes the singular value decomposition of A.
            </summary>
            <param name="computeVectors">Compute the singular U and VT vectors or not.</param>
            <param name="a">On entry, the M by N matrix to decompose. On exit, A may be overwritten.</param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="s">The singular values of A in ascending value.</param>
            <param name="u">If <paramref name="computeVectors"/> is <c>true</c>, on exit U contains the left
            singular vectors.</param>
            <param name="vt">If <paramref name="computeVectors"/> is <c>true</c>, on exit VT contains the transposed
            right singular vectors.</param>
            <param name="work">The work array. Length should be at least <paramref name="rowsA"/>.</param>
            <exception cref="T:MathNet.Numerics.NonConvergenceException"></exception>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.Drotg(System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Given the Cartesian coordinates (da, db) of a point p, these function return the parameters da, db, c, and s 
            associated with the Givens rotation that zeros the y-coordinate of the point.
            </summary>
            <param name="da">Provides the x-coordinate of the point p. On exit contains the parameter r associated with the Givens rotation</param>
            <param name="db">Provides the y-coordinate of the point p. On exit contains the parameter z associated with the Givens rotation</param>
            <param name="c">Contains the parameter c associated with the Givens rotation</param>
            <param name="s">Contains the parameter s associated with the Givens rotation</param>
            <remarks>This is equivalent to the DROTG LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.SvdSolve(System.Single[],System.Int32,System.Int32,System.Single[],System.Int32,System.Single[])">
            <summary>
            Solves A*X=B for X using the singular value decomposition of A.
            </summary>
            <param name="a">On entry, the M by N matrix to decompose.</param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="b">The B matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.SvdSolveFactored(System.Int32,System.Int32,System.Single[],System.Single[],System.Single[],System.Single[],System.Int32,System.Single[])">
            <summary>
            Solves A*X=B for X using a previously SVD decomposed matrix.
            </summary>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="s">The s values returned by <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.SingularValueDecomposition(System.Boolean,System.Single[],System.Int32,System.Int32,System.Single[],System.Single[],System.Single[])"/>.</param>
            <param name="u">The left singular vectors returned by  <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.SingularValueDecomposition(System.Boolean,System.Single[],System.Int32,System.Int32,System.Single[],System.Single[],System.Single[])"/>.</param>
            <param name="vt">The right singular  vectors returned by  <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.SingularValueDecomposition(System.Boolean,System.Single[],System.Int32,System.Int32,System.Single[],System.Single[],System.Single[])"/>.</param>
            <param name="b">The B matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.EigenDecomp(System.Boolean,System.Int32,System.Single[],System.Single[],System.Numerics.Complex[],System.Single[])">
            <summary>
            Computes the eigenvalues and eigenvectors of a matrix.
            </summary>
            <param name="isSymmetric">Wether the matrix is symmetric or not.</param>
            <param name="order">The order of the matrix.</param>
            <param name="matrix">The matrix to decompose. The lenth of the array must be order * order.</param>
            <param name="matrixEv">On output, the matrix contains the eigen vectors. The lenth of the array must be order * order.</param>
            <param name="vectorEv">On output, the eigen values (λ) of matrix in ascending value. The length of the arry must <paramref name="order"/>.</param>
            <param name="matrixD">On output, the block diagonal eigenvalue matrix. The lenth of the array must be order * order.</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.AddVectorToScaledVector(System.Double[],System.Double,System.Double[],System.Double[])">
            <summary>
            Adds a scaled vector to another: <c>result = y + alpha*x</c>.
            </summary>
            <param name="y">The vector to update.</param>
            <param name="alpha">The value to scale <paramref name="x"/> by.</param>
            <param name="x">The vector to add to <paramref name="y"/>.</param>
            <param name="result">The result of the addition.</param>
            <remarks>This is similar to the AXPY BLAS routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.ScaleArray(System.Double,System.Double[],System.Double[])">
            <summary>
            Scales an array. Can be used to scale a vector and a matrix.
            </summary>
            <param name="alpha">The scalar.</param>
            <param name="x">The values to scale.</param>
            <param name="result">This result of the scaling.</param>
            <remarks>This is similar to the SCAL BLAS routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.DotProduct(System.Double[],System.Double[])">
            <summary>
            Computes the dot product of x and y.
            </summary>
            <param name="x">The vector x.</param>
            <param name="y">The vector y.</param>
            <returns>The dot product of x and y.</returns>
            <remarks>This is equivalent to the DOT BLAS routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.AddArrays(System.Double[],System.Double[],System.Double[])">
            <summary>
            Does a point wise add of two arrays <c>z = x + y</c>. This can be used 
            to add vectors or matrices.
            </summary>
            <param name="x">The array x.</param>
            <param name="y">The array y.</param>
            <param name="result">The result of the addition.</param>
            <remarks>There is no equivalent BLAS routine, but many libraries
            provide optimized (parallel and/or vectorized) versions of this
            routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.SubtractArrays(System.Double[],System.Double[],System.Double[])">
            <summary>
            Does a point wise subtraction of two arrays <c>z = x - y</c>. This can be used 
            to subtract vectors or matrices.
            </summary>
            <param name="x">The array x.</param>
            <param name="y">The array y.</param>
            <param name="result">The result of the subtraction.</param>
            <remarks>There is no equivalent BLAS routine, but many libraries
            provide optimized (parallel and/or vectorized) versions of this
            routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.PointWiseMultiplyArrays(System.Double[],System.Double[],System.Double[])">
            <summary>
            Does a point wise multiplication of two arrays <c>z = x * y</c>. This can be used
            to multiple elements of vectors or matrices.
            </summary>
            <param name="x">The array x.</param>
            <param name="y">The array y.</param>
            <param name="result">The result of the point wise multiplication.</param>
            <remarks>There is no equivalent BLAS routine, but many libraries
            provide optimized (parallel and/or vectorized) versions of this
            routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.PointWiseDivideArrays(System.Double[],System.Double[],System.Double[])">
            <summary>
            Does a point wise division of two arrays <c>z = x / y</c>. This can be used
            to divide elements of vectors or matrices.
            </summary>
            <param name="x">The array x.</param>
            <param name="y">The array y.</param>
            <param name="result">The result of the point wise division.</param>
            <remarks>There is no equivalent BLAS routine, but many libraries
            provide optimized (parallel and/or vectorized) versions of this
            routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.MatrixNorm(MathNet.Numerics.Algorithms.LinearAlgebra.Norm,System.Int32,System.Int32,System.Double[])">
            <summary>
            Computes the requested <see cref="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm"/> of the matrix.
            </summary>
            <param name="norm">The type of norm to compute.</param>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
            <param name="matrix">The matrix to compute the norm from.</param>
            <returns>
            The requested <see cref="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm"/> of the matrix.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.MatrixNorm(MathNet.Numerics.Algorithms.LinearAlgebra.Norm,System.Int32,System.Int32,System.Double[],System.Double[])">
            <summary>
            Computes the requested <see cref="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm"/> of the matrix.
            </summary>
            <param name="norm">The type of norm to compute.</param>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
            <param name="matrix">The matrix to compute the norm from.</param>
            <param name="work">The work array. Not used in the managed provider.</param>
            <returns>
            The requested <see cref="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm"/> of the matrix.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.MatrixMultiply(System.Double[],System.Int32,System.Int32,System.Double[],System.Int32,System.Int32,System.Double[])">
            <summary>
            Multiples two matrices. <c>result = x * y</c>
            </summary>
            <param name="x">The x matrix.</param>
            <param name="rowsX">The number of rows in the x matrix.</param>
            <param name="columnsX">The number of columns in the x matrix.</param>
            <param name="y">The y matrix.</param>
            <param name="rowsY">The number of rows in the y matrix.</param>
            <param name="columnsY">The number of columns in the y matrix.</param>
            <param name="result">Where to store the result of the multiplication.</param>
            <remarks>This is a simplified version of the BLAS GEMM routine with alpha
            set to 1.0 and beta set to 0.0, and x and y are not transposed.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.MatrixMultiplyWithUpdate(MathNet.Numerics.Algorithms.LinearAlgebra.Transpose,MathNet.Numerics.Algorithms.LinearAlgebra.Transpose,System.Double,System.Double[],System.Int32,System.Int32,System.Double[],System.Int32,System.Int32,System.Double,System.Double[])">
            <summary>
            Multiplies two matrices and updates another with the result. <c>c = alpha*op(a)*op(b) + beta*c</c>
            </summary>
            <param name="transposeA">How to transpose the <paramref name="a"/> matrix.</param>
            <param name="transposeB">How to transpose the <paramref name="b"/> matrix.</param>
            <param name="alpha">The value to scale <paramref name="a"/> matrix.</param>
            <param name="a">The a matrix.</param>
            <param name="rowsA">The number of rows in the <paramref name="a"/> matrix.</param>
            <param name="columnsA">The number of columns in the <paramref name="a"/> matrix.</param>
            <param name="b">The b matrix</param>
            <param name="rowsB">The number of rows in the <paramref name="b"/> matrix.</param>
            <param name="columnsB">The number of columns in the <paramref name="b"/> matrix.</param>
            <param name="beta">The value to scale the <paramref name="c"/> matrix.</param>
            <param name="c">The c matrix.</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.CacheObliviousMatrixMultiply(MathNet.Numerics.Algorithms.LinearAlgebra.Transpose,MathNet.Numerics.Algorithms.LinearAlgebra.Transpose,System.Double,System.Double[],System.Int32,System.Int32,System.Double[],System.Int32,System.Int32,System.Double[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Cache-Oblivious Matrix Multiplication
            </summary>
            <param name="transposeA">if set to <c>true</c> transpose matrix A.</param>
            <param name="transposeB">if set to <c>true</c> transpose matrix B.</param>
            <param name="alpha">The value to scale the matrix A with.</param>
            <param name="matrixA">The matrix A.</param>
            <param name="shiftArow">Row-shift of the left matrix</param>
            <param name="shiftAcol">Column-shift of the left matrix</param>
            <param name="matrixB">The matrix B.</param>
            <param name="shiftBrow">Row-shift of the right matrix</param>
            <param name="shiftBcol">Column-shift of the right matrix</param>
            <param name="result">The matrix C.</param>
            <param name="shiftCrow">Row-shift of the result matrix</param>
            <param name="shiftCcol">Column-shift of the result matrix</param>
            <param name="m">The number of rows of matrix op(A) and of the matrix C.</param>
            <param name="n">The number of columns of matrix op(B) and of the matrix C.</param>
            <param name="k">The number of columns of matrix op(A) and the rows of the matrix op(B).</param>
            <param name="constM">The constant number of rows of matrix op(A) and of the matrix C.</param>
            <param name="constN">The constant number of columns of matrix op(B) and of the matrix C.</param>
            <param name="constK">The constant number of columns of matrix op(A) and the rows of the matrix op(B).</param>
            <param name="first">Indicates if this is the first recursion.</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.LUFactor(System.Double[],System.Int32,System.Int32[])">
            <summary>
            Computes the LUP factorization of A. P*A = L*U.
            </summary>
            <param name="data">An <paramref name="order"/> by <paramref name="order"/> matrix. The matrix is overwritten with the
            the LU factorization on exit. The lower triangular factor L is stored in under the diagonal of <paramref name="data"/> (the diagonal is always 1.0
            for the L factor). The upper triangular factor U is stored on and above the diagonal of <paramref name="data"/>.</param>
            <param name="order">The order of the square matrix <paramref name="data"/>.</param>
            <param name="ipiv">On exit, it contains the pivot indices. The size of the array must be <paramref name="order"/>.</param>
            <remarks>This is equivalent to the GETRF LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.LUInverse(System.Double[],System.Int32)">
            <summary>
            Computes the inverse of matrix using LU factorization.
            </summary>
            <param name="a">The N by N matrix to invert. Contains the inverse On exit.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <remarks>This is equivalent to the GETRF and GETRI LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.LUInverseFactored(System.Double[],System.Int32,System.Int32[])">
            <summary>
            Computes the inverse of a previously factored matrix.
            </summary>
            <param name="a">The LU factored N by N matrix.  Contains the inverse On exit.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <param name="ipiv">The pivot indices of <paramref name="a"/>.</param>
            <remarks>This is equivalent to the GETRI LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.LUInverse(System.Double[],System.Int32,System.Double[])">
            <summary>
            Computes the inverse of matrix using LU factorization.
            </summary>
            <param name="a">The N by N matrix to invert. Contains the inverse On exit.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <param name="work">The work array. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <remarks>This is equivalent to the GETRF and GETRI LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.LUInverseFactored(System.Double[],System.Int32,System.Int32[],System.Double[])">
            <summary>
            Computes the inverse of a previously factored matrix.
            </summary>
            <param name="a">The LU factored N by N matrix.  Contains the inverse On exit.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <param name="ipiv">The pivot indices of <paramref name="a"/>.</param>
            <param name="work">The work array. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent.  On exit, work[0] contains the optimal
            work size value.</param>
            <remarks>This is equivalent to the GETRI LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.LUSolve(System.Int32,System.Double[],System.Int32,System.Double[])">
            <summary>
            Solves A*X=B for X using LU factorization.
            </summary>
            <param name="columnsOfB">The number of columns of B.</param>
            <param name="a">The square matrix A.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <remarks>This is equivalent to the GETRF and GETRS LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.LUSolveFactored(System.Int32,System.Double[],System.Int32,System.Int32[],System.Double[])">
            <summary>
            Solves A*X=B for X using a previously factored A matrix.
            </summary>
            <param name="columnsOfB">The number of columns of B.</param>
            <param name="a">The factored A matrix.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <param name="ipiv">The pivot indices of <paramref name="a"/>.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <remarks>This is equivalent to the GETRS LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.CholeskyFactor(System.Double[],System.Int32)">
            <summary>
            Computes the Cholesky factorization of A.
            </summary>
            <param name="a">On entry, a square, positive definite matrix. On exit, the matrix is overwritten with the
            the Cholesky factorization.</param>
            <param name="order">The number of rows or columns in the matrix.</param>
            <remarks>This is equivalent to the POTRF LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.DoCholeskyStep(System.Double[],System.Int32,System.Int32,System.Int32,System.Double[],System.Int32)">
            <summary>
            Calculate Cholesky step
            </summary>
            <param name="data">Factor matrix</param>
            <param name="rowDim">Number of rows</param>
            <param name="firstCol">Column start</param>
            <param name="colLimit">Total columns</param>
            <param name="multipliers">Multipliers calculated previously</param>
            <param name="availableCores">Number of available processors</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.CholeskySolve(System.Double[],System.Int32,System.Double[],System.Int32)">
            <summary>
            Solves A*X=B for X using Cholesky factorization.
            </summary>
            <param name="a">The square, positive definite matrix A.</param>
            <param name="orderA">The number of rows and columns in A.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <param name="columnsB">The number of columns in the B matrix.</param>
            <remarks>This is equivalent to the POTRF add POTRS LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.CholeskySolveFactored(System.Double[],System.Int32,System.Double[],System.Int32)">
            <summary>
            Solves A*X=B for X using a previously factored A matrix.
            </summary>
            <param name="a">The square, positive definite matrix A. Has to be different than <paramref name="b"/>.</param>
            <param name="orderA">The number of rows and columns in A.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <param name="columnsB">The number of columns in the B matrix.</param>
            <remarks>This is equivalent to the POTRS LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.DoCholeskySolve(System.Double[],System.Int32,System.Double[],System.Int32)">
            <summary>
            Solves A*X=B for X using a previously factored A matrix.
            </summary>
            <param name="a">The square, positive definite matrix A. Has to be different than <paramref name="b"/>.</param>
            <param name="orderA">The number of rows and columns in A.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <param name="index">The column to solve for.</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.QRFactor(System.Double[],System.Int32,System.Int32,System.Double[],System.Double[])">
            <summary>
            Computes the QR factorization of A.
            </summary>
            <param name="r">On entry, it is the M by N A matrix to factor. On exit,
            it is overwritten with the R matrix of the QR factorization. </param>
            <param name="rowsR">The number of rows in the A matrix.</param>
            <param name="columnsR">The number of columns in the A matrix.</param>
            <param name="q">On exit, A M by M matrix that holds the Q matrix of the
            QR factorization.</param>
            <param name="tau">A min(m,n) vector. On exit, contains additional information
            to be used by the QR solve routine.</param>
            <remarks>This is similar to the GEQRF and ORGQR LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.QRFactor(System.Double[],System.Int32,System.Int32,System.Double[],System.Double[],System.Double[])">
            <summary>
            Computes the QR factorization of A.
            </summary>
            <param name="r">On entry, it is the M by N A matrix to factor. On exit,
            it is overwritten with the R matrix of the QR factorization. </param>
            <param name="rowsR">The number of rows in the A matrix.</param>
            <param name="columnsR">The number of columns in the A matrix.</param>
            <param name="q">On exit, A M by M matrix that holds the Q matrix of the 
            QR factorization.</param>
            <param name="tau">A min(m,n) vector. On exit, contains additional information
            to be used by the QR solve routine.</param>
            <param name="work">The work array. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <remarks>This is similar to the GEQRF and ORGQR LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.ThinQRFactor(System.Double[],System.Int32,System.Int32,System.Double[],System.Double[])">
            <summary>
            Computes the QR factorization of A.
            </summary>
            <param name="a">On entry, it is the M by N A matrix to factor. On exit,
            it is overwritten with the Q matrix of the QR factorization.</param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="r">On exit, A N by N matrix that holds the R matrix of the
            QR factorization.</param>
            <param name="tau">A min(m,n) vector. On exit, contains additional information
            to be used by the QR solve routine.</param>
            <remarks>This is similar to the GEQRF and ORGQR LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.ThinQRFactor(System.Double[],System.Int32,System.Int32,System.Double[],System.Double[],System.Double[])">
            <summary>
            Computes the thin QR factorization of A where M &gt; N.
            </summary>
            <param name="a">On entry, it is the M by N A matrix to factor. On exit,
            it is overwritten with the Q matrix of the QR factorization.</param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="r">On exit, A N by N matrix that holds the R matrix of the
            QR factorization.</param>
            <param name="tau">A min(m,n) vector. On exit, contains additional information
            to be used by the QR solve routine.</param>
            <param name="work">The work array. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <remarks>This is similar to the GEQRF and ORGQR LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.ComputeQR(System.Double[],System.Int32,System.Double[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Perform calculation of Q or R
            </summary>
            <param name="work">Work array</param>
            <param name="workIndex">Index of column in work array</param>
            <param name="a">Q or R matrices</param>
            <param name="rowStart">The first row in </param>
            <param name="rowCount">The last row</param>
            <param name="columnStart">The first column</param>
            <param name="columnCount">The last column</param>
            <param name="availableCores">Number of available CPUs</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.GenerateColumn(System.Double[],System.Double[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Generate column from initial matrix to work array
            </summary>
            <param name="work">Work array</param>
            <param name="a">Initial matrix</param>
            <param name="rowCount">The number of rows in matrix</param>
            <param name="row">The first row</param>
            <param name="column">Column index</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.QRSolve(System.Double[],System.Int32,System.Int32,System.Double[],System.Int32,System.Double[],MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Solves A*X=B for X using QR factorization of A.
            </summary>
            <param name="a">The A matrix.</param>
            <param name="rows">The number of rows in the A matrix.</param>
            <param name="columns">The number of columns in the A matrix.</param>
            <param name="b">The B matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
            <param name="method">The type of QR factorization to perform. <seealso cref="T:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod"/></param>
            <remarks>Rows must be greater or equal to columns.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.QRSolve(System.Double[],System.Int32,System.Int32,System.Double[],System.Int32,System.Double[],System.Double[],MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Solves A*X=B for X using QR factorization of A.
            </summary>
            <param name="a">The A matrix.</param>
            <param name="rows">The number of rows in the A matrix.</param>
            <param name="columns">The number of columns in the A matrix.</param>
            <param name="b">The B matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
            <param name="work">The work array. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <param name="method">The type of QR factorization to perform. <seealso cref="T:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod"/></param>
            <remarks>Rows must be greater or equal to columns.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.QRSolveFactored(System.Double[],System.Double[],System.Int32,System.Int32,System.Double[],System.Double[],System.Int32,System.Double[],System.Double[],MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Solves A*X=B for X using a previously QR factored matrix.
            </summary>
            <param name="q">The Q matrix obtained by QR factor. This is only used for the managed provider and can be
            <c>null</c> for the native provider. The native provider uses the Q portion stored in the R matrix.</param>
            <param name="r">The R matrix obtained by calling <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.QRFactor(System.Double[],System.Int32,System.Int32,System.Double[],System.Double[])"/>. </param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="tau">Contains additional information on Q. Only used for the native solver
            and can be <c>null</c> for the managed provider.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
            <param name="work">The work array - only used in the native provider. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <param name="method">The type of QR factorization to perform. <seealso cref="T:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod"/></param>
            <remarks>Rows must be greater or equal to columns.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.QRSolveFactored(System.Double[],System.Double[],System.Int32,System.Int32,System.Double[],System.Double[],System.Int32,System.Double[],MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Solves A*X=B for X using a previously QR factored matrix.
            </summary>
            <param name="q">The Q matrix obtained by calling <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.QRFactor(System.Double[],System.Int32,System.Int32,System.Double[],System.Double[])"/>.</param>
            <param name="r">The R matrix obtained by calling <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.QRFactor(System.Double[],System.Int32,System.Int32,System.Double[],System.Double[])"/>. </param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="tau">Contains additional information on Q. Only used for the native solver
            and can be <c>null</c> for the managed provider.</param>
            <param name="b">The B matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
            <param name="method">The type of QR factorization to perform. <seealso cref="T:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod"/></param>
            <remarks>Rows must be greater or equal to columns.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.SingularValueDecomposition(System.Boolean,System.Double[],System.Int32,System.Int32,System.Double[],System.Double[],System.Double[])">
            <summary>
            Computes the singular value decomposition of A.
            </summary>
            <param name="computeVectors">Compute the singular U and VT vectors or not.</param>
            <param name="a">On entry, the M by N matrix to decompose. On exit, A may be overwritten.</param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="s">The singular values of A in ascending value.</param>
            <param name="u">If <paramref name="computeVectors"/> is <c>true</c>, on exit U contains the left
            singular vectors.</param>
            <param name="vt">If <paramref name="computeVectors"/> is <c>true</c>, on exit VT contains the transposed
            right singular vectors.</param>
            <remarks>This is equivalent to the GESVD LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.SingularValueDecomposition(System.Boolean,System.Double[],System.Int32,System.Int32,System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
            Computes the singular value decomposition of A.
            </summary>
            <param name="computeVectors">Compute the singular U and VT vectors or not.</param>
            <param name="a">On entry, the M by N matrix to decompose. On exit, A may be overwritten.</param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="s">The singular values of A in ascending value.</param>
            <param name="u">If <paramref name="computeVectors"/> is <c>true</c>, on exit U contains the left
            singular vectors.</param>
            <param name="vt">If <paramref name="computeVectors"/> is <c>true</c>, on exit VT contains the transposed
            right singular vectors.</param>
            <param name="work">The work array. Length should be at least <paramref name="rowsA"/>.</param>
            <remarks>This is equivalent to the GESVD LAPACK routine.</remarks>
            <exception cref="T:MathNet.Numerics.NonConvergenceException"></exception>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.Drotg(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Given the Cartesian coordinates (da, db) of a point p, these function return the parameters da, db, c, and s 
            associated with the Givens rotation that zeros the y-coordinate of the point.
            </summary>
            <param name="da">Provides the x-coordinate of the point p. On exit contains the parameter r associated with the Givens rotation</param>
            <param name="db">Provides the y-coordinate of the point p. On exit contains the parameter z associated with the Givens rotation</param>
            <param name="c">Contains the parameter c associated with the Givens rotation</param>
            <param name="s">Contains the parameter s associated with the Givens rotation</param>
            <remarks>This is equivalent to the DROTG LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.SvdSolve(System.Double[],System.Int32,System.Int32,System.Double[],System.Int32,System.Double[])">
            <summary>
            Solves A*X=B for X using the singular value decomposition of A.
            </summary>
            <param name="a">On entry, the M by N matrix to decompose.</param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="b">The B matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.SvdSolveFactored(System.Int32,System.Int32,System.Double[],System.Double[],System.Double[],System.Double[],System.Int32,System.Double[])">
            <summary>
            Solves A*X=B for X using a previously SVD decomposed matrix.
            </summary>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="s">The s values returned by <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.SingularValueDecomposition(System.Boolean,System.Double[],System.Int32,System.Int32,System.Double[],System.Double[],System.Double[])"/>.</param>
            <param name="u">The left singular vectors returned by  <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.SingularValueDecomposition(System.Boolean,System.Double[],System.Int32,System.Int32,System.Double[],System.Double[],System.Double[])"/>.</param>
            <param name="vt">The right singular  vectors returned by  <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.SingularValueDecomposition(System.Boolean,System.Double[],System.Int32,System.Int32,System.Double[],System.Double[],System.Double[])"/>.</param>
            <param name="b">The B matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.ManagedLinearAlgebraProvider.EigenDecomp(System.Boolean,System.Int32,System.Double[],System.Double[],System.Numerics.Complex[],System.Double[])">
            <summary>
            Computes the eigenvalues and eigenvectors of a matrix.
            </summary>
            <param name="isSymmetric">Wether the matrix is symmetric or not.</param>
            <param name="order">The order of the matrix.</param>
            <param name="matrix">The matrix to decompose. The lenth of the array must be order * order.</param>
            <param name="matrixEv">On output, the matrix contains the eigen vectors. The lenth of the array must be order * order.</param>
            <param name="vectorEv">On output, the eigen values (λ) of matrix in ascending value. The length of the arry must <paramref name="order"/>.</param>
            <param name="matrixD">On output, the block diagonal eigenvalue matrix. The lenth of the array must be order * order.</param>
        </member>
        <member name="T:MathNet.Numerics.Algorithms.LinearAlgebra.Transpose">
            <summary>
            How to transpose a matrix.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Algorithms.LinearAlgebra.Transpose.DontTranspose">
            <summary>
            Don't transpose a matrix.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Algorithms.LinearAlgebra.Transpose.Transpose">
            <summary>
            Transpose a matrix.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Algorithms.LinearAlgebra.Transpose.ConjugateTranspose">
            <summary>
            Conjugate transpose a complex matrix.
            </summary>
            <remarks>If a conjugate transpose is used with a real matrix, then the matrix is just transposed.</remarks>
        </member>
        <member name="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm">
            <summary>
            Types of matrix norms.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Algorithms.LinearAlgebra.Norm.OneNorm">
            <summary>
            The 1-norm.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Algorithms.LinearAlgebra.Norm.FrobeniusNorm">
            <summary>
            The Frobenius norm.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Algorithms.LinearAlgebra.Norm.InfinityNorm">
            <summary>
            The infinity norm.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Algorithms.LinearAlgebra.Norm.LargestAbsoluteValue">
            <summary>
            The largest absolute value norm.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider">
            <summary>
            Intel's Math Kernel Library (MKL) linear algebra provider.
            </summary>
            <summary>
            Intel's Math Kernel Library (MKL) linear algebra provider.
            </summary>
            <summary>
            Intel's Math Kernel Library (MKL) linear algebra provider.
            </summary>
            <summary>
            Intel's Math Kernel Library (MKL) linear algebra provider.
            </summary>
            <summary>
            Intel's Math Kernel Library (MKL) linear algebra provider.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.MatrixNorm(MathNet.Numerics.Algorithms.LinearAlgebra.Norm,System.Int32,System.Int32,System.Single[])">
            <summary>
            Computes the requested <see cref="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm"/> of the matrix.
            </summary>
            <param name="norm">The type of norm to compute.</param>
            <param name="rows">The number of rows in the matrix.</param>
            <param name="columns">The number of columns in the matrix.</param>
            <param name="matrix">The matrix to compute the norm from.</param>
            <returns>
            The requested <see cref="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm"/> of the matrix.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.MatrixNorm(MathNet.Numerics.Algorithms.LinearAlgebra.Norm,System.Int32,System.Int32,System.Single[],System.Single[])">
            <summary>
            Computes the requested <see cref="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm"/> of the matrix.
            </summary>
            <param name="norm">The type of norm to compute.</param>
            <param name="rows">The number of rows in the matrix.</param>
            <param name="columns">The number of columns in the matrix.</param>
            <param name="matrix">The matrix to compute the norm from.</param>
            <param name="work">The work array. Only used when <see cref="F:MathNet.Numerics.Algorithms.LinearAlgebra.Norm.InfinityNorm"/>
            and needs to be have a length of at least M (number of rows of <paramref name="matrix"/>.</param>
            <returns>
            The requested <see cref="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm"/> of the matrix.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.MatrixNorm(MathNet.Numerics.Algorithms.LinearAlgebra.Norm,System.Int32,System.Int32,System.Double[])">
            <summary>
            Computes the requested <see cref="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm"/> of the matrix.
            </summary>
            <param name="norm">The type of norm to compute.</param>
            <param name="rows">The number of rows in the matrix.</param>
            <param name="columns">The number of columns in the matrix.</param>
            <param name="matrix">The matrix to compute the norm from.</param>
            <returns>
            The requested <see cref="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm"/> of the matrix.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.MatrixNorm(MathNet.Numerics.Algorithms.LinearAlgebra.Norm,System.Int32,System.Int32,System.Double[],System.Double[])">
            <summary>
            Computes the requested <see cref="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm"/> of the matrix.
            </summary>
            <param name="norm">The type of norm to compute.</param>
            <param name="rows">The number of rows in the matrix.</param>
            <param name="columns">The number of columns in the matrix.</param>
            <param name="matrix">The matrix to compute the norm from.</param>
            <param name="work">The work array. Only used when <see cref="F:MathNet.Numerics.Algorithms.LinearAlgebra.Norm.InfinityNorm"/>
            and needs to be have a length of at least M (number of rows of <paramref name="matrix"/>.</param>
            <returns>
            The requested <see cref="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm"/> of the matrix.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.MatrixNorm(MathNet.Numerics.Algorithms.LinearAlgebra.Norm,System.Int32,System.Int32,MathNet.Numerics.Complex32[])">
            <summary>
            Computes the requested <see cref="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm"/> of the matrix.
            </summary>
            <param name="norm">The type of norm to compute.</param>
            <param name="rows">The number of rows in the matrix.</param>
            <param name="columns">The number of columns in the matrix.</param>
            <param name="matrix">The matrix to compute the norm from.</param>
            <returns>
            The requested <see cref="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm"/> of the matrix.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.MatrixNorm(MathNet.Numerics.Algorithms.LinearAlgebra.Norm,System.Int32,System.Int32,MathNet.Numerics.Complex32[],System.Single[])">
            <summary>
            Computes the requested <see cref="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm"/> of the matrix.
            </summary>
            <param name="norm">The type of norm to compute.</param>
            <param name="rows">The number of rows in the matrix.</param>
            <param name="columns">The number of columns in the matrix.</param>
            <param name="matrix">The matrix to compute the norm from.</param>
            <param name="work">The work array. Only used when <see cref="F:MathNet.Numerics.Algorithms.LinearAlgebra.Norm.InfinityNorm"/>
            and needs to be have a length of at least M (number of rows of <paramref name="matrix"/>.</param>
            <returns>
            The requested <see cref="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm"/> of the matrix.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.MatrixNorm(MathNet.Numerics.Algorithms.LinearAlgebra.Norm,System.Int32,System.Int32,System.Numerics.Complex[])">
            <summary>
            Computes the requested <see cref="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm"/> of the matrix.
            </summary>
            <param name="norm">The type of norm to compute.</param>
            <param name="rows">The number of rows in the matrix.</param>
            <param name="columns">The number of columns in the matrix.</param>
            <param name="matrix">The matrix to compute the norm from.</param>
            <returns>
            The requested <see cref="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm"/> of the matrix.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.MatrixNorm(MathNet.Numerics.Algorithms.LinearAlgebra.Norm,System.Int32,System.Int32,System.Numerics.Complex[],System.Double[])">
            <summary>
            Computes the requested <see cref="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm"/> of the matrix.
            </summary>
            <param name="norm">The type of norm to compute.</param>
            <param name="rows">The number of rows in the matrix.</param>
            <param name="columns">The number of columns in the matrix.</param>
            <param name="matrix">The matrix to compute the norm from.</param>
            <param name="work">The work array. Only used when <see cref="F:MathNet.Numerics.Algorithms.LinearAlgebra.Norm.InfinityNorm"/>
            and needs to be have a length of at least M (number of rows of <paramref name="matrix"/>.</param>
            <returns>
            The requested <see cref="T:MathNet.Numerics.Algorithms.LinearAlgebra.Norm"/> of the matrix.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.DotProduct(System.Numerics.Complex[],System.Numerics.Complex[])">
            <summary>
            Computes the dot product of x and y.
            </summary>
            <param name="x">The vector x.</param>
            <param name="y">The vector y.</param>
            <returns>The dot product of x and y.</returns>
            <remarks>This is equivalent to the DOT BLAS routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.AddVectorToScaledVector(System.Numerics.Complex[],System.Numerics.Complex,System.Numerics.Complex[],System.Numerics.Complex[])">
            <summary>
            Adds a scaled vector to another: <c>result = y + alpha*x</c>.
            </summary>
            <param name="y">The vector to update.</param>
            <param name="alpha">The value to scale <paramref name="x"/> by.</param>
            <param name="x">The vector to add to <paramref name="y"/>.</param>
            <param name="result">The result of the addition.</param>
            <remarks>This is similar to the AXPY BLAS routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.ScaleArray(System.Numerics.Complex,System.Numerics.Complex[],System.Numerics.Complex[])">
            <summary>
            Scales an array. Can be used to scale a vector and a matrix.
            </summary>
            <param name="alpha">The scalar.</param>
            <param name="x">The values to scale.</param>
            <param name="result">This result of the scaling.</param>
            <remarks>This is similar to the SCAL BLAS routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.MatrixMultiply(System.Numerics.Complex[],System.Int32,System.Int32,System.Numerics.Complex[],System.Int32,System.Int32,System.Numerics.Complex[])">
            <summary>
            Multiples two matrices. <c>result = x * y</c>
            </summary>
            <param name="x">The x matrix.</param>
            <param name="rowsX">The number of rows in the x matrix.</param>
            <param name="columnsX">The number of columns in the x matrix.</param>
            <param name="y">The y matrix.</param>
            <param name="rowsY">The number of rows in the y matrix.</param>
            <param name="columnsY">The number of columns in the y matrix.</param>
            <param name="result">Where to store the result of the multiplication.</param>
            <remarks>This is a simplified version of the BLAS GEMM routine with alpha
            set to Complex.One and beta set to Complex.Zero, and x and y are not transposed.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.MatrixMultiplyWithUpdate(MathNet.Numerics.Algorithms.LinearAlgebra.Transpose,MathNet.Numerics.Algorithms.LinearAlgebra.Transpose,System.Numerics.Complex,System.Numerics.Complex[],System.Int32,System.Int32,System.Numerics.Complex[],System.Int32,System.Int32,System.Numerics.Complex,System.Numerics.Complex[])">
            <summary>
            Multiplies two matrices and updates another with the result. <c>c = alpha*op(a)*op(b) + beta*c</c>
            </summary>
            <param name="transposeA">How to transpose the <paramref name="a"/> matrix.</param>
            <param name="transposeB">How to transpose the <paramref name="b"/> matrix.</param>
            <param name="alpha">The value to scale <paramref name="a"/> matrix.</param>
            <param name="a">The a matrix.</param>
            <param name="rowsA">The number of rows in the <paramref name="a"/> matrix.</param>
            <param name="columnsA">The number of columns in the <paramref name="a"/> matrix.</param>
            <param name="b">The b matrix</param>
            <param name="rowsB">The number of rows in the <paramref name="b"/> matrix.</param>
            <param name="columnsB">The number of columns in the <paramref name="b"/> matrix.</param>
            <param name="beta">The value to scale the <paramref name="c"/> matrix.</param>
            <param name="c">The c matrix.</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.LUFactor(System.Numerics.Complex[],System.Int32,System.Int32[])">
            <summary>
            Computes the LUP factorization of A. P*A = L*U.
            </summary>
            <param name="data">An <paramref name="order"/> by <paramref name="order"/> matrix. The matrix is overwritten with the
            the LU factorization on exit. The lower triangular factor L is stored in under the diagonal of <paramref name="data"/> (the diagonal is always Complex.One
            for the L factor). The upper triangular factor U is stored on and above the diagonal of <paramref name="data"/>.</param>
            <param name="order">The order of the square matrix <paramref name="data"/>.</param>
            <param name="ipiv">On exit, it contains the pivot indices. The size of the array must be <paramref name="order"/>.</param>
            <remarks>This is equivalent to the GETRF LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.LUInverse(System.Numerics.Complex[],System.Int32)">
            <summary>
            Computes the inverse of matrix using LU factorization.
            </summary>
            <param name="a">The N by N matrix to invert. Contains the inverse On exit.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <remarks>This is equivalent to the GETRF and GETRI LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.LUInverseFactored(System.Numerics.Complex[],System.Int32,System.Int32[])">
            <summary>
            Computes the inverse of a previously factored matrix.
            </summary>
            <param name="a">The LU factored N by N matrix.  Contains the inverse On exit.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <param name="ipiv">The pivot indices of <paramref name="a"/>.</param>
            <remarks>This is equivalent to the GETRI LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.LUInverse(System.Numerics.Complex[],System.Int32,System.Numerics.Complex[])">
            <summary>
            Computes the inverse of matrix using LU factorization.
            </summary>
            <param name="a">The N by N matrix to invert. Contains the inverse On exit.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <param name="work">The work array. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <remarks>This is equivalent to the GETRF and GETRI LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.LUInverseFactored(System.Numerics.Complex[],System.Int32,System.Int32[],System.Numerics.Complex[])">
            <summary>
            Computes the inverse of a previously factored matrix.
            </summary>
            <param name="a">The LU factored N by N matrix.  Contains the inverse On exit.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <param name="ipiv">The pivot indices of <paramref name="a"/>.</param>
            <param name="work">The work array. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <remarks>This is equivalent to the GETRI LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.LUSolve(System.Int32,System.Numerics.Complex[],System.Int32,System.Numerics.Complex[])">
            <summary>
            Solves A*X=B for X using LU factorization.
            </summary>
            <param name="columnsOfB">The number of columns of B.</param>
            <param name="a">The square matrix A.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <remarks>This is equivalent to the GETRF and GETRS LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.LUSolveFactored(System.Int32,System.Numerics.Complex[],System.Int32,System.Int32[],System.Numerics.Complex[])">
            <summary>
            Solves A*X=B for X using a previously factored A matrix.
            </summary>
            <param name="columnsOfB">The number of columns of B.</param>
            <param name="a">The factored A matrix.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <param name="ipiv">The pivot indices of <paramref name="a"/>.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <remarks>This is equivalent to the GETRS LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.CholeskyFactor(System.Numerics.Complex[],System.Int32)">
            <summary>
            Computes the Cholesky factorization of A.
            </summary>
            <param name="a">On entry, a square, positive definite matrix. On exit, the matrix is overwritten with the
            the Cholesky factorization.</param>
            <param name="order">The number of rows or columns in the matrix.</param>
            <remarks>This is equivalent to the POTRF LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.CholeskySolve(System.Numerics.Complex[],System.Int32,System.Numerics.Complex[],System.Int32)">
            <summary>
            Solves A*X=B for X using Cholesky factorization.
            </summary>
            <param name="a">The square, positive definite matrix A.</param>
            <param name="orderA">The number of rows and columns in A.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <param name="columnsB">The number of columns in the B matrix.</param>
            <remarks>This is equivalent to the POTRF add POTRS LAPACK routines.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.CholeskySolveFactored(System.Numerics.Complex[],System.Int32,System.Numerics.Complex[],System.Int32)">
            <summary>
            Solves A*X=B for X using a previously factored A matrix.
            </summary>
            <param name="a">The square, positive definite matrix A.</param>
            <param name="orderA">The number of rows and columns in A.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <param name="columnsB">The number of columns in the B matrix.</param>
            <remarks>This is equivalent to the POTRS LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.QRFactor(System.Numerics.Complex[],System.Int32,System.Int32,System.Numerics.Complex[],System.Numerics.Complex[])">
            <summary>
            Computes the QR factorization of A.
            </summary>
            <param name="r">On entry, it is the M by N A matrix to factor. On exit,
            it is overwritten with the R matrix of the QR factorization. </param>
            <param name="rowsR">The number of rows in the A matrix.</param>
            <param name="columnsR">The number of columns in the A matrix.</param>
            <param name="q">On exit, A M by M matrix that holds the Q matrix of the
            QR factorization.</param>
            <param name="tau">A min(m,n) vector. On exit, contains additional information
            to be used by the QR solve routine.</param>
            <remarks>This is similar to the GEQRF and ORGQR LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.QRFactor(System.Numerics.Complex[],System.Int32,System.Int32,System.Numerics.Complex[],System.Numerics.Complex[],System.Numerics.Complex[])">
            <summary>
            Computes the QR factorization of A.
            </summary>
            <param name="r">On entry, it is the M by N A matrix to factor. On exit,
            it is overwritten with the R matrix of the QR factorization. </param>
            <param name="rowsR">The number of rows in the A matrix.</param>
            <param name="columnsR">The number of columns in the A matrix.</param>
            <param name="q">On exit, A M by M matrix that holds the Q matrix of the 
            QR factorization.</param>
            <param name="tau">A min(m,n) vector. On exit, contains additional information
            to be used by the QR solve routine.</param>
            <param name="work">The work array. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <remarks>This is similar to the GEQRF and ORGQR LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.QRSolve(System.Numerics.Complex[],System.Int32,System.Int32,System.Numerics.Complex[],System.Int32,System.Numerics.Complex[],MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Solves A*X=B for X using QR factorization of A.
            </summary>
            <param name="a">The A matrix.</param>
            <param name="rows">The number of rows in the A matrix.</param>
            <param name="columns">The number of columns in the A matrix.</param>
            <param name="b">The B matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
            <param name="method">The type of QR factorization to perform. <seealso cref="T:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod"/></param>
            <remarks>Rows must be greater or equal to columns.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.QRSolve(System.Numerics.Complex[],System.Int32,System.Int32,System.Numerics.Complex[],System.Int32,System.Numerics.Complex[],System.Numerics.Complex[],MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Solves A*X=B for X using QR factorization of A.
            </summary>
            <param name="a">The A matrix.</param>
            <param name="rows">The number of rows in the A matrix.</param>
            <param name="columns">The number of columns in the A matrix.</param>
            <param name="b">The B matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
            <param name="work">The work array. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <param name="method">The type of QR factorization to perform. <seealso cref="T:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod"/></param>
            <remarks>Rows must be greater or equal to columns.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.QRSolveFactored(System.Numerics.Complex[],System.Numerics.Complex[],System.Int32,System.Int32,System.Numerics.Complex[],System.Numerics.Complex[],System.Int32,System.Numerics.Complex[],MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Solves A*X=B for X using a previously QR factored matrix.
            </summary>
            <param name="q">The Q matrix obtained by calling <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.QRFactor(System.Numerics.Complex[],System.Int32,System.Int32,System.Numerics.Complex[],System.Numerics.Complex[])"/>.</param>
            <param name="r">The R matrix obtained by calling <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.QRFactor(System.Numerics.Complex[],System.Int32,System.Int32,System.Numerics.Complex[],System.Numerics.Complex[])"/>. </param>
            <param name="rowsR">The number of rows in the A matrix.</param>
            <param name="columnsR">The number of columns in the A matrix.</param>
            <param name="tau">Contains additional information on Q. Only used for the native solver
            and can be <c>null</c> for the managed provider.</param>
            <param name="b">The B matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
            <param name="method">The type of QR factorization to perform. <seealso cref="T:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod"/></param>
            <remarks>Rows must be greater or equal to columns.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.QRSolveFactored(System.Numerics.Complex[],System.Numerics.Complex[],System.Int32,System.Int32,System.Numerics.Complex[],System.Numerics.Complex[],System.Int32,System.Numerics.Complex[],System.Numerics.Complex[],MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Solves A*X=B for X using a previously QR factored matrix.
            </summary>
            <param name="q">The Q matrix obtained by QR factor. This is only used for the managed provider and can be
            <c>null</c> for the native provider. The native provider uses the Q portion stored in the R matrix.</param>
            <param name="r">The R matrix obtained by calling <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.QRFactor(System.Numerics.Complex[],System.Int32,System.Int32,System.Numerics.Complex[],System.Numerics.Complex[])"/>. </param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="tau">Contains additional information on Q. Only used for the native solver
            and can be <c>null</c> for the managed provider.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
            <param name="work">The work array - only used in the native provider. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <param name="method">The type of QR factorization to perform. <seealso cref="T:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod"/></param>
            <remarks>Rows must be greater or equal to columns.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.SingularValueDecomposition(System.Boolean,System.Numerics.Complex[],System.Int32,System.Int32,System.Numerics.Complex[],System.Numerics.Complex[],System.Numerics.Complex[])">
            <summary>
            Computes the singular value decomposition of A.
            </summary>
            <param name="computeVectors">Compute the singular U and VT vectors or not.</param>
            <param name="a">On entry, the M by N matrix to decompose. On exit, A may be overwritten.</param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="s">The singular values of A in ascending value.</param>
            <param name="u">If <paramref name="computeVectors"/> is <c>true</c>, on exit U contains the left
            singular vectors.</param>
            <param name="vt">If <paramref name="computeVectors"/> is <c>true</c>, on exit VT contains the transposed
            right singular vectors.</param>
            <remarks>This is equivalent to the GESVD LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.SvdSolve(System.Numerics.Complex[],System.Int32,System.Int32,System.Numerics.Complex[],System.Int32,System.Numerics.Complex[])">
            <summary>
            Solves A*X=B for X using the singular value decomposition of A.
            </summary>
            <param name="a">On entry, the M by N matrix to decompose.</param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="b">The B matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.SingularValueDecomposition(System.Boolean,System.Numerics.Complex[],System.Int32,System.Int32,System.Numerics.Complex[],System.Numerics.Complex[],System.Numerics.Complex[],System.Numerics.Complex[])">
            <summary>
            Computes the singular value decomposition of A.
            </summary>
            <param name="computeVectors">Compute the singular U and VT vectors or not.</param>
            <param name="a">On entry, the M by N matrix to decompose. On exit, A may be overwritten.</param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="s">The singular values of A in ascending value.</param>
            <param name="u">If <paramref name="computeVectors"/> is <c>true</c>, on exit U contains the left
            singular vectors.</param>
            <param name="vt">If <paramref name="computeVectors"/> is <c>true</c>, on exit VT contains the transposed
            right singular vectors.</param>
            <param name="work">The work array. For real matrices, the work array should be at least
            Max(3*Min(M, N) + Max(M, N), 5*Min(M,N)). For complex matrices, 2*Min(M, N) + Max(M, N).
            On exit, work[0] contains the optimal work size value.</param>
            <remarks>This is equivalent to the GESVD LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.AddArrays(System.Numerics.Complex[],System.Numerics.Complex[],System.Numerics.Complex[])">
            <summary>
            Does a point wise add of two arrays <c>z = x + y</c>. This can be used
            to add vectors or matrices.
            </summary>
            <param name="x">The array x.</param>
            <param name="y">The array y.</param>
            <param name="result">The result of the addition.</param>
            <remarks>There is no equivalent BLAS routine, but many libraries
            provide optimized (parallel and/or vectorized) versions of this
            routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.SubtractArrays(System.Numerics.Complex[],System.Numerics.Complex[],System.Numerics.Complex[])">
            <summary>
            Does a point wise subtraction of two arrays <c>z = x - y</c>. This can be used
            to subtract vectors or matrices.
            </summary>
            <param name="x">The array x.</param>
            <param name="y">The array y.</param>
            <param name="result">The result of the subtraction.</param>
            <remarks>There is no equivalent BLAS routine, but many libraries
            provide optimized (parallel and/or vectorized) versions of this
            routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.PointWiseMultiplyArrays(System.Numerics.Complex[],System.Numerics.Complex[],System.Numerics.Complex[])">
            <summary>
            Does a point wise multiplication of two arrays <c>z = x * y</c>. This can be used
            to multiple elements of vectors or matrices.
            </summary>
            <param name="x">The array x.</param>
            <param name="y">The array y.</param>
            <param name="result">The result of the point wise multiplication.</param>
            <remarks>There is no equivalent BLAS routine, but many libraries
            provide optimized (parallel and/or vectorized) versions of this
            routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.PointWiseDivideArrays(System.Numerics.Complex[],System.Numerics.Complex[],System.Numerics.Complex[])">
            <summary>
            Does a point wise division of two arrays <c>z = x / y</c>. This can be used
            to divide elements of vectors or matrices.
            </summary>
            <param name="x">The array x.</param>
            <param name="y">The array y.</param>
            <param name="result">The result of the point wise division.</param>
            <remarks>There is no equivalent BLAS routine, but many libraries
            provide optimized (parallel and/or vectorized) versions of this
            routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.DotProduct(MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[])">
            <summary>
            Computes the dot product of x and y.
            </summary>
            <param name="x">The vector x.</param>
            <param name="y">The vector y.</param>
            <returns>The dot product of x and y.</returns>
            <remarks>This is equivalent to the DOT BLAS routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.AddVectorToScaledVector(MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32,MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[])">
            <summary>
            Adds a scaled vector to another: <c>result = y + alpha*x</c>.
            </summary>
            <param name="y">The vector to update.</param>
            <param name="alpha">The value to scale <paramref name="x"/> by.</param>
            <param name="x">The vector to add to <paramref name="y"/>.</param>
            <param name="result">The result of the addition.</param>
            <remarks>This is similar to the AXPY BLAS routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.ScaleArray(MathNet.Numerics.Complex32,MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[])">
            <summary>
            Scales an array. Can be used to scale a vector and a matrix.
            </summary>
            <param name="alpha">The scalar.</param>
            <param name="x">The values to scale.</param>
            <param name="result">This result of the scaling.</param>
            <remarks>This is similar to the SCAL BLAS routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.MatrixMultiply(MathNet.Numerics.Complex32[],System.Int32,System.Int32,MathNet.Numerics.Complex32[],System.Int32,System.Int32,MathNet.Numerics.Complex32[])">
            <summary>
            Multiples two matrices. <c>result = x * y</c>
            </summary>
            <param name="x">The x matrix.</param>
            <param name="rowsX">The number of rows in the x matrix.</param>
            <param name="columnsX">The number of columns in the x matrix.</param>
            <param name="y">The y matrix.</param>
            <param name="rowsY">The number of rows in the y matrix.</param>
            <param name="columnsY">The number of columns in the y matrix.</param>
            <param name="result">Where to store the result of the multiplication.</param>
            <remarks>This is a simplified version of the BLAS GEMM routine with alpha
            set to Complex32.One and beta set to Complex32.Zero, and x and y are not transposed.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.MatrixMultiplyWithUpdate(MathNet.Numerics.Algorithms.LinearAlgebra.Transpose,MathNet.Numerics.Algorithms.LinearAlgebra.Transpose,MathNet.Numerics.Complex32,MathNet.Numerics.Complex32[],System.Int32,System.Int32,MathNet.Numerics.Complex32[],System.Int32,System.Int32,MathNet.Numerics.Complex32,MathNet.Numerics.Complex32[])">
            <summary>
            Multiplies two matrices and updates another with the result. <c>c = alpha*op(a)*op(b) + beta*c</c>
            </summary>
            <param name="transposeA">How to transpose the <paramref name="a"/> matrix.</param>
            <param name="transposeB">How to transpose the <paramref name="b"/> matrix.</param>
            <param name="alpha">The value to scale <paramref name="a"/> matrix.</param>
            <param name="a">The a matrix.</param>
            <param name="rowsA">The number of rows in the <paramref name="a"/> matrix.</param>
            <param name="columnsA">The number of columns in the <paramref name="a"/> matrix.</param>
            <param name="b">The b matrix</param>
            <param name="rowsB">The number of rows in the <paramref name="b"/> matrix.</param>
            <param name="columnsB">The number of columns in the <paramref name="b"/> matrix.</param>
            <param name="beta">The value to scale the <paramref name="c"/> matrix.</param>
            <param name="c">The c matrix.</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.LUFactor(MathNet.Numerics.Complex32[],System.Int32,System.Int32[])">
            <summary>
            Computes the LUP factorization of A. P*A = L*U.
            </summary>
            <param name="data">An <paramref name="order"/> by <paramref name="order"/> matrix. The matrix is overwritten with the
            the LU factorization on exit. The lower triangular factor L is stored in under the diagonal of <paramref name="data"/> (the diagonal is always Complex32.One
            for the L factor). The upper triangular factor U is stored on and above the diagonal of <paramref name="data"/>.</param>
            <param name="order">The order of the square matrix <paramref name="data"/>.</param>
            <param name="ipiv">On exit, it contains the pivot indices. The size of the array must be <paramref name="order"/>.</param>
            <remarks>This is equivalent to the GETRF LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.LUInverse(MathNet.Numerics.Complex32[],System.Int32)">
            <summary>
            Computes the inverse of matrix using LU factorization.
            </summary>
            <param name="a">The N by N matrix to invert. Contains the inverse On exit.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <remarks>This is equivalent to the GETRF and GETRI LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.LUInverseFactored(MathNet.Numerics.Complex32[],System.Int32,System.Int32[])">
            <summary>
            Computes the inverse of a previously factored matrix.
            </summary>
            <param name="a">The LU factored N by N matrix.  Contains the inverse On exit.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <param name="ipiv">The pivot indices of <paramref name="a"/>.</param>
            <remarks>This is equivalent to the GETRI LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.LUInverse(MathNet.Numerics.Complex32[],System.Int32,MathNet.Numerics.Complex32[])">
            <summary>
            Computes the inverse of matrix using LU factorization.
            </summary>
            <param name="a">The N by N matrix to invert. Contains the inverse On exit.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <param name="work">The work array. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <remarks>This is equivalent to the GETRF and GETRI LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.LUInverseFactored(MathNet.Numerics.Complex32[],System.Int32,System.Int32[],MathNet.Numerics.Complex32[])">
            <summary>
            Computes the inverse of a previously factored matrix.
            </summary>
            <param name="a">The LU factored N by N matrix.  Contains the inverse On exit.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <param name="ipiv">The pivot indices of <paramref name="a"/>.</param>
            <param name="work">The work array. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <remarks>This is equivalent to the GETRI LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.LUSolve(System.Int32,MathNet.Numerics.Complex32[],System.Int32,MathNet.Numerics.Complex32[])">
            <summary>
            Solves A*X=B for X using LU factorization.
            </summary>
            <param name="columnsOfB">The number of columns of B.</param>
            <param name="a">The square matrix A.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <remarks>This is equivalent to the GETRF and GETRS LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.LUSolveFactored(System.Int32,MathNet.Numerics.Complex32[],System.Int32,System.Int32[],MathNet.Numerics.Complex32[])">
            <summary>
            Solves A*X=B for X using a previously factored A matrix.
            </summary>
            <param name="columnsOfB">The number of columns of B.</param>
            <param name="a">The factored A matrix.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <param name="ipiv">The pivot indices of <paramref name="a"/>.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <remarks>This is equivalent to the GETRS LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.CholeskyFactor(MathNet.Numerics.Complex32[],System.Int32)">
            <summary>
            Computes the Cholesky factorization of A.
            </summary>
            <param name="a">On entry, a square, positive definite matrix. On exit, the matrix is overwritten with the
            the Cholesky factorization.</param>
            <param name="order">The number of rows or columns in the matrix.</param>
            <remarks>This is equivalent to the POTRF LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.CholeskySolve(MathNet.Numerics.Complex32[],System.Int32,MathNet.Numerics.Complex32[],System.Int32)">
            <summary>
            Solves A*X=B for X using Cholesky factorization.
            </summary>
            <param name="a">The square, positive definite matrix A.</param>
            <param name="orderA">The number of rows and columns in A.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <param name="columnsB">The number of columns in the B matrix.</param>
            <remarks>This is equivalent to the POTRF add POTRS LAPACK routines.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.CholeskySolveFactored(MathNet.Numerics.Complex32[],System.Int32,MathNet.Numerics.Complex32[],System.Int32)">
            <summary>
            Solves A*X=B for X using a previously factored A matrix.
            </summary>
            <param name="a">The square, positive definite matrix A.</param>
            <param name="orderA">The number of rows and columns in A.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <param name="columnsB">The number of columns in the B matrix.</param>
            <remarks>This is equivalent to the POTRS LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.QRFactor(MathNet.Numerics.Complex32[],System.Int32,System.Int32,MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[])">
            <summary>
            Computes the QR factorization of A.
            </summary>
            <param name="r">On entry, it is the M by N A matrix to factor. On exit,
            it is overwritten with the R matrix of the QR factorization. </param>
            <param name="rowsR">The number of rows in the A matrix.</param>
            <param name="columnsR">The number of columns in the A matrix.</param>
            <param name="q">On exit, A M by M matrix that holds the Q matrix of the
            QR factorization.</param>
            <param name="tau">A min(m,n) vector. On exit, contains additional information
            to be used by the QR solve routine.</param>
            <remarks>This is similar to the GEQRF and ORGQR LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.QRFactor(MathNet.Numerics.Complex32[],System.Int32,System.Int32,MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[])">
            <summary>
            Computes the QR factorization of A.
            </summary>
            <param name="r">On entry, it is the M by N A matrix to factor. On exit,
            it is overwritten with the R matrix of the QR factorization. </param>
            <param name="rowsR">The number of rows in the A matrix.</param>
            <param name="columnsR">The number of columns in the A matrix.</param>
            <param name="q">On exit, A M by M matrix that holds the Q matrix of the 
            QR factorization.</param>
            <param name="tau">A min(m,n) vector. On exit, contains additional information
            to be used by the QR solve routine.</param>
            <param name="work">The work array. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <remarks>This is similar to the GEQRF and ORGQR LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.QRSolve(MathNet.Numerics.Complex32[],System.Int32,System.Int32,MathNet.Numerics.Complex32[],System.Int32,MathNet.Numerics.Complex32[],MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Solves A*X=B for X using QR factorization of A.
            </summary>
            <param name="a">The A matrix.</param>
            <param name="rows">The number of rows in the A matrix.</param>
            <param name="columns">The number of columns in the A matrix.</param>
            <param name="b">The B matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
            <param name="method">The type of QR factorization to perform. <seealso cref="T:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod"/></param>
            <remarks>Rows must be greater or equal to columns.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.QRSolve(MathNet.Numerics.Complex32[],System.Int32,System.Int32,MathNet.Numerics.Complex32[],System.Int32,MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[],MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Solves A*X=B for X using QR factorization of A.
            </summary>
            <param name="a">The A matrix.</param>
            <param name="rows">The number of rows in the A matrix.</param>
            <param name="columns">The number of columns in the A matrix.</param>
            <param name="b">The B matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
            <param name="work">The work array. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <param name="method">The type of QR factorization to perform. <seealso cref="T:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod"/></param>
            <remarks>Rows must be greater or equal to columns.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.QRSolveFactored(MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[],System.Int32,System.Int32,MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[],System.Int32,MathNet.Numerics.Complex32[],MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Solves A*X=B for X using a previously QR factored matrix.
            </summary>
            <param name="q">The Q matrix obtained by calling <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.QRFactor(MathNet.Numerics.Complex32[],System.Int32,System.Int32,MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[])"/>.</param>
            <param name="r">The R matrix obtained by calling <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.QRFactor(MathNet.Numerics.Complex32[],System.Int32,System.Int32,MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[])"/>. </param>
            <param name="rowsR">The number of rows in the A matrix.</param>
            <param name="columnsR">The number of columns in the A matrix.</param>
            <param name="tau">Contains additional information on Q. Only used for the native solver
            and can be <c>null</c> for the managed provider.</param>
            <param name="b">The B matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
            <param name="method">The type of QR factorization to perform. <seealso cref="T:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod"/></param>
            <remarks>Rows must be greater or equal to columns.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.QRSolveFactored(MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[],System.Int32,System.Int32,MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[],System.Int32,MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[],MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Solves A*X=B for X using a previously QR factored matrix.
            </summary>
            <param name="q">The Q matrix obtained by QR factor. This is only used for the managed provider and can be
            <c>null</c> for the native provider. The native provider uses the Q portion stored in the R matrix.</param>
            <param name="r">The R matrix obtained by calling <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.QRFactor(MathNet.Numerics.Complex32[],System.Int32,System.Int32,MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[])"/>. </param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="tau">Contains additional information on Q. Only used for the native solver
            and can be <c>null</c> for the managed provider.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
            <param name="work">The work array - only used in the native provider. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <param name="method">The type of QR factorization to perform. <seealso cref="T:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod"/></param>
            <remarks>Rows must be greater or equal to columns.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.SingularValueDecomposition(System.Boolean,MathNet.Numerics.Complex32[],System.Int32,System.Int32,MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[])">
            <summary>
            Computes the singular value decomposition of A.
            </summary>
            <param name="computeVectors">Compute the singular U and VT vectors or not.</param>
            <param name="a">On entry, the M by N matrix to decompose. On exit, A may be overwritten.</param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="s">The singular values of A in ascending value.</param>
            <param name="u">If <paramref name="computeVectors"/> is <c>true</c>, on exit U contains the left
            singular vectors.</param>
            <param name="vt">If <paramref name="computeVectors"/> is <c>true</c>, on exit VT contains the transposed
            right singular vectors.</param>
            <remarks>This is equivalent to the GESVD LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.SvdSolve(MathNet.Numerics.Complex32[],System.Int32,System.Int32,MathNet.Numerics.Complex32[],System.Int32,MathNet.Numerics.Complex32[])">
            <summary>
            Solves A*X=B for X using the singular value decomposition of A.
            </summary>
            <param name="a">On entry, the M by N matrix to decompose.</param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="b">The B matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.SingularValueDecomposition(System.Boolean,MathNet.Numerics.Complex32[],System.Int32,System.Int32,MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[])">
            <summary>
            Computes the singular value decomposition of A.
            </summary>
            <param name="computeVectors">Compute the singular U and VT vectors or not.</param>
            <param name="a">On entry, the M by N matrix to decompose. On exit, A may be overwritten.</param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="s">The singular values of A in ascending value.</param>
            <param name="u">If <paramref name="computeVectors"/> is <c>true</c>, on exit U contains the left
            singular vectors.</param>
            <param name="vt">If <paramref name="computeVectors"/> is <c>true</c>, on exit VT contains the transposed
            right singular vectors.</param>
            <param name="work">The work array. For real matrices, the work array should be at least
            Max(3*Min(M, N) + Max(M, N), 5*Min(M,N)). For complex matrices, 2*Min(M, N) + Max(M, N).
            On exit, work[0] contains the optimal work size value.</param>
            <remarks>This is equivalent to the GESVD LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.AddArrays(MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[])">
            <summary>
            Does a point wise add of two arrays <c>z = x + y</c>. This can be used
            to add vectors or matrices.
            </summary>
            <param name="x">The array x.</param>
            <param name="y">The array y.</param>
            <param name="result">The result of the addition.</param>
            <remarks>There is no equivalent BLAS routine, but many libraries
            provide optimized (parallel and/or vectorized) versions of this
            routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.SubtractArrays(MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[])">
            <summary>
            Does a point wise subtraction of two arrays <c>z = x - y</c>. This can be used
            to subtract vectors or matrices.
            </summary>
            <param name="x">The array x.</param>
            <param name="y">The array y.</param>
            <param name="result">The result of the subtraction.</param>
            <remarks>There is no equivalent BLAS routine, but many libraries
            provide optimized (parallel and/or vectorized) versions of this
            routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.PointWiseMultiplyArrays(MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[])">
            <summary>
            Does a point wise multiplication of two arrays <c>z = x * y</c>. This can be used
            to multiple elements of vectors or matrices.
            </summary>
            <param name="x">The array x.</param>
            <param name="y">The array y.</param>
            <param name="result">The result of the point wise multiplication.</param>
            <remarks>There is no equivalent BLAS routine, but many libraries
            provide optimized (parallel and/or vectorized) versions of this
            routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.PointWiseDivideArrays(MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[])">
            <summary>
            Does a point wise division of two arrays <c>z = x / y</c>. This can be used
            to divide elements of vectors or matrices.
            </summary>
            <param name="x">The array x.</param>
            <param name="y">The array y.</param>
            <param name="result">The result of the point wise division.</param>
            <remarks>There is no equivalent BLAS routine, but many libraries
            provide optimized (parallel and/or vectorized) versions of this
            routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.DotProduct(System.Double[],System.Double[])">
            <summary>
            Computes the dot product of x and y.
            </summary>
            <param name="x">The vector x.</param>
            <param name="y">The vector y.</param>
            <returns>The dot product of x and y.</returns>
            <remarks>This is equivalent to the DOT BLAS routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.AddVectorToScaledVector(System.Double[],System.Double,System.Double[],System.Double[])">
            <summary>
            Adds a scaled vector to another: <c>result = y + alpha*x</c>.
            </summary>
            <param name="y">The vector to update.</param>
            <param name="alpha">The value to scale <paramref name="x"/> by.</param>
            <param name="x">The vector to add to <paramref name="y"/>.</param>
            <param name="result">The result of the addition.</param>
            <remarks>This is similar to the AXPY BLAS routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.ScaleArray(System.Double,System.Double[],System.Double[])">
            <summary>
            Scales an array. Can be used to scale a vector and a matrix.
            </summary>
            <param name="alpha">The scalar.</param>
            <param name="x">The values to scale.</param>
            <param name="result">This result of the scaling.</param>
            <remarks>This is similar to the SCAL BLAS routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.MatrixMultiply(System.Double[],System.Int32,System.Int32,System.Double[],System.Int32,System.Int32,System.Double[])">
            <summary>
            Multiples two matrices. <c>result = x * y</c>
            </summary>
            <param name="x">The x matrix.</param>
            <param name="rowsX">The number of rows in the x matrix.</param>
            <param name="columnsX">The number of columns in the x matrix.</param>
            <param name="y">The y matrix.</param>
            <param name="rowsY">The number of rows in the y matrix.</param>
            <param name="columnsY">The number of columns in the y matrix.</param>
            <param name="result">Where to store the result of the multiplication.</param>
            <remarks>This is a simplified version of the BLAS GEMM routine with alpha
            set to 1.0 and beta set to 0.0, and x and y are not transposed.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.MatrixMultiplyWithUpdate(MathNet.Numerics.Algorithms.LinearAlgebra.Transpose,MathNet.Numerics.Algorithms.LinearAlgebra.Transpose,System.Double,System.Double[],System.Int32,System.Int32,System.Double[],System.Int32,System.Int32,System.Double,System.Double[])">
            <summary>
            Multiplies two matrices and updates another with the result. <c>c = alpha*op(a)*op(b) + beta*c</c>
            </summary>
            <param name="transposeA">How to transpose the <paramref name="a"/> matrix.</param>
            <param name="transposeB">How to transpose the <paramref name="b"/> matrix.</param>
            <param name="alpha">The value to scale <paramref name="a"/> matrix.</param>
            <param name="a">The a matrix.</param>
            <param name="rowsA">The number of rows in the <paramref name="a"/> matrix.</param>
            <param name="columnsA">The number of columns in the <paramref name="a"/> matrix.</param>
            <param name="b">The b matrix</param>
            <param name="rowsB">The number of rows in the <paramref name="b"/> matrix.</param>
            <param name="columnsB">The number of columns in the <paramref name="b"/> matrix.</param>
            <param name="beta">The value to scale the <paramref name="c"/> matrix.</param>
            <param name="c">The c matrix.</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.LUFactor(System.Double[],System.Int32,System.Int32[])">
            <summary>
            Computes the LUP factorization of A. P*A = L*U.
            </summary>
            <param name="data">An <paramref name="order"/> by <paramref name="order"/> matrix. The matrix is overwritten with the
            the LU factorization on exit. The lower triangular factor L is stored in under the diagonal of <paramref name="data"/> (the diagonal is always 1.0
            for the L factor). The upper triangular factor U is stored on and above the diagonal of <paramref name="data"/>.</param>
            <param name="order">The order of the square matrix <paramref name="data"/>.</param>
            <param name="ipiv">On exit, it contains the pivot indices. The size of the array must be <paramref name="order"/>.</param>
            <remarks>This is equivalent to the GETRF LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.LUInverse(System.Double[],System.Int32)">
            <summary>
            Computes the inverse of matrix using LU factorization.
            </summary>
            <param name="a">The N by N matrix to invert. Contains the inverse On exit.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <remarks>This is equivalent to the GETRF and GETRI LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.LUInverseFactored(System.Double[],System.Int32,System.Int32[])">
            <summary>
            Computes the inverse of a previously factored matrix.
            </summary>
            <param name="a">The LU factored N by N matrix.  Contains the inverse On exit.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <param name="ipiv">The pivot indices of <paramref name="a"/>.</param>
            <remarks>This is equivalent to the GETRI LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.LUInverse(System.Double[],System.Int32,System.Double[])">
            <summary>
            Computes the inverse of matrix using LU factorization.
            </summary>
            <param name="a">The N by N matrix to invert. Contains the inverse On exit.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <param name="work">The work array. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <remarks>This is equivalent to the GETRF and GETRI LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.LUInverseFactored(System.Double[],System.Int32,System.Int32[],System.Double[])">
            <summary>
            Computes the inverse of a previously factored matrix.
            </summary>
            <param name="a">The LU factored N by N matrix.  Contains the inverse On exit.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <param name="ipiv">The pivot indices of <paramref name="a"/>.</param>
            <param name="work">The work array. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <remarks>This is equivalent to the GETRI LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.LUSolve(System.Int32,System.Double[],System.Int32,System.Double[])">
            <summary>
            Solves A*X=B for X using LU factorization.
            </summary>
            <param name="columnsOfB">The number of columns of B.</param>
            <param name="a">The square matrix A.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <remarks>This is equivalent to the GETRF and GETRS LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.LUSolveFactored(System.Int32,System.Double[],System.Int32,System.Int32[],System.Double[])">
            <summary>
            Solves A*X=B for X using a previously factored A matrix.
            </summary>
            <param name="columnsOfB">The number of columns of B.</param>
            <param name="a">The factored A matrix.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <param name="ipiv">The pivot indices of <paramref name="a"/>.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <remarks>This is equivalent to the GETRS LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.CholeskyFactor(System.Double[],System.Int32)">
            <summary>
            Computes the Cholesky factorization of A.
            </summary>
            <param name="a">On entry, a square, positive definite matrix. On exit, the matrix is overwritten with the
            the Cholesky factorization.</param>
            <param name="order">The number of rows or columns in the matrix.</param>
            <remarks>This is equivalent to the POTRF LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.CholeskySolve(System.Double[],System.Int32,System.Double[],System.Int32)">
            <summary>
            Solves A*X=B for X using Cholesky factorization.
            </summary>
            <param name="a">The square, positive definite matrix A.</param>
            <param name="orderA">The number of rows and columns in A.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <param name="columnsB">The number of columns in the B matrix.</param>
            <remarks>This is equivalent to the POTRF add POTRS LAPACK routines.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.CholeskySolveFactored(System.Double[],System.Int32,System.Double[],System.Int32)">
            <summary>
            Solves A*X=B for X using a previously factored A matrix.
            </summary>
            <param name="a">The square, positive definite matrix A.</param>
            <param name="orderA">The number of rows and columns in A.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <param name="columnsB">The number of columns in the B matrix.</param>
            <remarks>This is equivalent to the POTRS LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.QRFactor(System.Double[],System.Int32,System.Int32,System.Double[],System.Double[])">
            <summary>
            Computes the QR factorization of A.
            </summary>
            <param name="r">On entry, it is the M by N A matrix to factor. On exit,
            it is overwritten with the R matrix of the QR factorization. </param>
            <param name="rowsR">The number of rows in the A matrix.</param>
            <param name="columnsR">The number of columns in the A matrix.</param>
            <param name="q">On exit, A M by M matrix that holds the Q matrix of the
            QR factorization.</param>
            <param name="tau">A min(m,n) vector. On exit, contains additional information
            to be used by the QR solve routine.</param>
            <remarks>This is similar to the GEQRF and ORGQR LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.QRFactor(System.Double[],System.Int32,System.Int32,System.Double[],System.Double[],System.Double[])">
            <summary>
            Computes the QR factorization of A.
            </summary>
            <param name="r">On entry, it is the M by N A matrix to factor. On exit,
            it is overwritten with the R matrix of the QR factorization. </param>
            <param name="rowsR">The number of rows in the A matrix.</param>
            <param name="columnsR">The number of columns in the A matrix.</param>
            <param name="q">On exit, A M by M matrix that holds the Q matrix of the 
            QR factorization.</param>
            <param name="tau">A min(m,n) vector. On exit, contains additional information
            to be used by the QR solve routine.</param>
            <param name="work">The work array. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <remarks>This is similar to the GEQRF and ORGQR LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.ThinQRFactor(System.Double[],System.Int32,System.Int32,System.Double[],System.Double[])">
            <summary>
            Computes the thin QR factorization of A where M &gt; N.
            </summary>
            <param name="q">On entry, it is the M by N A matrix to factor. On exit,
            it is overwritten with the Q matrix of the QR factorization.</param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="r">On exit, A N by N matrix that holds the R matrix of the
            QR factorization.</param>
            <param name="tau">A min(m,n) vector. On exit, contains additional information
            to be used by the QR solve routine.</param>
            <remarks>This is similar to the GEQRF and ORGQR LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.ThinQRFactor(System.Double[],System.Int32,System.Int32,System.Double[],System.Double[],System.Double[])">
            <summary>
            Computes the thin QR factorization of A where M &gt; N.
            </summary>
            <param name="q">On entry, it is the M by N A matrix to factor. On exit,
            it is overwritten with the Q matrix of the QR factorization.</param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="r">On exit, A N by N matrix that holds the R matrix of the
            QR factorization.</param>
            <param name="tau">A min(m,n) vector. On exit, contains additional information
            to be used by the QR solve routine.</param>
            <param name="work">The work array. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <remarks>This is similar to the GEQRF and ORGQR LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.QRSolve(System.Double[],System.Int32,System.Int32,System.Double[],System.Int32,System.Double[],MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Solves A*X=B for X using QR factorization of A.
            </summary>
            <param name="a">The A matrix.</param>
            <param name="rows">The number of rows in the A matrix.</param>
            <param name="columns">The number of columns in the A matrix.</param>
            <param name="b">The B matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
            <param name="method">The type of QR factorization to perform. <seealso cref="T:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod"/></param>
            <remarks>Rows must be greater or equal to columns.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.QRSolve(System.Double[],System.Int32,System.Int32,System.Double[],System.Int32,System.Double[],System.Double[],MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Solves A*X=B for X using QR factorization of A.
            </summary>
            <param name="a">The A matrix.</param>
            <param name="rows">The number of rows in the A matrix.</param>
            <param name="columns">The number of columns in the A matrix.</param>
            <param name="b">The B matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
            <param name="work">The work array. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <param name="method">The type of QR factorization to perform. <seealso cref="T:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod"/></param>
            <remarks>Rows must be greater or equal to columns.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.QRSolveFactored(System.Double[],System.Double[],System.Int32,System.Int32,System.Double[],System.Double[],System.Int32,System.Double[],MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Solves A*X=B for X using a previously QR factored matrix.
            </summary>
            <param name="q">The Q matrix obtained by calling <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.QRFactor(System.Double[],System.Int32,System.Int32,System.Double[],System.Double[])"/>.</param>
            <param name="r">The R matrix obtained by calling <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.QRFactor(System.Double[],System.Int32,System.Int32,System.Double[],System.Double[])"/>. </param>
            <param name="rowsR">The number of rows in the A matrix.</param>
            <param name="columnsR">The number of columns in the A matrix.</param>
            <param name="tau">Contains additional information on Q. Only used for the native solver
            and can be <c>null</c> for the managed provider.</param>
            <param name="b">The B matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
            <param name="method">The type of QR factorization to perform. <seealso cref="T:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod"/></param>
            <remarks>Rows must be greater or equal to columns.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.QRSolveFactored(System.Double[],System.Double[],System.Int32,System.Int32,System.Double[],System.Double[],System.Int32,System.Double[],System.Double[],MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Solves A*X=B for X using a previously QR factored matrix.
            </summary>
            <param name="q">The Q matrix obtained by QR factor. This is only used for the managed provider and can be
            <c>null</c> for the native provider. The native provider uses the Q portion stored in the R matrix.</param>
            <param name="r">The R matrix obtained by calling <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.QRFactor(System.Double[],System.Int32,System.Int32,System.Double[],System.Double[])"/>. </param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="tau">Contains additional information on Q. Only used for the native solver
            and can be <c>null</c> for the managed provider.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
            <param name="work">The work array - only used in the native provider. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <param name="method">The type of QR factorization to perform. <seealso cref="T:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod"/></param>
            <remarks>Rows must be greater or equal to columns.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.SingularValueDecomposition(System.Boolean,System.Double[],System.Int32,System.Int32,System.Double[],System.Double[],System.Double[])">
            <summary>
            Computes the singular value decomposition of A.
            </summary>
            <param name="computeVectors">Compute the singular U and VT vectors or not.</param>
            <param name="a">On entry, the M by N matrix to decompose. On exit, A may be overwritten.</param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="s">The singular values of A in ascending value.</param>
            <param name="u">If <paramref name="computeVectors"/> is <c>true</c>, on exit U contains the left
            singular vectors.</param>
            <param name="vt">If <paramref name="computeVectors"/> is <c>true</c>, on exit VT contains the transposed
            right singular vectors.</param>
            <remarks>This is equivalent to the GESVD LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.SvdSolve(System.Double[],System.Int32,System.Int32,System.Double[],System.Int32,System.Double[])">
            <summary>
            Solves A*X=B for X using the singular value decomposition of A.
            </summary>
            <param name="a">On entry, the M by N matrix to decompose.</param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="b">The B matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.SingularValueDecomposition(System.Boolean,System.Double[],System.Int32,System.Int32,System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
            Computes the singular value decomposition of A.
            </summary>
            <param name="computeVectors">Compute the singular U and VT vectors or not.</param>
            <param name="a">On entry, the M by N matrix to decompose. On exit, A may be overwritten.</param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="s">The singular values of A in ascending value.</param>
            <param name="u">If <paramref name="computeVectors"/> is <c>true</c>, on exit U contains the left
            singular vectors.</param>
            <param name="vt">If <paramref name="computeVectors"/> is <c>true</c>, on exit VT contains the transposed
            right singular vectors.</param>
            <param name="work">The work array. For real matrices, the work array should be at least
            Max(3*Min(M, N) + Max(M, N), 5*Min(M,N)). For complex matrices, 2*Min(M, N) + Max(M, N).
            On exit, work[0] contains the optimal work size value.</param>
            <remarks>This is equivalent to the GESVD LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.AddArrays(System.Double[],System.Double[],System.Double[])">
            <summary>
            Does a point wise add of two arrays <c>z = x + y</c>. This can be used
            to add vectors or matrices.
            </summary>
            <param name="x">The array x.</param>
            <param name="y">The array y.</param>
            <param name="result">The result of the addition.</param>
            <remarks>There is no equivalent BLAS routine, but many libraries
            provide optimized (parallel and/or vectorized) versions of this
            routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.SubtractArrays(System.Double[],System.Double[],System.Double[])">
            <summary>
            Does a point wise subtraction of two arrays <c>z = x - y</c>. This can be used
            to subtract vectors or matrices.
            </summary>
            <param name="x">The array x.</param>
            <param name="y">The array y.</param>
            <param name="result">The result of the subtraction.</param>
            <remarks>There is no equivalent BLAS routine, but many libraries
            provide optimized (parallel and/or vectorized) versions of this
            routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.PointWiseMultiplyArrays(System.Double[],System.Double[],System.Double[])">
            <summary>
            Does a point wise multiplication of two arrays <c>z = x * y</c>. This can be used
            to multiple elements of vectors or matrices.
            </summary>
            <param name="x">The array x.</param>
            <param name="y">The array y.</param>
            <param name="result">The result of the point wise multiplication.</param>
            <remarks>There is no equivalent BLAS routine, but many libraries
            provide optimized (parallel and/or vectorized) versions of this
            routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.PointWiseDivideArrays(System.Double[],System.Double[],System.Double[])">
            <summary>
            Does a point wise division of two arrays <c>z = x / y</c>. This can be used
            to divide elements of vectors or matrices.
            </summary>
            <param name="x">The array x.</param>
            <param name="y">The array y.</param>
            <param name="result">The result of the point wise division.</param>
            <remarks>There is no equivalent BLAS routine, but many libraries
            provide optimized (parallel and/or vectorized) versions of this
            routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.EigenDecomp(System.Boolean,System.Int32,System.Double[],System.Double[],System.Numerics.Complex[],System.Double[])">
            <summary>
            Computes the eigenvalues and eigenvectors of a matrix.
            </summary>
            <param name="isSymmetric">Wether the matrix is symmetric or not.</param>
            <param name="order">The order of the matrix.</param>
            <param name="matrix">The matrix to decompose. The lenth of the array must be order * order.</param>
            <param name="matrixEv">On output, the matrix contains the eigen vectors. The lenth of the array must be order * order.</param>
            <param name="vectorEv">On output, the eigen values (λ) of matrix in ascending value. The length of the arry must <paramref name="order"/>.</param>
            <param name="matrixD">On output, the block diagonal eigenvalue matrix. The lenth of the array must be order * order.</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.DotProduct(System.Single[],System.Single[])">
            <summary>
            Computes the dot product of x and y.
            </summary>
            <param name="x">The vector x.</param>
            <param name="y">The vector y.</param>
            <returns>The dot product of x and y.</returns>
            <remarks>This is equivalent to the DOT BLAS routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.AddVectorToScaledVector(System.Single[],System.Single,System.Single[],System.Single[])">
            <summary>
            Adds a scaled vector to another: <c>result = y + alpha*x</c>.
            </summary>
            <param name="y">The vector to update.</param>
            <param name="alpha">The value to scale <paramref name="x"/> by.</param>
            <param name="x">The vector to add to <paramref name="y"/>.</param>
            <param name="result">The result of the addition.</param>
            <remarks>This is similar to the AXPY BLAS routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.ScaleArray(System.Single,System.Single[],System.Single[])">
            <summary>
            Scales an array. Can be used to scale a vector and a matrix.
            </summary>
            <param name="alpha">The scalar.</param>
            <param name="x">The values to scale.</param>
            <param name="result">This result of the scaling.</param>
            <remarks>This is similar to the SCAL BLAS routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.MatrixMultiply(System.Single[],System.Int32,System.Int32,System.Single[],System.Int32,System.Int32,System.Single[])">
            <summary>
            Multiples two matrices. <c>result = x * y</c>
            </summary>
            <param name="x">The x matrix.</param>
            <param name="rowsX">The number of rows in the x matrix.</param>
            <param name="columnsX">The number of columns in the x matrix.</param>
            <param name="y">The y matrix.</param>
            <param name="rowsY">The number of rows in the y matrix.</param>
            <param name="columnsY">The number of columns in the y matrix.</param>
            <param name="result">Where to store the result of the multiplication.</param>
            <remarks>This is a simplified version of the BLAS GEMM routine with alpha
            set to 1.0f and beta set to 0.0f, and x and y are not transposed.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.MatrixMultiplyWithUpdate(MathNet.Numerics.Algorithms.LinearAlgebra.Transpose,MathNet.Numerics.Algorithms.LinearAlgebra.Transpose,System.Single,System.Single[],System.Int32,System.Int32,System.Single[],System.Int32,System.Int32,System.Single,System.Single[])">
            <summary>
            Multiplies two matrices and updates another with the result. <c>c = alpha*op(a)*op(b) + beta*c</c>
            </summary>
            <param name="transposeA">How to transpose the <paramref name="a"/> matrix.</param>
            <param name="transposeB">How to transpose the <paramref name="b"/> matrix.</param>
            <param name="alpha">The value to scale <paramref name="a"/> matrix.</param>
            <param name="a">The a matrix.</param>
            <param name="rowsA">The number of rows in the <paramref name="a"/> matrix.</param>
            <param name="columnsA">The number of columns in the <paramref name="a"/> matrix.</param>
            <param name="b">The b matrix</param>
            <param name="rowsB">The number of rows in the <paramref name="b"/> matrix.</param>
            <param name="columnsB">The number of columns in the <paramref name="b"/> matrix.</param>
            <param name="beta">The value to scale the <paramref name="c"/> matrix.</param>
            <param name="c">The c matrix.</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.LUFactor(System.Single[],System.Int32,System.Int32[])">
            <summary>
            Computes the LUP factorization of A. P*A = L*U.
            </summary>
            <param name="data">An <paramref name="order"/> by <paramref name="order"/> matrix. The matrix is overwritten with the
            the LU factorization on exit. The lower triangular factor L is stored in under the diagonal of <paramref name="data"/> (the diagonal is always 1.0f
            for the L factor). The upper triangular factor U is stored on and above the diagonal of <paramref name="data"/>.</param>
            <param name="order">The order of the square matrix <paramref name="data"/>.</param>
            <param name="ipiv">On exit, it contains the pivot indices. The size of the array must be <paramref name="order"/>.</param>
            <remarks>This is equivalent to the GETRF LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.LUInverse(System.Single[],System.Int32)">
            <summary>
            Computes the inverse of matrix using LU factorization.
            </summary>
            <param name="a">The N by N matrix to invert. Contains the inverse On exit.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <remarks>This is equivalent to the GETRF and GETRI LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.LUInverseFactored(System.Single[],System.Int32,System.Int32[])">
            <summary>
            Computes the inverse of a previously factored matrix.
            </summary>
            <param name="a">The LU factored N by N matrix.  Contains the inverse On exit.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <param name="ipiv">The pivot indices of <paramref name="a"/>.</param>
            <remarks>This is equivalent to the GETRI LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.LUInverse(System.Single[],System.Int32,System.Single[])">
            <summary>
            Computes the inverse of matrix using LU factorization.
            </summary>
            <param name="a">The N by N matrix to invert. Contains the inverse On exit.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <param name="work">The work array. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <remarks>This is equivalent to the GETRF and GETRI LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.LUInverseFactored(System.Single[],System.Int32,System.Int32[],System.Single[])">
            <summary>
            Computes the inverse of a previously factored matrix.
            </summary>
            <param name="a">The LU factored N by N matrix.  Contains the inverse On exit.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <param name="ipiv">The pivot indices of <paramref name="a"/>.</param>
            <param name="work">The work array. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <remarks>This is equivalent to the GETRI LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.LUSolve(System.Int32,System.Single[],System.Int32,System.Single[])">
            <summary>
            Solves A*X=B for X using LU factorization.
            </summary>
            <param name="columnsOfB">The number of columns of B.</param>
            <param name="a">The square matrix A.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <remarks>This is equivalent to the GETRF and GETRS LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.LUSolveFactored(System.Int32,System.Single[],System.Int32,System.Int32[],System.Single[])">
            <summary>
            Solves A*X=B for X using a previously factored A matrix.
            </summary>
            <param name="columnsOfB">The number of columns of B.</param>
            <param name="a">The factored A matrix.</param>
            <param name="order">The order of the square matrix <paramref name="a"/>.</param>
            <param name="ipiv">The pivot indices of <paramref name="a"/>.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <remarks>This is equivalent to the GETRS LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.CholeskyFactor(System.Single[],System.Int32)">
            <summary>
            Computes the Cholesky factorization of A.
            </summary>
            <param name="a">On entry, a square, positive definite matrix. On exit, the matrix is overwritten with the
            the Cholesky factorization.</param>
            <param name="order">The number of rows or columns in the matrix.</param>
            <remarks>This is equivalent to the POTRF LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.CholeskySolve(System.Single[],System.Int32,System.Single[],System.Int32)">
            <summary>
            Solves A*X=B for X using Cholesky factorization.
            </summary>
            <param name="a">The square, positive definite matrix A.</param>
            <param name="orderA">The number of rows and columns in A.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <param name="columnsB">The number of columns in the B matrix.</param>
            <remarks>This is equivalent to the POTRF add POTRS LAPACK routines.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.CholeskySolveFactored(System.Single[],System.Int32,System.Single[],System.Int32)">
            <summary>
            Solves A*X=B for X using a previously factored A matrix.
            </summary>
            <param name="a">The square, positive definite matrix A.</param>
            <param name="orderA">The number of rows and columns in A.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <param name="columnsB">The number of columns in the B matrix.</param>
            <remarks>This is equivalent to the POTRS LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.QRFactor(System.Single[],System.Int32,System.Int32,System.Single[],System.Single[])">
            <summary>
            Computes the QR factorization of A.
            </summary>
            <param name="r">On entry, it is the M by N A matrix to factor. On exit,
            it is overwritten with the R matrix of the QR factorization. </param>
            <param name="rowsR">The number of rows in the A matrix.</param>
            <param name="columnsR">The number of columns in the A matrix.</param>
            <param name="q">On exit, A M by M matrix that holds the Q matrix of the
            QR factorization.</param>
            <param name="tau">A min(m,n) vector. On exit, contains additional information
            to be used by the QR solve routine.</param>
            <remarks>This is similar to the GEQRF and ORGQR LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.QRFactor(System.Single[],System.Int32,System.Int32,System.Single[],System.Single[],System.Single[])">
            <summary>
            Computes the QR factorization of A.
            </summary>
            <param name="r">On entry, it is the M by N A matrix to factor. On exit,
            it is overwritten with the R matrix of the QR factorization. </param>
            <param name="rowsR">The number of rows in the A matrix.</param>
            <param name="columnsR">The number of columns in the A matrix.</param>
            <param name="q">On exit, A M by M matrix that holds the Q matrix of the 
            QR factorization.</param>
            <param name="tau">A min(m,n) vector. On exit, contains additional information
            to be used by the QR solve routine.</param>
            <param name="work">The work array. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <remarks>This is similar to the GEQRF and ORGQR LAPACK routines.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.QRSolve(System.Single[],System.Int32,System.Int32,System.Single[],System.Int32,System.Single[],MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Solves A*X=B for X using QR factorization of A.
            </summary>
            <param name="a">The A matrix.</param>
            <param name="rows">The number of rows in the A matrix.</param>
            <param name="columns">The number of columns in the A matrix.</param>
            <param name="b">The B matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
            <param name="method">The type of QR factorization to perform. <seealso cref="T:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod"/></param>
            <remarks>Rows must be greater or equal to columns.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.QRSolve(System.Single[],System.Int32,System.Int32,System.Single[],System.Int32,System.Single[],System.Single[],MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Solves A*X=B for X using QR factorization of A.
            </summary>
            <param name="a">The A matrix.</param>
            <param name="rows">The number of rows in the A matrix.</param>
            <param name="columns">The number of columns in the A matrix.</param>
            <param name="b">The B matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
            <param name="work">The work array. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <param name="method">The type of QR factorization to perform. <seealso cref="T:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod"/></param>
            <remarks>Rows must be greater or equal to columns.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.QRSolveFactored(System.Single[],System.Single[],System.Int32,System.Int32,System.Single[],System.Single[],System.Int32,System.Single[],MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Solves A*X=B for X using a previously QR factored matrix.
            </summary>
            <param name="q">The Q matrix obtained by calling <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.QRFactor(System.Single[],System.Int32,System.Int32,System.Single[],System.Single[])"/>.</param>
            <param name="r">The R matrix obtained by calling <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.QRFactor(System.Single[],System.Int32,System.Int32,System.Single[],System.Single[])"/>. </param>
            <param name="rowsR">The number of rows in the A matrix.</param>
            <param name="columnsR">The number of columns in the A matrix.</param>
            <param name="tau">Contains additional information on Q. Only used for the native solver
            and can be <c>null</c> for the managed provider.</param>
            <param name="b">The B matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
            <param name="method">The type of QR factorization to perform. <seealso cref="T:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod"/></param>
            <remarks>Rows must be greater or equal to columns.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.QRSolveFactored(System.Single[],System.Single[],System.Int32,System.Int32,System.Single[],System.Single[],System.Int32,System.Single[],System.Single[],MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Solves A*X=B for X using a previously QR factored matrix.
            </summary>
            <param name="q">The Q matrix obtained by QR factor. This is only used for the managed provider and can be
            <c>null</c> for the native provider. The native provider uses the Q portion stored in the R matrix.</param>
            <param name="r">The R matrix obtained by calling <see cref="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.QRFactor(System.Single[],System.Int32,System.Int32,System.Single[],System.Single[])"/>. </param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="tau">Contains additional information on Q. Only used for the native solver
            and can be <c>null</c> for the managed provider.</param>
            <param name="b">On entry the B matrix; on exit the X matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
            <param name="work">The work array - only used in the native provider. The array must have a length of at least N,
            but should be N*blocksize. The blocksize is machine dependent. On exit, work[0] contains the optimal
            work size value.</param>
            <param name="method">The type of QR factorization to perform. <seealso cref="T:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod"/></param>
            <remarks>Rows must be greater or equal to columns.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.SingularValueDecomposition(System.Boolean,System.Single[],System.Int32,System.Int32,System.Single[],System.Single[],System.Single[])">
            <summary>
            Computes the singular value decomposition of A.
            </summary>
            <param name="computeVectors">Compute the singular U and VT vectors or not.</param>
            <param name="a">On entry, the M by N matrix to decompose. On exit, A may be overwritten.</param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="s">The singular values of A in ascending value.</param>
            <param name="u">If <paramref name="computeVectors"/> is <c>true</c>, on exit U contains the left
            singular vectors.</param>
            <param name="vt">If <paramref name="computeVectors"/> is <c>true</c>, on exit VT contains the transposed
            right singular vectors.</param>
            <remarks>This is equivalent to the GESVD LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.SvdSolve(System.Single[],System.Int32,System.Int32,System.Single[],System.Int32,System.Single[])">
            <summary>
            Solves A*X=B for X using the singular value decomposition of A.
            </summary>
            <param name="a">On entry, the M by N matrix to decompose.</param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="b">The B matrix.</param>
            <param name="columnsB">The number of columns of B.</param>
            <param name="x">On exit, the solution matrix.</param>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.SingularValueDecomposition(System.Boolean,System.Single[],System.Int32,System.Int32,System.Single[],System.Single[],System.Single[],System.Single[])">
            <summary>
            Computes the singular value decomposition of A.
            </summary>
            <param name="computeVectors">Compute the singular U and VT vectors or not.</param>
            <param name="a">On entry, the M by N matrix to decompose. On exit, A may be overwritten.</param>
            <param name="rowsA">The number of rows in the A matrix.</param>
            <param name="columnsA">The number of columns in the A matrix.</param>
            <param name="s">The singular values of A in ascending value.</param>
            <param name="u">If <paramref name="computeVectors"/> is <c>true</c>, on exit U contains the left
            singular vectors.</param>
            <param name="vt">If <paramref name="computeVectors"/> is <c>true</c>, on exit VT contains the transposed
            right singular vectors.</param>
            <param name="work">The work array. For real matrices, the work array should be at least
            Max(3*Min(M, N) + Max(M, N), 5*Min(M,N)). For complex matrices, 2*Min(M, N) + Max(M, N).
            On exit, work[0] contains the optimal work size value.</param>
            <remarks>This is equivalent to the GESVD LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.AddArrays(System.Single[],System.Single[],System.Single[])">
            <summary>
            Does a point wise add of two arrays <c>z = x + y</c>. This can be used
            to add vectors or matrices.
            </summary>
            <param name="x">The array x.</param>
            <param name="y">The array y.</param>
            <param name="result">The result of the addition.</param>
            <remarks>There is no equivalent BLAS routine, but many libraries
            provide optimized (parallel and/or vectorized) versions of this
            routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.SubtractArrays(System.Single[],System.Single[],System.Single[])">
            <summary>
            Does a point wise subtraction of two arrays <c>z = x - y</c>. This can be used
            to subtract vectors or matrices.
            </summary>
            <param name="x">The array x.</param>
            <param name="y">The array y.</param>
            <param name="result">The result of the subtraction.</param>
            <remarks>There is no equivalent BLAS routine, but many libraries
            provide optimized (parallel and/or vectorized) versions of this
            routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.PointWiseMultiplyArrays(System.Single[],System.Single[],System.Single[])">
            <summary>
            Does a point wise multiplication of two arrays <c>z = x * y</c>. This can be used
            to multiple elements of vectors or matrices.
            </summary>
            <param name="x">The array x.</param>
            <param name="y">The array y.</param>
            <param name="result">The result of the point wise multiplication.</param>
            <remarks>There is no equivalent BLAS routine, but many libraries
            provide optimized (parallel and/or vectorized) versions of this
            routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.PointWiseDivideArrays(System.Single[],System.Single[],System.Single[])">
            <summary>
            Does a point wise division of two arrays <c>z = x / y</c>. This can be used
            to divide elements of vectors or matrices.
            </summary>
            <param name="x">The array x.</param>
            <param name="y">The array y.</param>
            <param name="result">The result of the point wise division.</param>
            <remarks>There is no equivalent BLAS routine, but many libraries
            provide optimized (parallel and/or vectorized) versions of this
            routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.MklLinearAlgebraProvider.EigenDecomp(System.Boolean,System.Int32,System.Single[],System.Single[],System.Numerics.Complex[],System.Single[])">
            <summary>
            Computes the eigenvalues and eigenvectors of a matrix.
            </summary>
            <param name="isSymmetric">Wether the matrix is symmetric or not.</param>
            <param name="order">The order of the matrix.</param>
            <param name="matrix">The matrix to decompose. The lenth of the array must be order * order.</param>
            <param name="matrixEv">On output, the matrix contains the eigen vectors. The lenth of the array must be order * order.</param>
            <param name="vectorEv">On output, the eigen values (λ) of matrix in ascending value. The length of the arry must <paramref name="order"/>.</param>
            <param name="matrixD">On output, the block diagonal eigenvalue matrix. The lenth of the array must be order * order.</param>
        </member>
        <member name="T:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.SafeNativeMethods">
            <summary>
            P/Invoke methods to the native math libraries.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Algorithms.LinearAlgebra.Mkl.SafeNativeMethods.DllName">
            <summary>
            Name of the native DLL.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.ArrayExtensions">
            <summary>
            Useful extension methods for Arrays.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ArrayExtensions.Copy(System.Double[],System.Double[])">
            <summary>
            Copies the values from on array to another.
            </summary>
            <param name="source">The source array.</param>
            <param name="dest">The destination array.</param>
        </member>
        <member name="M:MathNet.Numerics.ArrayExtensions.Copy(System.Single[],System.Single[])">
            <summary>
            Copies the values from on array to another.
            </summary>
            <param name="source">The source array.</param>
            <param name="dest">The destination array.</param>
        </member>
        <member name="M:MathNet.Numerics.ArrayExtensions.Copy(System.Numerics.Complex[],System.Numerics.Complex[])">
            <summary>
            Copies the values from on array to another.
            </summary>
            <param name="source">The source array.</param>
            <param name="dest">The destination array.</param>
        </member>
        <member name="M:MathNet.Numerics.ArrayExtensions.Copy(MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[])">
            <summary>
            Copies the values from on array to another.
            </summary>
            <param name="source">The source array.</param>
            <param name="dest">The destination array.</param>
        </member>
        <member name="T:MathNet.Numerics.Combinatorics">
            <summary>
            Enumerative Combinatorics and Counting.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Combinatorics.Variations(System.Int32,System.Int32)">
            <summary>
            Counts the number of possible variations without repetition.
            The order matters and each object can be chosen only once.
            </summary>
            <param name="n">Number of elements in the set.</param>
            <param name="k">Number of elements to choose from the set. Each element is chosen at most once.</param>
            <returns>Maximum number of distinct variations.</returns>
        </member>
        <member name="M:MathNet.Numerics.Combinatorics.VariationsWithRepetition(System.Int32,System.Int32)">
            <summary>
            Counts the number of possible variations with repetition.
            The order matters and each object can be chosen more than once.
            </summary>
            <param name="n">Number of elements in the set.</param>
            <param name="k">Number of elements to choose from the set. Each element is chosen 0, 1 or multiple times.</param>
            <returns>Maximum number of distinct variations with repetition.</returns>
        </member>
        <member name="M:MathNet.Numerics.Combinatorics.Combinations(System.Int32,System.Int32)">
            <summary>
            Counts the number of possible combinations without repetition.
            The order does not matter and each object can be chosen only once.
            </summary>
            <param name="n">Number of elements in the set.</param>
            <param name="k">Number of elements to choose from the set. Each element is chosen at most once.</param>
            <returns>Maximum number of combinations.</returns>
        </member>
        <member name="M:MathNet.Numerics.Combinatorics.CombinationsWithRepetition(System.Int32,System.Int32)">
            <summary>
            Counts the number of possible combinations with repetition.
            The order does not matter and an object can be chosen more than once.
            </summary>
            <param name="n">Number of elements in the set.</param>
            <param name="k">Number of elements to choose from the set. Each element is chosen 0, 1 or multiple times.</param>
            <returns>Maximum number of combinations with repetition.</returns>
        </member>
        <member name="M:MathNet.Numerics.Combinatorics.Permutations(System.Int32)">
            <summary>
            Counts the number of possible permutations (without repetition). 
            </summary>
            <param name="n">Number of (distinguishable) elements in the set.</param>
            <returns>Maximum number of permutations without repetition.</returns>
        </member>
        <member name="T:MathNet.Numerics.ComplexExtensions">
            <summary>
            Extension methods for the Complex type provided by System.Numerics
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.MagnitudeSquared(System.Numerics.Complex)">
            <summary>
            Gets the squared magnitude of the <c>Complex</c> number.
            </summary>
            <param name="complex">The <see cref="T:System.Numerics.Complex"/> number to perfom this operation on.</param>
            <returns>The squared magnitude of the <c>Complex</c> number.</returns>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.Sign(System.Numerics.Complex)">
            <summary>
            Gets the unity of this complex (same argument, but on the unit circle; exp(I*arg))
            </summary>
            <returns>The unity of this <c>Complex</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.Conjugate(System.Numerics.Complex)">
            <summary>
            Gets the conjugate of the <c>Complex</c> number.
            </summary>
            <param name="complex">The <see cref="T:System.Numerics.Complex"/> number to perfom this operation on.</param>
            <remarks>
            The semantic of <i>setting the conjugate</i> is such that
            <code>
            // a, b of type Complex32
            a.Conjugate = b;
            </code>
            is equivalent to
            <code>
            // a, b of type Complex32
            a = b.Conjugate
            </code>
            </remarks>
            <returns>The conjugate of the <see cref="T:System.Numerics.Complex"/> number.</returns>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.Reciprocal(System.Numerics.Complex)">
            <summary>
            Returns the multiplicative inverse of a complex number.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.Exponential(System.Numerics.Complex)">
            <summary>
            Exponential of this <c>Complex</c> (exp(x), E^x).
            </summary>
            <param name="complex">The <see cref="T:System.Numerics.Complex"/> number to perfom this operation on.</param>
            <returns>
            The exponential of this complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.NaturalLogarithm(System.Numerics.Complex)">
            <summary>
            Natural Logarithm of this <c>Complex</c> (Base E).
            </summary>
            <param name="complex">The <see cref="T:System.Numerics.Complex"/> number to perfom this operation on.</param>
            <returns>
            The natural logarithm of this complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.CommonLogarithm(System.Numerics.Complex)">
            <summary>
            Common Logarithm of this <c>Complex</c> (Base 10).
            </summary>
            <returns>The common logarithm of this complex number.</returns>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.Logarithm(System.Numerics.Complex,System.Double)">
            <summary>
            Logarithm of this <c>Complex</c> with custom base.
            </summary>
            <returns>The logarithm of this complex number.</returns>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.Power(System.Numerics.Complex,System.Numerics.Complex)">
            <summary>
            Raise this <c>Complex</c> to the given value.
            </summary>
            <param name="complex">The <see cref="T:System.Numerics.Complex"/> number to perfom this operation on.</param>
            <param name="exponent">
            The exponent.
            </param>
            <returns>
            The complex number raised to the given exponent.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.Root(System.Numerics.Complex,System.Numerics.Complex)">
            <summary>
            Raise this <c>Complex</c> to the inverse of the given value.
            </summary>
            <param name="complex">The <see cref="T:System.Numerics.Complex"/> number to perfom this operation on.</param>
            <param name="rootExponent">
            The root exponent.
            </param>
            <returns>
            The complex raised to the inverse of the given exponent.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.Square(System.Numerics.Complex)">
            <summary>
            The Square (power 2) of this <c>Complex</c>
            </summary>
            <param name="complex">The <see cref="T:System.Numerics.Complex"/> number to perfom this operation on.</param>
            <returns>
            The square of this complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.SquareRoot(System.Numerics.Complex)">
            <summary>
            The Square Root (power 1/2) of this <c>Complex</c>
            </summary>
            <param name="complex">The <see cref="T:System.Numerics.Complex"/> number to perfom this operation on.</param>
            <returns>
            The square root of this complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.IsZero(System.Numerics.Complex)">
            <summary>
            Gets a value indicating whether the <c>Complex32</c> is zero.
            </summary>
            <param name="complex">The <see cref="T:System.Numerics.Complex"/> number to perfom this operation on.</param>
            <returns><c>true</c> if this instance is zero; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.IsOne(System.Numerics.Complex)">
            <summary>
            Gets a value indicating whether the <c>Complex32</c> is one.
            </summary>
            <param name="complex">The <see cref="T:System.Numerics.Complex"/> number to perfom this operation on.</param>
            <returns><c>true</c> if this instance is one; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.IsImaginaryOne(System.Numerics.Complex)">
            <summary>
            Gets a value indicating whether the <c>Complex32</c> is the imaginary unit.
            </summary>
            <returns><c>true</c> if this instance is ImaginaryOne; otherwise, <c>false</c>.</returns>
            <param name="complex">The <see cref="T:System.Numerics.Complex"/> number to perfom this operation on.</param>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.IsNaN(System.Numerics.Complex)">
            <summary>
            Gets a value indicating whether the provided <c>Complex32</c>evaluates
            to a value that is not a number.
            </summary>
            <param name="complex">The <see cref="T:System.Numerics.Complex"/> number to perfom this operation on.</param>
            <returns>
            <c>true</c> if this instance is <c>NaN</c>; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.IsInfinity(System.Numerics.Complex)">
            <summary>
            Gets a value indicating whether the provided <c>Complex32</c> evaluates to an
            infinite value.
            </summary>
            <param name="complex">The <see cref="T:System.Numerics.Complex"/> number to perfom this operation on.</param>
            <returns>
                <c>true</c> if this instance is infinite; otherwise, <c>false</c>.
            </returns>
            <remarks>
            True if it either evaluates to a complex infinity
            or to a directed infinity.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.IsReal(System.Numerics.Complex)">
            <summary>
            Gets a value indicating whether the provided <c>Complex32</c> is real.
            </summary>
            <param name="complex">The <see cref="T:System.Numerics.Complex"/> number to perfom this operation on.</param>
            <returns><c>true</c> if this instance is a real number; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.IsRealNonNegative(System.Numerics.Complex)">
            <summary>
            Gets a value indicating whether the provided <c>Complex32</c> is real and not negative, that is &gt;= 0.
            </summary>
            <param name="complex">The <see cref="T:System.Numerics.Complex"/> number to perfom this operation on.</param>
            <returns>
                <c>true</c> if this instance is real nonnegative number; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.Norm(System.Numerics.Complex)">
            <summary>
            Returns a Norm of a value of this type, which is appropriate for measuring how
            close this value is to zero.
            </summary>
            <param name="complex">The <see cref="T:System.Numerics.Complex"/> number to perfom this operation on.</param>
            <returns>A norm of this value.</returns>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.NormOfDifference(System.Numerics.Complex,System.Numerics.Complex)">
            <summary>
            Returns a Norm of the difference of two values of this type, which is
            appropriate for measuring how close together these two values are.
            </summary>
            <param name="complex">The <see cref="T:System.Numerics.Complex"/> number to perfom this operation on.</param>
            <param name="otherValue">The value to compare with.</param>
            <returns>A norm of the difference between this and the other value.</returns>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.ToComplex(System.String)">
            <summary>
            Creates a complex number based on a string. The string can be in the
            following formats (without the quotes): 'n', 'ni', 'n +/- ni',
            'ni +/- n', 'n,n', 'n,ni,' '(n,n)', or '(n,ni)', where n is a double.
            </summary>
            <returns>
            A complex number containing the value specified by the given string.
            </returns>
            <param name="value">
            The string to parse.
            </param>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.ToComplex(System.String,System.IFormatProvider)">
            <summary>
            Creates a complex number based on a string. The string can be in the
            following formats (without the quotes): 'n', 'ni', 'n +/- ni',
            'ni +/- n', 'n,n', 'n,ni,' '(n,n)', or '(n,ni)', where n is a double.
            </summary>
            <returns>
            A complex number containing the value specified by the given string.
            </returns>
            <param name="value">
            the string to parse.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific
            formatting information.
            </param>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.ParsePart(System.Collections.Generic.LinkedListNode{System.String}@,System.Boolean@,System.IFormatProvider)">
            <summary>
            Parse a part (real or complex) from a complex number.
            </summary>
            <param name="token">Start Token.</param>
            <param name="imaginary">Is set to <c>true</c> if the part identified itself as being imaginary.</param>
            <param name="format">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific
            formatting information.
            </param>
            <returns>Resulting part as double.</returns>
            <exception cref="T:System.FormatException"/>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.TryToComplex(System.String,System.Numerics.Complex@)">
            <summary>
            Converts the string representation of a complex number to a double-precision complex number equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing a complex number to convert.
            </param>
            <param name="result">
            The parsed value.
            </param>
            <returns>
            If the conversion succeeds, the result will contain a complex number equivalent to value.
            Otherwise the result will contain Complex.Zero.  This parameter is passed uninitialized.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.TryToComplex(System.String,System.IFormatProvider,System.Numerics.Complex@)">
            <summary>
            Converts the string representation of a complex number to double-precision complex number equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing a complex number to convert.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about value.
            </param>
            <param name="result">
            The parsed value.
            </param>
            <returns>
            If the conversion succeeds, the result will contain a complex number equivalent to value.
            Otherwise the result will contain complex32.Zero.  This parameter is passed uninitialized
            </returns>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.ToComplex32(System.String)">
            <summary>
            Creates a <c>Complex32</c> number based on a string. The string can be in the
            following formats (without the quotes): 'n', 'ni', 'n +/- ni',
            'ni +/- n', 'n,n', 'n,ni,' '(n,n)', or '(n,ni)', where n is a double.
            </summary>
            <returns>
            A complex number containing the value specified by the given string.
            </returns>
            <param name="value">
            the string to parse.
            </param>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.ToComplex32(System.String,System.IFormatProvider)">
            <summary>
            Creates a <c>Complex32</c> number based on a string. The string can be in the
            following formats (without the quotes): 'n', 'ni', 'n +/- ni',
            'ni +/- n', 'n,n', 'n,ni,' '(n,n)', or '(n,ni)', where n is a double.
            </summary>
            <returns>
            A complex number containing the value specified by the given string.
            </returns>
            <param name="value">
            the string to parse.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific
            formatting information.
            </param>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.TryToComplex32(System.String,MathNet.Numerics.Complex32@)">
            <summary>
            Converts the string representation of a complex number to a single-precision complex number equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing a complex number to convert.
            </param>
            <param name="result">
            The parsed value.
            </param>
            <returns>
            If the conversion succeeds, the result will contain a complex number equivalent to value.
            Otherwise the result will contain complex32.Zero.  This parameter is passed uninitialized.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.TryToComplex32(System.String,System.IFormatProvider,MathNet.Numerics.Complex32@)">
            <summary>
            Converts the string representation of a complex number to single-precision complex number equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing a complex number to convert.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about value.
            </param>
            <param name="result">
            The parsed value.
            </param>
            <returns>
            If the conversion succeeds, the result will contain a complex number equivalent to value.
            Otherwise the result will contain Complex.Zero.  This parameter is passed uninitialized.
            </returns>
        </member>
        <member name="T:MathNet.Numerics.Constants">
            <summary>
            A collection of frequently used mathematical constants.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.E">
            <summary>The number e</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Log2E">
            <summary>The number log[2](e)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Log10E">
            <summary>The number log[10](e)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Ln2">
            <summary>The number log[e](2)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Ln10">
            <summary>The number log[e](10)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.LnPi">
            <summary>The number log[e](pi)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Ln2PiOver2">
            <summary>The number log[e](2*pi)/2</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.InvE">
            <summary>The number 1/e</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.SqrtE">
            <summary>The number sqrt(e)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Sqrt2">
            <summary>The number sqrt(2)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Sqrt1Over2">
            <summary>The number sqrt(1/2) = 1/sqrt(2) = sqrt(2)/2</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.HalfSqrt3">
            <summary>The number sqrt(3)/2</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Pi">
            <summary>The number pi</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Pi2">
            <summary>The number 2*pi</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.OneOverPi">
            <summary>The number 1/pi</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.PiOver2">
            <summary>The number pi/2</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.PiOver4">
            <summary>The number pi/4</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.SqrtPi">
            <summary>The number sqrt(pi)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Sqrt2Pi">
            <summary>The number sqrt(2pi)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Sqrt2PiE">
            <summary>The number sqrt(2*pi*e)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.LogSqrt2Pi">
            <summary>The number log(sqrt(2*pi))</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.LogSqrt2PiE">
            <summary>The number log(sqrt(2*pi*e))</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.LogTwoSqrtEOverPi">
            <summary>The number log(2 * sqrt(e / pi))</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.InvPi">
            <summary>The number 1/pi</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.TwoInvPi">
            <summary>The number 2/pi</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.InvSqrtPi">
            <summary>The number 1/sqrt(pi)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.InvSqrt2Pi">
            <summary>The number 1/sqrt(2pi)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.TwoInvSqrtPi">
            <summary>The number 2/sqrt(pi)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.TwoSqrtEOverPi">
            <summary>The number 2 * sqrt(e / pi)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Degree">
            <summary>The number (pi)/180 - factor to convert from Degree (deg) to Radians (rad).</summary>
            <seealso cref="M:MathNet.Numerics.Trig.DegreeToRadian(System.Double)"/>
            <seealso cref="M:MathNet.Numerics.Trig.RadianToDegree(System.Double)"/>
        </member>
        <member name="F:MathNet.Numerics.Constants.Grad">
            <summary>The number (pi)/200 - factor to convert from NewGrad (grad) to Radians (rad).</summary>
            <seealso cref="M:MathNet.Numerics.Trig.GradToRadian(System.Double)"/>
            <seealso cref="M:MathNet.Numerics.Trig.RadianToGrad(System.Double)"/>
        </member>
        <member name="F:MathNet.Numerics.Constants.PowerDecibel">
            <summary>The number ln(10)/20 - factor to convert from Power Decibel (dB) to Neper (Np). Use this version when the Decibel represent a power gain but the compared values are not powers (e.g. amplitude, current, voltage).</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.NeutralDecibel">
            <summary>The number ln(10)/10 - factor to convert from Neutral Decibel (dB) to Neper (Np). Use this version when either both or neither of the Decibel and the compared values represent powers.</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Catalan">
            <summary>The Catalan constant</summary>
            <remarks>Sum(k=0 -> inf){ (-1)^k/(2*k + 1)2 }</remarks>
        </member>
        <member name="F:MathNet.Numerics.Constants.EulerMascheroni">
            <summary>The Euler-Mascheroni constant</summary>
            <remarks>lim(n -> inf){ Sum(k=1 -> n) { 1/k - log(n) } }</remarks>
        </member>
        <member name="F:MathNet.Numerics.Constants.GoldenRatio">
            <summary>The number (1+sqrt(5))/2, also known as the golden ratio</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Glaisher">
            <summary>The Glaisher constant</summary>
            <remarks>e^(1/12 - Zeta(-1))</remarks>
        </member>
        <member name="F:MathNet.Numerics.Constants.Khinchin">
            <summary>The Khinchin constant</summary>
            <remarks>prod(k=1 -> inf){1+1/(k*(k+2))^log(k,2)}</remarks>
        </member>
        <member name="F:MathNet.Numerics.Constants.SizeOfDouble">
            <summary>
            The size of a double in bytes.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.SizeOfInt">
            <summary>
            The size of an int in bytes.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.SizeOfFloat">
            <summary>
            The size of a float in bytes.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.SizeOfComplex">
            <summary>
            The size of a Complex in bytes.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.SizeOfComplex32">
            <summary>
            The size of a Complex in bytes.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.SpeedOfLight">
            <summary>Speed of Light in Vacuum: c_0 = 2.99792458e8 [m s^-1] (defined, exact; 2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.MagneticPermeability">
            <summary>Magnetic Permeability in Vacuum: mu_0 = 4*Pi * 10^-7 [N A^-2 = kg m A^-2 s^-2] (defined, exact; 2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ElectricPermittivity">
            <summary>Electric Permittivity in Vacuum: epsilon_0 = 1/(mu_0*c_0^2) [F m^-1 = A^2 s^4 kg^-1 m^-3] (defined, exact; 2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.CharacteristicImpedanceVacuum">
            <summary>Characteristic Impedance of Vacuum: Z_0 = mu_0*c_0 [Ohm = m^2 kg s^-3 A^-2] (defined, exact; 2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.GravitationalConstant">
            <summary>Newtonian Constant of Gravitation: G = 6.67429e-11 [m^3 kg^-1 s^-2] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.PlancksConstant">
            <summary>Planck's constant: h = 6.62606896e-34 [J s = m^2 kg s^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.DiracsConstant">
            <summary>Reduced Planck's constant: h_bar = h / (2*Pi) [J s = m^2 kg s^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.PlancksMass">
            <summary>Planck mass: m_p = (h_bar*c_0/G)^(1/2) [kg] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.PlancksTemperature">
            <summary>Planck temperature: T_p = (h_bar*c_0^5/G)^(1/2)/k [K] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.PlancksLength">
            <summary>Planck length: l_p = h_bar/(m_p*c_0) [m] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.PlancksTime">
            <summary>Planck time: t_p = l_p/c_0 [s] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ElementaryCharge">
            <summary>Elementary Electron Charge: e = 1.602176487e-19 [C = A s] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.MagneticFluxQuantum">
            <summary>Magnetic Flux Quantum: theta_0 = h/(2*e) [Wb = m^2 kg s^-2 A^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ConductanceQuantum">
            <summary>Conductance Quantum: G_0 = 2*e^2/h [S = m^-2 kg^-1 s^3 A^2] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.JosephsonConstant">
            <summary>Josephson Constant: K_J = 2*e/h [Hz V^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.VonKlitzingConstant">
            <summary>Von Klitzing Constant: R_K = h/e^2 [Ohm = m^2 kg s^-3 A^-2] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.BohrMagneton">
            <summary>Bohr Magneton: mu_B = e*h_bar/2*m_e [J T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.NuclearMagneton">
            <summary>Nuclear Magneton: mu_N = e*h_bar/2*m_p [J T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.FineStructureConstant">
            <summary>Fine Structure Constant: alpha = e^2/4*Pi*e_0*h_bar*c_0 [1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.RydbergConstant">
            <summary>Rydberg Constant: R_infty = alpha^2*m_e*c_0/2*h [m^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.BohrRadius">
            <summary>Bor Radius: a_0 = alpha/4*Pi*R_infty [m] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.HartreeEnergy">
            <summary>Hartree Energy: E_h = 2*R_infty*h*c_0 [J] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.QuantumOfCirculation">
            <summary>Quantum of Circulation: h/2*m_e [m^2 s^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.FermiCouplingConstant">
            <summary>Fermi Coupling Constant: G_F/(h_bar*c_0)^3 [GeV^-2] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.WeakMixingAngle">
            <summary>Weak Mixin Angle: sin^2(theta_W) [1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ElectronMass">
            <summary>Electron Mass: [kg] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ElectronMassEnergyEquivalent">
            <summary>Electron Mass Energy Equivalent: [J] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ElectronMolarMass">
            <summary>Electron Molar Mass: [kg mol^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ComptonWavelength">
            <summary>Electron Compton Wavelength: [m] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ClassicalElectronRadius">
            <summary>Classical Electron Radius: [m] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ThomsonCrossSection">
            <summary>Tomson Cross Section: [m^2] (2002 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ElectronMagneticMoment">
            <summary>Electron Magnetic Moment: [J T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ElectronGFactor">
            <summary>Electon G-Factor: [1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.MuonMass">
            <summary>Muon Mass: [kg] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.MuonMassEnegryEquivalent">
            <summary>Muon Mass Energy Equivalent: [J] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.MuonMolarMass">
            <summary>Muon Molar Mass: [kg mol^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.MuonComptonWavelength">
            <summary>Muon Compton Wavelength: [m] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.MuonMagneticMoment">
            <summary>Muon Magnetic Moment: [J T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.MuonGFactor">
            <summary>Muon G-Factor: [1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.TauMass">
            <summary>Tau Mass: [kg] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.TauMassEnergyEquivalent">
            <summary>Tau Mass Energy Equivalent: [J] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.TauMolarMass">
            <summary>Tau Molar Mass: [kg mol^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.TauComptonWavelength">
            <summary>Tau Compton Wavelength: [m] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ProtonMass">
            <summary>Proton Mass: [kg] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ProtonMassEnergyEquivalent">
            <summary>Proton Mass Energy Equivalent: [J] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ProtonMolarMass">
            <summary>Proton Molar Mass: [kg mol^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ProtonComptonWavelength">
            <summary>Proton Compton Wavelength: [m] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ProtonMagneticMoment">
            <summary>Proton Magnetic Moment: [J T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ProtonGFactor">
            <summary>Proton G-Factor: [1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ShieldedProtonMagneticMoment">
            <summary>Proton Shielded Magnetic Moment: [J T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ProtonGyromagneticRatio">
            <summary>Proton Gyro-Magnetic Ratio: [s^-1 T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ShieldedProtonGyromagneticRatio">
            <summary>Proton Shielded Gyro-Magnetic Ratio: [s^-1 T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.NeutronMass">
            <summary>Neutron Mass: [kg] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.NeutronMassEnegryEquivalent">
            <summary>Neutron Mass Energy Equivalent: [J] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.NeutronMolarMass">
            <summary>Neutron Molar Mass: [kg mol^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.NeutronComptonWavelength">
            <summary>Neuron Compton Wavelength: [m] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.NeutronMagneticMoment">
            <summary>Neutron Magnetic Moment: [J T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.NeutronGFactor">
            <summary>Neutron G-Factor: [1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.NeutronGyromagneticRatio">
            <summary>Neutron Gyro-Magnetic Ratio: [s^-1 T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.DeuteronMass">
            <summary>Deuteron Mass: [kg] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.DeuteronMassEnegryEquivalent">
            <summary>Deuteron Mass Energy Equivalent: [J] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.DeuteronMolarMass">
            <summary>Deuteron Molar Mass: [kg mol^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.DeuteronMagneticMoment">
            <summary>Deuteron Magnetic Moment: [J T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.HelionMass">
            <summary>Helion Mass: [kg] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.HelionMassEnegryEquivalent">
            <summary>Helion Mass Energy Equivalent: [J] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.HelionMolarMass">
            <summary>Helion Molar Mass: [kg mol^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Avogadro">
            <summary>Avogadro constant: [mol^-1] (2010 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Yotta">
            <summary>The SI prefix factor corresponding to 1 000 000 000 000 000 000 000 000</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Zetta">
            <summary>The SI prefix factor corresponding to 1 000 000 000 000 000 000 000</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Exa">
            <summary>The SI prefix factor corresponding to 1 000 000 000 000 000 000</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Peta">
            <summary>The SI prefix factor corresponding to 1 000 000 000 000 000</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Tera">
            <summary>The SI prefix factor corresponding to 1 000 000 000 000</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Giga">
            <summary>The SI prefix factor corresponding to 1 000 000 000</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Mega">
            <summary>The SI prefix factor corresponding to 1 000 000</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Kilo">
            <summary>The SI prefix factor corresponding to 1 000</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Hecto">
            <summary>The SI prefix factor corresponding to 100</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Deca">
            <summary>The SI prefix factor corresponding to 10</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Deci">
            <summary>The SI prefix factor corresponding to 0.1</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Centi">
            <summary>The SI prefix factor corresponding to 0.01</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Milli">
            <summary>The SI prefix factor corresponding to 0.001</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Micro">
            <summary>The SI prefix factor corresponding to 0.000 001</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Nano">
            <summary>The SI prefix factor corresponding to 0.000 000 001</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Pico">
            <summary>The SI prefix factor corresponding to 0.000 000 000 001</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Femto">
            <summary>The SI prefix factor corresponding to 0.000 000 000 000 001</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Atto">
            <summary>The SI prefix factor corresponding to 0.000 000 000 000 000 001</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Zepto">
            <summary>The SI prefix factor corresponding to 0.000 000 000 000 000 000 001</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Yocto">
            <summary>The SI prefix factor corresponding to 0.000 000 000 000 000 000 000 001</summary>
        </member>
        <member name="T:MathNet.Numerics.Control">
            <summary>
            Sets parameters for the library.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Control.ParallelizeOperation(System.Int32)">
            <summary>
            Given the number elements, should the operation be parallelized.
            </summary>
            <param name="elements">The number elements to check.</param>
            <returns><c>true</c> if the operation should be parallelized; <c>false</c> otherwise.</returns>
        </member>
        <member name="P:MathNet.Numerics.Control.CheckDistributionParameters">
            <summary>
            Gets or sets a value indicating whether the distribution classes check validate each parameter.
            For the multivariate distributions this could involve an expensive matrix factorization.
            The default setting of this property is <c>true</c>.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Control.ThreadSafeRandomNumberGenerators">
            <summary>
            Gets or sets a value indicating whether to use thread safe random number generators (RNG).
            Thread safe RNG about two and half time slower than non-thread safe RNG. 
            </summary>
            <value>
                <c>true</c> to use thread safe random number generators ; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MathNet.Numerics.Control.DisableParallelization">
            <summary>
            Gets or sets a value indicating whether parallelization shall be disabled globally.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Control.LinearAlgebraProvider">
            <summary>
            Gets or sets the linear algebra provider.
            </summary>
            <value>The linear algebra provider.</value>
        </member>
        <member name="P:MathNet.Numerics.Control.NumberOfParallelWorkerThreads">
            <summary>
            Gets or sets a value indicating how many parallel worker threads shall be used
            when parallelization is applicable.
            </summary>
            <remarks>Default to the number of processor cores, must be between 1 and 1024 (inclusive).</remarks>
        </member>
        <member name="P:MathNet.Numerics.Control.BlockSize">
            <summary>
            Gets or sets the the block size to use for
            the native linear algebra provider.
            </summary>
            <value>The block size. Default 512, must be at least 32.</value>
        </member>
        <member name="P:MathNet.Numerics.Control.ParallelizeOrder">
            <summary>
            Gets or sets the order of the matrix when linear algebra provider
            must calculate multiply in parallel threads.
            </summary>
            <value>The order. Default 64, must be at least 3.</value>
        </member>
        <member name="P:MathNet.Numerics.Control.ParallelizeElements">
            <summary>
            Gets or sets the number of elements a vector or matrix
            must contain before we multiply threads.
            </summary>
            <value>Number of elements. Default 300, must be at least 3.</value>
        </member>
        <member name="P:MathNet.Numerics.Control.MaxToStringColumns">
            <summary>
            Maximum number of columns to print in ToString methods by default.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Control.MaxToStringRows">
            <summary>
            Maximum number of rows to print in ToString methods by default.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Complex32">
            <summary>
            32-bit single precision complex numbers class.
            </summary>
            <remarks>
            <para>
            The class <c>Complex32</c> provides all elementary operations
            on complex numbers. All the operators <c>+</c>, <c>-</c>,
            <c>*</c>, <c>/</c>, <c>==</c>, <c>!=</c> are defined in the
            canonical way. Additional complex trigonometric functions
            are also provided. Note that the <c>Complex32</c> structures
            has two special constant values <see cref="F:MathNet.Numerics.Complex32.NaN"/> and
            <see cref="F:MathNet.Numerics.Complex32.PositiveInfinity"/>.
            </para>
            <para>
            <code>
            Complex32 x = new Complex32(1f,2f);
            Complex32 y = Complex32.FromPolarCoordinates(1f, Math.Pi);
            Complex32 z = (x + y) / (x - y);
            </code>
            </para>
            <para>
            For mathematical details about complex numbers, please
            have a look at the <a href="http://en.wikipedia.org/wiki/Complex_number">
            Wikipedia</a>
            </para>
            </remarks>
        </member>
        <member name="T:MathNet.Numerics.IPrecisionSupport`1">
            <summary>
            Support Interface for Precision Operations (like AlmostEquals).
            </summary>
            <typeparam name="T">Type of the implementing class.</typeparam>
        </member>
        <member name="M:MathNet.Numerics.IPrecisionSupport`1.Norm">
            <summary>
            Returns a Norm of a value of this type, which is appropriate for measuring how
            close this value is to zero.
            </summary>
            <returns>A norm of this value.</returns>
        </member>
        <member name="M:MathNet.Numerics.IPrecisionSupport`1.NormOfDifference(`0)">
            <summary>
            Returns a Norm of the difference of two values of this type, which is
            appropriate for measuring how close together these two values are.
            </summary>
            <param name="otherValue">The value to compare with.</param>
            <returns>A norm of the difference between this and the other value.</returns>
        </member>
        <member name="F:MathNet.Numerics.Complex32._real">
            <summary>
            The real component of the complex number.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Complex32._imag">
            <summary>
            The imaginary component of the complex number.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex32.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the Complex32 structure with the given real
            and imaginary parts.
            </summary>
            <param name="real">The value for the real component.</param>
            <param name="imaginary">The value for the imaginary component.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.FromPolarCoordinates(System.Single,System.Single)">
            <summary>
            Creates a complex number from a point's polar coordinates.
            </summary>
            <returns>A complex number.</returns>
            <param name="magnitude">The magnitude, which is the distance from the origin (the intersection of the x-axis and the y-axis) to the number.</param>
            <param name="phase">The phase, which is the angle from the line to the horizontal axis, measured in radians.</param>
        </member>
        <member name="F:MathNet.Numerics.Complex32.Zero">
            <summary>
            Returns a new <see cref="T:MathNet.Numerics.Complex32" /> instance
            with a real number equal to zero and an imaginary number equal to zero.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Complex32.One">
            <summary>
            Returns a new <see cref="T:MathNet.Numerics.Complex32" /> instance
            with a real number equal to one and an imaginary number equal to zero.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Complex32.ImaginaryOne">
            <summary>
            Returns a new <see cref="T:MathNet.Numerics.Complex32" /> instance
            with a real number equal to zero and an imaginary number equal to one.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Complex32.PositiveInfinity">
            <summary>
            Returns a new <see cref="T:MathNet.Numerics.Complex32" /> instance
            with real and imaginary numbers positive infinite.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Complex32.NaN">
            <summary>
            Returns a new <see cref="T:MathNet.Numerics.Complex32" /> instance
            with real and imaginary numbers not a number.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex32.IsZero">
            <summary>
            Gets a value indicating whether the <c>Complex32</c> is zero.
            </summary>
            <returns><c>true</c> if this instance is zero; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.IsOne">
            <summary>
            Gets a value indicating whether the <c>Complex32</c> is one.
            </summary>
            <returns><c>true</c> if this instance is one; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.IsImaginaryOne">
            <summary>
            Gets a value indicating whether the <c>Complex32</c> is the imaginary unit.
            </summary>
            <returns><c>true</c> if this instance is ImaginaryOne; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.IsNaN">
            <summary>
            Gets a value indicating whether the provided <c>Complex32</c>evaluates
            to a value that is not a number.
            </summary>
            <returns>
            <c>true</c> if this instance is <see cref="F:MathNet.Numerics.Complex32.NaN"/>; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.IsInfinity">
            <summary>
            Gets a value indicating whether the provided <c>Complex32</c> evaluates to an
            infinite value.
            </summary>
            <returns>
                <c>true</c> if this instance is infinite; otherwise, <c>false</c>.
            </returns>
            <remarks>
            True if it either evaluates to a complex infinity
            or to a directed infinity.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Complex32.IsReal">
            <summary>
            Gets a value indicating whether the provided <c>Complex32</c> is real.
            </summary>
            <returns><c>true</c> if this instance is a real number; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.IsRealNonNegative">
            <summary>
            Gets a value indicating whether the provided <c>Complex32</c> is real and not negative, that is &gt;= 0.
            </summary>
            <returns>
                <c>true</c> if this instance is real nonnegative number; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Exponential">
            <summary>
            Exponential of this <c>Complex32</c> (exp(x), E^x).
            </summary>
            <returns>
            The exponential of this complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.NaturalLogarithm">
            <summary>
            Natural Logarithm of this <c>Complex32</c> (Base E).
            </summary>
            <returns>The natural logarithm of this complex number.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.CommonLogarithm">
            <summary>
            Common Logarithm of this <c>Complex32</c> (Base 10).
            </summary>
            <returns>The common logarithm of this complex number.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Logarithm(System.Single)">
            <summary>
            Logarithm of this <c>Complex32</c> with custom base.
            </summary>
            <returns>The logarithm of this complex number.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Power(MathNet.Numerics.Complex32)">
            <summary>
            Raise this <c>Complex32</c> to the given value.
            </summary>
            <param name="exponent">
            The exponent.
            </param>
            <returns>
            The complex number raised to the given exponent.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Root(MathNet.Numerics.Complex32)">
            <summary>
            Raise this <c>Complex32</c> to the inverse of the given value.
            </summary>
            <param name="rootExponent">
            The root exponent.
            </param>
            <returns>
            The complex raised to the inverse of the given exponent.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Square">
            <summary>
            The Square (power 2) of this <c>Complex32</c>
            </summary>
            <returns>
            The square of this complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.SquareRoot">
            <summary>
            The Square Root (power 1/2) of this <c>Complex32</c>
            </summary>
            <returns>
            The square root of this complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Equality(MathNet.Numerics.Complex32,MathNet.Numerics.Complex32)">
            <summary>
            Equality test.
            </summary>
            <param name="complex1">One of complex numbers to compare.</param>
            <param name="complex2">The other complex numbers to compare.</param>
            <returns><c>true</c> if the real and imaginary components of the two complex numbers are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Inequality(MathNet.Numerics.Complex32,MathNet.Numerics.Complex32)">
            <summary>
            Inequality test.
            </summary>
            <param name="complex1">One of complex numbers to compare.</param>
            <param name="complex2">The other complex numbers to compare.</param>
            <returns><c>true</c> if the real or imaginary components of the two complex numbers are not equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_UnaryPlus(MathNet.Numerics.Complex32)">
            <summary>
            Unary addition.
            </summary>
            <param name="summand">The complex number to operate on.</param>
            <returns>Returns the same complex number.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_UnaryNegation(MathNet.Numerics.Complex32)">
            <summary>
            Unary minus.
            </summary>
            <param name="subtrahend">The complex number to operate on.</param>
            <returns>The negated value of the <paramref name="subtrahend"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Addition(MathNet.Numerics.Complex32,MathNet.Numerics.Complex32)">
            <summary>Addition operator. Adds two complex numbers together.</summary>
            <returns>The result of the addition.</returns>
            <param name="summand1">One of the complex numbers to add.</param>
            <param name="summand2">The other complex numbers to add.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Subtraction(MathNet.Numerics.Complex32,MathNet.Numerics.Complex32)">
            <summary>Subtraction operator. Subtracts two complex numbers.</summary>
            <returns>The result of the subtraction.</returns>
            <param name="minuend">The complex number to subtract from.</param>
            <param name="subtrahend">The complex number to subtract.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Addition(MathNet.Numerics.Complex32,System.Single)">
            <summary>Addition operator. Adds a complex number and float together.</summary>
            <returns>The result of the addition.</returns>
            <param name="summand1">The complex numbers to add.</param>
            <param name="summand2">The float value to add.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Subtraction(MathNet.Numerics.Complex32,System.Single)">
            <summary>Subtraction operator. Subtracts float value from a complex value.</summary>
            <returns>The result of the subtraction.</returns>
            <param name="minuend">The complex number to subtract from.</param>
            <param name="subtrahend">The float value to subtract.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Addition(System.Single,MathNet.Numerics.Complex32)">
            <summary>Addition operator. Adds a complex number and float together.</summary>
            <returns>The result of the addition.</returns>
            <param name="summand1">The float value to add.</param>
            <param name="summand2">The complex numbers to add.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Subtraction(System.Single,MathNet.Numerics.Complex32)">
            <summary>Subtraction operator. Subtracts complex value from a float value.</summary>
            <returns>The result of the subtraction.</returns>
            <param name="minuend">The float vale to subtract from.</param>
            <param name="subtrahend">The complex value to subtract.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Multiply(MathNet.Numerics.Complex32,MathNet.Numerics.Complex32)">
            <summary>Multiplication operator. Multiplies two complex numbers.</summary>
            <returns>The result of the multiplication.</returns>
            <param name="multiplicand">One of the complex numbers to multiply.</param>
            <param name="multiplier">The other complex number to multiply.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Multiply(System.Single,MathNet.Numerics.Complex32)">
            <summary>Multiplication operator. Multiplies a complex number with a float value.</summary>
            <returns>The result of the multiplication.</returns>
            <param name="multiplicand">The float value to multiply.</param>
            <param name="multiplier">The complex number to multiply.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Multiply(MathNet.Numerics.Complex32,System.Single)">
            <summary>Multiplication operator. Multiplies a complex number with a float value.</summary>
            <returns>The result of the multiplication.</returns>
            <param name="multiplicand">The complex number to multiply.</param>
            <param name="multiplier">The float value to multiply.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Division(MathNet.Numerics.Complex32,MathNet.Numerics.Complex32)">
            <summary>Division operator. Divides a complex number by another.</summary>
            <returns>The result of the division.</returns>
            <param name="dividend">The dividend.</param>
            <param name="divisor">The divisor.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Division(System.Single,MathNet.Numerics.Complex32)">
            <summary>Division operator. Divides a float value by a complex number.</summary>
            <returns>The result of the division.</returns>
            <param name="dividend">The dividend.</param>
            <param name="divisor">The divisor.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Division(MathNet.Numerics.Complex32,System.Single)">
            <summary>Division operator. Divides a complex number by a float value.</summary>
            <returns>The result of the division.</returns>
            <param name="dividend">The dividend.</param>
            <param name="divisor">The divisor.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Conjugate">
            <summary>
            Computes the conjugate of a complex number and returns the result.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Reciprocal">
            <summary>
            Returns the multiplicative inverse of a complex number.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex32.ToString">
            <summary>
            Converts the value of the current complex number to its equivalent string representation in Cartesian form.
            </summary>
            <returns>The string representation of the current instance in Cartesian form.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.ToString(System.String)">
            <summary>
            Converts the value of the current complex number to its equivalent string representation
            in Cartesian form by using the specified format for its real and imaginary parts.
            </summary>
            <returns>The string representation of the current instance in Cartesian form.</returns>
            <param name="format">A standard or custom numeric format string.</param>
            <exception cref="T:System.FormatException">
              <paramref name="format" /> is not a valid format string.</exception>
        </member>
        <member name="M:MathNet.Numerics.Complex32.ToString(System.IFormatProvider)">
            <summary>
            Converts the value of the current complex number to its equivalent string representation
            in Cartesian form by using the specified culture-specific formatting information.
            </summary>
            <returns>The string representation of the current instance in Cartesian form, as specified by <paramref name="provider" />.</returns>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.ToString(System.String,System.IFormatProvider)">
            <summary>Converts the value of the current complex number to its equivalent string representation
            in Cartesian form by using the specified format and culture-specific format information for its real and imaginary parts.</summary>
            <returns>The string representation of the current instance in Cartesian form, as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
            <param name="format">A standard or custom numeric format string.</param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <exception cref="T:System.FormatException">
              <paramref name="format" /> is not a valid format string.</exception>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Equals(MathNet.Numerics.Complex32)">
            <summary>
            Checks if two complex numbers are equal. Two complex numbers are equal if their
            corresponding real and imaginary components are equal.
            </summary>
            <returns>
            Returns <c>true</c> if the two objects are the same object, or if their corresponding
            real and imaginary components are equal, <c>false</c> otherwise.
            </returns>
            <param name="other">
            The complex number to compare to with.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.GetHashCode">
            <summary>
            The hash code for the complex number.
            </summary>
            <returns>
            The hash code of the complex number.
            </returns>
            <remarks>
            The hash code is calculated as
            System.Math.Exp(ComplexMath.Absolute(complexNumber)).
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Equals(System.Object)">
            <summary>
            Checks if two complex numbers are equal. Two complex numbers are equal if their
            corresponding real and imaginary components are equal.
            </summary>
            <returns>
            Returns <c>true</c> if the two objects are the same object, or if their corresponding
            real and imaginary components are equal, <c>false</c> otherwise.
            </returns>
            <param name="obj">
            The complex number to compare to with.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.MathNet#Numerics#IPrecisionSupport{MathNet#Numerics#Complex32}#Norm">
            <summary>
            Returns a Norm of a value of this type, which is appropriate for measuring how
            close this value is to zero.
            </summary>
            <returns>
            A norm of this value.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.MathNet#Numerics#IPrecisionSupport{MathNet#Numerics#Complex32}#NormOfDifference(MathNet.Numerics.Complex32)">
            <summary>
            Returns a Norm of the difference of two values of this type, which is
            appropriate for measuring how close together these two values are.
            </summary>
            <param name="otherValue">
            The value to compare with.
            </param>
            <returns>
            A norm of the difference between this and the other value.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Parse(System.String)">
            <summary>
            Creates a complex number based on a string. The string can be in the
            following formats (without the quotes): 'n', 'ni', 'n +/- ni',
            'ni +/- n', 'n,n', 'n,ni,' '(n,n)', or '(n,ni)', where n is a float.
            </summary>
            <returns>
            A complex number containing the value specified by the given string.
            </returns>
            <param name="value">
            The string to parse.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates a complex number based on a string. The string can be in the
            following formats (without the quotes): 'n', 'ni', 'n +/- ni',
            'ni +/- n', 'n,n', 'n,ni,' '(n,n)', or '(n,ni)', where n is a float.
            </summary>
            <returns>
            A complex number containing the value specified by the given string.
            </returns>
            <param name="value">
            the string to parse.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific
            formatting information.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.ParsePart(System.Collections.Generic.LinkedListNode{System.String}@,System.Boolean@,System.IFormatProvider)">
            <summary>
            Parse a part (real or complex) from a complex number.
            </summary>
            <param name="token">Start Token.</param>
            <param name="imaginary">Is set to <c>true</c> if the part identified itself as being imaginary.</param>
            <param name="format">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific
            formatting information.
            </param>
            <returns>Resulting part as float.</returns>
            <exception cref="T:System.FormatException"/>
        </member>
        <member name="M:MathNet.Numerics.Complex32.TryParse(System.String,MathNet.Numerics.Complex32@)">
            <summary>
            Converts the string representation of a complex number to a single-precision complex number equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing a complex number to convert.
            </param>
            <param name="result">
            The parsed value.
            </param>
            <returns>
            If the conversion succeeds, the result will contain a complex number equivalent to value.
            Otherwise the result will contain complex32.Zero.  This parameter is passed uninitialized
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.TryParse(System.String,System.IFormatProvider,MathNet.Numerics.Complex32@)">
            <summary>
            Converts the string representation of a complex number to single-precision complex number equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing a complex number to convert.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about value.
            </param>
            <param name="result">
            The parsed value.
            </param>
            <returns>
            If the conversion succeeds, the result will contain a complex number equivalent to value.
            Otherwise the result will contain complex32.Zero.  This parameter is passed uninitialized
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Explicit(System.Decimal)~MathNet.Numerics.Complex32">
            <summary>
            Explicit conversion of a real decimal to a <c>Complex32</c>.
            </summary>
            <param name="value">The decimal value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Explicit(System.Numerics.Complex)~MathNet.Numerics.Complex32">
            <summary>
            Explicit conversion of a <c>Complex</c> to a <c>Complex32</c>.
            </summary>
            <param name="value">The decimal value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Implicit(System.Byte)~MathNet.Numerics.Complex32">
            <summary>
            Implicit conversion of a real byte to a <c>Complex32</c>.
            </summary>
            <param name="value">The byte value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Implicit(System.Int16)~MathNet.Numerics.Complex32">
            <summary>
            Implicit conversion of a real short to a <c>Complex32</c>.
            </summary>
            <param name="value">The short value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Implicit(System.SByte)~MathNet.Numerics.Complex32">
            <summary>
            Implicit conversion of a signed byte to a <c>Complex32</c>.
            </summary>
            <param name="value">The signed byte value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Implicit(System.UInt16)~MathNet.Numerics.Complex32">
            <summary>
            Implicit conversion of a unsgined real short to a <c>Complex32</c>.
            </summary>
            <param name="value">The unsgined short value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Implicit(System.Int32)~MathNet.Numerics.Complex32">
            <summary>
            Implicit conversion of a real int to a <c>Complex32</c>.
            </summary>
            <param name="value">The int value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Implicit(System.Numerics.BigInteger)~MathNet.Numerics.Complex32">
            <summary>
            Implicit conversion of a BigInteger int to a <c>Complex32</c>.
            </summary>
            <param name="value">The BigInteger value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Implicit(System.Int64)~MathNet.Numerics.Complex32">
            <summary>
            Implicit conversion of a real long to a <c>Complex32</c>.
            </summary>
            <param name="value">The long value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Implicit(System.UInt32)~MathNet.Numerics.Complex32">
            <summary>
            Implicit conversion of a real uint to a <c>Complex32</c>.
            </summary>
            <param name="value">The uint value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Implicit(System.UInt64)~MathNet.Numerics.Complex32">
            <summary>
            Implicit conversion of a real ulong to a <c>Complex32</c>.
            </summary>
            <param name="value">The ulong value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Implicit(System.Single)~MathNet.Numerics.Complex32">
            <summary>
            Implicit conversion of a real float to a <c>Complex32</c>.
            </summary>
            <param name="value">The float value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Explicit(System.Double)~MathNet.Numerics.Complex32">
            <summary>
            Implicit conversion of a real double to a <c>Complex32</c>.
            </summary>
            <param name="value">The double value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.ToComplex">
            <summary>
            Converts this <c>Complex32</c> to a <see cref="T:System.Numerics.Complex"/>.
            </summary>
            <returns>A <see cref="T:System.Numerics.Complex"/> with the same values as this <c>Complex32</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Negate(MathNet.Numerics.Complex32)">
            <summary>
            Returns the additive inverse of a specified complex number.
            </summary>
            <returns>The result of the real and imaginary components of the value parameter multiplied by -1.</returns>
            <param name="value">A complex number.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Conjugate(MathNet.Numerics.Complex32)">
            <summary>
            Computes the conjugate of a complex number and returns the result.
            </summary>
            <returns>The conjugate of <paramref name="value" />.</returns>
            <param name="value">A complex number.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Add(MathNet.Numerics.Complex32,MathNet.Numerics.Complex32)">
            <summary>
            Adds two complex numbers and returns the result.
            </summary>
            <returns>The sum of <paramref name="left" /> and <paramref name="right" />.</returns>
            <param name="left">The first complex number to add.</param>
            <param name="right">The second complex number to add.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Subtract(MathNet.Numerics.Complex32,MathNet.Numerics.Complex32)">
            <summary>
            Subtracts one complex number from another and returns the result.
            </summary>
            <returns>The result of subtracting <paramref name="right" /> from <paramref name="left" />.</returns>
            <param name="left">The value to subtract from (the minuend).</param>
            <param name="right">The value to subtract (the subtrahend).</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Multiply(MathNet.Numerics.Complex32,MathNet.Numerics.Complex32)">
            <summary>
            Returns the product of two complex numbers.
            </summary>
            <returns>The product of the <paramref name="left" /> and <paramref name="right" /> parameters.</returns>
            <param name="left">The first complex number to multiply.</param>
            <param name="right">The second complex number to multiply.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Divide(MathNet.Numerics.Complex32,MathNet.Numerics.Complex32)">
            <summary>
            Divides one complex number by another and returns the result.
            </summary>
            <returns>The quotient of the division.</returns>
            <param name="dividend">The complex number to be divided.</param>
            <param name="divisor">The complex number to divide by.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Reciprocal(MathNet.Numerics.Complex32)">
            <summary>
            Returns the multiplicative inverse of a complex number.
            </summary>
            <returns>The reciprocal of <paramref name="value" />.</returns>
            <param name="value">A complex number.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Sqrt(MathNet.Numerics.Complex32)">
            <summary>
            Returns the square root of a specified complex number.
            </summary>
            <returns>The square root of <paramref name="value" />.</returns>
            <param name="value">A complex number.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Abs(MathNet.Numerics.Complex32)">
            <summary>
            Gets the absolute value (or magnitude) of a complex number.
            </summary>
            <returns>The absolute value of <paramref name="value" />.</returns>
            <param name="value">A complex number.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Exp(MathNet.Numerics.Complex32)">
            <summary>
            Returns e raised to the power specified by a complex number.
            </summary>
            <returns>The number e raised to the power <paramref name="value" />.</returns>
            <param name="value">A complex number that specifies a power.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Pow(MathNet.Numerics.Complex32,MathNet.Numerics.Complex32)">
            <summary>
            Returns a specified complex number raised to a power specified by a complex number.
            </summary>
            <returns>The complex number <paramref name="value" /> raised to the power <paramref name="power" />.</returns>
            <param name="value">A complex number to be raised to a power.</param>
            <param name="power">A complex number that specifies a power.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Pow(MathNet.Numerics.Complex32,System.Single)">
            <summary>
            Returns a specified complex number raised to a power specified by a single-precision floating-point number.
            </summary>
            <returns>The complex number <paramref name="value" /> raised to the power <paramref name="power" />.</returns>
            <param name="value">A complex number to be raised to a power.</param>
            <param name="power">A single-precision floating-point number that specifies a power.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Log(MathNet.Numerics.Complex32)">
            <summary>
            Returns the natural (base e) logarithm of a specified complex number.
            </summary>
            <returns>The natural (base e) logarithm of <paramref name="value" />.</returns>
            <param name="value">A complex number.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Log(MathNet.Numerics.Complex32,System.Single)">
            <summary>
            Returns the logarithm of a specified complex number in a specified base.
            </summary>
            <returns>The logarithm of <paramref name="value" /> in base <paramref name="baseValue" />.</returns>
            <param name="value">A complex number.</param>
            <param name="baseValue">The base of the logarithm.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Log10(MathNet.Numerics.Complex32)">
            <summary>
            Returns the base-10 logarithm of a specified complex number.
            </summary>
            <returns>The base-10 logarithm of <paramref name="value" />.</returns>
            <param name="value">A complex number.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Sin(MathNet.Numerics.Complex32)">
            <summary>
            Returns the sine of the specified complex number.
            </summary>
            <returns>The sine of <paramref name="value" />.</returns>
            <param name="value">A complex number.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Cos(MathNet.Numerics.Complex32)">
            <summary>
            Returns the cosine of the specified complex number.
            </summary>
            <returns>The cosine of <paramref name="value" />.</returns>
            <param name="value">A complex number.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Tan(MathNet.Numerics.Complex32)">
            <summary>
            Returns the tangent of the specified complex number.
            </summary>
            <returns>The tangent of <paramref name="value" />.</returns>
            <param name="value">A complex number.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Asin(MathNet.Numerics.Complex32)">
            <summary>
            Returns the angle that is the arc sine of the specified complex number.
            </summary>
            <returns>The angle which is the arc sine of <paramref name="value" />.</returns>
            <param name="value">A complex number.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Acos(MathNet.Numerics.Complex32)">
            <summary>
            Returns the angle that is the arc cosine of the specified complex number.
            </summary>
            <returns>The angle, measured in radians, which is the arc cosine of <paramref name="value" />.</returns>
            <param name="value">A complex number that represents a cosine.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Atan(MathNet.Numerics.Complex32)">
            <summary>
            Returns the angle that is the arc tangent of the specified complex number.
            </summary>
            <returns>The angle that is the arc tangent of <paramref name="value" />.</returns>
            <param name="value">A complex number.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Sinh(MathNet.Numerics.Complex32)">
            <summary>
            Returns the hyperbolic sine of the specified complex number.
            </summary>
            <returns>The hyperbolic sine of <paramref name="value" />.</returns>
            <param name="value">A complex number.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Cosh(MathNet.Numerics.Complex32)">
            <summary>
            Returns the hyperbolic cosine of the specified complex number.
            </summary>
            <returns>The hyperbolic cosine of <paramref name="value" />.</returns>
            <param name="value">A complex number.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Tanh(MathNet.Numerics.Complex32)">
            <summary>
            Returns the hyperbolic tangent of the specified complex number.
            </summary>
            <returns>The hyperbolic tangent of <paramref name="value" />.</returns>
            <param name="value">A complex number.</param>
        </member>
        <member name="P:MathNet.Numerics.Complex32.Real">
            <summary>
            Gets the real component of the complex number.
            </summary>
            <value>The real component of the complex number.</value>
        </member>
        <member name="P:MathNet.Numerics.Complex32.Imaginary">
            <summary>
            Gets the real imaginary component of the complex number.
            </summary>
            <value>The real imaginary component of the complex number.</value>
        </member>
        <member name="P:MathNet.Numerics.Complex32.Phase">
            <summary>
            Gets the phase or argument of this <c>Complex32</c>.
            </summary>
            <remarks>
            Phase always returns a value bigger than negative Pi and
            smaller or equal to Pi. If this <c>Complex32</c> is zero, the Complex32
            is assumed to be positive real with an argument of zero.
            </remarks>
            <returns>The phase or argument of this <c>Complex32</c></returns>
        </member>
        <member name="P:MathNet.Numerics.Complex32.Magnitude">
            <summary>
            Gets the magnitude (or absolute value) of a complex number.
            </summary>
            <returns>The magnitude of the current instance.</returns>
        </member>
        <member name="P:MathNet.Numerics.Complex32.MagnitudeSquared">
            <summary>
            Gets the squared magnitude (or squared absolute value) of a complex number.
            </summary>
            <returns>The squared magnitude of the current instance.</returns>
        </member>
        <member name="P:MathNet.Numerics.Complex32.Sign">
            <summary>
            Gets the unity of this complex (same argument, but on the unit circle; exp(I*arg))
            </summary>
            <returns>The unity of this <c>Complex32</c>.</returns>
        </member>
        <member name="T:MathNet.Numerics.Fit">
            <summary>
            Least-Squares Curve Fitting Routines
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fit.Line(System.Double[],System.Double[])">
            <summary>
            Least-Squares fitting the points (x,y) to a line y : x -> a+b*x,
            returning its best fitting parameters as [a, b] array.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fit.LineFunc(System.Double[],System.Double[])">
            <summary>
            Least-Squares fitting the points (x,y) to a line y : x -> a+b*x,
            returning a function y' for the best fitting line.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fit.Polynomial(System.Double[],System.Double[],System.Int32)">
            <summary>
            Least-Squares fitting the points (x,y) to a k-order polynomial y : x -> p0 + p1*x + p2*x^2 + ... + pk*x^k,
            returning its best fitting parameters as [p0, p1, p2, ..., pk] array, compatible with Evaluate.Polynomial.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fit.PolynomialFunc(System.Double[],System.Double[],System.Int32)">
            <summary>
            Least-Squares fitting the points (x,y) to a k-order polynomial y : x -> p0 + p1*x + p2*x^2 + ... + pk*x^k,
            returning a function y' for the best fitting polynomial.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fit.LinearCombination(System.Double[],System.Double[],System.Func{System.Double,System.Double}[])">
            <summary>
            Least-Squares fitting the points (x,y) to an arbitrary linear combination y : x -> p0*f0(x) + p1*f1(x) + ... + pk*fk(x),
            returning its best fitting parameters as [p0, p1, p2, ..., pk] array.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fit.LinearCombinationFunc(System.Double[],System.Double[],System.Func{System.Double,System.Double}[])">
            <summary>
            Least-Squares fitting the points (x,y) to an arbitrary linear combination y : x -> p0*f0(x) + p1*f1(x) + ... + pk*fk(x),
            returning a function y' for the best fitting combination.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fit.LinearMultiDim(System.Double[][],System.Double[],System.Func{System.Double[],System.Double}[])">
            <summary>
            Least-Squares fitting the points (X,y) = ((x0,x1,..,xk),y) to an arbitrary linear combination y : X -> p0*f0(x) + p1*f1(x) + ... + pk*fk(x),
            returning its best fitting parameters as [p0, p1, p2, ..., pk] array.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fit.LinearMultiDimFunc(System.Double[][],System.Double[],System.Func{System.Double[],System.Double}[])">
            <summary>
            Least-Squares fitting the points (X,y) = ((x0,x1,..,xk),y) to an arbitrary linear combination y : X -> p0*f0(x) + p1*f1(x) + ... + pk*fk(x),
            returning a function y' for the best fitting combination.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fit.LinearGeneric``1(``0[],System.Double[],System.Func{``0,System.Double}[])">
            <summary>
            Least-Squares fitting the points (T,y) = (T,y) to an arbitrary linear combination y : X -> p0*f0(T) + p1*f1(T) + ... + pk*fk(T),
            returning its best fitting parameters as [p0, p1, p2, ..., pk] array.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fit.LinearGenericFunc``1(``0[],System.Double[],System.Func{``0,System.Double}[])">
            <summary>
            Least-Squares fitting the points (T,y) = (T,y) to an arbitrary linear combination y : X -> p0*f0(T) + p1*f1(T) + ... + pk*fk(T),
            returning a function y' for the best fitting combination.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Financial.AbsoluteReturnMeasures.CompoundMonthlyReturn(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Compound Monthly Return or Geometric Return or Annualized Return
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MathNet.Numerics.Financial.AbsoluteReturnMeasures.GainMean(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Average Gain or Gain Mean
            This is a simple average (arithmetic mean) of the periods with a gain. It is calculated by summing the returns for gain periods (return 0) 
            and then dividing the total by the number of gain periods.
            </summary>
            <param name="data"></param>
            <returns></returns>
            <remarks>http://www.offshore-library.com/kb/statistics.php</remarks>
        </member>
        <member name="M:MathNet.Numerics.Financial.AbsoluteReturnMeasures.LossMean(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Average Loss or LossMean
            This is a simple average (arithmetic mean) of the periods with a loss. It is calculated by summing the returns for loss periods (return &lt; 0)
            and then dividing the total by the number of loss periods.
            </summary>
            <param name="data"></param>
            <returns></returns>
            <remarks>http://www.offshore-library.com/kb/statistics.php</remarks>
        </member>
        <member name="M:MathNet.Numerics.Financial.AbsoluteRiskMeasures.GainStandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculation is similar to Standard Deviation , except it calculates an average (mean) return only for periods with a gain 
            and measures the variation of only the gain periods around the gain mean. Measures the volatility of upside performance.
            © Copyright 1996, 1999 Gary L.Gastineau. First Edition. © 1992 Swiss Bank Corporation.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MathNet.Numerics.Financial.AbsoluteRiskMeasures.LossStandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Similar to standard deviation, except this statistic calculates an average (mean) return for only the periods with a loss and then 
            measures the variation of only the losing periods around this loss mean. This statistic measures the volatility of downside performance.
            </summary>
            <param name="data"></param>
            <returns></returns>
            <remarks>http://www.offshore-library.com/kb/statistics.php</remarks>
        </member>
        <member name="M:MathNet.Numerics.Financial.AbsoluteRiskMeasures.DownsideDeviation(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
            This measure is similar to the loss standard deviation except the downside deviation
            considers only returns that fall below a defined minimum acceptable return (MAR) rather than the arithmetic mean.
            For example, if the MAR is 7%, the downside deviation would measure the variation of each period that falls below
            7%. (The loss standard deviation, on the other hand, would take only losing periods, calculate an average return for
            the losing periods, and then measure the variation between each losing return and the losing return average).
            </summary>
            <param name="data"></param>
            <param name="minimalAcceptableReturn"></param>
            <returns></returns>
        </member>
        <member name="M:MathNet.Numerics.Financial.AbsoluteRiskMeasures.SemiDeviation(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            A measure of volatility in returns below the mean. It's similar to standard deviation, but it only
            looks at periods where the investment return was less than average return.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MathNet.Numerics.Financial.AbsoluteRiskMeasures.GainLossRatio(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Measures a fund’s average gain in a gain period divided by the fund’s average loss in a losing
            period. Periods can be monthly or quarterly depending on the data frequency.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1">
            <summary>
            Defines the base class for <c>Matrix</c> classes.
            </summary>
            <summary>
            Defines the base class for <c>Matrix</c> classes.
            </summary>
            <typeparam name="T">Supported data types are <c>double</c>, <c>single</c>, <see cref="N:MathNet.Numerics.LinearAlgebra.Complex"/>, and <see cref="T:MathNet.Numerics.Complex32"/>.</typeparam>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.Equals(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">
            An object to compare with this object.
            </param>
            <returns>
            <c>true</c> if the current object is equal to the <paramref name="other"/> parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.ToTypeString">
            <summary>
            Returns a <see cref="T:System.String"/> that describes the type, dimensions and shape of this matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.ToMatrixString(System.Int32,System.Int32,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the content of this matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.ToMatrixString(System.Int32,System.Int32,System.Int32,System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the content of this matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.ToString(System.Int32,System.Int32,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that summarizes this matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that summarizes this matrix.
            The maximum number of cells can be configured in the <see cref="T:MathNet.Numerics.Control"/> class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that summarizes this matrix.
            The maximum number of cells can be configured in the <see cref="T:MathNet.Numerics.Control"/> class.
            The format string is ignored.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.One">
            <summary>
            The value of 1.0.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.Zero">
            <summary>
            The value of 0.0.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.DoNegate(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Negate each element of this matrix and place the results into the result matrix.
            </summary>
            <param name="result">The result of the negation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.DoConjugate(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Complex conjugates each element of this matrix and place the results into the result matrix.
            </summary>
            <param name="result">The result of the conjugation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.DoAdd(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0},MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="other">The matrix to add to this matrix.</param>
            <param name="result">The matrix to store the result of the addition.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.DoSubtract(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0},MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="other">The matrix to subtract.</param>
            <param name="result">The matrix to store the result of the subtraction.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.DoMultiply(`0,MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Multiplies each element of the matrix by a scalar and places results into the result matrix.
            </summary>
            <param name="scalar">The scalar to multiply the matrix with.</param>
            <param name="result">The matrix to store the result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.DoMultiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0},MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Multiplies this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.DoMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0},MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Multiplies this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.DoTransposeAndMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0},MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Multiplies this matrix with transpose of another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.DoTransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0},MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Multiplies the transpose of this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.DoTransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0},MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Multiplies the transpose of this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.DoDivide(`0,MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Divides each element of the matrix by a scalar and places results into the result matrix.
            </summary>
            <param name="scalar">The scalar to divide the matrix with.</param>
            <param name="result">The matrix to store the result of the division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.DoModulus(`0,MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Computes the modulus for each element of the matrix.
            </summary>
            <param name="divisor">The divisor to use.</param>
            <param name="result">Matrix to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.DoPointwiseMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0},MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Pointwise multiplies this matrix with another matrix and stores the result into the result matrix.
            </summary>
            <param name="other">The matrix to pointwise multiply with this one.</param>
            <param name="result">The matrix to store the result of the pointwise multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.DoPointwiseDivide(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0},MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Pointwise divide this matrix by another matrix and stores the result into the result matrix.
            </summary>
            <param name="other">The matrix to pointwise divide this one by.</param>
            <param name="result">The matrix to store the result of the pointwise division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.Add(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="other">The matrix to add to this matrix.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.Add(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0},MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="other">The matrix to add to this matrix.</param>
            <param name="result">The matrix to store the result of the addition.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.Subtract(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="other">The matrix to subtract.</param>
            <returns>The result of the subtraction.</returns>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.Subtract(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0},MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="other">The matrix to subtract.</param>
            <param name="result">The matrix to store the result of the subtraction.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.Multiply(`0)">
            <summary>
            Multiplies each element of this matrix with a scalar.
            </summary>
            <param name="scalar">The scalar to multiply with.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.Multiply(`0,MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Multiplies each element of the matrix by a scalar and places results into the result matrix.
            </summary>
            <param name="scalar">The scalar to multiply the matrix with.</param>
            <param name="result">The matrix to store the result of the multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.Divide(`0)">
            <summary>
            Divides each element of this matrix with a scalar.
            </summary>
            <param name="scalar">The scalar to divide with.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.Divide(`0,MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Divides each element of the matrix by a scalar and places results into the result matrix.
            </summary>
            <param name="scalar">The scalar to divide the matrix with.</param>
            <param name="result">The matrix to store the result of the division.</param>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.Multiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Multiplies this matrix by a vector and returns the result.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <c>this.ColumnCount != rightSide.Count</c>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.Multiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0},MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Multiplies this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <strong>result.Count != this.RowCount</strong>.</exception>
            <exception cref="T:System.ArgumentException">If <strong>this.ColumnCount != <paramref name="rightSide"/>.Count</strong>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.LeftMultiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Left multiply a matrix with a vector ( = vector * matrix ).
            </summary>
            <param name="leftSide">The vector to multiply with.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <strong>this.RowCount != <paramref name="leftSide"/>.Count</strong>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.LeftMultiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0},MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Left multiply a matrix with a vector ( = vector * matrix ) and place the result in the result vector.
            </summary>
            <param name="leftSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <strong>result.Count != this.ColumnCount</strong>.</exception>
            <exception cref="T:System.ArgumentException">If <strong>this.RowCount != <paramref name="leftSide"/>.Count</strong>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.DoLeftMultiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0},MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Left multiply a matrix with a vector ( = vector * matrix ) and place the result in the result vector.
            </summary>
            <param name="leftSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.Multiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0},MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Multiplies this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <strong>this.Columns != other.Rows</strong>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the this.Rows x other.Columns.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.Multiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Multiplies this matrix with another matrix and returns the result.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <exception cref="T:System.ArgumentException">If <strong>this.Columns != other.Rows</strong>.</exception>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.TransposeAndMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0},MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Multiplies this matrix with transpose of another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <strong>this.Columns != other.ColumnCount</strong>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the this.RowCount x other.RowCount.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.TransposeAndMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Multiplies this matrix with transpose of another matrix and returns the result.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <exception cref="T:System.ArgumentException">If <strong>this.Columns != other.ColumnCount</strong>.</exception>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.TransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Multiplies the transpose of this matrix by a vector and returns the result.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <c>this.RowCount != rightSide.Count</c>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.TransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0},MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Multiplies the transpose of this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <strong>result.Count != this.ColumnCount</strong>.</exception>
            <exception cref="T:System.ArgumentException">If <strong>this.RowCount != <paramref name="rightSide"/>.Count</strong>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.TransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0},MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Multiplies the transpose of this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <strong>this.Rows != other.RowCount</strong>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the this.ColumnCount x other.ColumnCount.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.TransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Multiplies the transpose of this matrix with another matrix and returns the result.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <exception cref="T:System.ArgumentException">If <strong>this.Rows != other.RowCount</strong>.</exception>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.Negate">
            <summary>
            Negate each element of this matrix.
            </summary>
            <returns>A matrix containing the negated values.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.Negate(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Negate each element of this matrix and place the results into the result matrix.
            </summary>
            <param name="result">The result of the negation.</param>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">if the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.Conjugate">
            <summary>
            Complex conjugate each element of this matrix.
            </summary>
            <returns>A matrix containing the conjugated values.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.Conjugate(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Complex conjugate each element of this matrix and place the results into the result matrix.
            </summary>
            <param name="result">The result of the conjugation.</param>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">if the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.PointwiseMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Pointwise multiplies this matrix with another matrix.
            </summary>
            <param name="other">The matrix to pointwise multiply with this one.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If this matrix and <paramref name="other"/> are not the same size.</exception>
            <returns>A new matrix that is the pointwise multiplication of this matrix and <paramref name="other"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.PointwiseMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0},MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Pointwise multiplies this matrix with another matrix and stores the result into the result matrix.
            </summary>
            <param name="other">The matrix to pointwise multiply with this one.</param>
            <param name="result">The matrix to store the result of the pointwise multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If this matrix and <paramref name="other"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentException">If this matrix and <paramref name="result"/> are not the same size.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.PointwiseDivide(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Pointwise divide this matrix by another matrix.
            </summary>
            <param name="other">The matrix to pointwise subtract this one by.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If this matrix and <paramref name="other"/> are not the same size.</exception>
            <returns>A new matrix that is the pointwise division of this matrix and <paramref name="other"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.PointwiseDivide(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0},MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Pointwise divide this matrix by another matrix and stores the result into the result matrix.
            </summary>
            <param name="other">The matrix to pointwise divide this one by.</param>
            <param name="result">The matrix to store the result of the pointwise division.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If this matrix and <paramref name="other"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentException">If this matrix and <paramref name="result"/> are not the same size.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.Modulus(`0)">
            <summary>
            Computes the modulus for each element of the matrix.
            </summary>
            <param name="divisor">The divisor to use.</param>
            <returns>A matrix containing the results.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.Modulus(`0,MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Computes the modulus for each element of the matrix.
            </summary>
            <param name="divisor">The divisor to use.</param>
            <param name="result">Matrix to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.op_UnaryPlus(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Returns a <strong>Matrix</strong> containing the same values of <paramref name="rightSide"/>.
            </summary>
            <param name="rightSide">The matrix to get the values from.</param>
            <returns>A matrix containing a the same values as <paramref name="rightSide"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.op_UnaryNegation(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Negates each element of the matrix.
            </summary>
            <param name="rightSide">The matrix to negate.</param>
            <returns>A matrix containing the negated values.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.op_Addition(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0},MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Adds two matrices together and returns the results.
            </summary>
            <remarks>This operator will allocate new memory for the result. It will
            choose the representation of either <paramref name="leftSide"/> or <paramref name="rightSide"/> depending on which
            is denser.</remarks>
            <param name="leftSide">The left matrix to add.</param>
            <param name="rightSide">The right matrix to add.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> don't have the same dimensions.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.op_Subtraction(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0},MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Subtracts two matrices together and returns the results.
            </summary>
            <remarks>This operator will allocate new memory for the result. It will
            choose the representation of either <paramref name="leftSide"/> or <paramref name="rightSide"/> depending on which
            is denser.</remarks>
            <param name="leftSide">The left matrix to subtract.</param>
            <param name="rightSide">The right matrix to subtract.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> don't have the same dimensions.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.op_Multiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0},`0)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.op_Multiply(`0,MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.op_Multiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0},MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Multiplies two matrices.
            </summary>
            <remarks>This operator will allocate new memory for the result. It will
            choose the representation of either <paramref name="leftSide"/> or <paramref name="rightSide"/> depending on which
            is denser.</remarks>
            <param name="leftSide">The left matrix to multiply.</param>
            <param name="rightSide">The right matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the dimensions of <paramref name="leftSide"/> or <paramref name="rightSide"/> don't conform.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.op_Multiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0},MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Multiplies a <strong>Matrix</strong> and a Vector.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The vector to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.op_Multiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0},MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Multiplies a Vector and a <strong>Matrix</strong>.
            </summary>
            <param name="leftSide">The vector to multiply.</param>
            <param name="rightSide">The matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.op_Modulus(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0},`0)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.Trace">
            <summary>
            Computes the trace of this matrix.
            </summary>
            <returns>The trace of this matrix</returns>
            <exception cref="T:System.ArgumentException">If the matrix is not square</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.Rank">
            <summary>
            Calculates the rank of the matrix
            </summary>
            <returns>effective numerical rank, obtained from SVD</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.ConditionNumber">
            <summary>Calculates the condition number of this matrix.</summary>
            <returns>The condition number of the matrix.</returns>
            <remarks>The condition number is calculated using singular value decomposition.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.Determinant">
            <summary>Computes the determinant of this matrix.</summary>
            <returns>The determinant of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.Inverse">
            <summary>Computes the inverse of this matrix.</summary>
            <returns>The inverse of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.KroneckerProduct(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Computes the Kronecker product of this matrix with the given matrix. The new matrix is M-by-N
            with M = this.Rows * lower.Rows and N = this.Columns * lower.Columns.
            </summary>
            <param name="other">The other matrix.</param>
            <exception cref="T:System.ArgumentNullException">If other is <see langword="null"/>.</exception>
            <returns>The kronecker product of the two matrices.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.KroneckerProduct(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0},MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Computes the Kronecker product of this matrix with the given matrix. The new matrix is M-by-N
            with M = this.Rows * lower.Rows and N = this.Columns * lower.Columns.
            </summary>
            <param name="other">The other matrix.</param>
            <param name="result">The kronecker product of the two matrices.</param>
            <exception cref="T:System.ArgumentNullException">If other is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not (this.Rows * lower.rows) x (this.Columns * lower.Columns).</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.NormalizeColumns(System.Int32)">
            <summary>
            Normalizes the columns of a matrix.
            </summary>
            <param name="p">The norm under which to normalize the columns under.</param>
            <returns>A normalized version of the matrix.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If the parameter p is not positive.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.NormalizeRows(System.Int32)">
            <summary>
            Normalizes the rows of a matrix.
            </summary>
            <param name="p">The norm under which to normalize the rows under.</param>
            <returns>A normalized version of the matrix.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If the parameter p is not positive.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.#ctor(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage{`0})">
            <summary>
            Initializes a new instance of the Matrix class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.CreateFromColumns(System.Collections.Generic.IList{MathNet.Numerics.LinearAlgebra.Generic.Vector{`0}})">
            <summary>
            Constructs matrix from a list of column vectors.
            </summary>
            <param name="columnVectors">The vectors to construct the matrix from.</param>
            <returns>The matrix constructed from the list of column vectors.</returns>
            <remarks>Creates a matrix of size Max(<paramref name="columnVectors"/>[i].Count) x <paramref name="columnVectors"/>.Count</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.CreateFromRows(System.Collections.Generic.IList{MathNet.Numerics.LinearAlgebra.Generic.Vector{`0}})">
            <summary>
            Constructs matrix from a list of  row vectors.
            </summary>
            <param name="rowVectors">The vectors to construct the matrix from.</param>
            <returns>The matrix constructed from the list of row vectors.</returns>
            <remarks>Creates a matrix of size Max(<paramref name="rowVectors"/>.Count) x <paramref name="rowVectors"/>[i].Count</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.At(System.Int32,System.Int32)">
            <summary>
            Retrieves the requested element without range checking.
            </summary>
            <param name="row">
            The row of the element.
            </param>
            <param name="column">
            The column of the element.
            </param>
            <returns>
            The requested element.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.At(System.Int32,System.Int32,`0)">
            <summary>
            Sets the value of the given element without range checking.
            </summary>
            <param name="row">
            The row of the element.
            </param>
            <param name="column">
            The column of the element.
            </param>
            <param name="value">
            The value to set the element to.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.Clear">
            <summary>
            Sets all values to zero.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.ClearColumn(System.Int32)">
            <summary>
            Sets all values of a column to zero.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.ClearRow(System.Int32)">
            <summary>
            Sets all values of a row to zero.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.ClearSubMatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets all values of a submatrix to zero.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.Clone">
            <summary>
            Creates a clone of this instance.
            </summary>
            <returns>
            A clone of the instance.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.CopyTo(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Copies the elements of this matrix to the given matrix.
            </summary>
            <param name="target">
            The matrix to copy values into.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If target is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If this and the target matrix do not have the same dimensions..
            </exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.CreateMatrix(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a <strong>Matrix</strong> for the given number of rows and columns.
            </summary>
            <param name="numberOfRows">The number of rows.</param>
            <param name="numberOfColumns">The number of columns.</param>
            <param name="fullyMutable">True if all fields must be mutable (e.g. not a diagonal matrix).</param>
            <returns>
            A <strong>Matrix</strong> with the given dimensions.
            </returns>
            <remarks>
            Creates a matrix of the same matrix type as the current matrix.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.CreateVector(System.Int32,System.Boolean)">
            <summary>
            Creates a Vector with a the given dimension.
            </summary>
            <param name="size">The size of the vector.</param>
            <param name="fullyMutable">True if all fields must be mutable.</param>
            <returns>
            A Vector with the given dimension.
            </returns>
            <remarks>
            Creates a vector of the same type as the current matrix.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.Row(System.Int32)">
            <summary>
            Copies a row into an Vector.
            </summary>
            <param name="index">The row to copy.</param>
            <returns>A Vector containing the copied elements.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="index"/> is negative,
            or greater than or equal to the number of rows.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.Row(System.Int32,MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Copies a row into to the given Vector.
            </summary>
            <param name="index">The row to copy.</param>
            <param name="result">The Vector to copy the row into.</param>
            <exception cref="T:System.ArgumentNullException">If the result vector is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="index"/> is negative,
            or greater than or equal to the number of rows.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <b>this.Columns != result.Count</b>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.Row(System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies the requested row elements into a new Vector.
            </summary>
            <param name="rowIndex">The row to copy elements from.</param>
            <param name="columnIndex">The column to start copying from.</param>
            <param name="length">The number of elements to copy.</param>
            <returns>A Vector containing the requested elements.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If:
            <list><item><paramref name="rowIndex"/> is negative,
            or greater than or equal to the number of rows.</item>
            <item><paramref name="columnIndex"/> is negative,
            or greater than or equal to the number of columns.</item>
            <item><c>(columnIndex + length) &gt;= Columns.</c></item></list></exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="length"/> is not positive.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.Row(System.Int32,System.Int32,System.Int32,MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Copies the requested row elements into a new Vector.
            </summary>
            <param name="rowIndex">The row to copy elements from.</param>
            <param name="columnIndex">The column to start copying from.</param>
            <param name="length">The number of elements to copy.</param>
            <param name="result">The Vector to copy the column into.</param>
            <exception cref="T:System.ArgumentNullException">If the result Vector is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="rowIndex"/> is negative,
            or greater than or equal to the number of columns.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="columnIndex"/> is negative,
            or greater than or equal to the number of rows.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="columnIndex"/> + <paramref name="length"/>
            is greater than or equal to the number of rows.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="length"/> is not positive.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <strong>result.Count &lt; length</strong>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.Column(System.Int32)">
            <summary>
            Copies a column into a new Vector&gt;.
            </summary>
            <param name="index">The column to copy.</param>
            <returns>A Vector containing the copied elements.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="index"/> is negative,
            or greater than or equal to the number of columns.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.Column(System.Int32,MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Copies a column into to the given Vector.
            </summary>
            <param name="index">The column to copy.</param>
            <param name="result">The Vector to copy the column into.</param>
            <exception cref="T:System.ArgumentNullException">If the result Vector is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="index"/> is negative,
            or greater than or equal to the number of columns.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <b>this.Rows != result.Count</b>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.Column(System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies the requested column elements into a new Vector.
            </summary>
            <param name="columnIndex">The column to copy elements from.</param>
            <param name="rowIndex">The row to start copying from.</param>
            <param name="length">The number of elements to copy.</param>
            <returns>A Vector containing the requested elements.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If:
            <list><item><paramref name="columnIndex"/> is negative,
            or greater than or equal to the number of columns.</item>
            <item><paramref name="rowIndex"/> is negative,
            or greater than or equal to the number of rows.</item>
            <item><c>(rowIndex + length) &gt;= Rows.</c></item></list>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="length"/> is not positive.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.Column(System.Int32,System.Int32,System.Int32,MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Copies the requested column elements into the given vector.
            </summary>
            <param name="columnIndex">The column to copy elements from.</param>
            <param name="rowIndex">The row to start copying from.</param>
            <param name="length">The number of elements to copy.</param>
            <param name="result">The Vector to copy the column into.</param>
            <exception cref="T:System.ArgumentNullException">If the result Vector is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="columnIndex"/> is negative,
            or greater than or equal to the number of columns.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="rowIndex"/> is negative,
            or greater than or equal to the number of rows.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="rowIndex"/> + <paramref name="length"/>
            is greater than or equal to the number of rows.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="length"/> is not positive.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <strong>result.Count &lt; length</strong>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.UpperTriangle">
            <summary>
            Returns a new matrix containing the upper triangle of this matrix.
            </summary>
            <returns>The upper triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.LowerTriangle">
            <summary>
            Returns a new matrix containing the lower triangle of this matrix.
            </summary>
            <returns>The lower triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.LowerTriangle(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Puts the lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.UpperTriangle(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Puts the upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.SubMatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a matrix that contains the values from the requested sub-matrix.
            </summary>
            <param name="rowIndex">The row to start copying from.</param>
            <param name="rowCount">The number of rows to copy. Must be positive.</param>
            <param name="columnIndex">The column to start copying from.</param>
            <param name="columnCount">The number of columns to copy. Must be positive.</param>
            <returns>The requested sub-matrix.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If: <list><item><paramref name="rowIndex"/> is
            negative, or greater than or equal to the number of rows.</item>
            <item><paramref name="columnIndex"/> is negative, or greater than or equal to the number
            of columns.</item>
            <item><c>(columnIndex + columnLength) &gt;= Columns</c></item>
            <item><c>(rowIndex + rowLength) &gt;= Rows</c></item></list></exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="rowCount"/> or <paramref name="columnCount"/>
            is not positive.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.Diagonal">
            <summary>
            Returns the elements of the diagonal in a Vector.
            </summary>
            <returns>The elements of the diagonal.</returns>
            <remarks>For non-square matrices, the method returns Min(Rows, Columns) elements where
            i == j (i is the row index, and j is the column index).</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.StrictlyLowerTriangle">
            <summary>
            Returns a new matrix containing the lower triangle of this matrix. The new matrix
            does not contain the diagonal elements of this matrix.
            </summary>
            <returns>The lower triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.StrictlyLowerTriangle(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Puts the strictly lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.StrictlyUpperTriangle">
            <summary>
            Returns a new matrix containing the upper triangle of this matrix. The new matrix
            does not contain the diagonal elements of this matrix.
            </summary>
            <returns>The upper triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.StrictlyUpperTriangle(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Puts the strictly upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.InsertColumn(System.Int32,MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Creates a new matrix and inserts the given column at the given index.
            </summary>
            <param name="columnIndex">The index of where to insert the column.</param>
            <param name="column">The column to insert.</param>
            <returns>A new matrix with the inserted column.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="column "/> is <see langword="null"/>. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="columnIndex"/> is &lt; zero or &gt; the number of columns.</exception>
            <exception cref="T:System.ArgumentException">If the size of <paramref name="column"/> != the number of rows.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.SetColumn(System.Int32,MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Copies the values of the given Vector to the specified column.
            </summary>
            <param name="columnIndex">The column to copy the values to.</param>
            <param name="column">The vector to copy the values from.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="column"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="columnIndex"/> is less than zero,
            or greater than or equal to the number of columns.</exception>
            <exception cref="T:System.ArgumentException">If the size of <paramref name="column"/> does not
            equal the number of rows of this <strong>Matrix</strong>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.SetColumn(System.Int32,System.Int32,System.Int32,MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Copies the values of the given Vector to the specified sub-column.
            </summary>
            <param name="columnIndex">The column to copy the values to.</param>
            <param name="rowIndex">The row to start copying to.</param>
            <param name="length">The number of elements to copy.</param>
            <param name="column">The vector to copy the values from.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="column"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="columnIndex"/> is less than zero,
            or greater than or equal to the number of columns.</exception>
            <exception cref="T:System.ArgumentException">If the size of <paramref name="column"/> does not
            equal the number of rows of this <strong>Matrix</strong>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.SetColumn(System.Int32,`0[])">
            <summary>
            Copies the values of the given array to the specified column.
            </summary>
            <param name="columnIndex">The column to copy the values to.</param>
            <param name="column">The array to copy the values from.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="column"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="columnIndex"/> is less than zero,
            or greater than or equal to the number of columns.</exception>
            <exception cref="T:System.ArgumentException">If the size of <paramref name="column"/> does not
            equal the number of rows of this <strong>Matrix</strong>.</exception>
            <exception cref="T:System.ArgumentException">If the size of <paramref name="column"/> does not
            equal the number of rows of this <strong>Matrix</strong>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.InsertRow(System.Int32,MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Creates a new matrix and inserts the given row at the given index.
            </summary>
            <param name="rowIndex">The index of where to insert the row.</param>
            <param name="row">The row to insert.</param>
            <returns>A new matrix with the inserted column.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="row"/> is <see langword="null"/>. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="rowIndex"/> is &lt; zero or &gt; the number of rows.</exception>
            <exception cref="T:System.ArgumentException">If the size of <paramref name="row"/> != the number of columns.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.SetRow(System.Int32,MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Copies the values of the given Vector to the specified row.
            </summary>
            <param name="rowIndex">The row to copy the values to.</param>
            <param name="row">The vector to copy the values from.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="row"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="rowIndex"/> is less than zero,
            or greater than or equal to the number of rows.</exception>
            <exception cref="T:System.ArgumentException">If the size of <paramref name="row"/> does not
            equal the number of columns of this <strong>Matrix</strong>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.SetRow(System.Int32,System.Int32,System.Int32,MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Copies the values of the given Vector to the specified sub-row.
            </summary>
            <param name="rowIndex">The row to copy the values to.</param>
            <param name="columnIndex">The column to start copying to.</param>
            <param name="length">The number of elements to copy.</param>
            <param name="row">The vector to copy the values from.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="row"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="rowIndex"/> is less than zero,
            or greater than or equal to the number of rows.</exception>
            <exception cref="T:System.ArgumentException">If the size of <paramref name="row"/> does not
            equal the number of columns of this <strong>Matrix</strong>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.SetRow(System.Int32,`0[])">
            <summary>
            Copies the values of the given array to the specified row.
            </summary>
            <param name="rowIndex">The row to copy the values to.</param>
            <param name="row">The array to copy the values from.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="row"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="rowIndex"/> is less than zero,
            or greater than or equal to the number of rows.</exception>
            <exception cref="T:System.ArgumentException">If the size of <paramref name="row"/> does not
            equal the number of columns of this <strong>Matrix</strong>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.SetSubMatrix(System.Int32,System.Int32,System.Int32,System.Int32,MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Copies the values of a given matrix into a region in this matrix.
            </summary>
            <param name="rowIndex">The row to start copying to.</param>
            <param name="rowCount">The number of rows to copy. Must be positive.</param>
            <param name="columnIndex">The column to start copying to.</param>
            <param name="columnCount">The number of columns to copy. Must be positive.</param>
            <param name="subMatrix">The sub-matrix to copy from.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If: <list><item><paramref name="rowIndex"/> is
            negative, or greater than or equal to the number of rows.</item>
            <item><paramref name="columnIndex"/> is negative, or greater than or equal to the number
            of columns.</item>
            <item><c>(columnIndex + columnLength) &gt;= Columns</c></item>
            <item><c>(rowIndex + rowLength) &gt;= Rows</c></item></list></exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="subMatrix"/> is <see langword="null"/></exception>
            <item>the size of <paramref name="subMatrix"/> is not at least <paramref name="rowCount"/> x <paramref name="columnCount"/>.</item>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="rowCount"/> or <paramref name="columnCount"/>
            is not positive.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.SetDiagonal(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Copies the values of the given Vector to the diagonal.
            </summary>
            <param name="source">The vector to copy the values from. The length of the vector should be
            Min(Rows, Columns).</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the length of <paramref name="source"/> does not
            equal Min(Rows, Columns).</exception>
            <remarks>For non-square matrices, the elements of <paramref name="source"/> are copied to
            this[i,i].</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.SetDiagonal(`0[])">
            <summary>
            Copies the values of the given array to the diagonal.
            </summary>
            <param name="source">The array to copy the values from. The length of the vector should be
            Min(Rows, Columns).</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the length of <paramref name="source"/> does not
            equal Min(Rows, Columns).</exception>
            <remarks>For non-square matrices, the elements of <paramref name="source"/> are copied to
            this[i,i].</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.Transpose">
            <summary>
            Returns the transpose of this matrix.
            </summary>
            <returns>The transpose of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.ConjugateTranspose">
            <summary>
            Returns the conjugate transpose of this matrix.
            </summary>
            <returns>The conjugate transpose of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.PermuteRows(MathNet.Numerics.Permutation)">
            <summary>
            Permute the rows of a matrix according to a permutation.
            </summary>
            <param name="p">The row permutation to apply to this matrix.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.PermuteColumns(MathNet.Numerics.Permutation)">
            <summary>
            Permute the columns of a matrix according to a permutation.
            </summary>
            <param name="p">The column permutation to apply to this matrix.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.Append(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
             Concatenates this matrix with the given matrix.
            </summary>
            <param name="right">The matrix to concatenate.</param>
            <returns>The combined matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.Append(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0},MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Concatenates this matrix with the given matrix and places the result into the result matrix.
            </summary>
            <param name="right">The matrix to concatenate.</param>
            <param name="result">The combined matrix.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.Stack(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Stacks this matrix on top of the given matrix and places the result into the result matrix.
            </summary>
            <param name="lower">The matrix to stack this matrix upon.</param>
            <returns>The combined matrix.</returns>
            <exception cref="T:System.ArgumentNullException">If lower is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <strong>upper.Columns != lower.Columns</strong>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.Stack(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0},MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Stacks this matrix on top of the given matrix and places the result into the result matrix.
            </summary>
            <param name="lower">The matrix to stack this matrix upon.</param>
            <param name="result">The combined matrix.</param>
            <exception cref="T:System.ArgumentNullException">If lower is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <strong>upper.Columns != lower.Columns</strong>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.DiagonalStack(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Diagonally stacks his matrix on top of the given matrix. The new matrix is a M-by-N matrix,
            where M = this.Rows + lower.Rows and N = this.Columns + lower.Columns.
            The values of off the off diagonal matrices/blocks are set to zero.
            </summary>
            <param name="lower">The lower, right matrix.</param>
            <exception cref="T:System.ArgumentNullException">If lower is <see langword="null"/>.</exception>
            <returns>the combined matrix</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.DiagonalStack(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0},MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Diagonally stacks his matrix on top of the given matrix and places the combined matrix into the result matrix.
            </summary>
            <param name="lower">The lower, right matrix.</param>
            <param name="result">The combined matrix</param>
            <exception cref="T:System.ArgumentNullException">If lower is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not (this.Rows + lower.rows) x (this.Columns + lower.Columns).</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.L1Norm">
            <summary>Calculates the L1 norm.</summary>
            <returns>The L1 norm of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.L2Norm">
            <summary>Calculates the L2 norm.</summary>
            <returns>The L2 norm of the matrix.</returns>
            <remarks>For sparse matrices, the L2 norm is computed using a dense implementation of singular value decomposition.
            In a later release, it will be replaced with a sparse implementation.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.FrobeniusNorm">
            <summary>Calculates the Frobenius norm of this matrix.</summary>
            <returns>The Frobenius norm of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.InfinityNorm">
            <summary>Calculates the infinity norm of this matrix.</summary>
            <returns>The infinity norm of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.ColumnEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> that enumerates over the matrix columns.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that enumerates over the matrix columns</returns>
            <seealso cref="T:System.Collections.Generic.IEnumerator`1"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.ColumnEnumerator(System.Int32,System.Int32)">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> that enumerates the requested matrix columns.
            </summary>
            <param name="index">The column to start enumerating over.</param>
            <param name="length">The number of columns to enumerating over.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that enumerates over requested matrix columns.</returns>
            <seealso cref="T:System.Collections.Generic.IEnumerator`1"/>
            <exception cref="T:System.ArgumentOutOfRangeException">If:
            <list><item><paramref name="index"/> is negative,
            or greater than or equal to the number of columns.</item>
            <item><c>(index + length) &gt;= Columns.</c></item></list>
            </exception>
            <exception cref="T:System.ArgumentException">If <paramref name="length"/> is not positive.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.RowEnumerator(System.Int32,System.Int32)">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> that enumerates the requested matrix rows.
            </summary>
            <param name="index">The row to start enumerating over.</param>
            <param name="length">The number of rows to enumerating over.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that enumerates over requested matrix rows.</returns>
            <seealso cref="T:System.Collections.Generic.IEnumerator`1"/>
            <exception cref="T:System.ArgumentOutOfRangeException">If:
            <list><item><paramref name="index"/> is negative,
            or greater than or equal to the number of rows.</item>
            <item><c>(index + length) &gt;= Rows.</c></item></list></exception>
            <exception cref="T:System.ArgumentException">If <paramref name="length"/> is not positive.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.RowEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> that enumerates over the matrix rows.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that enumerates over the matrix rows</returns>
            <seealso cref="T:System.Collections.Generic.IEnumerator`1"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.IndexedEnumerator">
            <summary>
            Iterates through each element in the matrix (row-wise).
            </summary>
            <returns>The value at the current iteration along with its position (row, column, value).</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.ToArray">
            <summary>
            Returns this matrix as a multidimensional array.
            </summary>
            <returns>A multidimensional containing the values of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.ToColumnWiseArray">
            <summary>
            Returns the matrix's elements as an array with the data laid out column-wise.
            </summary>
            <example><pre>
            1, 2, 3
            4, 5, 6  will be returned as  1, 4, 7, 2, 5, 8, 3, 6, 9
            7, 8, 9
            </pre></example>
            <returns>An array containing the matrix's elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.ToRowWiseArray">
            <summary>
            Returns the matrix's elements as an array with the data laid row-wise.
            </summary>
            <example><pre>
            1, 2, 3
            4, 5, 6  will be returned as  1, 2, 3, 4, 5, 6, 7, 8, 9
            7, 8, 9
            </pre></example>
            <returns>An array containing the matrix's elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.MapInplace(System.Func{`0,`0},System.Boolean)">
            <summary>
            Applies a function to each value of this matrix and replaces the value with its result.
            If forceMapZero is not set to true, zero values may or may not be skipped depending
            on the actual data storage implementation (relevant mostly for sparse matrices).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.MapIndexedInplace(System.Func{System.Int32,System.Int32,`0,`0},System.Boolean)">
            <summary>
            Applies a function to each value of this matrix and replaces the value with its result.
            The row and column indices of each value (zero-based) are passed as first arguments to the function.
            If forceMapZero is not set to true, zero values may or may not be skipped depending
            on the actual data storage implementation (relevant mostly for sparse matrices).
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.Storage">
            <summary>
            Gets the raw matrix data storage.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.ColumnCount">
            <summary>
            Gets the number of columns.
            </summary>
            <value>The number of columns.</value>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.RowCount">
            <summary>
            Gets the number of rows.
            </summary>
            <value>The number of rows.</value>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the value at the given row and column, with range checking.
            </summary>
            <param name="row">
            The row of the element.
            </param>
            <param name="column">
            The column of the element.
            </param>
            <value>The value to get or set.</value>
            <remarks>This method is ranged checked. <see cref="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.At(System.Int32,System.Int32)"/> and <see cref="M:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.At(System.Int32,System.Int32,`0)"/>
            to get and set values without range checking.</remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1.IsSymmetric">
            <summary>
            Gets a value indicating whether this matrix is symmetric.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Generic.Vector`1">
            <summary>
            Defines the generic class for <c>Vector</c> classes.
            </summary>
            <typeparam name="T">Supported data types are double, single, <see cref="N:MathNet.Numerics.LinearAlgebra.Complex"/>, and <see cref="N:MathNet.Numerics.LinearAlgebra.Complex32"/>.</typeparam>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.Equals(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
               <c>true</c> if the current object is equal to the <paramref name="other"/> parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.ToTypeString">
            <summary>
            Returns a <see cref="T:System.String"/> that describes the type, dimensions and shape of this vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.ToVectorString(System.Int32,System.Int32,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the content of this vector, row by row.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.ToVectorString(System.Int32,System.Int32,System.Int32,System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the content of this vector, row by row.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.ToString(System.Int32,System.Int32,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that summarizes this vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that summarizes this vector.
            The maximum number of cells can be configured in the <see cref="T:MathNet.Numerics.Control"/> class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that summarizes this vector.
            The maximum number of cells can be configured in the <see cref="T:MathNet.Numerics.Control"/> class.
            The format string is ignored.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that summarizes this vector.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.Zero">
            <summary>
            The zero value for type T.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.One">
            <summary>
            The value of 1.0 for type T.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.#ctor(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage{`0})">
            <summary>
            Initializes a new instance of the Vector class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.At(System.Int32)">
            <summary>Gets the value at the given <paramref name="index"/> without range checking..</summary>
            <param name="index">The index of the value to get or set.</param>
            <returns>The value of the vector at the given <paramref name="index"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.At(System.Int32,`0)">
            <summary>Sets the <paramref name="value"/> at the given <paramref name="index"/> without range checking..</summary>
            <param name="index">The index of the value to get or set.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.Clear">
            <summary>
            Resets all values to zero.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.ClearSubVector(System.Int32,System.Int32)">
            <summary>
            Sets all values of a subvector to zero.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.CreateMatrix(System.Int32,System.Int32)">
            <summary>
            Creates a matrix with the given dimensions using the same storage type
            as this vector.
            </summary>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
            <returns>A matrix with the given dimensions.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.CreateVector(System.Int32)">
            <summary>
            Creates a <strong>Vector</strong> of the given size using the same storage type
            as this vector.
            </summary>
            <param name="size">The size of the <strong>Vector</strong> to create.</param>
            <returns>The new <c>Vector</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.DoNegate(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Negates vector and save result to <paramref name="result"/>
            </summary>
            <param name="result">Target vector</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.DoConjugate(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Complex conjugates vector and save result to <paramref name="result"/>
            </summary>
            <param name="result">Target vector</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.DoAdd(`0,MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Adds a scalar to each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to add.</param>
            <param name="result">The vector to store the result of the addition.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.DoAdd(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0},MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Adds another vector to this vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to add to this one.</param>
            <param name="result">The vector to store the result of the addition.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.DoSubtract(`0,MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Subtracts a scalar from each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to subtract.</param>
            <param name="result">The vector to store the result of the subtraction.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.DoSubtractFrom(`0,MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Subtracts each element of the vector from a scalar and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to subtract from.</param>
            <param name="result">The vector to store the result of the subtraction.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.DoSubtract(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0},MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Subtracts another vector to this vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to subtract from this one.</param>
            <param name="result">The vector to store the result of the subtraction.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.DoMultiply(`0,MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Multiplies a scalar to each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to multiply.</param>
            <param name="result">The vector to store the result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.DoDotProduct(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Computes the dot product between this vector and another vector.
            </summary>
            <param name="other">The other vector to add.</param>
            <returns>The result of the addition.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.DoDivide(`0,MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Divides each element of the vector by a scalar and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to divide with.</param>
            <param name="result">The vector to store the result of the division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.DoDivideByThis(`0,MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Divides a scalar by each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to divide.</param>
            <param name="result">The vector to store the result of the division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.DoModulus(`0,MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Computes the modulus for each element of the vector for the given divisor.
            </summary>
            <param name="scalar">The divisor to use.</param>
            <param name="result">A vector to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.DoModulusByThis(`0,MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Computes the modulus for the given dividend for each element of the vector.
            </summary>
            <param name="scalar">The dividend to use.</param>
            <param name="result">A vector to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.DoPointwiseMultiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0},MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Pointwise multiplies this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to pointwise multiply with this one.</param>
            <param name="result">The vector to store the result of the pointwise multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.DoPointwiseDivide(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0},MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Pointwise divide this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to pointwise divide this one by.</param>
            <param name="result">The result of the division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.DoPointwiseModulus(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0},MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Pointwise modulus this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to pointwise modulus this one by.</param>
            <param name="result">The result of the modulus.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.Add(`0)">
            <summary>
            Adds a scalar to each element of the vector.
            </summary>
            <param name="scalar">The scalar to add.</param>
            <returns>A copy of the vector with the scalar added.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.Add(`0,MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Adds a scalar to each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to add.</param>
            <param name="result">The vector to store the result of the addition.</param>
            <exception cref="T:System.ArgumentNullException">If the result vector is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If this vector and <paramref name="result"/> are not the same size.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.Plus">
            <summary>
            Returns a copy of this vector.
            </summary>
            <returns>This vector.</returns>
            <remarks>
            Added as an alternative to the unary addition operator.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.Add(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Adds another vector to this vector.
            </summary>
            <param name="other">The vector to add to this one.</param>
            <returns>A new vector containing the sum of both vectors.</returns>
            <exception cref="T:System.ArgumentNullException">If the other vector is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If this vector and <paramref name="other"/> are not the same size.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.Add(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0},MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Adds another vector to this vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to add to this one.</param>
            <param name="result">The vector to store the result of the addition.</param>
            <exception cref="T:System.ArgumentNullException">If the other vector is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result vector is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If this vector and <paramref name="other"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentException">If this vector and <paramref name="result"/> are not the same size.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.Subtract(`0)">
            <summary>
            Subtracts a scalar from each element of the vector.
            </summary>
            <param name="scalar">The scalar to subtract.</param>
            <returns>A new vector containing the subtraction of this vector and the scalar.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.Subtract(`0,MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Subtracts a scalar from each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to subtract.</param>
            <param name="result">The vector to store the result of the subtraction.</param>
            <exception cref="T:System.ArgumentNullException">If the result vector is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If this vector and <paramref name="result"/> are not the same size.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.SubtractFrom(`0)">
            <summary>
            Subtracts each element of the vector from a scalar.
            </summary>
            <param name="scalar">The scalar to subtract from.</param>
            <returns>A new vector containing the subtraction of the scalar and this vector.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.SubtractFrom(`0,MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Subtracts each element of the vector from a scalar and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to subtract from.</param>
            <param name="result">The vector to store the result of the subtraction.</param>
            <exception cref="T:System.ArgumentNullException">If the result vector is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If this vector and <paramref name="result"/> are not the same size.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.Negate">
            <summary>
            Returns a negated vector.
            </summary>
            <returns>The negated vector.</returns>
            <remarks>Added as an alternative to the unary negation operator.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.Negate(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Negates vector and save result to <paramref name="result"/>
            </summary>
            <param name="result">Target vector</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.Subtract(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Subtracts another vector from this vector.
            </summary>
            <param name="other">The vector to subtract from this one.</param>
            <returns>A new vector containing the subtraction of the the two vectors.</returns>
            <exception cref="T:System.ArgumentNullException">If the other vector is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If this vector and <paramref name="other"/> are not the same size.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.Subtract(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0},MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Subtracts another vector to this vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to subtract from this one.</param>
            <param name="result">The vector to store the result of the subtraction.</param>
            <exception cref="T:System.ArgumentNullException">If the other vector is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result vector is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If this vector and <paramref name="other"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentException">If this vector and <paramref name="result"/> are not the same size.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.Conjugate">
            <summary>
            Return vector with complex conjugate values of the source vector
            </summary>
            <returns>Conjugated vector</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.Conjugate(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Complex conjugates vector and save result to <paramref name="result"/>
            </summary>
            <param name="result">Target vector</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.Multiply(`0)">
            <summary>
            Multiplies a scalar to each element of the vector.
            </summary>
            <param name="scalar">The scalar to multiply.</param>
            <returns>A new vector that is the multiplication of the vector and the scalar.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.Multiply(`0,MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Multiplies a scalar to each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to multiply.</param>
            <param name="result">The vector to store the result of the multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If the result vector is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If this vector and <paramref name="result"/> are not the same size.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.DotProduct(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Computes the dot product between this vector and another vector.
            </summary>
            <param name="other">The other vector to add.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="other"/> is not of the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="other"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.Divide(`0)">
            <summary>
            Divides each element of the vector by a scalar.
            </summary>
            <param name="scalar">The scalar to divide with.</param>
            <returns>A new vector that is the division of the vector and the scalar.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.Divide(`0,MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Divides each element of the vector by a scalar and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to divide with.</param>
            <param name="result">The vector to store the result of the division.</param>
            <exception cref="T:System.ArgumentNullException">If the result vector is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If this vector and <paramref name="result"/> are not the same size.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.DevideByThis(`0)">
            <summary>
            Divides a scalar by each element of the vector.
            </summary>
            <param name="scalar">The scalar to divide.</param>
            <returns>A new vector that is the division of the vector and the scalar.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.DivideByThis(`0,MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Divides a scalar by each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to divide.</param>
            <param name="result">The vector to store the result of the division.</param>
            <exception cref="T:System.ArgumentNullException">If the result vector is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If this vector and <paramref name="result"/> are not the same size.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.Modulus(`0)">
            <summary>
            Computes the modulus for each element of the vector for the given divisor.
            </summary>
            <param name="scalar">The divisor to use.</param>
            <returns>A vector containing the result.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.Modulus(`0,MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Computes the modulus for each element of the vector for the given divisor.
            </summary>
            <param name="scalar">The divisor to use.</param>
            <param name="result">A vector to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.ModulusByThis(`0)">
            <summary>
            Computes the modulus for the given dividend for each element of the vector.
            </summary>
            <param name="scalar">The dividend to use.</param>
            <returns>A vector containing the result.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.ModulusByThis(`0,MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Computes the modulus for the given dividend for each element of the vector.
            </summary>
            <param name="scalar">The dividend to use.</param>
            <param name="result">A vector to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.PointwiseMultiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Pointwise multiplies this vector with another vector.
            </summary>
            <param name="other">The vector to pointwise multiply with this one.</param>
            <returns>A new vector which is the pointwise multiplication of the two vectors.</returns>
            <exception cref="T:System.ArgumentNullException">If the other vector is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If this vector and <paramref name="other"/> are not the same size.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.PointwiseMultiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0},MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Pointwise multiplies this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to pointwise multiply with this one.</param>
            <param name="result">The vector to store the result of the pointwise multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If the other vector is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result vector is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If this vector and <paramref name="other"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentException">If this vector and <paramref name="result"/> are not the same size.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.PointwiseDivide(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Pointwise divide this vector with another vector.
            </summary>
            <param name="other">The vector to pointwise divide this one by.</param>
            <returns>A new vector which is the pointwise division of the two vectors.</returns>
            <exception cref="T:System.ArgumentNullException">If the other vector is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If this vector and <paramref name="other"/> are not the same size.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.PointwiseDivide(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0},MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Pointwise divide this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to pointwise divide this one by.</param>
            <param name="result">The vector to store the result of the pointwise division.</param>
            <exception cref="T:System.ArgumentNullException">If the other vector is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result vector is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If this vector and <paramref name="other"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentException">If this vector and <paramref name="result"/> are not the same size.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.PointwiseModulus(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Pointwise modulus this vector with another vector.
            </summary>
            <param name="other">The vector to pointwise modulus this one by.</param>
            <returns>A new vector which is the pointwise modulus of the two vectors.</returns>
            <exception cref="T:System.ArgumentNullException">If the other vector is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If this vector and <paramref name="other"/> are not the same size.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.PointwiseModulus(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0},MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Pointwise modulus this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to pointwise modulus this one by.</param>
            <param name="result">The vector to store the result of the pointwise modulus.</param>
            <exception cref="T:System.ArgumentNullException">If the other vector is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result vector is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If this vector and <paramref name="other"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentException">If this vector and <paramref name="result"/> are not the same size.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.OuterProduct(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0},MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Outer product of two vectors
            </summary>
            <param name="u">First vector</param>
            <param name="v">Second vector</param>
            <returns>Matrix M[i,j] = u[i]*v[j] </returns>
            <exception cref="T:System.ArgumentNullException">If the u vector is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the v vector is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.OuterProduct(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Outer product of this and another vector.
            </summary>
            <param name="v">The vector to operate on.</param>
            <returns>
            Matrix M[i,j] = this[i] * v[j].
            </returns>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.OuterProduct(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0},MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.op_UnaryPlus(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Returns a <strong>Vector</strong> containing the same values of <paramref name="rightSide"/>.
            </summary>
            <remarks>This method is included for completeness.</remarks>
            <param name="rightSide">The vector to get the values from.</param>
            <returns>A vector containing the same values as <paramref name="rightSide"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.op_UnaryNegation(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Returns a <strong>Vector</strong> containing the negated values of <paramref name="rightSide"/>.
            </summary>
            <param name="rightSide">The vector to get the values from.</param>
            <returns>A vector containing the negated values as <paramref name="rightSide"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.op_Addition(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0},MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Adds two <strong>Vectors</strong> together and returns the results.
            </summary>
            <param name="leftSide">One of the vectors to add.</param>
            <param name="rightSide">The other vector to add.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.op_Addition(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0},`0)">
            <summary>
            Adds a scalar to each element of a vector.
            </summary>
            <param name="leftSide">The vector to add to.</param>
            <param name="rightSide">The scalar value to add.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.op_Addition(`0,MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Adds a scalar to each element of a vector.
            </summary>
            <param name="leftSide">The scalar value to add.</param>
            <param name="rightSide">The vector to add to.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.op_Subtraction(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0},MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Subtracts two <strong>Vectors</strong> and returns the results.
            </summary>
            <param name="leftSide">The vector to subtract from.</param>
            <param name="rightSide">The vector to subtract.</param>
            <returns>The result of the subtraction.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.op_Subtraction(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0},`0)">
            <summary>
            Subtracts a scalar from each element of a vector.
            </summary>
            <param name="leftSide">The vector to subtract from.</param>
            <param name="rightSide">The scalar value to subtract.</param>
            <returns>The result of the subtraction.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.op_Subtraction(`0,MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Substracts each element of a vector from a scalar.
            </summary>
            <param name="leftSide">The scalar value to subtract from.</param>
            <param name="rightSide">The vector to subtract.</param>
            <returns>The result of the subtraction.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.op_Multiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0},`0)">
            <summary>
            Multiplies a vector with a scalar.
            </summary>
            <param name="leftSide">The vector to scale.</param>
            <param name="rightSide">The scalar value.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.op_Multiply(`0,MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Multiplies a vector with a scalar.
            </summary>
            <param name="leftSide">The scalar value.</param>
            <param name="rightSide">The vector to scale.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.op_Multiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0},MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Computes the dot product between two <strong>Vectors</strong>.
            </summary>
            <param name="leftSide">The left row vector.</param>
            <param name="rightSide">The right column vector.</param>
            <returns>The dot product between the two vectors.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.op_Division(`0,MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Divides a scalar with a vector.
            </summary>
            <param name="leftSide">The scalar to divide.</param>
            <param name="rightSide">The vector.</param>
            <returns>The result of the division.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.op_Division(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0},`0)">
            <summary>
            Divides a vector with a scalar.
            </summary>
            <param name="leftSide">The vector to divide.</param>
            <param name="rightSide">The scalar value.</param>
            <returns>The result of the division.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.op_Division(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0},MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Pointwise divides two <strong>Vectors</strong>.
            </summary>
            <param name="leftSide">The vector to divide.</param>
            <param name="rightSide">The other vector.</param>
            <returns>The result of the division.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.op_Modulus(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0},`0)">
            <summary>
            Computes the modulus of each element of the vector of the given divisor.
            </summary>
            <param name="leftSide">The vector whose elements we want to compute the modulus of.</param>
            <param name="rightSide">The divisor to use.</param>
            <returns>The result of the calculation</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.op_Modulus(`0,MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Computes the modulus of the given dividend of each element of the vector.
            </summary>
            <param name="leftSide">The dividend we want to compute the modulus of.</param>
            <param name="rightSide">The vector whose elements we want to use as divisor.</param>
            <returns>The result of the calculation</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.op_Modulus(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0},MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Computes the pointwise modulus of each element of two <strong>vectors</strong>.
            </summary>
            <param name="leftSide">The vector whose elements we want to compute the modulus of.</param>
            <param name="rightSide">The divisor to use.</param>
            <returns>The result of the calculation</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.Norm(System.Double)">
            <summary>
            Computes the p-Norm.
            </summary>
            <param name="p">
            The p value.
            </param>
            <returns>
            <c>Scalar ret = (sum(abs(this[i])^p))^(1/p)</c>
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.Normalize(System.Double)">
            <summary>
            Normalizes this vector to a unit vector with respect to the p-norm.
            </summary>
            <param name="p">
            The p value.
            </param>
            <returns>
            This vector normalized to a unit vector with respect to the p-norm.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.AbsoluteMinimum">
            <summary>
            Returns the value of the absolute minimum element.
            </summary>
            <returns>The value of the absolute minimum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.AbsoluteMinimumIndex">
            <summary>
            Returns the index of the absolute minimum element.
            </summary>
            <returns>The index of absolute minimum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.AbsoluteMaximum">
            <summary>
            Returns the value of the absolute maximum element.
            </summary>
            <returns>The value of the absolute maximum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.AbsoluteMaximumIndex">
            <summary>
            Returns the index of the absolute maximum element.
            </summary>
            <returns>The index of absolute maximum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.Maximum">
            <summary>
            Returns the value of maximum element.
            </summary>
            <returns>The value of maximum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.MaximumIndex">
            <summary>
            Returns the index of the absolute maximum element.
            </summary>
            <returns>The index of absolute maximum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.Minimum">
            <summary>
            Returns the value of the minimum element.
            </summary>
            <returns>The value of the minimum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.MinimumIndex">
            <summary>
            Returns the index of the minimum element.
            </summary>
            <returns>The index of minimum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.Sum">
            <summary>
            Computes the sum of the vector's elements.
            </summary>
            <returns>The sum of the vector's elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.SumMagnitudes">
            <summary>
            Computes the sum of the absolute value of the vector's elements.
            </summary>
            <returns>The sum of the absolute value of the vector's elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.Clone">
            <summary>
            Returns a deep-copy clone of the vector.
            </summary>
            <returns>A deep-copy clone of the vector.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.SetValues(`0[])">
            <summary>
            Set the values of this vector to the given values.
            </summary>
            <param name="values">The array containing the values to use.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="values"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="values"/> is not the same size as this vector.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.CopyTo(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Copies the values of this vector into the target vector.
            </summary>
            <param name="target">The vector to copy elements into.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="target"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="target"/> is not the same size as this vector.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.SubVector(System.Int32,System.Int32)">
            <summary>
            Creates a vector containing specified elements.
            </summary>
            <param name="index">The first element to begin copying from.</param>
            <param name="count">The number of elements to copy.</param>
            <returns>A vector containing a copy of the specified elements.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><list><item>If <paramref name="index"/> is not positive or
            greater than or equal to the size of the vector.</item>
            <item>If <paramref name="index"/> + <paramref name="count"/> is greater than or equal to the size of the vector.</item>
            </list></exception>
            <exception cref="T:System.ArgumentException">If <paramref name="count"/> is not positive.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.SetSubVector(System.Int32,System.Int32,MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Copies the values of a given vector into a region in this vector.
            </summary>
            <param name="index">The field to start copying to</param>
            <param name="count">The number of fields to cpy. Must be positive.</param>
            <param name="subVector">The sub-vector to copy from.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="subVector"/> is <see langword="null"/></exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.CopySubVectorTo(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies the requested elements from this vector to another.
            </summary>
            <param name="destination">The vector to copy the elements to.</param>
            <param name="sourceIndex">The element to start copying from.</param>
            <param name="targetIndex">The element to start copying to.</param>
            <param name="count">The number of elements to copy.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.ToArray">
            <summary>
            Returns the data contained in the vector as an array.
            </summary>
            <returns>
            The vector's data as an array.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.ToColumnMatrix">
            <summary>
            Create a matrix based on this vector in column form (one single column).
            </summary>
            <returns>
            This vector as a column matrix.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.ToRowMatrix">
            <summary>
            Create a matrix based on this vector in row form (one single row).
            </summary>
            <returns>
            This vector as a row matrix.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.GetIndexedEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the position and value of the element, for all non-zero elements.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> over this vector that contains the position and value of each element.
            </returns>
            <remarks>
            The enumerator returns a <seealso cref="T:System.Tuple`2"/>
            with the first value being the element index and the second value
            being the value of the element at that index.
            The enumerator will exclude all elements with a zero value.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.MapInplace(System.Func{`0,`0},System.Boolean)">
            <summary>
            Applies a function to each value of this vector and replaces the value with its result.
            If forceMapZero is not set to true, zero values may or may not be skipped depending
            on the actual data storage implementation (relevant mostly for sparse vectors).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.MapIndexedInplace(System.Func{System.Int32,`0,`0},System.Boolean)">
            <summary>
            Applies a function to each value of this vector and replaces the value with its result.
            The index of each value (zero-based) is passed as first argument to the function.
            If forceMapZero is not set to true, zero values may or may not be skipped depending
            on the actual data storage implementation (relevant mostly for sparse vectors).
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.Storage">
            <summary>
            Gets the raw vector data storage.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.Count">
            <summary>
            Gets the number of items.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Vector`1.Item(System.Int32)">
            <summary>Gets or sets the value at the given <paramref name="index"/>.</summary>
            <param name="index">The index of the value to get or set.</param>
            <returns>The value of the vector at the given <paramref name="index"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="index"/> is negative or
            greater than the size of the vector.</exception>
        </member>
        <member name="T:MathNet.Numerics.NonConvergenceException">
            <summary>
            An algorithm failed to converge.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.RootFinding.Broyden">
            <summary>
            Algorithm by Broyden.
            Implementation inspired by Press, Teukolsky, Vetterling, and Flannery, "Numerical Recipes in C", 2nd edition, Cambridge University Press
            </summary>
        </member>
        <member name="M:MathNet.Numerics.RootFinding.Broyden.FindRoot(System.Func{System.Double[],System.Double[]},System.Double[],System.Double,System.Int32)">
            <summary>Find a solution of the equation f(x)=0.</summary>
            <param name="f">The function to find roots from.</param>
            <param name="initialGuess">Initial guess of the root.</param>
            <param name="accuracy">Desired accuracy. The root will be refined until the accuracy or the maximum number of iterations is reached. Default 1e-8.</param>
            <param name="maxIterations">Maximum number of iterations. Default 100.</param>
            <returns>Returns the root with the specified accuracy.</returns>
            <exception cref="T:MathNet.Numerics.NonConvergenceException"></exception>
        </member>
        <member name="M:MathNet.Numerics.RootFinding.Broyden.TryFindRoot(System.Func{System.Double[],System.Double[]},System.Double[],System.Double,System.Int32,System.Double[]@)">
            <summary>Find a solution of the equation f(x)=0.</summary>
            <param name="f">The function to find roots from.</param>
            <param name="initialGuess">Initial guess of the root.</param>
            <param name="accuracy">Desired accuracy. The root will be refined until the accuracy or the maximum number of iterations is reached.</param>
            <param name="maxIterations">Maximum number of iterations. Usually 100.</param>
            <param name="root">The root that was found, if any. Undefined if the function returns false.</param>
            <returns>True if a root with the specified accuracy was found, else false.</returns>
        </member>
        <member name="M:MathNet.Numerics.RootFinding.Broyden.CalculateApproximateJacobian(System.Func{System.Double[],System.Double[]},System.Double[],System.Double[])">
            <summary>
            Helper method to calculate an approxiamtion of the Jacobian.
            </summary>
            <param name="f">The function.</param>
            <param name="x0">The argument.</param>
            <returns></returns>
        </member>
        <member name="T:MathNet.Numerics.RootFinding.NewtonRaphson">
            <summary>
            Pure Newton-Raphson root-finding algorithm without any recovery measures in cases it behaves badly.
            The algorithm aborts immediately if the root leaves the bound interval.
            </summary>
            <seealso cref="T:MathNet.Numerics.RootFinding.RobustNewtonRaphson"/>
        </member>
        <member name="M:MathNet.Numerics.RootFinding.NewtonRaphson.FindRoot(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.Double,System.Double,System.Double,System.Int32)">
            <summary>Find a solution of the equation f(x)=0.</summary>
            <param name="f">The function to find roots from.</param>
            <param name="df">The first derivative of the function to find roots from.</param>
            <param name="lowerBound">The low value of the range where the root is supposed to be. Aborts if it leaves the interval.</param>
            <param name="upperBound">The high value of the range where the root is supposed to be. Aborts if it leaves the interval.</param>
            <param name="accuracy">Desired accuracy. The root will be refined until the accuracy or the maximum number of iterations is reached. Default 1e-8.</param>
            <param name="maxIterations">Maximum number of iterations. Default 100.</param>
            <returns>Returns the root with the specified accuracy.</returns>
            <exception cref="T:MathNet.Numerics.NonConvergenceException"></exception>
        </member>
        <member name="M:MathNet.Numerics.RootFinding.NewtonRaphson.FindRootNearGuess(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>Find a solution of the equation f(x)=0.</summary>
            <param name="f">The function to find roots from.</param>
            <param name="df">The first derivative of the function to find roots from.</param>
            <param name="initialGuess">Initial guess of the root.</param>
            <param name="lowerBound">The low value of the range where the root is supposed to be. Aborts if it leaves the interval. Default MinValue.</param>
            <param name="upperBound">The high value of the range where the root is supposed to be. Aborts if it leaves the interval. Default MaxValue.</param>
            <param name="accuracy">Desired accuracy. The root will be refined until the accuracy or the maximum number of iterations is reached. Default 1e-8.</param>
            <param name="maxIterations">Maximum number of iterations. Default 100.</param>
            <returns>Returns the root with the specified accuracy.</returns>
            <exception cref="T:MathNet.Numerics.NonConvergenceException"></exception>
        </member>
        <member name="M:MathNet.Numerics.RootFinding.NewtonRaphson.TryFindRoot(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double@)">
            <summary>Find a solution of the equation f(x)=0.</summary>
            <param name="f">The function to find roots from.</param>
            <param name="df">The first derivative of the function to find roots from.</param>
            <param name="initialGuess">Initial guess of the root.</param>
            <param name="lowerBound">The low value of the range where the root is supposed to be. Aborts if it leaves the interval.</param>
            <param name="upperBound">The high value of the range where the root is supposed to be. Aborts if it leaves the interval.</param>
            <param name="accuracy">Desired accuracy. The root will be refined until the accuracy or the maximum number of iterations is reached. Example: 1e-14.</param>
            <param name="maxIterations">Maximum number of iterations. Example: 100.</param>
            <param name="root">The root that was found, if any. Undefined if the function returns false.</param>
            <returns>True if a root with the specified accuracy was found, else false.</returns>
        </member>
        <member name="T:MathNet.Numerics.RootFinding.RobustNewtonRaphson">
            <summary>
            Robust Newton-Raphson root-finding algorithm that falls back to bisection when overshooting or converging too slow, or to subdivision on lacking bracketing.
            </summary>
            <seealso cref="T:MathNet.Numerics.RootFinding.NewtonRaphson"/>
        </member>
        <member name="M:MathNet.Numerics.RootFinding.RobustNewtonRaphson.FindRoot(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>Find a solution of the equation f(x)=0.</summary>
            <param name="f">The function to find roots from.</param>
            <param name="df">The first derivative of the function to find roots from.</param>
            <param name="lowerBound">The low value of the range where the root is supposed to be.</param>
            <param name="upperBound">The high value of the range where the root is supposed to be.</param>
            <param name="accuracy">Desired accuracy. The root will be refined until the accuracy or the maximum number of iterations is reached. Default 1e-8.</param>
            <param name="maxIterations">Maximum number of iterations. Default 100.</param>
            <param name="subdivision">How many parts an interval should be split into for zero crossing scanning in case of lacking bracketing. Default 20.</param>
            <returns>Returns the root with the specified accuracy.</returns>
            <exception cref="T:MathNet.Numerics.NonConvergenceException"></exception>
        </member>
        <member name="M:MathNet.Numerics.RootFinding.RobustNewtonRaphson.TryFindRoot(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Double@)">
            <summary>Find a solution of the equation f(x)=0.</summary>
            <param name="f">The function to find roots from.</param>
            <param name="df">The first derivative of the function to find roots from.</param>
            <param name="lowerBound">The low value of the range where the root is supposed to be.</param>
            <param name="upperBound">The high value of the range where the root is supposed to be.</param>
            <param name="accuracy">Desired accuracy. The root will be refined until the accuracy or the maximum number of iterations is reached. Example: 1e-14.</param>
            <param name="maxIterations">Maximum number of iterations. Example: 100.</param>
            <param name="subdivision">How many parts an interval should be split into for zero crossing scanning in case of lacking bracketing. Example: 20.</param>
            <param name="root">The root that was found, if any. Undefined if the function returns false.</param>
            <returns>True if a root with the specified accuracy was found, else false.</returns>
        </member>
        <member name="M:MathNet.Numerics.RootFinding.ZeroCrossingBracketing.Expand(System.Func{System.Double,System.Double},System.Double@,System.Double@,System.Double,System.Int32)">
            <summary>Detect a range containing at least one root.</summary>
            <param name="f">The function to detect roots from.</param>
            <param name="lowerBound">Lower value of the range.</param>
            <param name="upperBound">Upper value of the range</param>
            <param name="factor">The growing factor of research. Usually 1.6.</param>
            <param name="maxIterations">Maximum number of iterations. Usually 50.</param>
            <returns>True if the bracketing operation succeeded, false otherwise.</returns>
            <remarks>This iterative methods stops when two values with opposite signs are found.</remarks>
        </member>
        <member name="T:MathNet.Numerics.RootFinding.Brent">
            <summary>
            Algorithm by by Brent, Van Wijngaarden, Dekker et al.
            Implementation inspired by Press, Teukolsky, Vetterling, and Flannery, "Numerical Recipes in C", 2nd edition, Cambridge University Press
            </summary>
        </member>
        <member name="M:MathNet.Numerics.RootFinding.Brent.FindRoot(System.Func{System.Double,System.Double},System.Double,System.Double,System.Double,System.Int32)">
            <summary>Find a solution of the equation f(x)=0.</summary>
            <param name="f">The function to find roots from.</param>
            <param name="lowerBound">The low value of the range where the root is supposed to be.</param>
            <param name="upperBound">The high value of the range where the root is supposed to be.</param>
            <param name="accuracy">Desired accuracy. The root will be refined until the accuracy or the maximum number of iterations is reached. Default 1e-8.</param>
            <param name="maxIterations">Maximum number of iterations. Default 100.</param>
            <returns>Returns the root with the specified accuracy.</returns>
            <exception cref="T:MathNet.Numerics.NonConvergenceException"></exception>
        </member>
        <member name="M:MathNet.Numerics.RootFinding.Brent.TryFindRoot(System.Func{System.Double,System.Double},System.Double,System.Double,System.Double,System.Int32,System.Double@)">
            <summary>Find a solution of the equation f(x)=0.</summary>
            <param name="f">The function to find roots from.</param>
            <param name="lowerBound">The low value of the range where the root is supposed to be.</param>
            <param name="upperBound">The high value of the range where the root is supposed to be.</param>
            <param name="accuracy">Desired accuracy. The root will be refined until the accuracy or the maximum number of iterations is reached.</param>
            <param name="maxIterations">Maximum number of iterations. Usually 100.</param>
            <param name="root">The root that was found, if any. Undefined if the function returns false.</param>
            <returns>True if a root with the specified accuracy was found, else false.</returns>
        </member>
        <member name="M:MathNet.Numerics.RootFinding.Brent.Sign(System.Double,System.Double)">
            <summary>Helper method useful for preventing rounding errors.</summary>
            <returns>a*sign(b)</returns>
        </member>
        <member name="M:MathNet.Numerics.FindRoots.OfFunction(System.Func{System.Double,System.Double},System.Double,System.Double,System.Double,System.Int32)">
            <summary>Find a solution of the equation f(x)=0.</summary>
            <param name="f">The function to find roots from.</param>
            <param name="lowerBound">The low value of the range where the root is supposed to be.</param>
            <param name="upperBound">The high value of the range where the root is supposed to be.</param>
            <param name="accuracy">Desired accuracy. The root will be refined until the accuracy or the maximum number of iterations is reached. Example: 1e-14.</param>
            <param name="maxIterations">Maximum number of iterations. Example: 100.</param>
        </member>
        <member name="M:MathNet.Numerics.FindRoots.OfFunctionDerivative(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.Double,System.Double,System.Double,System.Int32)">
            <summary>Find a solution of the equation f(x)=0.</summary>
            <param name="f">The function to find roots from.</param>
            <param name="df">The first derivative of the function to find roots from.</param>
            <param name="lowerBound">The low value of the range where the root is supposed to be.</param>
            <param name="upperBound">The high value of the range where the root is supposed to be.</param>
            <param name="accuracy">Desired accuracy. The root will be refined until the accuracy or the maximum number of iterations is reached. Example: 1e-14.</param>
            <param name="maxIterations">Maximum number of iterations. Example: 100.</param>
        </member>
        <member name="M:MathNet.Numerics.FindRoots.Quadratic(System.Double,System.Double,System.Double)">
            <summary>
            Find both complex roots of the quadratic equation c + b*x + a*x^2 = 0.
            Note the special coefficient order ascending by exponent (consistent with polynomials).
            </summary>
        </member>
        <member name="T:MathNet.Numerics.RootFinding.Bisection">
            <summary>
            Bisection root-finding algorithm without any recovery measures in case of lacking bracketing.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.RootFinding.Bisection.FindRootExpand(System.Func{System.Double,System.Double},System.Double,System.Double,System.Double,System.Int32,System.Double,System.Int32)">
            <summary>Find a solution of the equation f(x)=0.</summary>
            <param name="f">The function to find roots from.</param>
            <param name="guessLowerBound">Guess for the low value of the range where the root is supposed to be. Will be expanded if needed.</param>
            <param name="guessUpperBound">Guess for the  high value of the range where the root is supposed to be. Will be expanded if needed.</param>
            <param name="accuracy">Desired accuracy. The root will be refined until the accuracy or the maximum number of iterations is reached. Default 1e-8.</param>
            <param name="maxIterations">Maximum number of iterations. Default 100.</param>
            <param name="expandFactor">Factor at which to expand the bounds, if needed. Default 1.6.</param>
            <param name="maxExpandIteratons">Maximum number of expand iterations. Default 100.</param>
            <returns>Returns the root with the specified accuracy.</returns>
            <exception cref="T:MathNet.Numerics.NonConvergenceException"></exception>
        </member>
        <member name="M:MathNet.Numerics.RootFinding.Bisection.FindRoot(System.Func{System.Double,System.Double},System.Double,System.Double,System.Double,System.Int32)">
            <summary>Find a solution of the equation f(x)=0.</summary>
            <param name="f">The function to find roots from.</param>
            <param name="lowerBound">The low value of the range where the root is supposed to be.</param>
            <param name="upperBound">The high value of the range where the root is supposed to be.</param>
            <param name="accuracy">Desired accuracy. The root will be refined until the accuracy or the maximum number of iterations is reached. Default 1e-8.</param>
            <param name="maxIterations">Maximum number of iterations. Default 100.</param>
            <returns>Returns the root with the specified accuracy.</returns>
            <exception cref="T:MathNet.Numerics.NonConvergenceException"></exception>
        </member>
        <member name="M:MathNet.Numerics.RootFinding.Bisection.TryFindRoot(System.Func{System.Double,System.Double},System.Double,System.Double,System.Double,System.Int32,System.Double@)">
            <summary>Find a solution of the equation f(x)=0.</summary>
            <param name="f">The function to find roots from.</param>
            <param name="lowerBound">The low value of the range where the root is supposed to be.</param>
            <param name="upperBound">The high value of the range where the root is supposed to be.</param>
            <param name="accuracy">Desired accuracy. The root will be refined until the accuracy or the maximum number of iterations is reached.</param>
            <param name="maxIterations">Maximum number of iterations. Usually 100.</param>
            <param name="root">The root that was found, if any. Undefined if the function returns false.</param>
            <returns>True if a root with the specified accuracy was found, else false.</returns>
        </member>
        <member name="T:MathNet.Numerics.Evaluate">
            <summary>
            Evaluation functions, useful for function approximation.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Evaluate.Polynomial(System.Double[],System.Double)">
            <summary>
            Evaluate polynomials.
            </summary>
            <param name="coefficients">The coefficients of the polynomial.</param>
            <param name="z">The location where to evaluate the polynomial at.</param>
            <returns>the evaluation of the polynomial.</returns>
        </member>
        <member name="M:MathNet.Numerics.Evaluate.Polynomial(System.Double,System.Double[])">
            <summary>
            Evaluate a polynomial at point x.
            Coefficients are ordered by power with power k at index k.
            Example: coefficients [3,-1,2] represent y=2x^2-x+3.
            </summary>
            <param name="z">The location where to evaluate the polynomial at.</param>
            <param name="coefficients">The coefficients of the polynomial, coefficient for power k at index k.</param>
        </member>
        <member name="M:MathNet.Numerics.Evaluate.Series(System.Func{System.Double})">
            <summary>
            Numerically stable series summation
            </summary>
            <param name="nextSummand">provides the summands sequentially</param>
            <returns>Sum</returns>
        </member>
        <member name="M:MathNet.Numerics.Evaluate.ChebyshevA(System.Double[],System.Double)">
            <summary> Evaluates the series of Chebyshev polynomials Ti at argument x/2.
            The series is given by
            <pre>
                  N-1
                   - '
            y  =   >   coef[i] T (x/2)
                   -            i
                  i=0
            </pre>
            Coefficients are stored in reverse order, i.e. the zero
            order term is last in the array.  Note N is the number of
            coefficients, not the order.
            <p/>
            If coefficients are for the interval a to b, x must
            have been transformed to x -> 2(2x - b - a)/(b-a) before
            entering the routine.  This maps x from (a, b) to (-1, 1),
            over which the Chebyshev polynomials are defined.
            <p/>
            If the coefficients are for the inverted interval, in
            which (a, b) is mapped to (1/b, 1/a), the transformation
            required is x -> 2(2ab/x - b - a)/(b-a).  If b is infinity,
            this becomes x -> 4a/x - 1.
            <p/>
            SPEED:
            <p/>
            Taking advantage of the recurrence properties of the
            Chebyshev polynomials, the routine requires one more
            addition per loop than evaluating a nested polynomial of
            the same degree.
            </summary>
            <param name="coefficients">The coefficients of the polynomial.</param>
            <param name="x">Argument to the polynomial.</param>
            <remarks>
            Reference: https://bpm2.svn.codeplex.com/svn/Common.Numeric/Arithmetic.cs
            <p/>
            Marked as Deprecated in
            http://people.apache.org/~isabel/mahout_site/mahout-matrix/apidocs/org/apache/mahout/jet/math/Arithmetic.html
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Evaluate.ChebyshevSum(System.Int32,System.Double[],System.Double)">
            <summary>
            Summation of Chebyshev polynomials, using the Clenshaw method with Reinsch modification.
            </summary>
            <param name="n">The no. of terms in the sequence.</param>
            <param name="coefficients">The coefficients of the Chebyshev series, length n+1.</param>
            <param name="x">The value at which the series is to be evaluated.</param>
            <remarks>
            ORIGINAL AUTHOR:
               Dr. Allan J. MacLeod; Dept. of Mathematics and Statistics, University of Paisley; High St., PAISLEY, SCOTLAND
            REFERENCES:
               "An error analysis of the modified Clenshaw method for evaluating Chebyshev and Fourier series"
               J. Oliver, J.I.M.A., vol. 20, 1977, pp379-391
            </remarks>
        </member>
        <member name="T:MathNet.Numerics.SpecialFunctions">
            <summary>
            This partial implementation of the SpecialFunctions class contains all methods related to the modified bessel function.
            </summary>
            <summary>
            This partial implementation of the SpecialFunctions class contains all methods related to the modified bessel function.
            </summary>
            <summary>
            This partial implementation of the SpecialFunctions class contains all methods related to the logistic function.
            </summary>
            <summary>
            This partial implementation of the SpecialFunctions class contains all methods related to the harmonic function.
            </summary>
            <summary>
            This partial implementation of the SpecialFunctions class contains all methods related to the error function.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.SpecialFunctions.Gamma_n">
            <summary>
            The order of the <see cref="M:MathNet.Numerics.SpecialFunctions.GammaLn(System.Double)"/> approximation.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.SpecialFunctions.Gamma_r">
            <summary>
            Auxiliary variable when evaluating the <see cref="M:MathNet.Numerics.SpecialFunctions.GammaLn(System.Double)"/> function.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.StruveL0(System.Double)">
            <summary>
            Returns the modified Struve function of order 0.
            </summary>
            <param name="x">The value to compute the function of.</param>
            <returns></returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.StruveL1(System.Double)">
            <summary>
            Returns the modified Struve function of order 1.
            </summary>
            <param name="x">The value to compute the function of.</param>
            <returns></returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.BesselI0MStruveL0(System.Double)">
            <summary>
            Returns the difference between the Bessel I0 and Struve L0 functions.
            </summary>
            <param name="x">The value to compute the function of.</param>
            <returns></returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.BesselI1MStruveL1(System.Double)">
            <summary>
            Returns the difference between the Bessel I1 and Struve L1 functions.
            </summary>
            <param name="x">The value to compute the function of.</param>
            <returns></returns>
        </member>
        <member name="F:MathNet.Numerics.SpecialFunctions.BesselI0A">
            <summary>
            **************************************
            COEFFICIENTS FOR METHODS bessi0      *
            **************************************
            </summary>
            <summary> Chebyshev coefficients for exp(-x) I0(x)
            in the interval [0, 8].
            
            lim(x->0){ exp(-x) I0(x) } = 1.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.SpecialFunctions.BesselI0B">
            <summary> Chebyshev coefficients for exp(-x) sqrt(x) I0(x)
            in the inverted interval [8, infinity].
            
            lim(x->inf){ exp(-x) sqrt(x) I0(x) } = 1/sqrt(2pi).
            </summary>
        </member>
        <member name="F:MathNet.Numerics.SpecialFunctions.BesselI1A">
            <summary>
            **************************************
            COEFFICIENTS FOR METHODS bessi1      *
            **************************************
            </summary>
            <summary> Chebyshev coefficients for exp(-x) I1(x) / x
            in the interval [0, 8].
            
            lim(x->0){ exp(-x) I1(x) / x } = 1/2.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.SpecialFunctions.BesselI1B">
             <summary> Chebyshev coefficients for exp(-x) sqrt(x) I1(x)
             in the inverted interval [8, infinity].
            
             lim(x->inf){ exp(-x) sqrt(x) I1(x) } = 1/sqrt(2pi).
             </summary>
        </member>
        <member name="F:MathNet.Numerics.SpecialFunctions.BesselK0A">
            <summary>
            **************************************
            COEFFICIENTS FOR METHODS bessk0, bessk0e *
            **************************************
            </summary>
            <summary> Chebyshev coefficients for K0(x) + log(x/2) I0(x)
            in the interval [0, 2].  The odd order coefficients are all
            zero; only the even order coefficients are listed.
            
            lim(x->0){ K0(x) + log(x/2) I0(x) } = -EUL.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.SpecialFunctions.BesselK0B">
            <summary> Chebyshev coefficients for exp(x) sqrt(x) K0(x)
            in the inverted interval [2, infinity].
            
            lim(x->inf){ exp(x) sqrt(x) K0(x) } = sqrt(pi/2).
            </summary>
        </member>
        <member name="F:MathNet.Numerics.SpecialFunctions.BesselK1A">
            <summary>
            **************************************
            COEFFICIENTS FOR METHODS bessk1, bessk1e *
            **************************************
            </summary>
            <summary> Chebyshev coefficients for x(K1(x) - log(x/2) I1(x))
            in the interval [0, 2].
            
            lim(x->0){ x(K1(x) - log(x/2) I1(x)) } = 1.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.SpecialFunctions.BesselK1B">
             <summary> Chebyshev coefficients for exp(x) sqrt(x) K1(x)
             in the interval [2, infinity].
            
             lim(x->inf){ exp(x) sqrt(x) K1(x) } = sqrt(pi/2).
             </summary>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.BesselI0(System.Double)">
            <summary>Returns the modified Bessel function of first kind, order 0 of the argument.
            <p/>
            The function is defined as <tt>i0(x) = j0( ix )</tt>.
            <p/>
            The range is partitioned into the two intervals [0, 8] and
            (8, infinity). Chebyshev polynomial expansions are employed
            in each interval.
            </summary>
            <param name="x">The value to compute the bessel function of.
            </param>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.BesselI1(System.Double)">
            <summary>Returns the modified Bessel function of first kind,
            order 1 of the argument.
            <p/>
            The function is defined as <tt>i1(x) = -i j1( ix )</tt>.
            <p/>
            The range is partitioned into the two intervals [0, 8] and
            (8, infinity). Chebyshev polynomial expansions are employed
            in each interval.
            </summary>
            <param name="x">The value to compute the bessel function of.
            </param>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.BesselK0(System.Double)">
            <summary> Returns the modified Bessel function of the second kind
            of order 0 of the argument.
            <p/>
            The range is partitioned into the two intervals [0, 8] and
            (8, infinity). Chebyshev polynomial expansions are employed
            in each interval.
            </summary>
            <param name="x">The value to compute the bessel function of.
            </param>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.BesselK0e(System.Double)">
            <summary>Returns the exponentially scaled modified Bessel function
            of the second kind of order 0 of the argument.
            </summary>
            <param name="x">The value to compute the bessel function of.
            </param>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.BesselK1(System.Double)">
            <summary> Returns the modified Bessel function of the second kind
            of order 1 of the argument.
            <p/>
            The range is partitioned into the two intervals [0, 2] and
            (2, infinity). Chebyshev polynomial expansions are employed
            in each interval.
            </summary>
            <param name="x">The value to compute the bessel function of.
            </param>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.BesselK1e(System.Double)">
            <summary> Returns the exponentially scaled modified Bessel function
            of the second kind of order 1 of the argument.
            <p/>
            <tt>k1e(x) = exp(x) * k1(x)</tt>.
            </summary>
            <param name="x">The value to compute the bessel function of.
            </param>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.Logistic(System.Double)">
            <summary>
            Computes the logistic function. see: http://en.wikipedia.org/wiki/Logistic
            </summary>
            <param name="p">The parameter for which to compute the logistic function.</param>
            <returns>The logistic function of <paramref name="p"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.Logit(System.Double)">
            <summary>
            Computes the logit function, the inverse of the sigmoid logistic function. see: http://en.wikipedia.org/wiki/Logit
            </summary>
            <param name="p">The parameter for which to compute the logit function. This number should be
            between 0 and 1.</param>
            <returns>The logarithm of <paramref name="p"/> divided by 1.0 - <paramref name="p"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.Harmonic(System.Int32)">
            <summary>
            Computes the <paramref name="t"/>'th Harmonic number.
            </summary>
            <param name="t">The Harmonic number which needs to be computed.</param>
            <returns>The t'th Harmonic number.</returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.GeneralHarmonic(System.Int32,System.Double)">
            <summary>
            Compute the generalized harmonic number of order n of m. (1 + 1/2^m + 1/3^m + ... + 1/n^m)
            </summary>
            <param name="n">The order parameter.</param>
            <param name="m">The power parameter.</param>
            <returns>General Harmonic number.</returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.BetaLn(System.Double,System.Double)">
            <summary>
            Computes the logarithm of the Euler Beta function.
            </summary>
            <param name="z">The first Beta parameter, a positive real number.</param>
            <param name="w">The second Beta parameter, a positive real number.</param>
            <returns>The logarithm of the Euler Beta function evaluated at z,w.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="z"/> or <paramref name="w"/> are not positive.</exception>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.Beta(System.Double,System.Double)">
            <summary>
            Computes the Euler Beta function.
            </summary>
            <param name="z">The first Beta parameter, a positive real number.</param>
            <param name="w">The second Beta parameter, a positive real number.</param>
            <returns>The Euler Beta function evaluated at z,w.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="z"/> or <paramref name="w"/> are not positive.</exception>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.BetaIncomplete(System.Double,System.Double,System.Double)">
            <summary>
            Returns the lower incomplete (unregularized) beta function
            I_x(a,b) = int(t^(a-1)*(1-t)^(b-1),t=0..x) for real a &gt; 0, b &gt; 0, 1 &gt;= x &gt;= 0.
            </summary>
            <param name="a">The first Beta parameter, a positive real number.</param>
            <param name="b">The second Beta parameter, a positive real number.</param>
            <param name="x">The upper limit of the integral.</param>
            <returns>The lower incomplete (unregularized) beta function.</returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.BetaRegularized(System.Double,System.Double,System.Double)">
            <summary>
            Returns the regularized lower incomplete beta function
            I_x(a,b) = 1/Beta(a,b) * int(t^(a-1)*(1-t)^(b-1),t=0..x) for real a &gt; 0, b &gt; 0, 1 &gt;= x &gt;= 0.
            </summary>
            <param name="a">The first Beta parameter, a positive real number.</param>
            <param name="b">The second Beta parameter, a positive real number.</param>
            <param name="x">The upper limit of the integral.</param>
            <returns>The regularized lower incomplete beta function.</returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.Erf(System.Double)">
            <summary>Calculates the error function.</summary>
            <param name="x">The value to evaluate.</param>
            <returns>the error function evaluated at given value.</returns>
            <remarks>
                <list type="bullet">
                    <item>returns 1 if <c>x == Double.PositiveInfinity</c>.</item>
                    <item>returns -1 if <c>x == Double.NegativeInfinity</c>.</item>
                </list>
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.Erfc(System.Double)">
            <summary>Calculates the complementary error function.</summary>
            <param name="x">The value to evaluate.</param>
            <returns>the complementary error function evaluated at given value.</returns>
            <remarks>
                <list type="bullet">
                    <item>returns 0 if <c>x == Double.PositiveInfinity</c>.</item>
                    <item>returns 2 if <c>x == Double.NegativeInfinity</c>.</item>
                </list>
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.ErfInv(System.Double)">
            <summary>Calculates the inverse error function evaluated at z.</summary>
             <returns>The inverse error function evaluated at given value.</returns>
             <remarks>
             	<list type="bullet">
             		<item>returns Double.PositiveInfinity if <c>z &gt;= 1.0</c>.</item>
             		<item>returns Double.NegativeInfinity if <c>z &lt;= -1.0</c>.</item>
             	</list>
             </remarks>
            <summary>Calculates the inverse error function evaluated at z.</summary>
            <param name="z">value to evaluate.</param>
            <returns>the inverse error function evaluated at Z.</returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.ErfImp(System.Double,System.Boolean)">
            <summary>
            Implementation of the error function.
            </summary>
            <param name="z">Where to evaluate the error function.</param>
            <param name="invert">Whether to compute 1 - the error function.</param>
            <returns>the error function.</returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.ErfcInv(System.Double)">
            <summary>Calculates the complementary inverse error function evaluated at z.</summary>
            <returns>The complementary inverse error function evaluated at given value.</returns>
            <remarks> We have tested this implementation against the arbitrary precision mpmath library
            and found cases where we can only guarantee 9 significant figures correct.
                <list type="bullet">
                    <item>returns Double.PositiveInfinity if <c>z &lt;= 0.0</c>.</item>
                    <item>returns Double.NegativeInfinity if <c>z &gt;= 2.0</c>.</item>
                </list>
            </remarks>
            <summary>calculates the complementary inverse error function evaluated at z.</summary>
            <param name="z">value to evaluate.</param>
            <returns>the complementary inverse error function evaluated at Z.</returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.ErfInvImpl(System.Double,System.Double,System.Double)">
            <summary>
            The implementation of the inverse error function.
            </summary>
            <param name="p">First intermediate parameter.</param>
            <param name="q">Second intermediate parameter.</param>
            <param name="s">Third intermediate parameter.</param>
            <returns>the inverse error function.</returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.#cctor">
            <summary>
            Initializes static members of the SpecialFunctions class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.Factorial(System.Int32)">
            <summary>
            Computes the factorial function x -&gt; x! of an integer number &gt; 0. The function can represent all number up
            to 22! exactly, all numbers up to 170! using a double representation. All larger values will overflow.
            </summary>
            <returns>A value value! for value &gt; 0</returns>
            <remarks>
            If you need to multiply or divide various such factorials, consider using the logarithmic version 
            <see cref="M:MathNet.Numerics.SpecialFunctions.FactorialLn(System.Int32)"/> instead so you can add instead of multiply and subtract instead of divide, and
            then exponentiate the result using <see cref="M:System.Math.Exp(System.Double)"/>. This will also circumvent the problem that
            factorials become very large even for small parameters.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.FactorialLn(System.Int32)">
            <summary>
            Computes the logarithmic factorial function x -> ln(x!) of an integer number > 0.
            </summary>
            <returns>A value value! for value > 0</returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.Binomial(System.Int32,System.Int32)">
            <summary>
            Computes the binomial coefficient: n choose k.
            </summary>
            <param name="n">A nonnegative value n.</param>
            <param name="k">A nonnegative value h.</param>
            <returns>The binomial coefficient: n choose k.</returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.BinomialLn(System.Int32,System.Int32)">
            <summary>
            Computes the natural logarithm of the binomial coefficient: ln(n choose k).
            </summary>
            <param name="n">A nonnegative value n.</param>
            <param name="k">A nonnegative value h.</param>
            <returns>The logarithmic binomial coefficient: ln(n choose k).</returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.Multinomial(System.Int32,System.Int32[])">
            <summary>
            Computes the multinomial coefficient: n choose n1, n2, n3, ...
            </summary>
            <param name="n">A nonnegative value n.</param>
            <param name="ni">An array of nonnegative values that sum to <paramref name="n"/>.</param>
            <returns>The multinomial coefficient.</returns>
            <exception cref="T:System.ArgumentNullException">if <paramref name="ni"/> is <see langword="null"/>.</exception>   
            <exception cref="T:System.ArgumentException">If <paramref name="n"/> or any of the <paramref name="ni"/> are negative.</exception>
            <exception cref="T:System.ArgumentException">If the sum of all <paramref name="ni"/> is not equal to <paramref name="n"/>.</exception>
        </member>
        <member name="F:MathNet.Numerics.SpecialFunctions.Gamma_dk">
            <summary>
            Polynomial coefficients for the <see cref="M:MathNet.Numerics.SpecialFunctions.GammaLn(System.Double)"/> approximation.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.GammaLn(System.Double)">
            <summary>
            Computes the logarithm of the Gamma function. 
            </summary>
            <param name="z">The argument of the gamma function.</param>
            <returns>The logarithm of the gamma function.</returns>
            <remarks>
            <para>This implementation of the computation of the gamma and logarithm of the gamma function follows the derivation in
                "An Analysis Of The Lanczos Gamma Approximation", Glendon Ralph Pugh, 2004.
            We use the implementation listed on p. 116 which achieves an accuracy of 16 floating point digits. Although 16 digit accuracy
            should be sufficient for double values, improving accuracy is possible (see p. 126 in Pugh).</para>
            <para>Our unit tests suggest that the accuracy of the Gamma function is correct up to 14 floating point digits.</para>
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.Gamma(System.Double)">
            <summary>
            Computes the Gamma function. 
            </summary>
            <param name="z">The argument of the gamma function.</param>
            <returns>The logarithm of the gamma function.</returns>
            <remarks>
            <para>
            This implementation of the computation of the gamma and logarithm of the gamma function follows the derivation in
                "An Analysis Of The Lanczos Gamma Approximation", Glendon Ralph Pugh, 2004.
            We use the implementation listed on p. 116 which should achieve an accuracy of 16 floating point digits. Although 16 digit accuracy
            should be sufficient for double values, improving accuracy is possible (see p. 126 in Pugh).
            </para>
            <para>Our unit tests suggest that the accuracy of the Gamma function is correct up to 13 floating point digits.</para>
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.GammaUpperRegularized(System.Double,System.Double)">
            <summary>
            Returns the upper incomplete regularized gamma function
            Q(a,x) = 1/Gamma(a) * int(exp(-t)t^(a-1),t=0..x) for real a &gt; 0, x &gt; 0.
            </summary>
            <param name="a">The argument for the gamma function.</param>
            <param name="x">The lower integral limit.</param>
            <returns>The upper incomplete regularized gamma function.</returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.GammaUpperIncomplete(System.Double,System.Double)">
            <summary>
            Returns the upper incomplete gamma function
            Gamma(a,x) = 1/Gamma(a) * int(exp(-t)t^(a-1),t=0..x) for real a &gt; 0, x &gt; 0.
            </summary>
            <param name="a">The argument for the gamma function.</param>
            <param name="x">The lower integral limit.</param>
            <returns>The upper incomplete gamma function.</returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.GammaLowerIncomplete(System.Double,System.Double)">
            <summary>
            Returns the lower incomplete gamma function
            gamma(a,x) = int(exp(-t)t^(a-1),t=0..x) for real a &gt; 0, x &gt; 0.
            </summary>
            <param name="a">The argument for the gamma function.</param>
            <param name="x">The upper integral limit.</param>
            <returns>The lower incomplete gamma function.</returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.GammaLowerRegularized(System.Double,System.Double)">
            <summary>
            Returns the lower incomplete regularized gamma function
            P(a,x) = 1/Gamma(a) * int(exp(-t)t^(a-1),t=0..x) for real a &gt; 0, x &gt; 0.
            </summary>
            <param name="a">The argument for the gamma function.</param>
            <param name="x">The upper integral limit.</param>
            <returns>The lower incomplete gamma function.</returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.DiGamma(System.Double)">
            <summary>
            Computes the Digamma function which is mathematically defined as the derivative of the logarithm of the gamma function.
            This implementation is based on
                Jose Bernardo
                Algorithm AS 103:
                Psi ( Digamma ) Function,
                Applied Statistics,
                Volume 25, Number 3, 1976, pages 315-317.
            Using the modifications as in Tom Minka's lightspeed toolbox.
            </summary>
            <param name="x">The argument of the digamma function.</param>
            <returns>The value of the DiGamma function at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.DiGammaInv(System.Double)">
            <summary>
            <para>Computes the inverse Digamma function: this is the inverse of the logarithm of the gamma function. This function will
            only return solutions that are positive.</para>
            <para>This implementation is based on the bisection method.</para>
            </summary>
            <param name="p">The argument of the inverse digamma function.</param>
            <returns>The positive solution to the inverse DiGamma function at <paramref name="p"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.ExponentialMinusOne(System.Double)">
            <summary>
            Numerically stable exponential minus one, i.e. <code>x -> exp(x)-1</code>
            </summary>
            <param name="power">A number specifying a power.</param>
            <returns>Returns <code>exp(power)-1</code>.</returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.Hypotenuse(System.Numerics.Complex,System.Numerics.Complex)">
            <summary>
            Numerically stable hypotenuse of a right angle triangle, i.e. <code>(a,b) -> sqrt(a^2 + b^2)</code>
            </summary>
            <param name="a">The length of side a of the triangle.</param>
            <param name="b">The length of side b of the triangle.</param>
            <returns>Returns <code>sqrt(a<sup>2</sup> + b<sup>2</sup>)</code> without underflow/overflow.</returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.Hypotenuse(MathNet.Numerics.Complex32,MathNet.Numerics.Complex32)">
            <summary>
            Numerically stable hypotenuse of a right angle triangle, i.e. <code>(a,b) -> sqrt(a^2 + b^2)</code>
            </summary>
            <param name="a">The length of side a of the triangle.</param>
            <param name="b">The length of side b of the triangle.</param>
            <returns>Returns <code>sqrt(a<sup>2</sup> + b<sup>2</sup>)</code> without underflow/overflow.</returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.Hypotenuse(System.Double,System.Double)">
            <summary>
            Numerically stable hypotenuse of a right angle triangle, i.e. <code>(a,b) -> sqrt(a^2 + b^2)</code>
            </summary>
            <param name="a">The length of side a of the triangle.</param>
            <param name="b">The length of side b of the triangle.</param>
            <returns>Returns <code>sqrt(a<sup>2</sup> + b<sup>2</sup>)</code> without underflow/overflow.</returns>
        </member>
        <member name="M:MathNet.Numerics.SpecialFunctions.Hypotenuse(System.Single,System.Single)">
            <summary>
            Numerically stable hypotenuse of a right angle triangle, i.e. <code>(a,b) -> sqrt(a^2 + b^2)</code>
            </summary>
            <param name="a">The length of side a of the triangle.</param>
            <param name="b">The length of side b of the triangle.</param>
            <returns>Returns <code>sqrt(a<sup>2</sup> + b<sup>2</sup>)</code> without underflow/overflow.</returns>
        </member>
        <member name="T:MathNet.Numerics.Statistics.ArrayStatistics">
            <summary>
            Statistics operating on arrays assumed to be unsorted.
            WARNING: Methods with the Inplace-suffix may modify the data array by reordering its entries.
            </summary>
            <seealso cref="T:MathNet.Numerics.Statistics.SortedArrayStatistics"/>
            <seealso cref="T:MathNet.Numerics.Statistics.StreamingStatistics"/>
            <seealso cref="T:MathNet.Numerics.Statistics.Statistics"/>
        </member>
        <member name="M:MathNet.Numerics.Statistics.ArrayStatistics.Minimum(System.Double[])">
            <summary>
            Returns the smallest value from the unsorted data array.
            Returns NaN if data is empty or any entry is NaN.
            </summary>
            <param name="data">Sample array, no sorting is assumed.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.ArrayStatistics.Maximum(System.Double[])">
            <summary>
            Returns the smallest value from the unsorted data array.
            Returns NaN if data is empty or any entry is NaN.
            </summary>
            <param name="data">Sample array, no sorting is assumed.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.ArrayStatistics.Mean(System.Double[])">
            <summary>
            Estimates the arithmetic sample mean from the unsorted data array.
            Returns NaN if data is empty or any entry is NaN.
            </summary>
            <param name="data">Sample array, no sorting is assumed.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.ArrayStatistics.Variance(System.Double[])">
            <summary>
            Estimates the unbiased population variance from the provided samples as unsorted array.
            On a dataset of size N will use an N-1 normalizer (Bessel's correction).
            Returns NaN if data has less than two entries or if any entry is NaN.
            </summary>
            <param name="samples">Sample array, no sorting is assumed.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.ArrayStatistics.PopulationVariance(System.Double[])">
            <summary>
            Evaluates the population variance from the full population provided as unsorted array.
            On a dataset of size N will use an N normalizer and would thus be biased if applied to a subset.
            Returns NaN if data is empty or if any entry is NaN.
            </summary>
            <param name="population">Sample array, no sorting is assumed.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.ArrayStatistics.StandardDeviation(System.Double[])">
            <summary>
            Estimates the unbiased population standard deviation from the provided samples as unsorted array.
            On a dataset of size N will use an N-1 normalizer (Bessel's correction).
            Returns NaN if data has less than two entries or if any entry is NaN.
            </summary>
            <param name="samples">Sample array, no sorting is assumed.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.ArrayStatistics.PopulationStandardDeviation(System.Double[])">
            <summary>
            Evaluates the population standard deviation from the full population provided as unsorted array.
            On a dataset of size N will use an N normalizer and would thus be biased if applied to a subset.
            Returns NaN if data is empty or if any entry is NaN.
            </summary>
            <param name="population">Sample array, no sorting is assumed.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.ArrayStatistics.Covariance(System.Double[],System.Double[])">
            <summary>
            Estimates the unbiased population covariance from the provided two sample arrays.
            On a dataset of size N will use an N-1 normalizer (Bessel's correction).
            Returns NaN if data has less than two entries or if any entry is NaN.
            </summary>
            <param name="samples1">First sample array.</param>
            <param name="samples2">Second sample array.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.ArrayStatistics.PopulationCovariance(System.Double[],System.Double[])">
            <summary>
            Evaluates the population covariance from the full population provided as two arrays.
            On a dataset of size N will use an N normalizer and would thus be biased if applied to a subset.
            Returns NaN if data is empty or if any entry is NaN.
            </summary>
            <param name="population1">First population array.</param>
            <param name="population2">Second population array.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.ArrayStatistics.OrderStatisticInplace(System.Double[],System.Int32)">
            <summary>
            Returns the order statistic (order 1..N) from the unsorted data array.
            WARNING: Works inplace and can thus causes the data array to be reordered.
            </summary>
            <param name="data">Sample array, no sorting is assumed. Will be reordered.</param>
            <param name="order">One-based order of the statistic, must be between 1 and N (inclusive).</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.ArrayStatistics.MedianInplace(System.Double[])">
            <summary>
            Estimates the median value from the unsorted data array.
            Approximately median-unbiased regardless of the sample distribution (R8).
            WARNING: Works inplace and can thus causes the data array to be reordered.
            </summary>
            <param name="data">Sample array, no sorting is assumed. Will be reordered.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.ArrayStatistics.PercentileInplace(System.Double[],System.Int32)">
            <summary>
            Estimates the p-Percentile value from the unsorted data array.
            If a non-integer Percentile is needed, use Quantile instead.
            Approximately median-unbiased regardless of the sample distribution (R8).
            WARNING: Works inplace and can thus causes the data array to be reordered.
            </summary>
            <param name="data">Sample array, no sorting is assumed. Will be reordered.</param>
            <param name="p">Percentile selector, between 0 and 100 (inclusive).</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.ArrayStatistics.LowerQuartileInplace(System.Double[])">
            <summary>
            Estimates the first quartile value from the unsorted data array.
            Approximately median-unbiased regardless of the sample distribution (R8).
            WARNING: Works inplace and can thus causes the data array to be reordered.
            </summary>
            <param name="data">Sample array, no sorting is assumed. Will be reordered.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.ArrayStatistics.UpperQuartileInplace(System.Double[])">
            <summary>
            Estimates the third quartile value from the unsorted data array.
            Approximately median-unbiased regardless of the sample distribution (R8).
            WARNING: Works inplace and can thus causes the data array to be reordered.
            </summary>
            <param name="data">Sample array, no sorting is assumed. Will be reordered.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.ArrayStatistics.InterquartileRangeInplace(System.Double[])">
            <summary>
            Estimates the inter-quartile range from the unsorted data array.
            Approximately median-unbiased regardless of the sample distribution (R8).
            WARNING: Works inplace and can thus causes the data array to be reordered.
            </summary>
            <param name="data">Sample array, no sorting is assumed. Will be reordered.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.ArrayStatistics.FiveNumberSummaryInplace(System.Double[])">
            <summary>
            Estimates {min, lower-quantile, median, upper-quantile, max} from the unsorted data array.
            Approximately median-unbiased regardless of the sample distribution (R8).
            WARNING: Works inplace and can thus causes the data array to be reordered.
            </summary>
            <param name="data">Sample array, no sorting is assumed. Will be reordered.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.ArrayStatistics.QuantileInplace(System.Double[],System.Double)">
            <summary>
            Estimates the tau-th quantile from the unsorted data array.
            The tau-th quantile is the data value where the cumulative distribution
            function crosses tau.
            Approximately median-unbiased regardless of the sample distribution (R8).
            WARNING: Works inplace and can thus causes the data array to be reordered.
            </summary>
            <param name="data">Sample array, no sorting is assumed. Will be reordered.</param>
            <param name="tau">Quantile selector, between 0.0 and 1.0 (inclusive).</param>
            <remarks>
            R-8, SciPy-(1/3,1/3):
            Linear interpolation of the approximate medians for order statistics.
            When tau &lt; (2/3) / (N + 1/3), use x1. When tau &gt;= (N - 1/3) / (N + 1/3), use xN.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Statistics.ArrayStatistics.QuantileCustomInplace(System.Double[],System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Estimates the tau-th quantile from the unsorted data array.
            The tau-th quantile is the data value where the cumulative distribution
            function crosses tau. The quantile defintion can be specified
            by 4 parameters a, b, c and d, consistent with Mathematica.
            WARNING: Works inplace and can thus causes the data array to be reordered.
            </summary>
            <param name="data">Sample array, no sorting is assumed. Will be reordered.</param>
            <param name="tau">Quantile selector, between 0.0 and 1.0 (inclusive)</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.ArrayStatistics.QuantileCustomInplace(System.Double[],System.Double,MathNet.Numerics.Statistics.QuantileDefinition)">
            <summary>
            Estimates the tau-th quantile from the unsorted data array.
            The tau-th quantile is the data value where the cumulative distribution
            function crosses tau. The quantile definition can be specificed to be compatible
            with an existing system.
            WARNING: Works inplace and can thus causes the data array to be reordered.
            </summary>
            <param name="data">Sample array, no sorting is assumed. Will be reordered.</param>
            <param name="tau">Quantile selector, between 0.0 and 1.0 (inclusive)</param>
            <param name="definition">Quantile definition, to choose what product/definition it should be consistent with</param>
        </member>
        <member name="T:MathNet.Numerics.Statistics.StreamingStatistics">
            <summary>
            Statistics operating on an IEnumerable in a single pass, without keeping the full data in memory.
            Can be used in a streaming way, e.g. on large datasets not fitting into memory.
            </summary>
            <seealso cref="T:MathNet.Numerics.Statistics.SortedArrayStatistics"/>
            <seealso cref="T:MathNet.Numerics.Statistics.StreamingStatistics"/>
            <seealso cref="T:MathNet.Numerics.Statistics.Statistics"/>
        </member>
        <member name="M:MathNet.Numerics.Statistics.StreamingStatistics.Minimum(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the smallest value from the enumerable, in a single pass without memoization.
            Returns NaN if data is empty or any entry is NaN.
            </summary>
            <param name="stream">Sample stream, no sorting is assumed.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.StreamingStatistics.Maximum(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the largest value from the enumerable, in a single pass without memoization.
            Returns NaN if data is empty or any entry is NaN.
            </summary>
            <param name="stream">Sample stream, no sorting is assumed.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.StreamingStatistics.Mean(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Estimates the arithmetic sample mean from the enumerable, in a single pass without memoization.
            Returns NaN if data is empty or any entry is NaN.
            </summary>
            <param name="stream">Sample stream, no sorting is assumed.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.StreamingStatistics.Variance(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Estimates the unbiased population variance from the provided samples as enumerable sequence, in a single pass without memoization.
            On a dataset of size N will use an N-1 normalizer (Bessel's correction).
            Returns NaN if data has less than two entries or if any entry is NaN.
            </summary>
            <param name="samples">Sample stream, no sorting is assumed.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.StreamingStatistics.PopulationVariance(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Evaluates the population variance from the full population provided as enumerable sequence, in a single pass without memoization.
            On a dataset of size N will use an N normalizer and would thus be biased if applied to a subset.
            Returns NaN if data is empty or if any entry is NaN.
            </summary>
            <param name="population">Sample stream, no sorting is assumed.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.StreamingStatistics.StandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Estimates the unbiased population standard deviation from the provided samples as enumerable sequence, in a single pass without memoization.
            On a dataset of size N will use an N-1 normalizer (Bessel's correction).
            Returns NaN if data has less than two entries or if any entry is NaN.
            </summary>
            <param name="samples">Sample stream, no sorting is assumed.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.StreamingStatistics.PopulationStandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Evaluates the population standard deviation from the full population provided as enumerable sequence, in a single pass without memoization.
            On a dataset of size N will use an N normalizer and would thus be biased if applied to a subset.
            Returns NaN if data is empty or if any entry is NaN.
            </summary>
            <param name="population">Sample stream, no sorting is assumed.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.StreamingStatistics.Covariance(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Estimates the unbiased population covariance from the provided two sample enumerable sequences, in a single pass without memoization.
            On a dataset of size N will use an N-1 normalizer (Bessel's correction).
            Returns NaN if data has less than two entries or if any entry is NaN.
            </summary>
            <param name="samples1">First sample stream.</param>
            <param name="samples2">Second sample stream.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.StreamingStatistics.PopulationCovariance(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Evaluates the population covariance from the full population provided as two enumerable sequences, in a single pass without memoization.
            On a dataset of size N will use an N normalizer and would thus be biased if applied to a subset.
            Returns NaN if data is empty or if any entry is NaN.
            </summary>
            <param name="population1">First population stream.</param>
            <param name="population2">Second population stream.</param>
        </member>
        <member name="T:MathNet.Numerics.Statistics.SortedArrayStatistics">
            <summary>
            Statistics operating on an array already sorted ascendingly.
            </summary>
            <seealso cref="T:MathNet.Numerics.Statistics.ArrayStatistics"/>
            <seealso cref="T:MathNet.Numerics.Statistics.StreamingStatistics"/>
            <seealso cref="T:MathNet.Numerics.Statistics.Statistics"/>
        </member>
        <member name="M:MathNet.Numerics.Statistics.SortedArrayStatistics.Minimum(System.Double[])">
            <summary>
            Returns the smallest value from the sorted data array (ascending).
            </summary>
            <param name="data">Sample array, must be sorted ascendingly.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.SortedArrayStatistics.Maximum(System.Double[])">
            <summary>
            Returns the largest value from the sorted data array (ascending).
            </summary>
            <param name="data">Sample array, must be sorted ascendingly.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.SortedArrayStatistics.OrderStatistic(System.Double[],System.Int32)">
            <summary>
            Returns the order statistic (order 1..N) from the sorted data array (ascending).
            </summary>
            <param name="data">Sample array, must be sorted ascendingly.</param>
            <param name="order">One-based order of the statistic, must be between 1 and N (inclusive).</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.SortedArrayStatistics.Median(System.Double[])">
            <summary>
            Estimates the median value from the sorted data array (ascending).
            Approximately median-unbiased regardless of the sample distribution (R8).
            </summary>
            <param name="data">Sample array, must be sorted ascendingly.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.SortedArrayStatistics.Percentile(System.Double[],System.Int32)">
            <summary>
            Estimates the p-Percentile value from the sorted data array (ascending).
            If a non-integer Percentile is needed, use Quantile instead.
            Approximately median-unbiased regardless of the sample distribution (R8).
            </summary>
            <param name="data">Sample array, must be sorted ascendingly.</param>
            <param name="p">Percentile selector, between 0 and 100 (inclusive).</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.SortedArrayStatistics.LowerQuartile(System.Double[])">
            <summary>
            Estimates the first quartile value from the sorted data array (ascending).
            Approximately median-unbiased regardless of the sample distribution (R8).
            </summary>
            <param name="data">Sample array, must be sorted ascendingly.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.SortedArrayStatistics.UpperQuartile(System.Double[])">
            <summary>
            Estimates the third quartile value from the sorted data array (ascending).
            Approximately median-unbiased regardless of the sample distribution (R8).
            </summary>
            <param name="data">Sample array, must be sorted ascendingly.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.SortedArrayStatistics.InterquartileRange(System.Double[])">
            <summary>
            Estimates the inter-quartile range from the sorted data array (ascending).
            Approximately median-unbiased regardless of the sample distribution (R8).
            </summary>
            <param name="data">Sample array, must be sorted ascendingly.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.SortedArrayStatistics.FiveNumberSummary(System.Double[])">
            <summary>
            Estimates {min, lower-quantile, median, upper-quantile, max} from the sorted data array (ascending).
            Approximately median-unbiased regardless of the sample distribution (R8).
            </summary>
            <param name="data">Sample array, must be sorted ascendingly.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.SortedArrayStatistics.Quantile(System.Double[],System.Double)">
            <summary>
            Estimates the tau-th quantile from the sorted data array (ascending).
            The tau-th quantile is the data value where the cumulative distribution
            function crosses tau.
            Approximately median-unbiased regardless of the sample distribution (R8).
            </summary>
            <param name="data">Sample array, must be sorted ascendingly.</param>
            <param name="tau">Quantile selector, between 0.0 and 1.0 (inclusive).</param>
            <remarks>
            R-8, SciPy-(1/3,1/3):
            Linear interpolation of the approximate medians for order statistics.
            When tau &lt; (2/3) / (N + 1/3), use x1. When tau &gt;= (N - 1/3) / (N + 1/3), use xN.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Statistics.SortedArrayStatistics.QuantileCustom(System.Double[],System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Estimates the tau-th quantile from the sorted data array (ascending).
            The tau-th quantile is the data value where the cumulative distribution
            function crosses tau. The quantile defintion can be specified
            by 4 parameters a, b, c and d, consistent with Mathematica.
            </summary>
            <param name="data">Sample array, must be sorted ascendingly.</param>
            <param name="tau">Quantile selector, between 0.0 and 1.0 (inclusive).</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.SortedArrayStatistics.QuantileCustom(System.Double[],System.Double,MathNet.Numerics.Statistics.QuantileDefinition)">
            <summary>
            Estimates the tau-th quantile from the sorted data array (ascending).
            The tau-th quantile is the data value where the cumulative distribution
            function crosses tau. The quantile definition can be specificed to be compatible
            with an existing system.
            </summary>
            <param name="data">Sample array, must be sorted ascendingly.</param>
            <param name="tau">Quantile selector, between 0.0 and 1.0 (inclusive).</param>
            <param name="definition">Quantile definition, to choose what product/definition it should be consistent with</param>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Cauchy">
            <summary>
            The Cauchy distribution is a symmetric continuous probability distribution. For details about this distribution, see 
            <a href="http://en.wikipedia.org/wiki/cauchy_distribution">Wikipedia - Cauchy distribution</a>.
            </summary>
            <remarks><para>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can get/set the random number generator by using the <see cref="P:MathNet.Numerics.Distributions.Cauchy.RandomSource"/> property.</para>
            <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="T:MathNet.Numerics.Distributions.IContinuousDistribution">
            <summary>
            The interface for continuous univariate distributions.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.IDistribution">
            <summary>
            The interface for univariate distributions.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.IDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution function (cdf) for this probability distribution.
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IDistribution.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to generate random samples from the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IDistribution.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IDistribution.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IDistribution.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IDistribution.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IDistribution.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.IContinuousDistribution.Density(System.Double)">
            <summary>
            The probability density of the distribution.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.IContinuousDistribution.DensityLn(System.Double)">
            <summary>
            The log probability density of the distribution.
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.IContinuousDistribution.Sample">
            <summary>
            Draws a random sample from the distribution.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.IContinuousDistribution.Samples">
            <summary>
            Draws a sequence of random samples from the distribution.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IContinuousDistribution.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IContinuousDistribution.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IContinuousDistribution.Minimum">
            <summary>
            Gets the smallest element in the domain of the distributions which can be represented by a double.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IContinuousDistribution.Maximum">
            <summary>
            Gets the largest element in the domain of the distributions which can be represented by a double.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Cauchy._scale">
            <summary>
            The scale of the Cauchy distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Cauchy._random">
            <summary>
            The distribution's random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Cauchy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.Cauchy"/> class with the location parameter set to 0 and the scale parameter set to 1
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Cauchy.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.Cauchy"/> class. 
            </summary>
            <param name="location">
            The location parameter for the distribution.
            </param>
            <param name="scale">
            The scale parameter for the distribution.
            </param>
            <exception cref="T:System.ArgumentException">
            If <paramref name="scale"/> is negative.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Cauchy.SetParameters(System.Double,System.Double)">
            <summary>
            Sets the parameters of the distribution after checking their validity.
            </summary>
            <param name="location">Location parameter.</param>
            <param name="scale">Scale parameter. Must be greater than 0.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the parameters don't pass the <see cref="M:MathNet.Numerics.Distributions.Cauchy.IsValidParameterSet(System.Double,System.Double)"/> function.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Cauchy.IsValidParameterSet(System.Double,System.Double)">
            <summary>
            Checks whether the parameters of the distribution are valid. 
            </summary>
            <param name="location">Location parameter.</param>
            <param name="scale">Scale parameter. Must be greater than 0.</param>
            <returns>True when the parameters are valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Cauchy.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Cauchy.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution function of the distribution.
            </summary>
            <param name="x">The location at which to compute the cumulative density.</param>
            <returns>the cumulative density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Cauchy.Density(System.Double)">
            <summary>
            Computes the density of the distribution.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Cauchy.DensityLn(System.Double)">
            <summary>
            Computes the log density of the distribution.
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Cauchy.SampleUnchecked(System.Random,System.Double,System.Double)">
            <summary>
            Samples the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="location">The location shape parameter.</param>
            <param name="scale">The scale parameter.</param>
            <returns>a random number from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Cauchy.Sample">
            <summary>
            Draws a random sample from the distribution.
            </summary>
            <returns>A random number from this distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Cauchy.Samples">
            <summary>
            Generates a sequence of samples from the Cauchy distribution.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Cauchy.Sample(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sample from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="location">The location shape parameter.</param>
            <param name="scale">The scale parameter.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Cauchy.Samples(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="location">The location shape parameter.</param>
            <param name="scale">The scale parameter.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Cauchy.Location">
            <summary>
            Gets or sets the location parameter of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Cauchy.Scale">
            <summary>
            Gets or sets the scale parameter of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Cauchy.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Cauchy.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Cauchy.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Cauchy.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Cauchy.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Cauchy.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Cauchy.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Cauchy.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Cauchy.Minimum">
            <summary>
            Gets the minimum of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Cauchy.Maximum">
            <summary>
            Gets the maximum of the distribution.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Chi">
            <summary>
            This class implements functionality for the Chi distribution. This distribution is
            a continuous probability distribution. The distribution usually arises when a k-dimensional vector's orthogonal 
            components are independent and each follow a standard normal distribution. The length of the vector will 
            then have a chi distribution.
            <a href="http://en.wikipedia.org/wiki/Chi_distribution">Wikipedia - Chi distribution</a>.
            </summary>
            <remarks><para>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can set the random number generator by using the <see cref="P:MathNet.Numerics.Distributions.Chi.RandomSource"/> property.</para>
            <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Chi._dof">
            <summary>
            Keeps track of the degrees of freedom for the Chi distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Chi._random">
            <summary>
            The distribution's random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Chi.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.Chi"/> class. 
            </summary>
            <param name="dof">
            The degrees of freedom for the Chi distribution.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Chi.SetParameters(System.Double)">
            <summary>
            Sets the parameters of the distribution after checking their validity.
            </summary>
            <param name="dof">The degrees of freedom for the Chi distribution.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the parameters don't pass the <see cref="M:MathNet.Numerics.Distributions.Chi.IsValidParameterSet(System.Double)"/> function.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Chi.IsValidParameterSet(System.Double)">
            <summary>
            Checks whether the parameters of the distribution are valid.
            </summary>
            <param name="dof">The degrees of freedom for the Chi distribution.</param>
            <returns><c>true</c> when the parameters are valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Chi.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Chi.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution function of the distribution.
            </summary>
            <param name="x">The location at which to compute the cumulative density.</param>
            <returns>the cumulative density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Chi.Density(System.Double)">
            <summary>
            Computes the density of the distribution.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Chi.DensityLn(System.Double)">
            <summary>
            Computes the log density of the distribution.
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Chi.SampleUnchecked(System.Random,System.Int32)">
            <summary>
            Samples the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="dof">Degrees of Freedom</param>
            <returns>a random number from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Chi.Sample">
            <summary>
            Generates a sample from the Chi distribution.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Chi.Samples">
            <summary>
            Generates a sequence of samples from the Chi distribution.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Chi.Sample(System.Random,System.Int32)">
            <summary>
            Generates a sample from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="dof">Degrees of Freedom</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Chi.Samples(System.Random,System.Int32)">
            <summary>
            Generates a sequence of samples from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="dof">Degrees of Freedom</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Chi.DegreesOfFreedom">
            <summary>
            Gets or sets the degrees of freedom of the Chi distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Chi.RandomSource">
            <summary>
            Gets or sets the distribution's random number generator.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Chi.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Chi.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Chi.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Chi.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Chi.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Chi.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Chi.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Chi.Minimum">
            <summary>
            Gets the minimum of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Chi.Maximum">
            <summary>
            Gets the maximum of the distribution.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.ChiSquare">
            <summary>
            This class implements functionality for the ChiSquare distribution. This distribution is
            a sum of the squares of k independent standard normal random variables.
            <a href="http://en.wikipedia.org/wiki/Chi-square_distribution">Wikipedia - ChiSquare distribution</a>.
            </summary>
            <remarks><para>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can set the random number generator by using the <see cref="P:MathNet.Numerics.Distributions.ChiSquare.RandomSource"/> property.</para>
            <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="F:MathNet.Numerics.Distributions.ChiSquare._random">
            <summary>
            The distribution's random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiSquare.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.ChiSquare"/> class. 
            </summary>
            <param name="dof">
            The degrees of freedom for the ChiSquare distribution.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiSquare.SetParameters(System.Double)">
            <summary>
            Sets the parameters of the distribution after checking their validity.
            </summary>
            <param name="dof">The degrees of freedom for the <c>ChiSquare</c> distribution.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the parameters don't pass the <see cref="M:MathNet.Numerics.Distributions.ChiSquare.IsValidParameterSet(System.Double)"/> function.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiSquare.IsValidParameterSet(System.Double)">
            <summary>
            Checks whether the parameters of the distribution are valid. 
            </summary>
            <param name="dof">The degrees of freedom for the <c>ChiSquare</c> distribution.</param>
            <returns><c>true</c> when the parameters are valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiSquare.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiSquare.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution function of the distribution.
            </summary>
            <param name="x">The location at which to compute the cumulative density.</param>
            <returns>the cumulative density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiSquare.Density(System.Double)">
            <summary>
            Computes the density of the distribution.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiSquare.DensityLn(System.Double)">
            <summary>
            Computes the log density of the distribution.
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiSquare.SampleUnchecked(System.Random,System.Double)">
            <summary>
            Samples the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="dof">The degrees of freedom.</param>
            <returns>a random number from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiSquare.Sample">
            <summary>
            Generates a sample from the <c>ChiSquare</c> distribution.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiSquare.Samples">
            <summary>
            Generates a sequence of samples from the <c>ChiSquare</c> distribution.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiSquare.Sample(System.Random,System.Double)">
            <summary>
            Generates a sample from the <c>ChiSquare</c> distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="dof">The degrees of freedom.</param>
            <returns>a sample from the distribution. </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiSquare.Samples(System.Random,System.Double)">
            <summary>
            Generates a sequence of samples from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="dof">The degrees of freedom.</param>
            <returns>a sample from the distribution. </returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ChiSquare.DegreesOfFreedom">
            <summary>
            Gets or sets the degrees of freedom of the <c>ChiSquare</c> distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ChiSquare.RandomSource">
            <summary>
            Gets or sets the distribution's random number generator.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ChiSquare.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ChiSquare.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ChiSquare.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ChiSquare.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ChiSquare.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ChiSquare.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ChiSquare.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ChiSquare.Minimum">
            <summary>
            Gets the minimum of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ChiSquare.Maximum">
            <summary>
            Gets the maximum of the distribution.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Erlang">
            <summary>
            This class implements functionality for the Erlang distribution. This distribution is
            is a continuous probability distribution with wide applicability primarily due to its
            relation to the exponential and Gamma distributions.
            <a href="http://en.wikipedia.org/wiki/Erlang_distribution">Wikipedia - Erlang distribution</a>.
            </summary>
            <remarks><para>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can set the random number generator by using the <see cref="P:MathNet.Numerics.Distributions.Erlang.RandomSource"/> property.</para>
            <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Erlang._shape">
            <summary>
            Erlang shape parameter.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Erlang._invScale">
            <summary>
            Erlang inverse scale parameter.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Erlang._random">
            <summary>
            The distribution's random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Erlang.#ctor(System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.Erlang"/> class. 
            </summary>
            <param name="shape">
            The shape of the Erlang distribution.
            </param>
            <param name="invScale">
            The inverse scale of the Erlang distribution.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Erlang.WithShapeScale(System.Int32,System.Double)">
            <summary>
            Constructs a Erlang distribution from a shape and scale parameter. The distribution will
            be initialized with the default <seealso cref="T:System.Random"/> random number generator.
            </summary>
            <param name="shape">The shape of the Erlang distribution.</param>
            <param name="scale">The scale of the Erlang distribution.</param>
            <returns>a normal distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Erlang.WithShapeInvScale(System.Int32,System.Double)">
            <summary>
            Constructs a Erlang distribution from a shape and inverse scale parameter. The distribution will
            be initialized with the default <seealso cref="T:System.Random"/> random number generator.
            </summary>
            <param name="shape">The shape of the Erlang distribution.</param>
            <param name="invScale">The inverse scale of the Erlang distribution.</param>
            <returns>a normal distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Erlang.SetParameters(System.Double,System.Double)">
            <summary>
            Sets the parameters of the distribution after checking their validity.
            </summary>
            <param name="shape">The shape of the Erlang distribution.</param>
            <param name="invScale">The inverse scale of the Erlang distribution.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Erlang.IsValidParameterSet(System.Double,System.Double)">
            <summary>
            Checks whether the parameters of the distribution are valid.
            </summary>
            <param name="shape">The shape of the Erlang distribution.</param>
            <param name="invScale">The inverse scale of the Erlang distribution.</param>
            <returns><c>true</c> when the parameters are valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Erlang.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Erlang.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution function of the Erlang distribution.
            </summary>
            <param name="x">The location at which to compute the cumulative density.</param>
            <returns>the cumulative density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Erlang.Density(System.Double)">
            <summary>
            Computes the density of the distribution.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Erlang.DensityLn(System.Double)">
            <summary>
            Computes the log density of the distribution.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Erlang.SampleUnchecked(System.Random,System.Double,System.Double)">
            <summary>
            <para>Sampling implementation based on:
            "A Simple Method for Generating Erlang Variables" - Marsaglia &amp; Tsang
            ACM Transactions on Mathematical Software, Vol. 26, No. 3, September 2000, Pages 363–372.</para>
            <para>This method performs no parameter checks.</para>
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="shape">The shape of the Gamma distribution.</param>
            <param name="invScale">The inverse scale of the Gamma distribution.</param>
            <returns>A sample from a Erlang distributed random variable.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Erlang.Sample">
            <summary>
            Generates a sample from the Erlang distribution.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Erlang.Samples">
            <summary>
            Generates a sequence of samples from the Erlang distribution.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Erlang.Sample(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sample from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="shape">The shape of the Gamma distribution.</param>
            <param name="invScale">The inverse scale of the Gamma distribution.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Erlang.Samples(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="shape">The shape of the Gamma distribution.</param>
            <param name="invScale">The inverse scale of the Gamma distribution.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Erlang.Shape">
            <summary>
            Gets or sets the shape of the Erlang distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Erlang.Scale">
            <summary>
            Gets or sets the scale of the Erlang distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Erlang.InvScale">
            <summary>
            Gets or sets the inverse scale of the Erlang distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Erlang.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Erlang.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Erlang.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Erlang.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Erlang.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Erlang.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Erlang.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Erlang.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Erlang.Minimum">
            <summary>
            Gets the minimum value.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Erlang.Maximum">
            <summary>
            Gets the Maximum value.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Exponential">
            <summary>
            The exponential distribution is a distribution over the real numbers parameterized by one non-negative parameter.
            <a href="http://en.wikipedia.org/wiki/exponential_distribution">Wikipedia - exponential distribution</a>.
            </summary>
            <remarks>The distribution will use the <see cref="T:System.Random"/> by default. 
            <para>Users can set the random number generator by using the <see cref="P:MathNet.Numerics.Distributions.Exponential.RandomSource"/> property.</para>
            <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Exponential._lambda">
            <summary>
            The lambda parameter of the Exponential distribution. 
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Exponential._random">
            <summary>
            The distribution's random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Exponential.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.Exponential"/> class.
            </summary>
            <param name="lambda">
            The lambda parameter of the Exponential distribution.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Exponential.SetParameters(System.Double)">
            <summary>
            Sets the parameters of the distribution after checking their validity.
            </summary>
            <param name="lambda">Lambda parameter.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the parameters don't pass the <see cref="M:MathNet.Numerics.Distributions.Exponential.IsValidParameterSet(System.Double)"/> function.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Exponential.IsValidParameterSet(System.Double)">
            <summary>
            Checks whether the parameters of the distribution are valid. 
            </summary>
            <param name="lambda">Lambda parameter.</param>
            <returns><c>true</c> when the parameters are valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Exponential.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Exponential.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution function of the distribution.
            </summary>
            <param name="x">The location at which to compute the cumulative density.</param>
            <returns>the cumulative density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Exponential.Density(System.Double)">
            <summary>
            Computes the density of the distribution.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Exponential.DensityLn(System.Double)">
            <summary>
            Computes the log density of the distribution.
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Exponential.SampleUnchecked(System.Random,System.Double)">
            <summary>
            Samples the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="lambda">The lambda parameter of the Exponential distribution.</param>
            <returns>a random number from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Exponential.Sample">
            <summary>
            Draws a random sample from the distribution.
            </summary>
            <returns>A random number from this distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Exponential.Samples">
            <summary>
            Generates a sequence of samples from the Exponential distribution.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Exponential.Sample(System.Random,System.Double)">
            <summary>
            Draws a random sample from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="lambda">The lambda parameter of the Exponential distribution.</param>
            <returns>A random number from this distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Exponential.Samples(System.Random,System.Double)">
            <summary>
            Generates a sequence of samples from the Exponential distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="lambda">The lambda parameter of the Exponential distribution.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Exponential.Lambda">
            <summary>
            Gets or sets the lambda parameter of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Exponential.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Exponential.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Exponential.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Exponential.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Exponential.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Exponential.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Exponential.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Exponential.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Exponential.Minimum">
            <summary>
            Gets the minimum of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Exponential.Maximum">
            <summary>
            Gets the maximum of the distribution.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.FisherSnedecor">
            <summary>
            Implements the FisherSnedecor distribution. For details about this distribution, see 
            <a href="http://en.wikipedia.org/wiki/F-distribution">Wikipedia - FisherSnedecor distribution</a>.
            </summary>
            <remarks><para>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can set the random number generator by using the <see cref="P:MathNet.Numerics.Distributions.FisherSnedecor.RandomSource"/> property.</para>
            <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="F:MathNet.Numerics.Distributions.FisherSnedecor._d1">
            <summary>
            The first parameter - degree of freedom.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.FisherSnedecor._d2">
            <summary>
            The second parameter - degree of freedom.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.FisherSnedecor._random">
            <summary>
            The distribution's random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.FisherSnedecor.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.FisherSnedecor"/> class. 
            </summary>
            <param name="d1">
            The first parameter - degree of freedom.
            </param>
            <param name="d2">
            The second parameter - degree of freedom.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.FisherSnedecor.SetParameters(System.Double,System.Double)">
            <summary>
            Sets the parameters of the distribution after checking their validity.
            </summary>
            <param name="d1">The first parameter - degree of freedom.</param>
            <param name="d2">The second parameter - degree of freedom.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.FisherSnedecor.IsValidParameterSet(System.Double,System.Double)">
            <summary>
            Checks whether the parameters of the distribution are valid.
            </summary>
            <param name="d1">The first parameter - degree of freedom.</param>
            <param name="d2">The second parameter - degree of freedom.</param>
            <returns><c>true</c> when the parameters are valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.FisherSnedecor.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.FisherSnedecor.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution function of the distribution.
            </summary>
            <param name="x">The location at which to compute the cumulative density.</param>
            <returns>the cumulative density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.FisherSnedecor.Density(System.Double)">
            <summary>
            Computes the density of the distribution.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.FisherSnedecor.DensityLn(System.Double)">
            <summary>
            Computes the log density of the distribution.
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.FisherSnedecor.SampleUnchecked(System.Random,System.Double,System.Double)">
            <summary>
            Generates one sample from the <c>FisherSnedecor</c> distribution without parameter checking.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="d1">The first parameter - degree of freedom.</param>
            <param name="d2">The second parameter - degree of freedom.</param>
            <returns>a <c>FisherSnedecor</c> distributed random number.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.FisherSnedecor.Sample">
            <summary>
            Generates a sample from the <c>FisherSnedecor</c> distribution.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.FisherSnedecor.Samples">
            <summary>
            Generates a sequence of samples from the <c>FisherSnedecor</c> distribution.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.FisherSnedecor.Sample(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sample from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="d1">The first parameter - degree of freedom.</param>
            <param name="d2">The second parameter - degree of freedom.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.FisherSnedecor.Samples(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="d1">The first parameter - degree of freedom.</param>
            <param name="d2">The second parameter - degree of freedom.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.FisherSnedecor.DegreeOfFreedom1">
            <summary>
            Gets or sets the first parameter - degree of freedom.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.FisherSnedecor.DegreeOfFreedom2">
            <summary>
            Gets or sets the second parameter - degree of freedom.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.FisherSnedecor.RandomSource">
            <summary>
            Gets or sets the distribution's random number generator.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.FisherSnedecor.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.FisherSnedecor.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.FisherSnedecor.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.FisherSnedecor.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.FisherSnedecor.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.FisherSnedecor.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.FisherSnedecor.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.FisherSnedecor.Minimum">
            <summary>
            Gets the minimum of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.FisherSnedecor.Maximum">
            <summary>
            Gets the maximum of the distribution.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.InverseGamma">
            <summary>
            The inverse Gamma distribution is a distribution over the positive real numbers parameterized by
            two positive parameters.
            <a href="http://en.wikipedia.org/wiki/inverse-gamma_distribution">Wikipedia - InverseGamma distribution</a>.
            </summary>
            <remarks><para>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can set the random number generator by using the <see cref="P:MathNet.Numerics.Distributions.InverseGamma.RandomSource"/> property.</para>
            <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="F:MathNet.Numerics.Distributions.InverseGamma._shape">
            <summary>
            Inverse Gamma shape parameter. 
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.InverseGamma._scale">
            <summary>
            Inverse Gamma scale parameter scale. 
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.InverseGamma._random">
            <summary>
            The distribution's random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InverseGamma.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.InverseGamma"/> class. 
            </summary>
            <param name="shape">
            The shape (alpha) parameter of the inverse Gamma distribution.
            </param>
            <param name="scale">
            The scale (beta) parameter of the inverse Gamma distribution.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InverseGamma.SetParameters(System.Double,System.Double)">
            <summary>
            Sets the parameters of the distribution after checking their validity.
            </summary>
            <param name="shape">
            The shape (alpha) parameter of the inverse Gamma distribution.
            </param>
            <param name="scale">
            The scale (beta) parameter of the inverse Gamma distribution.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the parameters don't pass the <see cref="M:MathNet.Numerics.Distributions.InverseGamma.IsValidParameterSet(System.Double,System.Double)"/> function.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InverseGamma.IsValidParameterSet(System.Double,System.Double)">
            <summary>
            Checks whether the parameters of the distribution are valid. 
            </summary>
            <param name="shape">
            The shape (alpha) parameter of the inverse Gamma distribution.
            </param>
            <param name="scale">
            The scale (beta) parameter of the inverse Gamma distribution.
            </param>
            <returns><c>true</c> when the parameters are valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InverseGamma.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InverseGamma.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution function of the distribution.
            </summary>
            <param name="x">The location at which to compute the cumulative density.</param>
            <returns>the cumulative density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InverseGamma.Density(System.Double)">
            <summary>
            Computes the density of the distribution.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InverseGamma.DensityLn(System.Double)">
            <summary>
            Computes the log density of the distribution.
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InverseGamma.SampleUnchecked(System.Random,System.Double,System.Double)">
            <summary>
            Samples the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="shape">The shape (alpha) parameter of the inverse Gamma distribution.</param>
            <param name="scale">The scale (beta) parameter of the inverse Gamma distribution.</param>
            <returns>a random number from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InverseGamma.Sample">
            <summary>
            Draws a random sample from the distribution.
            </summary>
            <returns>A random number from this distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InverseGamma.Samples">
            <summary>
            Generates a sequence of samples from the Cauchy distribution.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InverseGamma.Sample(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sample from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="shape">The shape (alpha) parameter of the inverse Gamma distribution.</param>
            <param name="scale">The scale (beta) parameter of the inverse Gamma distribution.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InverseGamma.Samples(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="shape">The shape (alpha) parameter of the inverse Gamma distribution.</param>
            <param name="scale">The scale (beta) parameter of the inverse Gamma distribution.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.InverseGamma.Shape">
            <summary>
            Gets or sets the shape (alpha) parameter.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.InverseGamma.Scale">
            <summary>
            Gets or sets The scale (beta) parameter.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.InverseGamma.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.InverseGamma.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.InverseGamma.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.InverseGamma.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.InverseGamma.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.InverseGamma.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.InverseGamma.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.InverseGamma.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
            <remarks>Throws <see cref="T:System.NotSupportedException"/>.</remarks>
        </member>
        <member name="P:MathNet.Numerics.Distributions.InverseGamma.Minimum">
            <summary>
            Gets the minimum of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.InverseGamma.Maximum">
            <summary>
            Gets the maximum of the distribution.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Laplace">
            <summary>
            The Laplace distribution is a distribution over the real numbers parameterized by a mean and
            scale parameter. The PDF is:
                p(x) = \frac{1}{2 * scale} \exp{- |x - mean| / scale}.
            <a href="http://en.wikipedia.org/wiki/Laplace_distribution">Wikipedia - Laplace distribution</a>.
            </summary>
            <remarks>The distribution will use the <see cref="T:System.Random"/> by default. 
            <para>Users can set the random number generator by using the <see cref="P:MathNet.Numerics.Distributions.Laplace.RandomSource"/> property.</para>
            <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Laplace._scale">
            <summary>
            The scale of the Laplace distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Laplace._random">
            <summary>
            The distribution's random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Laplace.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.Laplace"/> class (location = 0, scale = 1). 
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Laplace.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.Laplace"/> class. 
            </summary>
            <param name="location">
            The location for the Laplace distribution.
            </param>
            <param name="scale">
            The scale for the Laplace distribution.
            </param>
            <exception cref="T:System.ArgumentException">
            If <paramref name="scale"/> is negative.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Laplace.SetParameters(System.Double,System.Double)">
            <summary>
            Sets the parameters of the distribution after checking their validity.
            </summary>
            <param name="location">The location for the Laplace distribution.</param>
            <param name="scale">The scale for the Laplace distribution.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the parameters don't pass the <see cref="M:MathNet.Numerics.Distributions.Laplace.IsValidParameterSet(System.Double,System.Double)"/> function.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Laplace.IsValidParameterSet(System.Double,System.Double)">
            <summary>
            Checks whether the parameters of the distribution are valid. 
            </summary>
            <param name="location">The location for the Laplace distribution.</param>
            <param name="scale">The scale for the Laplace distribution.</param>
            <returns><c>true</c> when the parameters are valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Laplace.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Laplace.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution function of the distribution.
            </summary>
            <param name="x">The location at which to compute the cumulative density.</param>
            <returns>the cumulative density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Laplace.Density(System.Double)">
            <summary>
            Computes the density of the distribution.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>        
        </member>
        <member name="M:MathNet.Numerics.Distributions.Laplace.DensityLn(System.Double)">
            <summary>
            Computes the log density of the distribution.
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Laplace.SampleUnchecked(System.Random,System.Double,System.Double)">
            <summary>
            Samples the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="location">The location shape parameter.</param>
            <param name="scale">The scale parameter.</param>
            <returns>a random number from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Laplace.Sample">
            <summary>
            Samples a Laplace distributed random variable.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Laplace.Samples">
            <summary>
            Generates a sample from the Laplace distribution.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Laplace.Sample(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sample from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="location">The location shape parameter.</param>
            <param name="scale">The scale parameter.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Laplace.Samples(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="location">The location shape parameter.</param>
            <param name="scale">The scale parameter.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Laplace.Location">
            <summary>
            Gets or sets the location of the Laplace distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Laplace.Scale">
            <summary>
            Gets or sets the scale of the Laplace distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Laplace.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Laplace.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Laplace.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Laplace.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Laplace.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Laplace.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Laplace.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Laplace.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Laplace.Minimum">
            <summary>
            Gets the minimum of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Laplace.Maximum">
            <summary>
            Gets the maximum of the distribution.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Pareto">
            <summary>
            The Pareto distribution is a power law probability distribution that coincides with social, 
            scientific, geophysical, actuarial, and many other types of observable phenomena.
            For details about this distribution, see 
            <a href="http://en.wikipedia.org/wiki/Pareto_distribution">Wikipedia - Pareto distribution</a>.
            </summary>
            <remarks><para>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can get/set the random number generator by using the <see cref="P:MathNet.Numerics.Distributions.Pareto.RandomSource"/> property.</para>
            <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Pareto._scale">
            <summary>
            The scale parameter of the distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Pareto._shape">
            <summary>
            The shape parameter of the distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Pareto._random">
            <summary>
            The distribution's random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Pareto.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.Pareto"/> class. 
            </summary>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="shape">
            The shape parameter of the distribution.
            </param>
            <exception cref="T:System.ArgumentException">
            If <paramref name="scale"/> or <paramref name="shape"/> are negative.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Pareto.SetParameters(System.Double,System.Double)">
            <summary>
            Sets the parameters of the distribution after checking their validity.
            </summary>
            <param name="scale">The scale parameter of the distribution.</param>
            <param name="shape">The shape parameter of the distribution.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the parameters don't pass the <see cref="M:MathNet.Numerics.Distributions.Pareto.IsValidParameterSet(System.Double,System.Double)"/> function.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Pareto.IsValidParameterSet(System.Double,System.Double)">
            <summary>
            Checks whether the parameters of the distribution are valid. 
            </summary>
            <param name="scale">The scale parameter of the distribution.</param>
            <param name="shape">The shape parameter of the distribution.</param>
            <returns><c>true</c> when the parameters are valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Pareto.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Pareto.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution function of the distribution.
            </summary>
            <param name="x">The location at which to compute the cumulative density.</param>
            <returns>the cumulative density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Pareto.Density(System.Double)">
            <summary>
            Computes the density of the distribution.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Pareto.DensityLn(System.Double)">
            <summary>
            Computes the log density of the distribution.
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Pareto.SampleUnchecked(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sample from the Pareto distribution without doing parameter checking.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="scale">The scale parameter.</param>
            <param name="shape">The shape parameter.</param>
            <returns>a random number from the Pareto distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Pareto.Sample">
            <summary>
            Draws a random sample from the distribution.
            </summary>
            <returns>A random number from this distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Pareto.Samples">
            <summary>
            Generates a sequence of samples from the Pareto distribution.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Pareto.Sample(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sample from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="scale">The scale parameter.</param>
            <param name="shape">The shape parameter.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Pareto.Samples(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="scale">The scale parameter.</param>
            <param name="shape">The shape parameter.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Pareto.Scale">
            <summary>
            Gets or sets the scale parameter of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Pareto.Shape">
            <summary>
            Gets or sets the shape parameter of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Pareto.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Pareto.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Pareto.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Pareto.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Pareto.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Pareto.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Pareto.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Pareto.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Pareto.Minimum">
            <summary>
            Gets the minimum of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Pareto.Maximum">
            <summary>
            Gets the maximum of the distribution.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Rayleigh">
            <summary>
            The Rayleigh distribution (pronounced /ˈreɪli/) is a continuous probability distribution. As an 
            example of how it arises, the wind speed will have a Rayleigh distribution if the components of 
            the two-dimensional wind velocity vector are uncorrelated and normally distributed with equal variance.
            For details about this distribution, see 
            <a href="http://en.wikipedia.org/wiki/Rayleigh_distribution">Wikipedia - Rayleigh distribution</a>.
            </summary>
            <remarks><para>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can get/set the random number generator by using the <see cref="P:MathNet.Numerics.Distributions.Rayleigh.RandomSource"/> property.</para>
            <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Rayleigh._scale">
            <summary>
            The scale parameter of the distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Rayleigh._random">
            <summary>
            The distribution's random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Rayleigh.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.Rayleigh"/> class. 
            </summary>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <exception cref="T:System.ArgumentException">
            If <paramref name="scale"/> is negative.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Rayleigh.SetParameters(System.Double)">
            <summary>
            Sets the parameters of the distribution after checking their validity.
            </summary>
            <param name="scale">The scale parameter of the distribution.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the parameters don't pass the <see cref="M:MathNet.Numerics.Distributions.Rayleigh.IsValidParameterSet(System.Double)"/> function.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Rayleigh.IsValidParameterSet(System.Double)">
            <summary>
            Checks whether the parameters of the distribution are valid. 
            </summary>
            <param name="scale">The scale parameter of the distribution.</param>
            <returns><c>true</c> when the parameters are valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Rayleigh.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Rayleigh.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution function of the distribution.
            </summary>
            <param name="x">The location at which to compute the cumulative density.</param>
            <returns>the cumulative density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Rayleigh.Density(System.Double)">
            <summary>
            Computes the density of the distribution.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Rayleigh.DensityLn(System.Double)">
            <summary>
            Computes the log density of the distribution.
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Rayleigh.SampleUnchecked(System.Random,System.Double)">
            <summary>
            Generates a sample from the Rayleigh distribution without doing parameter checking.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="scale">The scale parameter.</param>
            <returns>a random number from the Rayleigh distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Rayleigh.Sample">
            <summary>
            Draws a random sample from the distribution.
            </summary>
            <returns>A random number from this distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Rayleigh.Samples">
            <summary>
            Generates a sequence of samples from the Rayleigh distribution.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Rayleigh.Sample(System.Random,System.Double)">
            <summary>
            Generates a sample from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="scale">The scale parameter.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Rayleigh.Samples(System.Random,System.Double)">
            <summary>
            Generates a sequence of samples from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="scale">The scale parameter.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Rayleigh.Scale">
            <summary>
            Gets or sets the scale parameter of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Rayleigh.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Rayleigh.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Rayleigh.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Rayleigh.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Rayleigh.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Rayleigh.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Rayleigh.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Rayleigh.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Rayleigh.Minimum">
            <summary>
            Gets the minimum of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Rayleigh.Maximum">
            <summary>
            Gets the maximum of the distribution.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Stable">
            <summary>
            A random variable is said to be stable (or to have a stable distribution) if it has 
            the property that a linear combination of two independent copies of the variable has 
            the same distribution, up to location and scale parameters.
            For details about this distribution, see 
            <a href="http://en.wikipedia.org/wiki/Stable_distribution">Wikipedia - Stable distribution</a>.
            </summary>
            <remarks><para>The distribution will use the <see cref="T:System.Random"/> by default.`
            Users can get/set the random number generator by using the <see cref="P:MathNet.Numerics.Distributions.Stable.RandomSource"/> property.</para>
            <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Stable._alpha">
            <summary>
            The stability parameter of the distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Stable._beta">
            <summary>
            The skewness parameter of the distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Stable._scale">
            <summary>
            The scale parameter of the distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Stable._location">
            <summary>
            The location parameter of the distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Stable._random">
            <summary>
            The distribution's random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Stable.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.Stable"/> class. 
            </summary>
            <param name="alpha">
            The stability parameter of the distribution.
            </param>
            <param name="beta">
            The skewness parameter of the distribution.
            </param>
            <param name="scale">
            The scale parameter of the distribution.
            </param>
            <param name="location">
            The location parameter of the distribution.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Stable.SetParameters(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the parameters of the distribution after checking their validity.
            </summary>
            <param name="alpha">The stability parameter of the distribution.</param>
            <param name="beta">The skewness parameter of the distribution.</param>
            <param name="scale">The scale parameter of the distribution.</param>
            <param name="location">The location parameter of the distribution.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Stable.IsValidParameterSet(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Checks whether the parameters of the distribution are valid. 
            </summary>
            <param name="alpha">The stability parameter of the distribution.</param>
            <param name="beta">The skewness parameter of the distribution.</param>
            <param name="scale">The scale parameter of the distribution.</param>
            <param name="location">The location parameter of the distribution.</param>
            <returns><c>true</c> when the parameters are valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Stable.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Stable.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution function of the distribution.
            </summary>
            <param name="x">The location at which to compute the cumulative density.</param>
            <returns>the cumulative density at <paramref name="x"/>.</returns>
            <remarks>Throws a not supported exception if <c>Alpha != 2</c>, <c>(Alpha != 1 and Beta !=0)</c>, or <c>(Alpha != 0.5 and Beta != 1)</c></remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Stable.LevyCumulativeDistribution(System.Double,System.Double,System.Double)">
            <summary>
            Computes the cumulative distribution function of the Levy distribution.
            </summary>
            <param name="scale">The scale parameter.</param>
            <param name="location">The location parameter.</param>
            <param name="x">The location at which to compute the cumulative density.</param>
            <returns>
            the cumulative density at <paramref name="x"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Stable.Density(System.Double)">
            <summary>
            Computes the density of the distribution.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Stable.LevyDensity(System.Double,System.Double,System.Double)">
            <summary>
            Computes the density of the Levy distribution.
            </summary>
            <param name="scale">The scale parameter of the distribution.</param>
            <param name="location">The location parameter of the distribution.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Stable.DensityLn(System.Double)">
            <summary>
            Computes the log density of the distribution.
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Stable.SampleUnchecked(System.Random,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Samples the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="alpha">The stability parameter of the distribution.</param>
            <param name="beta">The skewness parameter of the distribution.</param>
            <param name="scale">The scale parameter of the distribution.</param>
            <param name="location">The location parameter of the distribution.</param>
            <returns>a random number from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Stable.Sample">
            <summary>
            Draws a random sample from the distribution.
            </summary>
            <returns>A random number from this distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Stable.Samples">
            <summary>
            Generates a sequence of samples from the Stable distribution.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Stable.Sample(System.Random,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Generates a sample from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="alpha">The stability parameter of the distribution.</param>
            <param name="beta">The skewness parameter of the distribution.</param>
            <param name="scale">The scale parameter of the distribution.</param>
            <param name="location">The location parameter of the distribution.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Stable.Samples(System.Random,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="alpha">The stability parameter of the distribution.</param>
            <param name="beta">The skewness parameter of the distribution.</param>
            <param name="scale">The scale parameter of the distribution.</param>
            <param name="location">The location parameter of the distribution.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Stable.Alpha">
            <summary>
            Gets or sets the stability parameter of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Stable.Beta">
            <summary>
            Gets or sets The skewness parameter of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Stable.Scale">
            <summary>
            Gets or sets the scale parameter of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Stable.Location">
            <summary>
            Gets or sets the location parameter of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Stable.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Stable.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Stable.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Stable.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Stable.Entropy">
            <summary>
            Gets he entropy of the distribution.
            </summary>
            <remarks>Always throws a not supported exception.</remarks>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Stable.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
            <remarks>Throws a not supported exception of <c>Alpha</c> != 2.</remarks>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Stable.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
            <remarks>Throws a not supported exception if <c>Beta != 0</c>.</remarks>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Stable.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
            <remarks>Throws a not supported exception if <c>Beta != 0</c>.</remarks>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Stable.Minimum">
            <summary>
            Gets the minimum of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Stable.Maximum">
            <summary>
            Gets the maximum of the distribution.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.ConwayMaxwellPoisson">
            <summary>
            <para>The Conway-Maxwell-Poisson distribution is a generalization of the Poisson, Geometric and Bernoulli
            distributions. It is parameterized by two real numbers "lambda" and "nu". For
            <list>    
                <item>nu = 0 the distribution reverts to a Geometric distribution</item>
                <item>nu = 1 the distribution reverts to the Poisson distribution</item>
                <item>nu -&gt; infinity the distribution converges to a Bernoulli distribution</item>
            </list></para>
            This implementation will cache the value of the normalization constant.
            <a href="http://en.wikipedia.org/wiki/Conway%E2%80%93Maxwell%E2%80%93Poisson_distribution">Wikipedia - ConwayMaxwellPoisson distribution</a>.
            </summary>
            <remarks><para>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can set the random number generator by using the <see cref="P:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.RandomSource"/> property.</para>
            <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="T:MathNet.Numerics.Distributions.IDiscreteDistribution">
            <summary>
            The interface for discrete univariate distributions.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.IDiscreteDistribution.Probability(System.Int32)">
            <summary>
            Computes values of the probability mass function.
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <returns>the probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.IDiscreteDistribution.ProbabilityLn(System.Int32)">
            <summary>
            Computes values of the log probability mass function.
            </summary>
            <param name="k">The location in the domain where we want to evaluate the log probability mass function.</param>
            <returns>the log probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.IDiscreteDistribution.Sample">
            <summary>
            Draws a random sample from the distribution.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.IDiscreteDistribution.Samples">
            <summary>
            Draws a sequence of random samples from the distribution.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IDiscreteDistribution.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IDiscreteDistribution.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IDiscreteDistribution.Minimum">
            <summary>
            Gets the smallest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IDiscreteDistribution.Maximum">
            <summary>
            Gets the largest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.Tolerance">
            <summary>
            Since many properties of the distribution can only be computed approximately, the tolerance
            level specifies how much error we accept.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.ConwayMaxwellPoisson._mean">
            <summary>
            The mean of the distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.ConwayMaxwellPoisson._variance">
            <summary>
             The variance of the distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.ConwayMaxwellPoisson._z">
            <summary>
            Caches the value of the normalization constant.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.ConwayMaxwellPoisson._lambda">
            <summary>
            The lambda parameter.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.ConwayMaxwellPoisson._nu">
            <summary>
            The nu parameter.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.ConwayMaxwellPoisson._random">
            <summary>
            The distribution's random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.ConwayMaxwellPoisson"/> class. 
            </summary>
            <param name="lambda">
            The lambda parameter.
            </param>
            <param name="nu">
            The nu parameter.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.SetParameters(System.Double,System.Double)">
            <summary>
            Sets the parameters of the distribution after checking their validity.
            </summary>
            <param name="lambda">The lambda parameter.</param>
            <param name="nu">The nu parameter.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the parameters don't pass the <see cref="M:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.IsValidParameterSet(System.Double,System.Double)"/> function.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.IsValidParameterSet(System.Double,System.Double)">
            <summary>
            Checks whether the parameters of the distribution are valid. 
            </summary>
            <param name="lambda">The lambda parameter.</param>
            <param name="nu">The nu parameter.</param>
            <returns><c>true</c> when the parameters are valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution function of the <c>ConwayMaxwellPoisson</c> distribution.
            </summary>
            <param name="x">The location at which to compute the cumulative density.</param>
            <returns>the cumulative density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.Probability(System.Int32)">
            <summary>
            Computes the probability of a specific value.
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <returns>
            the probability mass at location <paramref name="k"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.ProbabilityLn(System.Int32)">
            <summary>
            Computes the log probability of a specific value.
            </summary>
            <param name="k">The location in the domain where we want to evaluate the log probability mass function.</param>
            <returns>
            the log probability mass at location <paramref name="k"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.Normalization(System.Double,System.Double)">
            <summary>
            Computes an approximate normalization constant for the CMP distribution.
            </summary>
            <param name="lambda">The lambda parameter for the CMP distribution.</param>
            <param name="nu">The nu parameter for the CMP distribution.</param>
            <returns>
            an approximate normalization constant for the CMP distribution.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.SampleUnchecked(System.Random,System.Double,System.Double,System.Double)">
            <summary>
            Returns one trials from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="lambda">The lambda parameter</param>
            <param name="nu">The nu parameter.</param>
            <param name="z">The z parameter.</param>
            <returns>
            One sample from the distribution implied by <paramref name="lambda"/>, <paramref name="nu"/>, and <paramref name="z"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.Sample">
            <summary>
            Samples a Conway-Maxwell-Poisson distributed random variable.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.Samples">
            <summary>
            Samples a sequence of a Conway-Maxwell-Poisson distributed random variables.
            </summary>
            <returns>
            a sequence of samples from a Conway-Maxwell-Poisson distribution.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.Sample(System.Random,System.Double,System.Double)">
            <summary>
            Samples a random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="lambda">The lambda parameter</param>
            <param name="nu">The nu parameter.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.Samples(System.Random,System.Double,System.Double)">
            <summary>
            Samples a sequence of this random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="lambda">The lambda parameter</param>
            <param name="nu">The nu parameter.</param>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.Lambda">
            <summary>
            Gets or sets the lambda parameter.
            </summary>
            <value>The value of the lambda parameter.</value>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.Nu">
            <summary>
            Gets or sets the Nu parameter.
            </summary>
            <value>The value of the Nu parameter.</value>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.Mode">
            <summary>
            Gets the mode of the distribution
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.Minimum">
            <summary>
            Gets the smallest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.Maximum">
            <summary>
            Gets the largest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.Z">
            <summary>
            Gets the normalization constant of the Conway-Maxwell-Poisson distribution.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Geometric">
            <summary>
            The Geometric distribution is a distribution over positive integers parameterized by one positive real number.
            This implementation of the Geometric distribution will never generate 0's.
            <a href="http://en.wikipedia.org/wiki/geometric_distribution">Wikipedia - geometric distribution</a>.
            </summary>
            <remarks><para>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can set the random number generator by using the <see cref="P:MathNet.Numerics.Distributions.Geometric.RandomSource"/> property.</para>
            <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Geometric._p">
            <summary>
            The geometric distribution parameter. 
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Geometric._random">
            <summary>
            The distribution's random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Geometric.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the Geometric class.
            </summary>
            <param name="p">The probability of generating one.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the Geometric parameter is not in the range [0,1].</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Geometric.SetParameters(System.Double)">
            <summary>
            Sets the parameters of the distribution after checking their validity.
            </summary>
            <param name="p">The probability of generating a one.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the parameters don't pass the <see cref="M:MathNet.Numerics.Distributions.Geometric.IsValidParameterSet(System.Double)"/> function.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Geometric.IsValidParameterSet(System.Double)">
            <summary>
            Checks whether the parameters of the distribution are valid. 
            </summary>
            <param name="p">The probability of generating a one.</param>
            <returns><c>true</c> when the parameters are valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Geometric.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Geometric.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution function of the Bernoulli distribution.
            </summary>
            <param name="x">The location at which to compute the cumulative density.</param>
            <returns>the cumulative density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Geometric.Probability(System.Int32)">
            <summary>
            Computes values of the probability mass function.
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <returns>
            the probability mass at location <paramref name="k"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Geometric.ProbabilityLn(System.Int32)">
            <summary>
            Computes values of the log probability mass function.
            </summary>
            <param name="k">The location in the domain where we want to evaluate the log probability mass function.</param>
            <returns>
            the log probability mass at location <paramref name="k"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Geometric.SampleUnchecked(System.Random,System.Double)">
            <summary>
            Returns one sample from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="p">The p parameter</param>
            <returns>
            One sample from the distribution implied by <paramref name="p"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Geometric.Sample">
            <summary>
            Samples a Geometric distributed random variable.
            </summary>
            <returns>A sample from the Geometric distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Geometric.Samples">
            <summary>
            Samples an array of Geometric distributed random variables.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Geometric.Sample(System.Random,System.Double)">
            <summary>
            Samples a random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="p">The p parameter</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Geometric.Samples(System.Random,System.Double)">
            <summary>
            Samples a sequence of this random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="p">The p parameter</param>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Geometric.P">
            <summary>
            Gets or sets the probability of generating a one.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Geometric.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Geometric.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Geometric.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Geometric.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Geometric.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Geometric.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
            <remarks>Throws a not supported exception.</remarks>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Geometric.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Geometric.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Geometric.Minimum">
            <summary>
            Gets the smallest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Geometric.Maximum">
            <summary>
            Gets the largest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Hypergeometric">
            <summary>
            This class implements functionality for the Hypergeometric distribution. This distribution is
            a discrete probability distribution that describes the number of successes in a sequence 
            of n draws from a finite population without replacement, just as the binomial distribution 
            describes the number of successes for draws with replacement
            <a href="http://en.wikipedia.org/wiki/Hypergeometric_distribution">Wikipedia - Hypergeometric distribution</a>.
            </summary>
            <remarks><para>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can set the random number generator by using the <see cref="P:MathNet.Numerics.Distributions.Hypergeometric.RandomSource"/> property</para>.
            <para>
            The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Hypergeometric._populationSize">
            <summary>
            The size of the population.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Hypergeometric._m">
            <summary>
            The m parameter of the distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Hypergeometric._n">
            <summary>
            The n parameter (number to draw) of the distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Hypergeometric._random">
            <summary>
            The distribution's random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Hypergeometric.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Hypergeometric class.
            </summary>
            <param name="populationSize">The population size.</param>
            <param name="m">The m parameter of the distribution.</param>
            <param name="n">The n parameter of the distribution.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Hypergeometric.SetParameters(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the parameters of the distribution after checking their validity.
            </summary>
            <param name="total">The Total parameter of the distribution.</param>
            <param name="m">The m parameter of the distribution.</param>
            <param name="n">The n parameter of the distribution.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Hypergeometric.IsValidParameterSet(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks whether the parameters of the distribution are valid.
            </summary>
            <param name="total">The Total parameter of the distribution.</param>
            <param name="m">The m parameter of the distribution.</param>
            <param name="n">The n parameter of the distribution.</param>
            <returns><c>true</c> when the parameters are valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Hypergeometric.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Hypergeometric.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution function of the distribution.
            </summary>
            <param name="x">The location at which to compute the cumulative density.</param>
            <returns>the cumulative density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Hypergeometric.Probability(System.Int32)">
            <summary>
            Computes values of the probability mass function.
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <returns>
            the probability mass at location <paramref name="k"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Hypergeometric.ProbabilityLn(System.Int32)">
            <summary>
            Computes values of the log probability mass function.
            </summary>
            <param name="k">The location in the domain where we want to evaluate the log probability mass function.</param>
            <returns>
            the log probability mass at location <paramref name="k"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Hypergeometric.SampleUnchecked(System.Random,System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates a sample from the Hypergeometric distribution without doing parameter checking.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="size">The Total parameter of the distribution.</param>
            <param name="m">The m parameter of the distribution.</param>
            <param name="n">The n parameter of the distribution.</param>
            <returns>a random number from the Hypergeometric distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Hypergeometric.Sample">
            <summary>
            Samples a Hypergeometric distributed random variable.
            </summary>
            <returns>The number of successes in n trials.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Hypergeometric.Samples">
            <summary>
            Samples an array of Hypergeometric distributed random variables.
            </summary>
            <returns>a sequence of successes in n trials.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Hypergeometric.Sample(System.Random,System.Int32,System.Int32,System.Int32)">
            <summary>
            Samples a random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="populationSize">The population size.</param>
            <param name="m">The m parameter of the distribution.</param>
            <param name="n">The n parameter of the distribution.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Hypergeometric.Samples(System.Random,System.Int32,System.Int32,System.Int32)">
            <summary>
            Samples a sequence of this random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="populationSize">The population size.</param>
            <param name="m">The m parameter of the distribution.</param>
            <param name="n">The n parameter of the distribution.</param>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Hypergeometric.PopulationSize">
            <summary>
            Gets or sets the population size.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Hypergeometric.N">
            <summary>
            Gets or sets the n parameter of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Hypergeometric.M">
            <summary>
            Gets or sets the m parameter of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Hypergeometric.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Hypergeometric.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Hypergeometric.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Hypergeometric.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Hypergeometric.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Hypergeometric.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Hypergeometric.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Hypergeometric.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Hypergeometric.Minimum">
            <summary>
            Gets the minimum of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Hypergeometric.Maximum">
            <summary>
            Gets the maximum of the distribution.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.NegativeBinomial">
            <summary>
            The negative binomial is a distribution over the natural numbers with two parameters r,p. For the special
            case that r is an integer one can interpret the distribution as the number of tails before the r'th head
            when the probability of head is p.
            <a href="http://en.wikipedia.org/wiki/Negative_binomial_distribution">Wikipedia - NegativeBinomial distribution</a>.
            </summary>
            <remarks><para>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can set the random number generator by using the <see cref="P:MathNet.Numerics.Distributions.NegativeBinomial.RandomSource"/> property.</para>
            <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="F:MathNet.Numerics.Distributions.NegativeBinomial._r">
            <summary>
            The r parameter of the distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.NegativeBinomial._p">
            <summary>
            The p parameter of the distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.NegativeBinomial._random">
            <summary>
            The distribution's random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NegativeBinomial.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.NegativeBinomial"/> class. 
            </summary>
            <param name="r">The number of trials.</param>
            <param name="p">The probability of a trial resulting in success.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NegativeBinomial.SetParameters(System.Double,System.Double)">
            <summary>
            Sets the parameters of the distribution after checking their validity.
            </summary>
            <param name="r">The number of trials.</param>
            <param name="p">The probability of a trial resulting in success.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the parameters don't pass the <see cref="M:MathNet.Numerics.Distributions.NegativeBinomial.IsValidParameterSet(System.Double,System.Double)"/> function.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NegativeBinomial.IsValidParameterSet(System.Double,System.Double)">
            <summary>
            Checks whether the parameters of the distribution are valid. 
            </summary>
            <param name="r">The number of trials.</param>
            <param name="p">The probability of a trial resulting in success.</param>
            <returns><c>true</c> when the parameters are valid, <c>false</c> otherwise.</returns>        
        </member>
        <member name="M:MathNet.Numerics.Distributions.NegativeBinomial.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NegativeBinomial.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution function of the <c>NegativeBinomial</c> distribution.
            </summary>
            <param name="x">The location at which to compute the cumulative density.</param>
            <returns>the cumulative density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NegativeBinomial.Probability(System.Int32)">
            <summary>
            Computes values of the probability mass function.
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <returns>
            the probability mass at location <paramref name="k"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NegativeBinomial.ProbabilityLn(System.Int32)">
            <summary>
            Computes values of the log probability mass function.
            </summary>
            <param name="k">The location in the domain where we want to evaluate the log probability mass function.</param>
            <returns>
            the log probability mass at location <paramref name="k"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NegativeBinomial.SampleUnchecked(System.Random,System.Double,System.Double)">
            <summary>
            Samples a negative binomial distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="r">The r parameter.</param>
            <param name="p">The p parameter.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NegativeBinomial.Sample">
            <summary>
            Samples a <c>NegativeBinomial</c> distributed random variable.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NegativeBinomial.Samples">
            <summary>
            Samples an array of <c>NegativeBinomial</c> distributed random variables.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NegativeBinomial.Sample(System.Random,System.Double,System.Double)">
            <summary>
            Samples a random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="r">The r parameter.</param>
            <param name="p">The p parameter.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NegativeBinomial.Samples(System.Random,System.Double,System.Double)">
            <summary>
            Samples a sequence of this random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="r">The r parameter.</param>
            <param name="p">The p parameter.</param>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NegativeBinomial.R">
            <summary>
            Gets or sets the number of trials.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NegativeBinomial.P">
            <summary>
            Gets or sets the probability of success.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NegativeBinomial.RandomSource">
            <summary>
            Gets or sets the distribution's random number generator.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NegativeBinomial.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NegativeBinomial.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NegativeBinomial.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NegativeBinomial.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NegativeBinomial.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NegativeBinomial.Mode">
            <summary>
            Gets the mode of the distribution
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NegativeBinomial.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NegativeBinomial.Minimum">
            <summary>
            Gets the smallest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NegativeBinomial.Maximum">
            <summary>
            Gets the largest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Poisson">
            <summary>
            Pseudo-random generation of poisson distributed deviates.
            </summary>
            <remarks> 
            <para>Distribution is described at <a href="http://en.wikipedia.org/wiki/Poisson_distribution"> Wikipedia - Poisson distribution</a>.</para>
            <para>Knuth's method is used to generate Poisson distributed random variables.</para>
            <para>f(x) = exp(-λ)*λ^x/x!;</para>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Poisson._lambda">
            <summary>
            The Poisson distribution parameter λ.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Poisson._random">
            <summary>
            The distribution's random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Poisson.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.Poisson"/> class.
            </summary>
            <param name="lambda">The Poisson distribution parameter λ.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="lambda"/> is equal or less then 0.0.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Poisson.SetParameters(System.Double)">
            <summary>
            Sets the parameters of the distribution after checking their validity.
            </summary>
            <param name="lambda">The mean (λ) of the distribution.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the parameters don't pass the <see cref="M:MathNet.Numerics.Distributions.Poisson.IsValidParameterSet(System.Double)"/> function.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Poisson.IsValidParameterSet(System.Double)">
            <summary>
            Checks whether the parameters of the distribution are valid. 
            </summary>
            <param name="lambda">The mean (λ) of the distribution.</param>
            <returns><c>true</c> when the parameters are valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Poisson.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Poisson.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution function of the Poisson distribution.
            </summary>
            <param name="x">The location at which to compute the cumulative density.</param>
            <returns>the cumulative density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Poisson.Probability(System.Int32)">
            <summary>
            Computes values of the probability mass function.
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <returns>the probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Poisson.ProbabilityLn(System.Int32)">
            <summary>
            Computes values of the log probability mass function.
            </summary>
            <param name="k">The location in the domain where we want to evaluate the log probability mass function.</param>
            <returns>the log probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Poisson.SampleUnchecked(System.Random,System.Double)">
            <summary>
            Generates one sample from the Poisson distribution.
            </summary>
            <param name="rnd">The random source to use.</param>
            <param name="lambda">The Poisson distribution parameter λ.</param>
            <returns>A random sample from the Poisson distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Poisson.DoSampleShort(System.Random,System.Double)">
            <summary>
            Generates one sample from the Poisson distribution by Knuth's method.
            </summary>
            <param name="rnd">The random source to use.</param>
            <param name="lambda">The Poisson distribution parameter λ.</param>
            <returns>A random sample from the Poisson distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Poisson.DoSampleLarge(System.Random,System.Double)">
            <summary>
            Generates one sample from the Poisson distribution by "Rejection method PA".
            </summary>
            <param name="rnd">The random source to use.</param>
            <param name="lambda">The Poisson distribution parameter λ.</param>
            <returns>A random sample from the Poisson distribution.</returns>
            <remarks>"Rejection method PA" from "The Computer Generation of Poisson Random Variables" by A. C. Atkinson,
            Journal of the Royal Statistical Society Series C (Applied Statistics) Vol. 28, No. 1. (1979)
            The article is on pages 29-35. The algorithm given here is on page 32. </remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Poisson.Sample">
            <summary>
            Samples a Poisson distributed random variable.
            </summary>
            <returns>A sample from the Poisson distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Poisson.Samples">
            <summary>
            Samples an array of Poisson distributed random variables.
            </summary>
            <returns>a sequence of successes in N trials.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Poisson.Sample(System.Random,System.Double)">
            <summary>
            Samples a Poisson distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="lambda">The Poisson distribution parameter λ.</param>
            <returns>A sample from the Poisson distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Poisson.Samples(System.Random,System.Double)">
            <summary>
            Samples a sequence of Poisson distributed random variables.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="lambda">The Poisson distribution parameter λ.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Poisson.Lambda">
            <summary>
            Gets or sets the Poisson distribution parameter λ.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Poisson.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Poisson.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Poisson.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Poisson.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Poisson.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
            <remarks>Approximation, see Wikipedia <a href="http://en.wikipedia.org/wiki/Poisson_distribution">Poisson distribution</a></remarks>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Poisson.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Poisson.Minimum">
            <summary>
            Gets the smallest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Poisson.Maximum">
            <summary>
            Gets the largest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Poisson.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Poisson.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
            <remarks>Approximation, see Wikipedia <a href="http://en.wikipedia.org/wiki/Poisson_distribution">Poisson distribution</a></remarks>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Zipf">
            <summary>
            Zipf's law, an empirical law formulated using mathematical statistics, refers to the fact 
            that many types of data studied in the physical and social sciences can be approximated with 
            a Zipfian distribution, one of a family of related discrete power law probability distributions.
            For details about this distribution, see 
            <a href="http://en.wikipedia.org/wiki/Zipf%27s_law">Wikipedia - Zipf distribution</a>.
            </summary>
            <remarks><para>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can get/set the random number generator by using the <see cref="P:MathNet.Numerics.Distributions.Zipf.RandomSource"/> property.</para>
            <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Zipf._s">
            <summary>
            The s parameter of the distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Zipf._n">
            <summary>
            The n parameter of the distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Zipf._random">
            <summary>
            The distribution's random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Zipf.#ctor(System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.Zipf"/> class. 
            </summary>
            <param name="s">
            The s parameter of the distribution.
            </param>
            <param name="n">
            The n parameter of the distribution.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Zipf.SetParameters(System.Double,System.Int32)">
            <summary>
            Sets the parameters of the distribution after checking their validity.
            </summary>
            <param name="s">The s parameter of the distribution.</param>
            <param name="n">The n parameter of the distribution.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Zipf.IsValidParameterSet(System.Double,System.Int32)">
            <summary>
            Checks whether the parameters of the distribution are valid. 
            </summary>
            <param name="s">The s parameter of the distribution.</param>
            <param name="n">The n parameter of the distribution.</param>
            <returns><c>true</c> when the parameters are valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Zipf.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Zipf.CumulativeDistribution(System.Double)">
            <summary> 
            Computes the cumulative distribution function of the distribution.
            </summary>
            <param name="x">The integer location at which to compute the cumulative density.</param>
            <returns>the cumulative density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Zipf.Probability(System.Int32)">
            <summary>
            Computes values of the probability mass function.
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <returns>
            the probability mass at location <paramref name="k"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Zipf.ProbabilityLn(System.Int32)">
            <summary>
            Computes values of the log probability mass function.
            </summary>
            <param name="k">The location in the domain where we want to evaluate the log probability mass function.</param>
            <returns>
            the log probability mass at location <paramref name="k"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Zipf.SampleUnchecked(System.Random,System.Double,System.Int32)">
            <summary>
            Generates a sample from the Zipf distribution without doing parameter checking.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="s">The s parameter of the distribution.</param>
            <param name="n">The n parameter of the distribution.</param>
            <returns>a random number from the Zipf distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Zipf.Sample">
            <summary>
            Draws a random sample from the distribution.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Zipf.Samples">
            <summary>
            Samples an array of zipf distributed random variables.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Zipf.Sample(System.Random,System.Double,System.Int32)">
            <summary>
            Samples a random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="s">The s parameter of the distribution.</param>
            <param name="n">The n parameter of the distribution.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Zipf.Samples(System.Random,System.Double,System.Int32)">
            <summary>
            Samples a sequence of this random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="s">The s parameter of the distribution.</param>
            <param name="n">The n parameter of the distribution.</param>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Zipf.S">
            <summary>
            Gets or sets the s parameter of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Zipf.N">
            <summary>
            Gets or sets the n parameter of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Zipf.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Zipf.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Zipf.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Zipf.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Zipf.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Zipf.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Zipf.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Zipf.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Zipf.Minimum">
            <summary>
            Gets the smallest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Zipf.Maximum">
            <summary>
            Gets the largest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.InverseWishart">
            <summary>
            This class implements functionality for the inverse Wishart distribution. This distribution is
            parameterized by the degrees of freedom nu and the scale matrix S. The inverse Wishart distribution
            is the conjugate prior for the covariance matrix of a multivariate normal distribution.
            <a href="http://en.wikipedia.org/wiki/Inverse-Wishart_distribution">Wikipedia - Inverse-Wishart distribution</a>.
            </summary>
            <remarks><para>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can set the random number generator by using the <see cref="P:MathNet.Numerics.Distributions.InverseWishart.RandomSource"/> property.</para>
            <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="F:MathNet.Numerics.Distributions.InverseWishart._nu">
            <summary>
            The degrees of freedom for the inverse Wishart distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.InverseWishart._s">
            <summary>
            The scale matrix for the inverse Wishart distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.InverseWishart._chol">
            <summary>
            Caches the Cholesky factorization of the scale matrix.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.InverseWishart._random">
            <summary>
            The distribution's random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InverseWishart.#ctor(System.Double,MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.InverseWishart"/> class. 
            </summary>
            <param name="nu">
            The degrees of freedom for the inverse Wishart distribution.
            </param>
            <param name="s">
            The scale matrix for the inverse Wishart distribution.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InverseWishart.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InverseWishart.SetParameters(System.Double,MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Sets the parameters of the distribution after checking their validity.
            </summary>
            <param name="nu">The degrees of freedom for the Wishart distribution.</param>
            <param name="s">The scale matrix for the Wishart distribution.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the parameters don't pass the <see cref="M:MathNet.Numerics.Distributions.InverseWishart.IsValidParameterSet(System.Double,MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})"/> function.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InverseWishart.IsValidParameterSet(System.Double,MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Checks whether the parameters of the distribution are valid. 
            </summary>
            <param name="nu">The degrees of freedom for the Wishart distribution.</param>
            <param name="s">The scale matrix for the Wishart distribution.</param>
            <returns><c>true</c> when the parameters are valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InverseWishart.Density(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Evaluates the probability density function for the inverse Wishart distribution.
            </summary>
            <param name="x">The matrix at which to evaluate the density at.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the argument does not have the same dimensions as the scale matrix.</exception>
            <returns>the density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InverseWishart.Sample">
            <summary>
            Samples an inverse Wishart distributed random variable by sampling
            a Wishart random variable and inverting the matrix.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InverseWishart.Sample(System.Random,System.Double,MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Samples an inverse Wishart distributed random variable by sampling
            a Wishart random variable and inverting the matrix.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="nu">The degrees of freedom.</param>
            <param name="s">The scale matrix.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.InverseWishart.Nu">
            <summary>
            Gets or sets the degrees of freedom for the inverse Wishart distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.InverseWishart.S">
            <summary>
            Gets or sets the scale matrix for the inverse Wishart distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.InverseWishart.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.InverseWishart.Mean">
            <summary>
            Gets the mean.
            </summary>
            <value>The mean of the distribution.</value>
        </member>
        <member name="P:MathNet.Numerics.Distributions.InverseWishart.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
            <value>The mode of the distribution.</value>
            <remarks>A. O'Hagan, and J. J. Forster (2004). Kendall's Advanced Theory of Statistics: Bayesian Inference. 2B (2 ed.). Arnold. ISBN 0-340-80752-0.</remarks>
        </member>
        <member name="P:MathNet.Numerics.Distributions.InverseWishart.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
            <value>The variance  of the distribution.</value>
            <remarks>Kanti V. Mardia, J. T. Kent and J. M. Bibby (1979). Multivariate Analysis.</remarks>
        </member>
        <member name="T:MathNet.Numerics.Distributions.MatrixNormal">
            <summary>
            This class implements functionality for matrix valued normal distributions. The distribution
            is parameterized by a mean matrix (M), a covariance matrix for the rows (V) and a covariance matrix
            for the columns (K). If the dimension of M is d-by-m then V is d-by-d and K is m-by-m.
            <a href="http://en.wikipedia.org/wiki/Matrix_normal_distribution">Wikipedia - MatrixNormal distribution</a>.
            </summary>
            <remarks><para>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can set the random number generator by using the <see cref="P:MathNet.Numerics.Distributions.MatrixNormal.RandomSource"/> property.</para>
            <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="F:MathNet.Numerics.Distributions.MatrixNormal._m">
            <summary>
            The mean of the matrix normal distribution.        
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.MatrixNormal._v">
            <summary>
            The covariance matrix for the rows.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.MatrixNormal._k">
            <summary>
            The covariance matrix for the columns.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.MatrixNormal._random">
            <summary>
            The distribution's random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.MatrixNormal.#ctor(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.MatrixNormal"/> class. 
            </summary>
            <param name="m">
            The mean of the matrix normal.
            </param>
            <param name="v">
            The covariance matrix for the rows.
            </param>
            <param name="k">
            The covariance matrix for the columns.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the dimensions of the mean and two covariance matrices don't match.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.MatrixNormal.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.MatrixNormal.SetParameters(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Sets the parameters of the distribution after checking their validity.
            </summary>
            <param name="m">The mean of the matrix normal.</param>
            <param name="v">The covariance matrix for the rows.</param>
            <param name="k">The covariance matrix for the columns.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the parameters don't pass the <see cref="M:MathNet.Numerics.Distributions.MatrixNormal.IsValidParameterSet(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})"/> function.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.MatrixNormal.IsValidParameterSet(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Checks whether the parameters of the distribution are valid. 
            </summary>
            <param name="m">The mean of the matrix normal.</param>
            <param name="v">The covariance matrix for the rows.</param>
            <param name="k">The covariance matrix for the columns.</param>
            <returns><c>true</c> when the parameters are valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.MatrixNormal.Density(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Evaluates the probability density function for the matrix normal distribution.
            </summary>
            <param name="x">The matrix at which to evaluate the density at.</param>
            <returns>the density at <paramref name="x"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If the argument does not have the correct dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.MatrixNormal.Sample">
            <summary>
            Samples a matrix normal distributed random variable.
            </summary>
            <returns>A random number from this distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.MatrixNormal.Sample(System.Random,MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Samples a matrix normal distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="m">The mean of the matrix normal.</param>
            <param name="v">The covariance matrix for the rows.</param>
            <param name="k">The covariance matrix for the columns.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the dimensions of the mean and two covariance matrices don't match.</exception>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.MatrixNormal.SampleVectorNormal(System.Random,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Samples a vector normal distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="mean">The mean of the vector normal distribution.</param>
            <param name="covariance">The covariance matrix of the vector normal distribution.</param>
            <returns>a sequence of samples from defined distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.MatrixNormal.SampleVectorNormal(System.Random,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Factorization.Cholesky{System.Double})">
            <summary>
            Samples a vector normal distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="mean">The mean of the vector normal distribution.</param>
            <param name="cholesky">The Cholesky factorization of the covariance matrix.</param>
            <returns>a sequence of samples from defined distribution.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.MatrixNormal.Mean">
            <summary>
            Gets or sets the mean. (M)
            </summary>
            <value>The mean of the distribution.</value>
        </member>
        <member name="P:MathNet.Numerics.Distributions.MatrixNormal.RowCovariance">
            <summary>
            Gets or sets the row covariance. (V)
            </summary>
            <value>The row covariance.</value>
        </member>
        <member name="P:MathNet.Numerics.Distributions.MatrixNormal.ColumnCovariance">
            <summary>
            Gets or sets the column covariance. (K)
            </summary>
            <value>The column covariance.</value>
        </member>
        <member name="P:MathNet.Numerics.Distributions.MatrixNormal.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Wishart">
            <summary>
            This class implements functionality for the Wishart distribution. This distribution is
            parameterized by the degrees of freedom nu and the scale matrix S. The Wishart distribution
            is the conjugate prior for the precision (inverse covariance) matrix of the multivariate
            normal distribution.
            <a href="http://en.wikipedia.org/wiki/Wishart_distribution">Wikipedia - Wishart distribution</a>.
            </summary>
            <remarks><para>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can set the random number generator by using the <see cref="P:MathNet.Numerics.Distributions.Wishart.RandomSource"/> property.</para>
            <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Wishart._nu">
            <summary>
            The degrees of freedom for the Wishart distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Wishart._s">
            <summary>
            The scale matrix for the Wishart distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Wishart._chol">
            <summary>
            Caches the Cholesky factorization of the scale matrix.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Wishart._random">
            <summary>
            The distribution's random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Wishart.#ctor(System.Double,MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.Wishart"/> class. 
            </summary>
            <param name="nu">
            The degrees of freedom for the Wishart distribution.
            </param>
            <param name="s">
            The scale matrix for the Wishart distribution.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Wishart.SetParameters(System.Double,MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Sets the parameters of the distribution after checking their validity.
            </summary>
            <param name="nu">The degrees of freedom for the Wishart distribution.</param>
            <param name="s">The scale matrix for the Wishart distribution.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the parameters don't pass the <see cref="M:MathNet.Numerics.Distributions.Wishart.IsValidParameterSet(System.Double,MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})"/> function.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Wishart.IsValidParameterSet(System.Double,MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Checks whether the parameters of the distribution are valid. 
            </summary>
            <param name="nu">The degrees of freedom for the Wishart distribution.</param>
            <param name="s">The scale matrix for the Wishart distribution.</param>
            <returns><c>true</c> when the parameters are valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Wishart.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Wishart.Density(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Evaluates the probability density function for the Wishart distribution.
            </summary>
            <param name="x">The matrix at which to evaluate the density at.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the argument does not have the same dimensions as the scale matrix.</exception>
            <returns>the density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Wishart.Sample">
            <summary>
            Samples a Wishart distributed random variable using the method
                Algorithm AS 53: Wishart Variate Generator
                W. B. Smith and R. R. Hocking
                Applied Statistics, Vol. 21, No. 3 (1972), pp. 341-345
            </summary>
            <returns>A random number from this distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Wishart.Sample(System.Random,System.Double,MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Samples a Wishart distributed random variable using the method
                Algorithm AS 53: Wishart Variate Generator
                W. B. Smith and R. R. Hocking
                Applied Statistics, Vol. 21, No. 3 (1972), pp. 341-345
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="nu">The degrees of freedom.</param>
            <param name="s">The scale matrix.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Wishart.DoSample(System.Random,System.Double,MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Factorization.Cholesky{System.Double})">
            <summary>
            Samples the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="nu">The nu parameter to use.</param>
            <param name="s">The S parameter to use.</param>
            <param name="chol">The cholesky decomposition to use.</param>
            <returns>a random number from the distribution.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Wishart.Nu">
            <summary>
            Gets or sets the degrees of freedom for the Wishart distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Wishart.S">
            <summary>
            Gets or sets the scale matrix for the Wishart distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Wishart.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Wishart.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
            <value>The mean of the distribution.</value>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Wishart.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
            <value>The mode of the distribution.</value>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Wishart.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
            <value>The variance  of the distribution.</value>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Storage.VectorStorage`1.At(System.Int32)">
            <summary>
            Retrieves the requested element without range checking.
            </summary>
            <param name="index">The index of the element.</param>
            <returns>The requested element.</returns>
            <remarks>Not range-checked.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Storage.VectorStorage`1.At(System.Int32,`0)">
            <summary>
            Sets the element without range checking.
            </summary>
            <param name="index">The index of the element.</param>
            <param name="value">The value to set the element to. </param>
            <remarks>WARNING: This method is not thread safe. Use "lock" with it and be sure to avoid deadlocks.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Storage.VectorStorage`1.IsMutable(System.Int32)">
            <summary>
            True if the specified field can be set to any value.
            False if the field is fixed.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Storage.VectorStorage`1.Equals(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">
            An object to compare with this object.
            </param>
            <returns>
            <c>true</c> if the current object is equal to the <paramref name="other"/> parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Storage.VectorStorage`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Storage.VectorStorage`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Storage.VectorStorage`1.Item(System.Int32)">
            <summary>
            Gets or sets the value at the given index, with range checking.
            </summary>
            <param name="index">
            The index of the element.
            </param>
            <value>The value to get or set.</value>
            <remarks>This method is ranged checked. <see cref="M:MathNet.Numerics.LinearAlgebra.Storage.VectorStorage`1.At(System.Int32)"/> and <see cref="M:MathNet.Numerics.LinearAlgebra.Storage.VectorStorage`1.At(System.Int32,`0)"/>
            to get and set values without range checking.</remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Storage.VectorStorage`1.IsFullyMutable">
            <summary>
            True if all fields of this vector can be set to any value.
            False if some fields are fixed.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage`1.Indices">
            <summary>
            Array that contains the indices of the non-zero values.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage`1.Values">
            <summary>
            Array that contains the non-zero elements of the vector.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage`1.ValueCount">
            <summary>
            Gets the number of non-zero elements in the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage`1.At(System.Int32)">
            <summary>
            Retrieves the requested element without range checking.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage`1.At(System.Int32,`0)">
            <summary>
            Sets the element without range checking.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage`1.GrowthSize">
            <summary>
            Calculates the amount with which to grow the storage array's if they need to be
            increased in size.
            </summary>
            <returns>The amount grown.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage`1.At(System.Int32)">
            <summary>
            Retrieves the requested element without range checking.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage`1.At(System.Int32,`0)">
            <summary>
            Sets the element without range checking.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage`1.At(System.Int32,System.Int32)">
            <summary>
            Retrieves the requested element without range checking.
            </summary>
            <param name="row">
            The row of the element.
            </param>
            <param name="column">
            The column of the element.
            </param>
            <returns>
            The requested element.
            </returns>
            <remarks>Not range-checked.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage`1.At(System.Int32,System.Int32,`0)">
            <summary>
            Sets the element without range checking.
            </summary>
            <param name="row"> The row of the element. </param>
            <param name="column"> The column of the element. </param>
            <param name="value"> The value to set the element to. </param>
            <remarks>WARNING: This method is not thread safe. Use "lock" with it and be sure to avoid deadlocks.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage`1.IsMutable(System.Int32,System.Int32)">
            <summary>
            True if the specified field can be set to any value.
            False if the field is fixed, like an off-diagonal field on a diagonal matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage`1.Equals(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">
            An object to compare with this object.
            </param>
            <returns>
            <c>true</c> if the current object is equal to the <paramref name="other"/> parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage`1.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the value at the given row and column, with range checking.
            </summary>
            <param name="row">
            The row of the element.
            </param>
            <param name="column">
            The column of the element.
            </param>
            <value>The value to get or set.</value>
            <remarks>This method is ranged checked. <see cref="M:MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage`1.At(System.Int32,System.Int32)"/> and <see cref="M:MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage`1.At(System.Int32,System.Int32,`0)"/>
            to get and set values without range checking.</remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage`1.IsFullyMutable">
            <summary>
            True if all fields of this matrix can be set to any value.
            False if some fields are fixed, like on a diagonal matrix.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.ExtensionMethods">
            <summary>
            Extension methods which return factorizations for the various matrix classes.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.ExtensionMethods.Cholesky(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Computes the Cholesky decomposition for a matrix.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <returns>The Cholesky decomposition object.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.ExtensionMethods.LU(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Computes the LU decomposition for a matrix.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <returns>The LU decomposition object.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.ExtensionMethods.QR(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Computes the QR decomposition for a matrix.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <param name="method">The type of QR factorization to perform.</param>
            <returns>The QR decomposition object.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.ExtensionMethods.GramSchmidt(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Computes the QR decomposition for a matrix using Modified Gram-Schmidt Orthogonalization.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <returns>The QR decomposition object.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.ExtensionMethods.Svd(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},System.Boolean)">
            <summary>
            Computes the SVD decomposition for a matrix.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <param name="computeVectors">Compute the singular U and VT vectors or not.</param>
            <returns>The SVD decomposition object.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.ExtensionMethods.Evd(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Computes the EVD decomposition for a matrix.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <returns>The EVD decomposition object.</returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.Cholesky">
            <summary>
            <para>A class which encapsulates the functionality of a Cholesky factorization.</para>
            <para>For a symmetric, positive definite matrix A, the Cholesky factorization
            is an lower triangular matrix L so that A = L*L'.</para>
            </summary>
            <remarks>
            The computation of the Cholesky factorization is done at construction time. If the matrix is not symmetric
            or positive definite, the constructor will throw an exception.
            </remarks>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Generic.Factorization.Cholesky`1">
            <summary>
            <para>A class which encapsulates the functionality of a Cholesky factorization.</para>
            <para>For a symmetric, positive definite matrix A, the Cholesky factorization
            is an lower triangular matrix L so that A = L*L'.</para>
            </summary>
            <remarks>
            The computation of the Cholesky factorization is done at construction time. If the matrix is not symmetric
            or positive definite, the constructor will throw an exception.
            </remarks>
            <typeparam name="T">Supported data types are double, single, <see cref="T:System.Numerics.Complex"/>, and <see cref="T:MathNet.Numerics.Complex32"/>.</typeparam>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Generic.ISolver`1">
            <summary>
            Classes that solves a system of linear equations, <c>AX = B</c>.
            </summary>
            <typeparam name="T">Supported data types are double, single, <see cref="N:MathNet.Numerics.LinearAlgebra.Complex"/>, and <see cref="N:MathNet.Numerics.LinearAlgebra.Complex32"/>.</typeparam>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.ISolver`1.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Solves a system of linear equations, <c>AX = B</c>.
            </summary>
            <param name="input">The right hand side Matrix, <c>B</c>.</param>
            <returns>The left hand side Matrix, <c>X</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.ISolver`1.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0},MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Solves a system of linear equations, <c>AX = B</c>.
            </summary>
            <param name="input">The right hand side Matrix, <c>B</c>.</param>
            <param name="result">The left hand side Matrix, <c>X</c>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.ISolver`1.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Solves a system of linear equations, <c>Ax = b</c>
            </summary>
            <param name="input">The right hand side vector, <c>b</c>.</param>
            <returns>The left hand side Vector, <c>x</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.ISolver`1.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0},MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Solves a system of linear equations, <c>Ax = b</c>.
            </summary>
            <param name="input">The right hand side vector, <c>b</c>.</param>
            <param name="result">The left hand side Matrix>, <c>x</c>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Factorization.Cholesky`1.Create(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Internal method which routes the call to perform the Cholesky factorization to the appropriate class.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <returns>A cholesky factorization object.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Factorization.Cholesky`1.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A Cholesky factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <returns>The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Factorization.Cholesky`1.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0},MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A Cholesky factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Factorization.Cholesky`1.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A Cholesky factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <returns>The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Vector`1"/>, <b>x</b>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Factorization.Cholesky`1.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0},MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A Cholesky factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Factorization.Cholesky`1.CholeskyFactor">
            <summary>
            Gets or sets the lower triangular form of the Cholesky matrix
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Factorization.Cholesky`1.Factor">
            <summary>
            Gets the lower triangular form of the Cholesky matrix.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Factorization.Cholesky`1.Determinant">
            <summary>
            Gets the determinant of the matrix for which the Cholesky matrix was computed.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Factorization.Cholesky`1.DeterminantLn">
            <summary>
            Gets the log determinant of the matrix for which the Cholesky matrix was computed.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.Cholesky.Determinant">
            <summary>
            Gets the determinant of the matrix for which the Cholesky matrix was computed.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.Cholesky.DeterminantLn">
            <summary>
            Gets the log determinant of the matrix for which the Cholesky matrix was computed.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix">
            <summary>
            A Matrix class with dense storage. The underlying storage is a one dimensional array in column-major order (column by column).
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.Matrix">
            <summary>
            <c>Complex32</c> version of the <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/> class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Matrix.#ctor(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage{MathNet.Numerics.Complex32})">
            <summary>
            Initializes a new instance of the Matrix class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Matrix.L1Norm">
            <summary>Calculates the L1 norm.</summary>
            <returns>The L1 norm of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Matrix.ConjugateTranspose">
            <summary>
            Returns the conjugate transpose of this matrix.
            </summary>
            <returns>The conjugate transpose of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Matrix.FrobeniusNorm">
            <summary>Calculates the Frobenius norm of this matrix.</summary>
            <returns>The Frobenius norm of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Matrix.InfinityNorm">
            <summary>Calculates the infinity norm of this matrix.</summary>
            <returns>The infinity norm of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Matrix.DoAdd(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="other">The matrix to add to this matrix.</param>
            <param name="result">The matrix to store the result of the addition.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Matrix.DoSubtract(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="other">The matrix to subtract to this matrix.</param>
            <param name="result">The matrix to store the result of subtraction.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Matrix.DoMultiply(MathNet.Numerics.Complex32,MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Multiplies each element of the matrix by a scalar and places results into the result matrix.
            </summary>
            <param name="scalar">The scalar to multiply the matrix with.</param>
            <param name="result">The matrix to store the result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Matrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Multiplies this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Matrix.DoDivide(MathNet.Numerics.Complex32,MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Divides each element of the matrix by a scalar and places results into the result matrix.
            </summary>
            <param name="scalar">The scalar to divide the matrix with.</param>
            <param name="result">The matrix to store the result of the division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Matrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Multiplies this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Matrix.DoTransposeAndMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Multiplies this matrix with transpose of another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Matrix.DoTransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Multiplies the transpose of this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Matrix.DoTransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Multiplies the transpose of this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Matrix.DoNegate(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Negate each element of this matrix and place the results into the result matrix.
            </summary>
            <param name="result">The result of the negation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Matrix.DoConjugate(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Complex conjugates each element of this matrix and place the results into the result matrix.
            </summary>
            <param name="result">The result of the conjugation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Matrix.DoPointwiseMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Pointwise multiplies this matrix with another matrix and stores the result into the result matrix.
            </summary>
            <param name="other">The matrix to pointwise multiply with this one.</param>
            <param name="result">The matrix to store the result of the pointwise multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Matrix.DoPointwiseDivide(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Pointwise divide this matrix by another matrix and stores the result into the result matrix.
            </summary>
            <param name="other">The matrix to pointwise divide this one by.</param>
            <param name="result">The matrix to store the result of the pointwise division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Matrix.DoModulus(MathNet.Numerics.Complex32,MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Computes the modulus for each element of the matrix.
            </summary>
            <param name="divisor">The divisor to use.</param>
            <param name="result">Matrix to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Matrix.Trace">
            <summary>
            Computes the trace of this matrix.
            </summary>
            <returns>The trace of this matrix</returns>
            <exception cref="T:System.ArgumentException">If the matrix is not square</exception>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix._rowCount">
            <summary>
            Number of rows.
            </summary>
            <remarks>Using this instead of the RowCount property to speed up calculating
            a matrix index in the data array.</remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix._columnCount">
            <summary>
            Number of columns.
            </summary>
            <remarks>Using this instead of the ColumnCount property to speed up calculating
            a matrix index in the data array.</remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix._values">
            <summary>
            Gets the matrix's data.
            </summary>
            <value>The matrix's data.</value>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.#ctor(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage{MathNet.Numerics.Complex32})">
            <summary>
            Create a new dense matrix straight from an initialized matrix storage instance.
            The storage is used directly without copying.
            Intended for advanced scenarios where you're working directly with
            storage for performance or interop reasons.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.#ctor(System.Int32)">
            <summary>
            Create a new square dense matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the order is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new dense matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the row or column count is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.#ctor(System.Int32,System.Int32,MathNet.Numerics.Complex32[])">
            <summary>
            Create a new dense matrix with the given number of rows and columns directly binding to a raw array.
            The array is assumed to be in column-major order (column by column) and is used directly without copying.
            Very efficient, but changes to the array and the matrix will affect each other.
            </summary>
            <seealso href="http://en.wikipedia.org/wiki/Row-major_order"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.OfMatrix(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Create a new dense matrix as a copy of the given other matrix.
            This new matrix will be independent from the other matrix.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.OfArray(MathNet.Numerics.Complex32[0:,0:])">
            <summary>
            Create a new dense matrix as a copy of the given two-dimensional array.
            This new matrix will be independent from the provided array.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.OfIndexed(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,System.Int32,MathNet.Numerics.Complex32}})">
            <summary>
            Create a new dense matrix as a copy of the given indexed enumerable.
            Keys must be provided at most once, zero is assumed if a key is omitted.
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.OfColumnMajor(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{MathNet.Numerics.Complex32})">
            <summary>
            Create a new dense matrix as a copy of the given enumerable.
            The enumerable is assumed to be in column-major order (column by column).
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.OfColumns(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{MathNet.Numerics.Complex32}})">
            <summary>
            Create a new dense matrix as a copy of the given enumerable of enumerable columns.
            Each enumerable in the master enumerable specifies a column.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.OfColumnVectors(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32}[])">
            <summary>
            Create a new dense matrix as a copy of the given column vectors.
            This new matrix will be independent from the vectors.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.OfColumnsCovariant``1(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create a new dense matrix as a copy of the given enumerable of enumerable columns.
            Each enumerable in the master enumerable specifies a column.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.OfRows(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{MathNet.Numerics.Complex32}})">
            <summary>
            Create a new dense matrix as a copy of the given enumerable of enumerable rows.
            Each enumerable in the master enumerable specifies a row.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.OfRowVectors(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32}[])">
            <summary>
            Create a new dense matrix as a copy of the given row vectors.
            This new matrix will be independent from the vectors.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.OfRowsCovariant``1(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create a new dense matrix as a copy of the given enumerable of enumerable rows.
            Each enumerable in the master enumerable specifies a row.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.Create(System.Int32,System.Int32,System.Func{System.Int32,System.Int32,MathNet.Numerics.Complex32})">
            <summary>
            Create a new dense matrix and initialize each value using the provided init function.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.CreateRandom(System.Int32,System.Int32,MathNet.Numerics.Distributions.IContinuousDistribution)">
            <summary>
            Create a new dense matrix with values sampled from the provided random distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.#ctor(System.Int32,System.Int32,MathNet.Numerics.Complex32)">
            <summary>
            Create a new dense matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to the provided value.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the row or column count is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.#ctor(MathNet.Numerics.Complex32[0:,0:])">
            <summary>
            Create a new dense matrix as a copy of the given two-dimensional array.
            This new matrix will be independent from the provided array.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.#ctor(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Create a new dense matrix as a copy of the given other matrix.
            This new matrix will be independent from the other matrix.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.CreateMatrix(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a <c>DenseMatrix</c> for the given number of rows and columns.
            </summary>
            <param name="numberOfRows">The number of rows.</param>
            <param name="numberOfColumns">The number of columns.</param>
            <param name="fullyMutable">True if all fields must be mutable (e.g. not a diagonal matrix).</param>
            <returns>
            A <c>DenseMatrix</c> with the given dimensions.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.CreateVector(System.Int32,System.Boolean)">
            <summary>
            Creates a <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Vector`1"/> with a the given dimension.
            </summary>
            <param name="size">The size of the vector.</param>
            <param name="fullyMutable">True if all fields must be mutable.</param>
            <returns>
            A <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Vector`1"/> with the given dimension.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.Transpose">
            <summary>
            Returns the transpose of this matrix.
            </summary>
            <returns>The transpose of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.L1Norm">
            <summary>Calculates the L1 norm.</summary>
            <returns>The L1 norm of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.FrobeniusNorm">
            <summary>Calculates the Frobenius norm of this matrix.</summary>
            <returns>The Frobenius norm of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.InfinityNorm">
            <summary>Calculates the infinity norm of this matrix.</summary>
            <returns>The infinity norm of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.Identity(System.Int32)">
            <summary>
            Initializes a square <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix"/> with all zero's except for ones on the diagonal.
            </summary>
            <param name="order">the size of the square matrix.</param>
            <returns>A dense identity matrix.</returns>
            <exception cref="T:System.ArgumentException">
            If <paramref name="order"/> is less than one.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.DoMultiply(MathNet.Numerics.Complex32,MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Multiplies each element of the matrix by a scalar and places results into the result matrix.
            </summary>
            <param name="scalar">The scalar to multiply the matrix with.</param>
            <param name="result">The matrix to store the result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Multiplies this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Multiplies this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.DoTransposeAndMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Multiplies this matrix with transpose of another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.DoTransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Multiplies the transpose of this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.DoTransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Multiplies the transpose of this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.DoNegate(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Negate each element of this matrix and place the results into the result matrix.
            </summary>
            <param name="result">The result of the negation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.DoPointwiseMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Pointwise multiplies this matrix with another matrix and stores the result into the result matrix.
            </summary>
            <param name="other">The matrix to pointwise multiply with this one.</param>
            <param name="result">The matrix to store the result of the pointwise multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.DoPointwiseDivide(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Pointwise divide this matrix by another matrix and stores the result into the result matrix.
            </summary>
            <param name="other">The matrix to pointwise divide this one by.</param>
            <param name="result">The matrix to store the result of the pointwise division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.DoAdd(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="other">The matrix to add to this matrix.</param>
            <param name="result">The matrix to store the result of add</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.DoSubtract(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="other">The matrix to subtract.</param>
            <param name="result">The matrix to store the result of the subtraction.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.ConjugateTranspose">
            <summary>
            Returns the conjugate transpose of this matrix.
            </summary>
            <returns>The conjugate transpose of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.Trace">
            <summary>
            Computes the trace of this matrix.
            </summary>
            <returns>The trace of this matrix</returns>
            <exception cref="T:System.ArgumentException">If the matrix is not square</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.op_Addition(MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix,MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix)">
            <summary>
            Adds two matrices together and returns the results.
            </summary>
            <remarks>This operator will allocate new memory for the result. It will
            choose the representation of either <paramref name="leftSide"/> or <paramref name="rightSide"/> depending on which
            is denser.</remarks>
            <param name="leftSide">The left matrix to add.</param>
            <param name="rightSide">The right matrix to add.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> don't have the same dimensions.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.op_UnaryPlus(MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix)">
            <summary>
            Returns a <strong>Matrix</strong> containing the same values of <paramref name="rightSide"/>.
            </summary>
            <param name="rightSide">The matrix to get the values from.</param>
            <returns>A matrix containing a the same values as <paramref name="rightSide"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.op_Subtraction(MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix,MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix)">
            <summary>
            Subtracts two matrices together and returns the results.
            </summary>
            <remarks>This operator will allocate new memory for the result. It will
            choose the representation of either <paramref name="leftSide"/> or <paramref name="rightSide"/> depending on which
            is denser.</remarks>
            <param name="leftSide">The left matrix to subtract.</param>
            <param name="rightSide">The right matrix to subtract.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> don't have the same dimensions.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.op_UnaryNegation(MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix)">
            <summary>
            Negates each element of the matrix.
            </summary>
            <param name="rightSide">The matrix to negate.</param>
            <returns>A matrix containing the negated values.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix,MathNet.Numerics.Complex32)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.op_Multiply(MathNet.Numerics.Complex32,MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix,MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix)">
            <summary>
            Multiplies two matrices.
            </summary>
            <remarks>This operator will allocate new memory for the result. It will
            choose the representation of either <paramref name="leftSide"/> or <paramref name="rightSide"/> depending on which
            is denser.</remarks>
            <param name="leftSide">The left matrix to multiply.</param>
            <param name="rightSide">The right matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the dimensions of <paramref name="leftSide"/> or <paramref name="rightSide"/> don't conform.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix,MathNet.Numerics.LinearAlgebra.Complex32.DenseVector)">
            <summary>
            Multiplies a <strong>Matrix</strong> and a Vector.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The vector to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Complex32.DenseVector,MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix)">
            <summary>
            Multiplies a Vector and a <strong>Matrix</strong>.
            </summary>
            <param name="leftSide">The vector to multiply.</param>
            <param name="rightSide">The matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.op_Modulus(MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix,MathNet.Numerics.Complex32)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.Data">
            <summary>
            Gets the matrix's data.
            </summary>
            <value>The matrix's data.</value>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix.Values">
            <summary>
            Gets the matrix's data.
            </summary>
            <value>The matrix's data.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix">
            <summary>
            A matrix type for diagonal matrices.
            </summary>
            <remarks>
            Diagonal matrices can be non-square matrices but the diagonal always starts
            at element 0,0. A diagonal matrix will throw an exception if non diagonal
            entries are set. The exception to this is when the off diagonal elements are
            0.0 or NaN; these settings will cause no change to the diagonal matrix.
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix._data">
            <summary>
            Gets the matrix's data.
            </summary>
            <value>The matrix's data.</value>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.#ctor(MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage{MathNet.Numerics.Complex32})">
            <summary>
            Create a new diagonal matrix straight from an initialized matrix storage instance.
            The storage is used directly without copying.
            Intended for advanced scenarios where you're working directly with
            storage for performance or interop reasons.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.#ctor(System.Int32)">
            <summary>
            Create a new square diagonal matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the order is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new diagonal matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the row or column count is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.#ctor(System.Int32,System.Int32,MathNet.Numerics.Complex32)">
            <summary>
            Create a new diagonal matrix with the given number of rows and columns.
            All diagonal cells of the matrix will be initialized to the provided value, all non-diagonal ones to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the row or column count is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.#ctor(System.Int32,System.Int32,MathNet.Numerics.Complex32[])">
            <summary>
            Create a new diagonal matrix with the given number of rows and columns directly binding to a raw array.
            The array is assumed to contain the diagonal elements only and is used directly without copying.
            Very efficient, but changes to the array and the matrix will affect each other.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.OfMatrix(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Create a new diagonal matrix as a copy of the given other matrix.
            This new matrix will be independent from the other matrix.
            The matrix to copy from must be diagonal as well.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.OfArray(MathNet.Numerics.Complex32[0:,0:])">
            <summary>
            Create a new diagonal matrix as a copy of the given two-dimensional array.
            This new matrix will be independent from the provided array.
            The array to copy from must be diagonal as well.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.OfIndexedDiagonal(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,MathNet.Numerics.Complex32}})">
            <summary>
            Create a new diagonal matrix and initialize each diagonal value from the provided indexed enumerable.
            Keys must be provided at most once, zero is assumed if a key is omitted.
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.OfDiagonal(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{MathNet.Numerics.Complex32})">
            <summary>
            Create a new diagonal matrix and initialize each diagonal value from the provided enumerable.
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.Create(System.Int32,System.Int32,System.Func{System.Int32,MathNet.Numerics.Complex32})">
            <summary>
            Create a new diagonal matrix and initialize each diagonal value using the provided init function.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.CreateRandom(System.Int32,System.Int32,MathNet.Numerics.Distributions.IContinuousDistribution)">
            <summary>
            Create a new diagonal matrix with diagonal values sampled from the provided random distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.#ctor(MathNet.Numerics.Complex32[0:,0:])">
            <summary>
            Create a new diagonal matrix as a copy of the given two-dimensional array.
            This new matrix will be independent from the provided array.
            The array to copy from must be diagonal as well.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.#ctor(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Create a new diagonal matrix as a copy of the given other matrix.
            This new matrix will be independent from the other matrix.
            The matrix to copy from must be diagonal as well.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.CreateMatrix(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a <c>DiagonalMatrix</c> for the given number of rows and columns.
            </summary>
            <param name="numberOfRows">The number of rows.</param>
            <param name="numberOfColumns">The number of columns.</param>
            <param name="fullyMutable">True if all fields must be mutable (e.g. not a diagonal matrix).</param>
            <returns>
            A <c>DiagonalMatrix</c> with the given dimensions.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.CreateVector(System.Int32,System.Boolean)">
            <summary>
            Creates a <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Vector`1"/> with a the given dimension.
            </summary>
            <param name="size">The size of the vector.</param>
            <param name="fullyMutable">True if all fields must be mutable.</param>
            <returns>
            A <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Vector`1"/> with the given dimension.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.Add(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="other">The matrix to add to this matrix.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.DoAdd(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="other">The matrix to add to this matrix.</param>
            <param name="result">The matrix to store the result of the addition.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.Subtract(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="other">The matrix to subtract.</param>
            <returns>The result of the subtraction.</returns>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.DoSubtract(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="other">The matrix to subtract.</param>
            <param name="result">The matrix to store the result of the subtraction.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.SetDiagonal(MathNet.Numerics.Complex32[])">
            <summary>
            Copies the values of the given array to the diagonal.
            </summary>
            <param name="source">The array to copy the values from. The length of the vector should be
            Min(Rows, Columns).</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the length of <paramref name="source"/> does not
            equal Min(Rows, Columns).</exception>
            <remarks>For non-square matrices, the elements of <paramref name="source"/> are copied to
            this[i,i].</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.SetDiagonal(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Copies the values of the given <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Vector`1"/> to the diagonal.
            </summary>
            <param name="source">The vector to copy the values from. The length of the vector should be
            Min(Rows, Columns).</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the length of <paramref name="source"/> does not
            equal Min(Rows, Columns).</exception>
            <remarks>For non-square matrices, the elements of <paramref name="source"/> are copied to
            this[i,i].</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.DoMultiply(MathNet.Numerics.Complex32,MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Multiplies each element of the matrix by a scalar and places results into the result matrix.
            </summary>
            <param name="scalar">The scalar to multiply the matrix with.</param>
            <param name="result">The matrix to store the result of the multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.Multiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Multiplies this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <strong>this.Columns != other.Rows</strong>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the this.Rows x other.Columns.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.Multiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Multiplies this matrix with another matrix and returns the result.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <exception cref="T:System.ArgumentException">If <strong>this.Columns != other.Rows</strong>.</exception>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <returns>The result of multiplication.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.Multiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Multiplies this matrix with a vector and places the results into the result matrix.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <strong>result.Count != this.RowCount</strong>.</exception>
            <exception cref="T:System.ArgumentException">If <strong>this.ColumnCount != <paramref name="rightSide"/>.Count</strong>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.LeftMultiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Left multiply a matrix with a vector ( = vector * matrix ) and place the result in the result vector.
            </summary>
            <param name="leftSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <strong>result.Count != this.ColumnCount</strong>.</exception>
            <exception cref="T:System.ArgumentException">If <strong>this.RowCount != <paramref name="leftSide"/>.Count</strong>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.Determinant">
            <summary>
            Computes the determinant of this matrix.
            </summary>
            <returns>The determinant of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.Diagonal">
            <summary>
            Returns the elements of the diagonal in a <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector"/>.
            </summary>
            <returns>The elements of the diagonal.</returns>
            <remarks>For non-square matrices, the method returns Min(Rows, Columns) elements where
            i == j (i is the row index, and j is the column index).</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.TransposeAndMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Multiplies this matrix with transpose of another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <strong>this.Columns != other.Rows</strong>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the this.Rows x other.Columns.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.TransposeAndMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Multiplies this matrix with transpose of another matrix and returns the result.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <exception cref="T:System.ArgumentException">If <strong>this.Columns != other.Rows</strong>.</exception>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <returns>The result of multiplication.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.Transpose">
            <summary>
            Returns the transpose of this matrix.
            </summary>
            <returns>The transpose of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.L1Norm">
            <summary>Calculates the L1 norm.</summary>
            <returns>The L1 norm of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.L2Norm">
            <summary>Calculates the L2 norm.</summary>
            <returns>The L2 norm of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.FrobeniusNorm">
            <summary>Calculates the Frobenius norm of this matrix.</summary>
            <returns>The Frobenius norm of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.InfinityNorm">
            <summary>Calculates the infinity norm of this matrix.</summary>
            <returns>The infinity norm of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.ConditionNumber">
            <summary>Calculates the condition number of this matrix.</summary>
            <returns>The condition number of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.Inverse">
            <summary>Computes the inverse of this matrix.</summary>
            <exception cref="T:System.ArgumentException">If <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix"/> is not a square matrix.</exception>
            <exception cref="T:System.ArgumentException">If <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix"/> is singular.</exception>
            <returns>The inverse of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.LowerTriangle">
            <summary>
            Returns a new matrix containing the lower triangle of this matrix.
            </summary>
            <returns>The lower triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.LowerTriangle(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Puts the lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.StrictlyLowerTriangle">
            <summary>
            Returns a new matrix containing the lower triangle of this matrix. The new matrix
            does not contain the diagonal elements of this matrix.
            </summary>
            <returns>The lower triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.StrictlyLowerTriangle(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Puts the strictly lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.UpperTriangle">
            <summary>
            Returns a new matrix containing the upper triangle of this matrix.
            </summary>
            <returns>The upper triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.UpperTriangle(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Puts the upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.StrictlyUpperTriangle">
            <summary>
            Returns a new matrix containing the upper triangle of this matrix. The new matrix
            does not contain the diagonal elements of this matrix.
            </summary>
            <returns>The upper triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.StrictlyUpperTriangle(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Puts the strictly upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.SubMatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a matrix that contains the values from the requested sub-matrix.
            </summary>
            <param name="rowIndex">The row to start copying from.</param>
            <param name="rowCount">The number of rows to copy. Must be positive.</param>
            <param name="columnIndex">The column to start copying from.</param>
            <param name="columnCount">The number of columns to copy. Must be positive.</param>
            <returns>The requested sub-matrix.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If: <list><item><paramref name="rowIndex"/> is
            negative, or greater than or equal to the number of rows.</item>
            <item><paramref name="columnIndex"/> is negative, or greater than or equal to the number
            of columns.</item>
            <item><c>(columnIndex + columnLength) &gt;= Columns</c></item>
            <item><c>(rowIndex + rowLength) &gt;= Rows</c></item></list></exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="rowCount"/> or <paramref name="columnCount"/>
            is not positive.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.InsertColumn(System.Int32,MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Creates a new  <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix"/> and inserts the given column at the given index.
            </summary>
            <param name="columnIndex">The index of where to insert the column.</param>
            <param name="column">The column to insert.</param>
            <returns>A new <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix"/> with the inserted column.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="column "/> is <see langword="null"/>. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="columnIndex"/> is &lt; zero or &gt; the number of columns.</exception>
            <exception cref="T:System.ArgumentException">If the size of <paramref name="column"/> != the number of rows.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.InsertRow(System.Int32,MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Creates a new  <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix"/> and inserts the given row at the given index.
            </summary>
            <param name="rowIndex">The index of where to insert the row.</param>
            <param name="row">The row to insert.</param>
            <returns>A new  <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix"/> with the inserted column.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="row"/> is <see langword="null"/>. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="rowIndex"/> is &lt; zero or &gt; the number of rows.</exception>
            <exception cref="T:System.ArgumentException">If the size of <paramref name="row"/> != the number of columns.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.PermuteColumns(MathNet.Numerics.Permutation)">
            <summary>
            Permute the columns of a matrix according to a permutation.
            </summary>
            <param name="p">The column permutation to apply to this matrix.</param>
            <exception cref="T:System.InvalidOperationException">Always thrown</exception>
            <remarks>Permutation in diagonal matrix are senseless, because of matrix nature</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.PermuteRows(MathNet.Numerics.Permutation)">
            <summary>
            Permute the rows of a matrix according to a permutation.
            </summary>
            <param name="p">The row permutation to apply to this matrix.</param>
            <exception cref="T:System.InvalidOperationException">Always thrown</exception>
            <remarks>Permutation in diagonal matrix are senseless, because of matrix nature</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.Identity(System.Int32)">
            <summary>
            Initializes a square <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix"/> with all zero's except for ones on the diagonal.
            </summary>
            <param name="order">the size of the square matrix.</param>
            <returns>A diagonal identity matrix.</returns>
            <exception cref="T:System.ArgumentException">
            If <paramref name="order"/> is less than one.
            </exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.DiagonalMatrix.IsSymmetric">
            <summary>
            Gets a value indicating whether this matrix is symmetric.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.Evd">
            <summary>
            Eigenvalues and eigenvectors of a real matrix.
            </summary>
            <remarks>
            If A is symmetric, then A = V*D*V' where the eigenvalue matrix D is
            diagonal and the eigenvector matrix V is orthogonal.
            I.e. A = V*D*V' and V*VT=I.
            If A is not symmetric, then the eigenvalue matrix D is block diagonal
            with the real eigenvalues in 1-by-1 blocks and any complex eigenvalues,
            lambda + i*mu, in 2-by-2 blocks, [lambda, mu; -mu, lambda].  The
            columns of V represent the eigenvectors in the sense that A*V = V*D,
            i.e. A.Multiply(V) equals V.Multiply(D).  The matrix V may be badly
            conditioned, or even singular, so the validity of the equation
            A = V*D*Inverse(V) depends upon V.Condition().
            </remarks>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Generic.Factorization.Evd`1">
            <summary>
            Eigenvalues and eigenvectors of a real matrix.
            </summary>
            <remarks>
            If A is symmetric, then A = V*D*V' where the eigenvalue matrix D is
            diagonal and the eigenvector matrix V is orthogonal.
            I.e. A = V*D*V' and V*VT=I.
            If A is not symmetric, then the eigenvalue matrix D is block diagonal
            with the real eigenvalues in 1-by-1 blocks and any complex eigenvalues,
            lambda + i*mu, in 2-by-2 blocks, [lambda, mu; -mu, lambda].  The
            columns of V represent the eigenvectors in the sense that A*V = V*D,
            i.e. A.Multiply(V) equals V.Multiply(D).  The matrix V may be badly
            conditioned, or even singular, so the validity of the equation
            A = V*D*Inverse(V) depends upon V.Condition().
            </remarks>
            <typeparam name="T">Supported data types are double, single, <see cref="T:System.Numerics.Complex"/>, and <see cref="T:MathNet.Numerics.Complex32"/>.</typeparam>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Factorization.Evd`1.Create(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Internal method which routes the call to perform the singular value decomposition to the appropriate class.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <returns>An EVD object.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Factorization.Evd`1.EigenValues">
            <summary>Returns the eigen values as a <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Vector`1"/>.</summary>
            <returns>The eigen values.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Factorization.Evd`1.EigenVectors">
            <summary>Returns the right eigen vectors as a <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>.</summary>
            <returns>The eigen vectors. </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Factorization.Evd`1.D">
            <summary>Returns the block diagonal eigenvalue matrix <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>.</summary>
            <returns>The block diagonal eigenvalue matrix <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>.</returns>        
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Factorization.Evd`1.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <returns>The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Factorization.Evd`1.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0},MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Factorization.Evd`1.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <returns>The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Vector`1"/>, <b>x</b>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Factorization.Evd`1.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0},MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Factorization.Evd`1.IsSymmetric">
            <summary>
            Gets or sets a value indicating whether matrix is symmetric or not
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Factorization.Evd`1.Determinant">
            <summary>
            Gets the absolute value of determinant of the square matrix for which the EVD was computed.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Factorization.Evd`1.Rank">
            <summary>
            Gets the effective numerical matrix rank.
            </summary>
            <value>The number of non-negligible singular values.</value>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Factorization.Evd`1.IsFullRank">
            <summary>
            Gets a value indicating whether the matrix is full rank or not.
            </summary>
            <value><c>true</c> if the matrix is full rank; otherwise <c>false</c>.</value>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Factorization.Evd`1.VectorEv">
            <summary>
            Gets or sets the eigen values (λ) of matrix in ascending value.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Factorization.Evd`1.MatrixEv">
            <summary>
            Gets or sets eigenvectors.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Factorization.Evd`1.MatrixD">
            <summary>
            Gets or sets the block diagonal eigenvalue matrix.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.Evd.Determinant">
            <summary>
            Gets the absolute value of determinant of the square matrix for which the EVD was computed.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.Evd.Rank">
            <summary>
            Gets the effective numerical matrix rank.
            </summary>
            <value>The number of non-negligible singular values.</value>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.Evd.IsFullRank">
            <summary>
            Gets a value indicating whether the matrix is full rank or not.
            </summary>
            <value><c>true</c> if the matrix is full rank; otherwise <c>false</c>.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.GramSchmidt">
            <summary>
            <para>A class which encapsulates the functionality of the QR decomposition Modified Gram-Schmidt Orthogonalization.</para>
            <para>Any real square matrix A may be decomposed as A = QR where Q is an orthogonal mxn matrix and R is an nxn upper triangular matrix.</para>
            </summary>
            <remarks>
            The computation of the QR decomposition is done at construction time by modified Gram-Schmidt Orthogonalization.
            </remarks>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Generic.Factorization.GramSchmidt`1">
            <summary>
            <para>A class which encapsulates the functionality of the QR decomposition Modified Gram-Schmidt Orthogonalization.</para>
            <para>Any real square matrix A may be decomposed as A = QR where Q is an orthogonal mxn matrix and R is an nxn upper triangular matrix.</para>
            </summary>
            <remarks>
            The computation of the QR decomposition is done at construction time by modified Gram-Schmidt Orthogonalization.
            </remarks>
            <typeparam name="T">Supported data types are double, single, <see cref="T:System.Numerics.Complex"/>, and <see cref="T:MathNet.Numerics.Complex32"/>.</typeparam>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QR`1">
            <summary>
            <para>A class which encapsulates the functionality of the QR decomposition.</para>
            <para>Any real square matrix A (m x n) may be decomposed as A = QR where Q is an orthogonal matrix
            (its columns are orthogonal unit vectors meaning QTQ = I) and R is an upper triangular matrix 
            (also called right triangular matrix).</para>
            </summary>
            <remarks>
            The computation of the QR decomposition is done at construction time by Householder transformation.
            If a <seealso cref="F:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod.Full"/> factorization is performed, the resulting Q matrix is an m x m matrix 
            and the R matrix is an m x n matrix. If a <seealso cref="F:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod.Thin"/> factorization is performed, the 
            resulting Q matrix is an m x n matrix and the R matrix is an n x n matrix.     
            </remarks>
            <typeparam name="T">Supported data types are double, single, <see cref="T:System.Numerics.Complex"/>, and <see cref="T:MathNet.Numerics.Complex32"/>.</typeparam>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QR`1.Create(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0},MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Internal method which routes the call to perform the QR factorization to the appropriate class.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <param name="method">The type of QR factorization to perform.</param>
            <returns>A QR factorization object.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QR`1.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <returns>The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QR`1.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0},MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QR`1.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <returns>The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Vector`1"/>, <b>x</b>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QR`1.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0},MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QR`1.MatrixQ">
            <summary>
            Gets or sets orthogonal Q matrix
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QR`1.MatrixR">
            <summary>
            Gets or sets upper triangular factor R
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QR`1.QrMethod">
            <summary>
            The QR factorization method.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QR`1.Q">
            <summary>
            Gets orthogonal Q matrix
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QR`1.R">
            <summary>
            Gets the upper triangular factor R.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QR`1.Determinant">
            <summary>
            Gets the absolute determinant value of the matrix for which the QR matrix was computed.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QR`1.IsFullRank">
            <summary>
            Gets a value indicating whether the matrix is full rank or not.
            </summary>
            <value><c>true</c> if the matrix is full rank; otherwise <c>false</c>.</value>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Factorization.GramSchmidt`1.Create(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Internal method which routes the call to perform the QR factorization to the appropriate class.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <returns>A QR factorization object.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.GramSchmidt.Determinant">
            <summary>
            Gets the absolute determinant value of the matrix for which the QR matrix was computed.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.GramSchmidt.IsFullRank">
            <summary>
            Gets a value indicating whether the matrix is full rank or not.
            </summary>
            <value><c>true</c> if the matrix is full rank; otherwise <c>false</c>.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.LU">
            <summary>
            <para>A class which encapsulates the functionality of an LU factorization.</para>
            <para>For a matrix A, the LU factorization is a pair of lower triangular matrix L and
            upper triangular matrix U so that A = L*U.</para>
            <para>In the Math.Net implementation we also store a set of pivot elements for increased 
            numerical stability. The pivot elements encode a permutation matrix P such that P*A = L*U.</para>
            </summary>
            <remarks>
            The computation of the LU factorization is done at construction time.
            </remarks>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Generic.Factorization.LU`1">
            <summary>
            <para>A class which encapsulates the functionality of an LU factorization.</para>
            <para>For a matrix A, the LU factorization is a pair of lower triangular matrix L and
            upper triangular matrix U so that A = L*U.</para>
            <para>In the Math.Net implementation we also store a set of pivot elements for increased 
            numerical stability. The pivot elements encode a permutation matrix P such that P*A = L*U.</para>
            </summary>
            <remarks>
            The computation of the LU factorization is done at construction time.
            </remarks>
            <typeparam name="T">Supported data types are double, single, <see cref="T:System.Numerics.Complex"/>, and <see cref="T:MathNet.Numerics.Complex32"/>.</typeparam>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Generic.Factorization.LU`1.One">
            <summary>
            Value of one for T.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Factorization.LU`1.Create(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Internal method which routes the call to perform the LU factorization to the appropriate class.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <returns>An LU factorization object.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Factorization.LU`1.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A LU factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <returns>The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Factorization.LU`1.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0},MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A LU factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Factorization.LU`1.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A LU factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <returns>The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Vector`1"/>, <b>x</b>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Factorization.LU`1.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0},MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A LU factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Factorization.LU`1.Inverse">
            <summary>
            Returns the inverse of this matrix. The inverse is calculated using LU decomposition.
            </summary>
            <returns>The inverse of this matrix.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Factorization.LU`1.Factors">
            <summary>
            Gets or sets both the L and U factors in the same matrix.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Factorization.LU`1.Pivots">
            <summary>
            Gets or sets the pivot indices of the LU factorization.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Factorization.LU`1.L">
            <summary>
            Gets the lower triangular factor.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Factorization.LU`1.U">
            <summary>
            Gets the upper triangular factor.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Factorization.LU`1.P">
            <summary>
            Gets the permutation applied to LU factorization.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Factorization.LU`1.Determinant">
            <summary>
            Gets the determinant of the matrix for which the LU factorization was computed.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.LU.Determinant">
            <summary>
            Gets the determinant of the matrix for which the LU factorization was computed.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.QR">
            <summary>
            <para>A class which encapsulates the functionality of the QR decomposition.</para>
            <para>Any real square matrix A (m x n) may be decomposed as A = QR where Q is an orthogonal matrix
            (its columns are orthogonal unit vectors meaning QTQ = I) and R is an upper triangular matrix 
            (also called right triangular matrix).</para>
            </summary>
            <remarks>
            The computation of the QR decomposition is done at construction time by Householder transformation.
            If a <seealso cref="F:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod.Full"/> factorization is peformed, the resulting Q matrix is an m x m matrix 
            and the R matrix is an m x n matrix. If a <seealso cref="F:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod.Thin"/> factorization is performed, the 
            resulting Q matrix is an m x n matrix and the R matrix is an n x n matrix.     
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.QR.Determinant">
            <summary>
            Gets the absolute determinant value of the matrix for which the QR matrix was computed.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.QR.IsFullRank">
            <summary>
            Gets a value indicating whether the matrix is full rank or not.
            </summary>
            <value><c>true</c> if the matrix is full rank; otherwise <c>false</c>.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.Svd">
            <summary>
            <para>A class which encapsulates the functionality of the singular value decomposition (SVD).</para>
            <para>Suppose M is an m-by-n matrix whose entries are real numbers. 
            Then there exists a factorization of the form M = UΣVT where:
            - U is an m-by-m unitary matrix;
            - Σ is m-by-n diagonal matrix with nonnegative real numbers on the diagonal;
            - VT denotes transpose of V, an n-by-n unitary matrix; 
            Such a factorization is called a singular-value decomposition of M. A common convention is to order the diagonal 
            entries Σ(i,i) in descending order. In this case, the diagonal matrix Σ is uniquely determined 
            by M (though the matrices U and V are not). The diagonal entries of Σ are known as the singular values of M.</para>
            </summary>
            <remarks>
            The computation of the singular value decomposition is done at construction time.
            </remarks>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Generic.Factorization.Svd`1">
            <summary>
            <para>A class which encapsulates the functionality of the singular value decomposition (SVD).</para>
            <para>Suppose M is an m-by-n matrix whose entries are real numbers. 
            Then there exists a factorization of the form M = UΣVT where:
            - U is an m-by-m unitary matrix;
            - Σ is m-by-n diagonal matrix with nonnegative real numbers on the diagonal;
            - VT denotes transpose of V, an n-by-n unitary matrix; 
            Such a factorization is called a singular-value decomposition of M. A common convention is to order the diagonal 
            entries Σ(i,i) in descending order. In this case, the diagonal matrix Σ is uniquely determined 
            by M (though the matrices U and V are not). The diagonal entries of Σ are known as the singular values of M.</para>
            </summary>
            <remarks>
            The computation of the singular value decomposition is done at construction time.
            </remarks>
            <typeparam name="T">Supported data types are double, single, <see cref="T:System.Numerics.Complex"/>, and <see cref="T:MathNet.Numerics.Complex32"/>.</typeparam>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Factorization.Svd`1.Create(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0},System.Boolean)">
            <summary>
            Internal method which routes the call to perform the singular value decomposition to the appropriate class.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <param name="computeVectors">Compute the singular U and VT vectors or not.</param>
            <returns>An SVD object.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Factorization.Svd`1.U">
            <summary>Returns the left singular vectors as a <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>.</summary>
            <returns>The left singular vectors. The matrix will be <c>null</c>, if <b>computeVectors</b> in the constructor is set to <c>false</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Factorization.Svd`1.VT">
            <summary>Returns the right singular vectors as a <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>.</summary>
            <returns>The right singular vectors. The matrix will be <c>null</c>, if <b>computeVectors</b> in the constructor is set to <c>false</c>.</returns>
            <remarks>This is the transpose of the V matrix.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Factorization.Svd`1.W">
            <summary>Returns the singular values as a diagonal <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>.</summary>
            <returns>The singular values as a diagonal <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>.</returns>        
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Factorization.Svd`1.S">
            <summary>Returns the singular values as a <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Vector`1"/>.</summary>
            <returns>the singular values as a <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Vector`1"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Factorization.Svd`1.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <returns>The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Factorization.Svd`1.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0},MathNet.Numerics.LinearAlgebra.Generic.Matrix{`0})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Factorization.Svd`1.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <returns>The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Vector`1"/>, <b>x</b>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Generic.Factorization.Svd`1.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{`0},MathNet.Numerics.LinearAlgebra.Generic.Vector{`0})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Factorization.Svd`1.ComputeVectors">
            <summary>
            Gets or sets a value indicating whether to compute U and VT matrices during SVD factorization or not
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Factorization.Svd`1.VectorS">
            <summary>
            Gets or sets the singular values (Σ) of matrix in ascending value.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Factorization.Svd`1.MatrixU">
            <summary>
            Gets or sets left singular vectors (U - m-by-m unitary matrix)
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Factorization.Svd`1.MatrixVT">
            <summary>
            Gets or sets transpose right singular vectors (transpose of V, an n-by-n unitary matrix
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Factorization.Svd`1.Rank">
            <summary>
            Gets the effective numerical matrix rank.
            </summary>
            <value>The number of non-negligible singular values.</value>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Factorization.Svd`1.Norm2">
            <summary>
            Gets the two norm of the <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>.
            </summary>
            <returns>The 2-norm of the <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Factorization.Svd`1.ConditionNumber">
            <summary>
            Gets the condition number <b>max(S) / min(S)</b>
            </summary>
            <returns>The condition number.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Factorization.Svd`1.Determinant">
            <summary>
            Gets the determinant of the square matrix for which the SVD was computed.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.Svd.Rank">
            <summary>
            Gets the effective numerical matrix rank.
            </summary>
            <value>The number of non-negligible singular values.</value>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.Svd.Norm2">
            <summary>
            Gets the two norm of the <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>.
            </summary>
            <returns>The 2-norm of the <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.Svd.ConditionNumber">
            <summary>
            Gets the condition number <b>max(S) / min(S)</b>
            </summary>
            <returns>The condition number.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.Svd.Determinant">
            <summary>
            Gets the determinant of the square matrix for which the SVD was computed.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterativeSolver">
            <summary>
            Defines the interface for <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterativeSolver"/> classes that solve the matrix equation Ax = b in
            an iterative manner.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterativeSolver.StopSolve">
            <summary>
            Stops the solve process. 
            </summary>
            <remarks>
            Note that it may take an indetermined amount of time for the solver to actually stop the process.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterativeSolver.SetIterator(MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator)">
            <summary>
            Sets the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator"/> that will be used to track the iterative process.
            </summary>
            <param name="iterator">The iterator.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterativeSolver.Solve(MathNet.Numerics.LinearAlgebra.Complex32.Matrix,MathNet.Numerics.LinearAlgebra.Complex32.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="vector">The solution vector, <c>b</c>.</param>
            <returns>The result vector, <c>x</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterativeSolver.Solve(MathNet.Numerics.LinearAlgebra.Complex32.Matrix,MathNet.Numerics.LinearAlgebra.Complex32.Vector,MathNet.Numerics.LinearAlgebra.Complex32.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution vector, <c>b</c></param>
            <param name="result">The result vector, <c>x</c></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterativeSolver.Solve(MathNet.Numerics.LinearAlgebra.Complex32.Matrix,MathNet.Numerics.LinearAlgebra.Complex32.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <returns>The result matrix, <c>X</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterativeSolver.Solve(MathNet.Numerics.LinearAlgebra.Complex32.Matrix,MathNet.Numerics.LinearAlgebra.Complex32.Matrix,MathNet.Numerics.LinearAlgebra.Complex32.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <param name="result">The result matrix, <c>X</c></param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterativeSolver.IterationResult">
            <summary>
            Gets the status of the iteration once the calculation is finished.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterativeSolverSetup">
            <summary>
            Defines the interface for objects that can create an iterative solver with
            specific settings. This interface is used to pass iterative solver creation 
            setup information around.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterativeSolverSetup.CreateNew">
            <summary>
            Creates a fully functional iterative solver with the default settings
            given by this setup.
            </summary>
            <returns>A new <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterativeSolver"/>.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterativeSolverSetup.SolverType">
            <summary>
            Gets the type of the solver that will be created by this setup object.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterativeSolverSetup.PreconditionerType">
            <summary>
            Gets type of preconditioner, if any, that will be created by this setup object.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterativeSolverSetup.SolutionSpeed">
            <summary>
            Gets the relative speed of the solver. 
            </summary>
            <value>Returns a value between 0 and 1, inclusive.</value>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterativeSolverSetup.Reliability">
            <summary>
            Gets the relative reliability of the solver.
            </summary>
            <value>Returns a value between 0 and 1 inclusive.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator">
            <summary>
            Defines the base interface for iterators that help control an iterative calculation.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator.Add(MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IIterationStopCriterium)">
            <summary>
            Adds an <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IIterationStopCriterium"/> to the internal collection of stop-criteria. Only a 
            single stop criterium of each type can be stored.
            </summary>
            <param name="stopCriterium">The stop criterium to add.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="stopCriterium"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="stopCriterium"/> is of the same type as an already stored criterium.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator.Remove(MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IIterationStopCriterium)">
            <summary>
            Removes the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IIterationStopCriterium"/> from the internal collection.
            </summary>
            <param name="stopCriterium">The stop criterium that must be removed.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator.Contains(MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IIterationStopCriterium)">
            <summary>
            Indicates if the specific stop criterium is stored by the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator"/>.
            </summary>
            <param name="stopCriterium">The stop criterium.</param>
            <returns><c>true</c> if the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator"/> contains the stop criterium; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator.IterationCancelled">
            <summary>
            Indicates to the iterator that the iterative process has been cancelled.
            </summary>
            <remarks>Does not reset the stop-criteria.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator.DetermineStatus(System.Int32,MathNet.Numerics.LinearAlgebra.Complex32.Vector,MathNet.Numerics.LinearAlgebra.Complex32.Vector,MathNet.Numerics.LinearAlgebra.Complex32.Vector)">
            <summary>
            Determines the status of the iterative calculation based on the stop criteria stored
            by the current <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator"/>.  Status is set to <c>Status</c> field of current object.
            </summary>
            <param name="iterationNumber">The number of iterations that have passed so far.</param>
            <param name="solutionVector">The vector containing the current solution values.</param>
            <param name="sourceVector">The right hand side vector.</param>
            <param name="residualVector">The vector containing the current residual vectors.</param>
            <remarks>
            The individual iterators may internally track the progress of the calculation based
            on the invocation of this method. Therefore this method should only be called if the 
            calculation has moved forwards at least one step.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator.ResetToPrecalculationState">
            <summary>
            Resets the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator"/> to the pre-calculation state.
            </summary>
            <remarks>
            Note to implementers: Invoking this method should not clear the user defined
            property values, only the state that is used to track the progress of the 
            calculation.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator.Status">
            <summary>
            Gets the current calculation status.
            </summary>
            <remarks><see langword="null"/> is not a legal value. Status should be set in <see cref="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator.DetermineStatus(System.Int32,MathNet.Numerics.LinearAlgebra.Complex32.Vector,MathNet.Numerics.LinearAlgebra.Complex32.Vector,MathNet.Numerics.LinearAlgebra.Complex32.Vector)"/> implementation.</remarks>.
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.IPreConditioner">
            <summary>
            The base interface for preconditioner classes.
            </summary>
            <remarks>
            <para>
            Preconditioners are used by iterative solvers to improve the convergence
            speed of the solving process. Increase in convergence speed
            is related to the number of iterations necessary to get a converged solution.
            So while in general the use of a preconditioner means that the iterative 
            solver will perform fewer iterations it does not guarantee that the actual
            solution time decreases given that some preconditioners can be expensive to 
            setup and run.
            </para>
            <para>
            Note that in general changes to the matrix will invalidate the preconditioner
            if the changes occur after creating the preconditioner.
            </para>
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.IPreConditioner.Initialize(MathNet.Numerics.LinearAlgebra.Complex32.Matrix)">
            <summary>
            Initializes the preconditioner and loads the internal data structures.
            </summary>
            <param name="matrix">The matrix on which the preconditioner is based.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.IPreConditioner.Approximate(MathNet.Numerics.LinearAlgebra.Complex32.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Mx = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <returns>The left hand side vector.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.IPreConditioner.Approximate(MathNet.Numerics.LinearAlgebra.Complex32.Vector,MathNet.Numerics.LinearAlgebra.Complex32.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Mx = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <param name="lhs">The left hand side vector. Also known as the result vector.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IIterationStopCriterium">
            <summary>
            The base interface for classes that provide stop criteria for iterative calculations. 
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IIterationStopCriterium.DetermineStatus(System.Int32,MathNet.Numerics.LinearAlgebra.Complex32.Vector,MathNet.Numerics.LinearAlgebra.Complex32.Vector,MathNet.Numerics.LinearAlgebra.Complex32.Vector)">
            <summary>
            Determines the status of the iterative calculation based on the stop criteria stored
            by the current <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IIterationStopCriterium"/>. Status is set to <c>Status</c> field of current object.
            </summary>
            <param name="iterationNumber">The number of iterations that have passed so far.</param>
            <param name="solutionVector">The vector containing the current solution values.</param>
            <param name="sourceVector">The right hand side vector.</param>
            <param name="residualVector">The vector containing the current residual vectors.</param>
            <remarks>
            The individual stop criteria may internally track the progress of the calculation based
            on the invocation of this method. Therefore this method should only be called if the 
            calculation has moved forwards at least one step.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IIterationStopCriterium.ResetToPrecalculationState">
            <summary>
            Resets the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IIterationStopCriterium"/> to the pre-calculation state.
            </summary>
            <remarks>To implementers: Invoking this method should not clear the user defined
            property values, only the state that is used to track the progress of the 
            calculation.</remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IIterationStopCriterium.Status">
            <summary>
            Gets the current calculation status.
            </summary>
            <remarks><see langword="null"/> is not a legal value. Status should be set in <see cref="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IIterationStopCriterium.DetermineStatus(System.Int32,MathNet.Numerics.LinearAlgebra.Complex32.Vector,MathNet.Numerics.LinearAlgebra.Complex32.Vector,MathNet.Numerics.LinearAlgebra.Complex32.Vector)"/> implementation.</remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IIterationStopCriterium.StopLevel">
            <summary>
            Gets the <see cref="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IIterationStopCriterium.StopLevel"/> which indicates what sort of stop criterium this
            <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IIterationStopCriterium"/> monitors.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix">
            <summary>
            A Matrix with sparse storage, intended for very large matrices where most of the cells are zero.
            The underlying storage scheme is 3-array compressed-sparse-row (CSR) Format.
            <a href="http://en.wikipedia.org/wiki/Sparse_matrix#Compressed_sparse_row_.28CSR_or_CRS.29">Wikipedia - CSR</a>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.#ctor(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage{MathNet.Numerics.Complex32})">
            <summary>
            Create a new sparse matrix straight from an initialized matrix storage instance.
            The storage is used directly without copying.
            Intended for advanced scenarios where you're working directly with
            storage for performance or interop reasons.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.#ctor(System.Int32)">
            <summary>
            Create a new square sparse matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the order is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new sparse matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the row or column count is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.OfMatrix(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Create a new sparse matrix as a copy of the given other matrix.
            This new matrix will be independent from the other matrix.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.OfArray(MathNet.Numerics.Complex32[0:,0:])">
            <summary>
            Create a new sparse matrix as a copy of the given two-dimensional array.
            This new matrix will be independent from the provided array.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.OfIndexed(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,System.Int32,MathNet.Numerics.Complex32}})">
            <summary>
            Create a new sparse matrix as a copy of the given indexed enumerable.
            Keys must be provided at most once, zero is assumed if a key is omitted.
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.OfRowMajor(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{MathNet.Numerics.Complex32})">
            <summary>
            Create a new sparse matrix as a copy of the given enumerable.
            The enumerable is assumed to be in row-major order (row by row).
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the vector.
            </summary>
            <seealso href="http://en.wikipedia.org/wiki/Row-major_order"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.OfColumnMajor(System.Int32,System.Int32,System.Collections.Generic.IList{MathNet.Numerics.Complex32})">
            <summary>
            Create a new sparse matrix with the given number of rows and columns as a copy of the given array.
            The array is assumed to be in column-major order (column by column).
            This new matrix will be independent from the provided array.
            A new memory block will be allocated for storing the matrix.
            </summary>
            <seealso href="http://en.wikipedia.org/wiki/Row-major_order"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.OfColumns(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{MathNet.Numerics.Complex32}})">
            <summary>
            Create a new sparse matrix as a copy of the given enumerable of enumerable columns.
            Each enumerable in the master enumerable specifies a column.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.OfColumnsCovariant``1(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create a new sparse matrix as a copy of the given enumerable of enumerable columns.
            Each enumerable in the master enumerable specifies a column.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.OfRows(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{MathNet.Numerics.Complex32}})">
            <summary>
            Create a new sparse matrix as a copy of the given enumerable of enumerable rows.
            Each enumerable in the master enumerable specifies a row.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.OfRowsCovariant``1(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create a new sparse matrix as a copy of the given enumerable of enumerable rows.
            Each enumerable in the master enumerable specifies a row.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.Create(System.Int32,System.Int32,System.Func{System.Int32,System.Int32,MathNet.Numerics.Complex32})">
            <summary>
            Create a new sparse matrix and initialize each value using the provided init function.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.#ctor(System.Int32,System.Int32,MathNet.Numerics.Complex32)">
            <summary>
            Create a new sparse matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to the provided value.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the row or column count is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.#ctor(System.Int32,System.Int32,MathNet.Numerics.Complex32[])">
            <summary>
            Create a new sparse matrix with the given number of rows and columns as a copy of the given array.
            The array is assumed to be in column-major order (column by column).
            This new matrix will be independent from the provided array.
            A new memory block will be allocated for storing the matrix.
            </summary>
            <seealso href="http://en.wikipedia.org/wiki/Row-major_order"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.#ctor(MathNet.Numerics.Complex32[0:,0:])">
            <summary>
            Create a new sparse matrix as a copy of the given two-dimensional array.
            This new matrix will be independent from the provided array.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.#ctor(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Create a new sparse matrix as a copy of the given other matrix.
            This new matrix will be independent from the other matrix.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.CreateMatrix(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a <c>SparseMatrix</c> for the given number of rows and columns.
            </summary>
            <param name="numberOfRows">The number of rows.</param>
            <param name="numberOfColumns">The number of columns.</param>
            <param name="fullyMutable">True if all fields must be mutable (e.g. not a diagonal matrix).</param>
            <returns>
            A <c>SparseMatrix</c> with the given dimensions.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.CreateVector(System.Int32,System.Boolean)">
            <summary>
            Creates a <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.SparseVector"/> with a the given dimension.
            </summary>
            <param name="size">The size of the vector.</param>
            <param name="fullyMutable">True if all fields must be mutable.</param>
            <returns>
            A <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.SparseVector"/> with the given dimension.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.LowerTriangle">
            <summary>
            Returns a new matrix containing the lower triangle of this matrix.
            </summary>
            <returns>The lower triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.LowerTriangle(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Puts the lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.LowerTriangleImpl(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Puts the lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.UpperTriangle">
            <summary>
            Returns a new matrix containing the upper triangle of this matrix.
            </summary>
            <returns>The upper triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.UpperTriangle(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Puts the upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.UpperTriangleImpl(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Puts the upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.StrictlyLowerTriangle">
            <summary>
            Returns a new matrix containing the lower triangle of this matrix. The new matrix
            does not contain the diagonal elements of this matrix.
            </summary>
            <returns>The lower triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.StrictlyLowerTriangle(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Puts the strictly lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.StrictlyLowerTriangleImpl(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Puts the strictly lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.StrictlyUpperTriangle">
            <summary>
            Returns a new matrix containing the upper triangle of this matrix. The new matrix
            does not contain the diagonal elements of this matrix.
            </summary>
            <returns>The upper triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.StrictlyUpperTriangle(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Puts the strictly upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.StrictlyUpperTriangleImpl(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Puts the strictly upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.Transpose">
            <summary>
            Returns the transpose of this matrix.
            </summary>
            <returns>The transpose of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.FrobeniusNorm">
            <summary>Calculates the Frobenius norm of this matrix.</summary>
            <returns>The Frobenius norm of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.InfinityNorm">
            <summary>Calculates the infinity norm of this matrix.</summary>
            <returns>The infinity norm of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.Identity(System.Int32)">
            <summary>
            Initializes a square <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix"/> with all zero's except for ones on the diagonal.
            </summary>
            <param name="order">the size of the square matrix.</param>
            <returns>Identity <c>SparseMatrix</c></returns>
            <exception cref="T:System.ArgumentException">
            If <paramref name="order"/> is less than one.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.DoAdd(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="other">The matrix to add to this matrix.</param>
            <param name="result">The matrix to store the result of the addition.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.DoSubtract(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="other">The matrix to subtract to this matrix.</param>
            <param name="result">The matrix to store the result of subtraction.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.DoMultiply(MathNet.Numerics.Complex32,MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Multiplies each element of the matrix by a scalar and places results into the result matrix.
            </summary>
            <param name="scalar">The scalar to multiply the matrix with.</param>
            <param name="result">The matrix to store the result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Multiplies this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Multiplies this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.DoTransposeAndMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Multiplies this matrix with transpose of another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.DoNegate(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Negate each element of this matrix and place the results into the result matrix.
            </summary>
            <param name="result">The result of the negation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.DoPointwiseMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Pointwise multiplies this matrix with another matrix and stores the result into the result matrix.
            </summary>
            <param name="other">The matrix to pointwise multiply with this one.</param>
            <param name="result">The matrix to store the result of the pointwise multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.DoPointwiseDivide(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Pointwise divide this matrix by another matrix and stores the result into the result matrix.
            </summary>
            <param name="other">The matrix to pointwise divide this one by.</param>
            <param name="result">The matrix to store the result of the pointwise division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.IndexedEnumerator">
            <summary>
            Iterates throw each element in the matrix (row-wise).
            </summary>
            <returns>The value at the current iteration along with its position (row, column, value).</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.CheckIfOppositesAreEqual(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks if opposites in a range are equal.
            </summary>
            <param name="start">The start of the range.</param>
            <param name="end">The end of the range.</param>
            <param name="row">The row the row to check.</param>
            <returns>If the values are equal or not.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.op_Addition(MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix,MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix)">
            <summary>
            Adds two matrices together and returns the results.
            </summary>
            <remarks>This operator will allocate new memory for the result. It will
            choose the representation of either <paramref name="leftSide"/> or <paramref name="rightSide"/> depending on which
            is denser.</remarks>
            <param name="leftSide">The left matrix to add.</param>
            <param name="rightSide">The right matrix to add.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> don't have the same dimensions.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.op_UnaryPlus(MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix)">
            <summary>
            Returns a <strong>Matrix</strong> containing the same values of <paramref name="rightSide"/>.
            </summary>
            <param name="rightSide">The matrix to get the values from.</param>
            <returns>A matrix containing a the same values as <paramref name="rightSide"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.op_Subtraction(MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix,MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix)">
            <summary>
            Subtracts two matrices together and returns the results.
            </summary>
            <remarks>This operator will allocate new memory for the result. It will
            choose the representation of either <paramref name="leftSide"/> or <paramref name="rightSide"/> depending on which
            is denser.</remarks>
            <param name="leftSide">The left matrix to subtract.</param>
            <param name="rightSide">The right matrix to subtract.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> don't have the same dimensions.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.op_UnaryNegation(MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix)">
            <summary>
            Negates each element of the matrix.
            </summary>
            <param name="rightSide">The matrix to negate.</param>
            <returns>A matrix containing the negated values.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix,MathNet.Numerics.Complex32)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.op_Multiply(MathNet.Numerics.Complex32,MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix,MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix)">
            <summary>
            Multiplies two matrices.
            </summary>
            <remarks>This operator will allocate new memory for the result. It will
            choose the representation of either <paramref name="leftSide"/> or <paramref name="rightSide"/> depending on which
            is denser.</remarks>
            <param name="leftSide">The left matrix to multiply.</param>
            <param name="rightSide">The right matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the dimensions of <paramref name="leftSide"/> or <paramref name="rightSide"/> don't conform.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix,MathNet.Numerics.LinearAlgebra.Complex32.SparseVector)">
            <summary>
            Multiplies a <strong>Matrix</strong> and a Vector.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The vector to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Complex32.SparseVector,MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix)">
            <summary>
            Multiplies a Vector and a <strong>Matrix</strong>.
            </summary>
            <param name="leftSide">The vector to multiply.</param>
            <param name="rightSide">The matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.op_Modulus(MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix,MathNet.Numerics.Complex32)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.NonZerosCount">
            <summary>
            Gets the number of non zero elements in the matrix.
            </summary>
            <value>The number of non zero elements.</value>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.SparseMatrix.IsSymmetric">
            <summary>
            Gets a value indicating whether this matrix is symmetric.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.Vector">
            <summary>
            <c>Complex32</c> version of the <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Vector`1"/> class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Vector.#ctor(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage{MathNet.Numerics.Complex32})">
            <summary>
            Initializes a new instance of the Vector class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Vector.DoAdd(MathNet.Numerics.Complex32,MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Adds a scalar to each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">
            The scalar to add.
            </param>
            <param name="result">
            The vector to store the result of the addition.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Vector.DoAdd(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Adds another vector to this vector and stores the result into the result vector.
            </summary>
            <param name="other">
            The vector to add to this one.
            </param>
            <param name="result">
            The vector to store the result of the addition.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Vector.DoSubtract(MathNet.Numerics.Complex32,MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Subtracts a scalar from each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">
            The scalar to subtract.
            </param>
            <param name="result">
            The vector to store the result of the subtraction.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Vector.DoSubtract(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Subtracts another vector to this vector and stores the result into the result vector.
            </summary>
            <param name="other">
            The vector to subtract from this one.
            </param>
            <param name="result">
            The vector to store the result of the subtraction.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Vector.DoMultiply(MathNet.Numerics.Complex32,MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Multiplies a scalar to each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">
            The scalar to multiply.
            </param>
            <param name="result">
            The vector to store the result of the multiplication.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Vector.DoDivide(MathNet.Numerics.Complex32,MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Divides each element of the vector by a scalar and stores the result in the result vector.
            </summary>
            <param name="scalar">
            The scalar to divide with.
            </param>
            <param name="result">
            The vector to store the result of the division.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Vector.DoDivideByThis(MathNet.Numerics.Complex32,MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Divides a scalar by each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to divide.</param>
            <param name="result">The vector to store the result of the division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Vector.DoPointwiseMultiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Pointwise multiplies this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to pointwise multiply with this one.</param>
            <param name="result">The vector to store the result of the pointwise multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Vector.DoPointwiseDivide(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Pointwise divide this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to pointwise divide this one by.</param>
            <param name="result">The vector to store the result of the pointwise division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Vector.DoPointwiseModulus(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Pointwise modulus this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to pointwise modulus this one by.</param>
            <param name="result">The result of the modulus.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Vector.DoDotProduct(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Computes the dot product between this vector and another vector.
            </summary>
            <param name="other">
            The other vector to add.
            </param>
            <returns>s
            The result of the addition.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Vector.DoModulus(MathNet.Numerics.Complex32,MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Computes the modulus for each element of the vector for the given divisor.
            </summary>
            <param name="divisor">The divisor to use.</param>
            <param name="result">A vector to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Vector.DoModulusByThis(MathNet.Numerics.Complex32,MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Computes the modulus for the given dividend for each element of the vector.
            </summary>
            <param name="scalar">The dividend to use.</param>
            <param name="result">A vector to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Vector.AbsoluteMinimum">
            <summary>
            Returns the value of the absolute minimum element.
            </summary>
            <returns>The value of the absolute minimum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Vector.AbsoluteMinimumIndex">
            <summary>
            Returns the index of the absolute minimum element.
            </summary>
            <returns>The index of absolute minimum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Vector.AbsoluteMaximum">
            <summary>
            Returns the value of the absolute maximum element.
            </summary>
            <returns>The value of the absolute maximum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Vector.AbsoluteMaximumIndex">
            <summary>
            Returns the index of the absolute maximum element.
            </summary>
            <returns>The index of absolute maximum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Vector.Sum">
            <summary>
            Computes the sum of the vector's elements.
            </summary>
            <returns>The sum of the vector's elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Vector.SumMagnitudes">
            <summary>
            Computes the sum of the absolute value of the vector's elements.
            </summary>
            <returns>The sum of the absolute value of the vector's elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Vector.Norm(System.Double)">
            <summary>
            Computes the p-Norm.
            </summary>
            <param name="p">
            The p value.
            </param>
            <returns>
            <c>Scalar ret = (sum(abs(At(i))^p))^(1/p)</c>
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Vector.DoConjugate(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Conjugates vector and save result to <paramref name="result"/>
            </summary>
            <param name="result">Target vector</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Vector.DoNegate(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Negates vector and saves result to <paramref name="result"/>
            </summary>
            <param name="result">Target vector</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Vector.MaximumIndex">
            <summary>
            Returns the index of the absolute maximum element.
            </summary>
            <returns>The index of absolute maximum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Vector.MinimumIndex">
            <summary>
            Returns the index of the minimum element.
            </summary>
            <returns>The index of minimum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Vector.Normalize(System.Double)">
            <summary>
            Normalizes this vector to a unit vector with respect to the p-norm.
            </summary>
            <param name="p">
            The p value.
            </param>
            <returns>
            This vector normalized to a unit vector with respect to the p-norm.
            </returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix">
            <summary>
            A Matrix class with dense storage. The underlying storage is a one dimensional array in column-major order (column by column).
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Matrix">
            <summary>
            <c>Complex</c> version of the <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/> class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.#ctor(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage{System.Numerics.Complex})">
            <summary>
            Initializes a new instance of the Matrix class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.L1Norm">
            <summary>Calculates the L1 norm.</summary>
            <returns>The L1 norm of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.ConjugateTranspose">
            <summary>
            Returns the conjugate transpose of this matrix.
            </summary>        
            <returns>The conjugate transpose of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.FrobeniusNorm">
            <summary>Calculates the Frobenius norm of this matrix.</summary>
            <returns>The Frobenius norm of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.InfinityNorm">
            <summary>Calculates the infinity norm of this matrix.</summary>
            <returns>The infinity norm of this matrix.</returns>   
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.DoAdd(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="other">The matrix to add to this matrix.</param>
            <param name="result">The matrix to store the result of the addition.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.DoSubtract(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="other">The matrix to subtract to this matrix.</param>
            <param name="result">The matrix to store the result of subtraction.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.DoMultiply(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Multiplies each element of the matrix by a scalar and places results into the result matrix.
            </summary>
            <param name="scalar">The scalar to multiply the matrix with.</param>
            <param name="result">The matrix to store the result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Multiplies this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Multiplies this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.DoDivide(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Divides each element of the matrix by a scalar and places results into the result matrix.
            </summary>
            <param name="scalar">The scalar to divide the matrix with.</param>
            <param name="result">The matrix to store the result of the division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.DoTransposeAndMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Multiplies this matrix with transpose of another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.DoTransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Multiplies the transpose of this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.DoTransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Multiplies the transpose of this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.DoNegate(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Negate each element of this matrix and place the results into the result matrix.
            </summary>
            <param name="result">The result of the negation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.DoConjugate(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Complex conjugates each element of this matrix and place the results into the result matrix.
            </summary>
            <param name="result">The result of the conjugation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.DoPointwiseMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Pointwise multiplies this matrix with another matrix and stores the result into the result matrix.
            </summary>
            <param name="other">The matrix to pointwise multiply with this one.</param>
            <param name="result">The matrix to store the result of the pointwise multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.DoPointwiseDivide(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Pointwise divide this matrix by another matrix and stores the result into the result matrix.
            </summary>
            <param name="other">The matrix to pointwise divide this one by.</param>
            <param name="result">The matrix to store the result of the pointwise division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.DoModulus(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Computes the modulus for each element of the matrix.
            </summary>
            <param name="divisor">The divisor to use.</param>
            <param name="result">Matrix to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.Trace">
            <summary>
            Computes the trace of this matrix.
            </summary>
            <returns>The trace of this matrix</returns>
            <exception cref="T:System.ArgumentException">If the matrix is not square</exception>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix._rowCount">
            <summary>
            Number of rows.
            </summary>
            <remarks>Using this instead of the RowCount property to speed up calculating
            a matrix index in the data array.</remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix._columnCount">
            <summary>
            Number of columns.
            </summary>
            <remarks>Using this instead of the ColumnCount property to speed up calculating
            a matrix index in the data array.</remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix._values">
            <summary>
            Gets the matrix's data.
            </summary>
            <value>The matrix's data.</value>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.#ctor(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage{System.Numerics.Complex})">
            <summary>
            Create a new dense matrix straight from an initialized matrix storage instance.
            The storage is used directly without copying.
            Intended for advanced scenarios where you're working directly with
            storage for performance or interop reasons.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.#ctor(System.Int32)">
            <summary>
            Create a new square dense matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the order is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new dense matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the row or column count is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.#ctor(System.Int32,System.Int32,System.Numerics.Complex[])">
            <summary>
            Create a new dense matrix with the given number of rows and columns directly binding to a raw array.
            The array is assumed to be in column-major order (column by column) and is used directly without copying.
            Very efficient, but changes to the array and the matrix will affect each other.
            </summary>
            <seealso href="http://en.wikipedia.org/wiki/Row-major_order"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.OfMatrix(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Create a new dense matrix as a copy of the given other matrix.
            This new matrix will be independent from the other matrix.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.OfArray(System.Numerics.Complex[0:,0:])">
            <summary>
            Create a new dense matrix as a copy of the given two-dimensional array.
            This new matrix will be independent from the provided array.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.OfIndexed(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,System.Int32,System.Numerics.Complex}})">
            <summary>
            Create a new dense matrix as a copy of the given indexed enumerable.
            Keys must be provided at most once, zero is assumed if a key is omitted.
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.OfColumnMajor(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Numerics.Complex})">
            <summary>
            Create a new dense matrix as a copy of the given enumerable.
            The enumerable is assumed to be in column-major order (column by column).
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.OfColumns(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Numerics.Complex}})">
            <summary>
            Create a new dense matrix as a copy of the given enumerable of enumerable columns.
            Each enumerable in the master enumerable specifies a column.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.OfColumnVectors(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex}[])">
            <summary>
            Create a new dense matrix as a copy of the given column vectors.
            This new matrix will be independent from the vectors.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.OfColumnsCovariant``1(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create a new dense matrix as a copy of the given enumerable of enumerable columns.
            Each enumerable in the master enumerable specifies a column.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.OfRows(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Numerics.Complex}})">
            <summary>
            Create a new dense matrix as a copy of the given enumerable of enumerable rows.
            Each enumerable in the master enumerable specifies a row.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.OfRowVectors(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex}[])">
            <summary>
            Create a new dense matrix as a copy of the given row vectors.
            This new matrix will be independent from the vectors.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.OfRowsCovariant``1(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create a new dense matrix as a copy of the given enumerable of enumerable rows.
            Each enumerable in the master enumerable specifies a row.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.Create(System.Int32,System.Int32,System.Func{System.Int32,System.Int32,System.Numerics.Complex})">
            <summary>
            Create a new dense matrix and initialize each value using the provided init function.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.CreateRandom(System.Int32,System.Int32,MathNet.Numerics.Distributions.IContinuousDistribution)">
            <summary>
            Create a new dense matrix with values sampled from the provided random distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.#ctor(System.Int32,System.Int32,System.Numerics.Complex)">
            <summary>
            Create a new dense matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to the provided value.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the row or column count is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.#ctor(System.Numerics.Complex[0:,0:])">
            <summary>
            Create a new dense matrix as a copy of the given two-dimensional array.
            This new matrix will be independent from the provided array.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.#ctor(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Create a new dense matrix as a copy of the given other matrix.
            This new matrix will be independent from the other matrix.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.CreateMatrix(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a <c>DenseMatrix</c> for the given number of rows and columns.
            </summary>
            <param name="numberOfRows">The number of rows.</param>
            <param name="numberOfColumns">The number of columns.</param>
            <param name="fullyMutable">True if all fields must be mutable (e.g. not a diagonal matrix).</param>
            <returns>
            A <c>DenseMatrix</c> with the given dimensions.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.CreateVector(System.Int32,System.Boolean)">
            <summary>
            Creates a <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Vector`1"/> with a the given dimension.
            </summary>
            <param name="size">The size of the vector.</param>
            <param name="fullyMutable">True if all fields must be mutable.</param>
            <returns>
            A <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Vector`1"/> with the given dimension.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.Transpose">
            <summary>
            Returns the transpose of this matrix.
            </summary>
            <returns>The transpose of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.L1Norm">
            <summary>Calculates the L1 norm.</summary>
            <returns>The L1 norm of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.FrobeniusNorm">
            <summary>Calculates the Frobenius norm of this matrix.</summary>
            <returns>The Frobenius norm of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.InfinityNorm">
            <summary>Calculates the infinity norm of this matrix.</summary>
            <returns>The infinity norm of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.Identity(System.Int32)">
            <summary>
            Initializes a square <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix"/> with all zero's except for ones on the diagonal.
            </summary>
            <param name="order">the size of the square matrix.</param>
            <returns>A dense identity matrix.</returns>
            <exception cref="T:System.ArgumentException">
            If <paramref name="order"/> is less than one.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.DoMultiply(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Multiplies each element of the matrix by a scalar and places results into the result matrix.
            </summary>
            <param name="scalar">The scalar to multiply the matrix with.</param>
            <param name="result">The matrix to store the result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Multiplies this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Multiplies this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.DoTransposeAndMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Multiplies this matrix with transpose of another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.DoTransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Multiplies the transpose of this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.DoTransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Multiplies the transpose of this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.DoNegate(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Negate each element of this matrix and place the results into the result matrix.
            </summary>
            <param name="result">The result of the negation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.DoPointwiseMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Pointwise multiplies this matrix with another matrix and stores the result into the result matrix.
            </summary>
            <param name="other">The matrix to pointwise multiply with this one.</param>
            <param name="result">The matrix to store the result of the pointwise multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.DoPointwiseDivide(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Pointwise divide this matrix by another matrix and stores the result into the result matrix.
            </summary>
            <param name="other">The matrix to pointwise divide this one by.</param>
            <param name="result">The matrix to store the result of the pointwise division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.DoAdd(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="other">The matrix to add to this matrix.</param>
            <param name="result">The matrix to store the result of add</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.DoSubtract(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="other">The matrix to subtract.</param>
            <param name="result">The matrix to store the result of the subtraction.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.ConjugateTranspose">
            <summary>
            Returns the conjugate transpose of this matrix.
            </summary>
            <returns>The conjugate transpose of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.Trace">
            <summary>
            Computes the trace of this matrix.
            </summary>
            <returns>The trace of this matrix</returns>
            <exception cref="T:System.ArgumentException">If the matrix is not square</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.op_Addition(MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix,MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix)">
            <summary>
            Adds two matrices together and returns the results.
            </summary>
            <remarks>This operator will allocate new memory for the result. It will
            choose the representation of either <paramref name="leftSide"/> or <paramref name="rightSide"/> depending on which
            is denser.</remarks>
            <param name="leftSide">The left matrix to add.</param>
            <param name="rightSide">The right matrix to add.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> don't have the same dimensions.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.op_UnaryPlus(MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix)">
            <summary>
            Returns a <strong>Matrix</strong> containing the same values of <paramref name="rightSide"/>.
            </summary>
            <param name="rightSide">The matrix to get the values from.</param>
            <returns>A matrix containing a the same values as <paramref name="rightSide"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.op_Subtraction(MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix,MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix)">
            <summary>
            Subtracts two matrices together and returns the results.
            </summary>
            <remarks>This operator will allocate new memory for the result. It will
            choose the representation of either <paramref name="leftSide"/> or <paramref name="rightSide"/> depending on which
            is denser.</remarks>
            <param name="leftSide">The left matrix to subtract.</param>
            <param name="rightSide">The right matrix to subtract.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> don't have the same dimensions.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.op_UnaryNegation(MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix)">
            <summary>
            Negates each element of the matrix.
            </summary>
            <param name="rightSide">The matrix to negate.</param>
            <returns>A matrix containing the negated values.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix,System.Numerics.Complex)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.op_Multiply(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix,MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix)">
            <summary>
            Multiplies two matrices.
            </summary>
            <remarks>This operator will allocate new memory for the result. It will
            choose the representation of either <paramref name="leftSide"/> or <paramref name="rightSide"/> depending on which
            is denser.</remarks>
            <param name="leftSide">The left matrix to multiply.</param>
            <param name="rightSide">The right matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the dimensions of <paramref name="leftSide"/> or <paramref name="rightSide"/> don't conform.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix,MathNet.Numerics.LinearAlgebra.Complex.DenseVector)">
            <summary>
            Multiplies a <strong>Matrix</strong> and a Vector.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The vector to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Complex.DenseVector,MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix)">
            <summary>
            Multiplies a Vector and a <strong>Matrix</strong>.
            </summary>
            <param name="leftSide">The vector to multiply.</param>
            <param name="rightSide">The matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.op_Modulus(MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix,System.Numerics.Complex)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.Data">
            <summary>
            Gets the matrix's data.
            </summary>
            <value>The matrix's data.</value>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.Values">
            <summary>
            Gets the matrix's data.
            </summary>
            <value>The matrix's data.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.DenseVector">
            <summary>
            A vector using dense storage.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Vector">
            <summary>
            <c>Complex</c> version of the <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Vector`1"/> class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Vector.#ctor(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage{System.Numerics.Complex})">
            <summary>
            Initializes a new instance of the Vector class. 
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Vector.DoAdd(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Adds a scalar to each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">
            The scalar to add.
            </param>
            <param name="result">
            The vector to store the result of the addition.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Vector.DoAdd(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Adds another vector to this vector and stores the result into the result vector.
            </summary>
            <param name="other">
            The vector to add to this one.
            </param>
            <param name="result">
            The vector to store the result of the addition.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Vector.DoSubtract(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Subtracts a scalar from each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">
            The scalar to subtract.
            </param>
            <param name="result">
            The vector to store the result of the subtraction.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Vector.DoSubtract(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Subtracts another vector to this vector and stores the result into the result vector.
            </summary>
            <param name="other">
            The vector to subtract from this one.
            </param>
            <param name="result">
            The vector to store the result of the subtraction.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Vector.DoMultiply(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Multiplies a scalar to each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">
            The scalar to multiply.
            </param>
            <param name="result">
            The vector to store the result of the multiplication.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Vector.DoDivide(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Divides each element of the vector by a scalar and stores the result in the result vector.
            </summary>
            <param name="scalar">
            The scalar to divide with.
            </param>
            <param name="result">
            The vector to store the result of the division.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Vector.DoDivideByThis(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Divides a scalar by each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to divide.</param>
            <param name="result">The vector to store the result of the division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Vector.DoPointwiseMultiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Pointwise multiplies this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to pointwise multiply with this one.</param>
            <param name="result">The vector to store the result of the pointwise multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Vector.DoPointwiseDivide(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Pointwise divide this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to pointwise divide this one by.</param>
            <param name="result">The vector to store the result of the pointwise division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Vector.DoPointwiseModulus(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Pointwise modulus this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to pointwise modulus this one by.</param>
            <param name="result">The result of the modulus.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Vector.DoDotProduct(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Computes the dot product between this vector and another vector.
            </summary>
            <param name="other">
            The other vector to add.
            </param>
            <returns>
            The result of the addition.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Vector.DoModulus(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Computes the modulus for each element of the vector for the given divisor.
            </summary>
            <param name="divisor">The divisor to use.</param>
            <param name="result">A vector to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Vector.DoModulusByThis(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Computes the modulus for the given dividend for each element of the vector.
            </summary>
            <param name="scalar">The dividend to use.</param>
            <param name="result">A vector to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Vector.AbsoluteMinimum">
            <summary>
            Returns the value of the absolute minimum element.
            </summary>
            <returns>The value of the absolute minimum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Vector.AbsoluteMinimumIndex">
            <summary>
            Returns the index of the absolute minimum element.
            </summary>
            <returns>The index of absolute minimum element.</returns>   
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Vector.AbsoluteMaximum">
            <summary>
            Returns the value of the absolute maximum element.
            </summary>
            <returns>The value of the absolute maximum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Vector.AbsoluteMaximumIndex">
            <summary>
            Returns the index of the absolute maximum element.
            </summary>
            <returns>The index of absolute maximum element.</returns>   
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Vector.Sum">
            <summary>
            Computes the sum of the vector's elements.
            </summary>
            <returns>The sum of the vector's elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Vector.SumMagnitudes">
            <summary>
            Computes the sum of the absolute value of the vector's elements.
            </summary>
            <returns>The sum of the absolute value of the vector's elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Vector.Norm(System.Double)">
            <summary>
            Computes the p-Norm.
            </summary>
            <param name="p">
            The p value.
            </param>
            <returns>
            <c>Scalar ret = (sum(abs(At(i))^p))^(1/p)</c>
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Vector.DoConjugate(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Conjugates vector and save result to <paramref name="result"/>
            </summary>
            <param name="result">Target vector</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Vector.DoNegate(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Negates vector and saves result to <paramref name="result"/>
            </summary>
            <param name="result">Target vector</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Vector.MaximumIndex">
            <summary>
            Returns the index of the absolute maximum element.
            </summary>
            <returns>The index of absolute maximum element.</returns>          
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Vector.MinimumIndex">
            <summary>
            Returns the index of the minimum element.
            </summary>
            <returns>The index of minimum element.</returns>  
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Vector.Normalize(System.Double)">
            <summary>
            Normalizes this vector to a unit vector with respect to the p-norm.
            </summary>
            <param name="p">
            The p value.
            </param>
            <returns>
            This vector normalized to a unit vector with respect to the p-norm.
            </returns>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.DenseVector._length">
            <summary>
            Number of elements
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.DenseVector._values">
            <summary>
            Gets the vector's data.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.#ctor(MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage{System.Numerics.Complex})">
            <summary>
            Create a new dense vector straight from an initialized vector storage instance.
            The storage is used directly without copying.
            Intended for advanced scenarios where you're working directly with
            storage for performance or interop reasons.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.#ctor(System.Int32)">
            <summary>
            Create a new dense vector with the given length.
            All cells of the vector will be initialized to zero.
            Zero-length vectors are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If length is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.#ctor(System.Numerics.Complex[])">
            <summary>
            Create a new dense vector directly binding to a raw array.
            The array is used directly without copying.
            Very efficient, but changes to the array and the vector will affect each other.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.OfVector(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Create a new dense vector as a copy of the given other vector.
            This new vector will be independent from the other vector.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.OfEnumerable(System.Collections.Generic.IEnumerable{System.Numerics.Complex})">
            <summary>
            Create a new dense vector as a copy of the given enumerable.
            This new vector will be independent from the enumerable.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.OfIndexedEnumerable(System.Int32,System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,System.Numerics.Complex}})">
            <summary>
            Create a new dense vector as a copy of the given indexed enumerable.
            Keys must be provided at most once, zero is assumed if a key is omitted.
            This new vector will be independent from the enumerable.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.Create(System.Int32,System.Func{System.Int32,System.Numerics.Complex})">
            <summary>
            Create a new dense vector and initialize each value using the provided init function.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.CreateRandom(System.Int32,MathNet.Numerics.Distributions.IContinuousDistribution)">
            <summary>
            Create a new dense vector with values sampled from the provided random distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.#ctor(System.Int32,System.Numerics.Complex)">
            <summary>
            Create a new dense vector with the given length.
            All cells of the vector will be initialized with the provided value.
            Zero-length vectors are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If length is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.#ctor(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Create a new dense vector as a copy of the given other vector.
            This new vector will be independent from the other vector.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.#ctor(System.Collections.Generic.IEnumerable{System.Numerics.Complex})">
            <summary>
            Create a new dense vector as a copy of the given enumerable.
            This new vector will be independent from the enumerable.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.op_Explicit(MathNet.Numerics.LinearAlgebra.Complex.DenseVector)~System.Numerics.Complex[]">
            <summary>
            Returns a reference to the internal data structure.
            </summary>
            <param name="vector">The <c>DenseVector</c> whose internal data we are
            returning.</param>
            <returns>
            A reference to the internal date of the given vector.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.op_Implicit(System.Numerics.Complex[])~MathNet.Numerics.LinearAlgebra.Complex.DenseVector">
            <summary>
            Returns a vector bound directly to a reference of the provided array.
            </summary>
            <param name="array">The array to bind to the <c>DenseVector</c> object.</param>
            <returns>
            A <c>DenseVector</c> whose values are bound to the given array.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.CreateMatrix(System.Int32,System.Int32)">
            <summary>
            Creates a matrix with the given dimensions using the same storage type
            as this vector.
            </summary>
            <param name="rows">
            The number of rows.
            </param>
            <param name="columns">
            The number of columns.
            </param>
            <returns>
            A matrix with the given dimensions.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.CreateVector(System.Int32)">
            <summary>
            Creates a <strong>Vector</strong> of the given size using the same storage type
            as this vector.
            </summary>
            <param name="size">
            The size of the <strong>Vector</strong> to create.
            </param>
            <returns>
            The new <c>Vector</c>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.DoAdd(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Adds a scalar to each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to add.</param>
            <param name="result">The vector to store the result of the addition.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.DoAdd(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Adds another vector to this vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to add to this one.</param>
            <param name="result">The vector to store the result of the addition.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.op_Addition(MathNet.Numerics.LinearAlgebra.Complex.DenseVector,MathNet.Numerics.LinearAlgebra.Complex.DenseVector)">
            <summary>
            Adds two <strong>Vectors</strong> together and returns the results.
            </summary>
            <param name="leftSide">One of the vectors to add.</param>
            <param name="rightSide">The other vector to add.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.DoSubtract(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Subtracts a scalar from each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to subtract.</param>
            <param name="result">The vector to store the result of the subtraction.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.DoSubtract(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Subtracts another vector from this vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to subtract from this one.</param>
            <param name="result">The vector to store the result of the subtraction.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.op_UnaryNegation(MathNet.Numerics.LinearAlgebra.Complex.DenseVector)">
            <summary>
            Returns a <strong>Vector</strong> containing the negated values of <paramref name="rightSide"/>.
            </summary>
            <param name="rightSide">The vector to get the values from.</param>
            <returns>A vector containing the negated values as <paramref name="rightSide"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.op_Subtraction(MathNet.Numerics.LinearAlgebra.Complex.DenseVector,MathNet.Numerics.LinearAlgebra.Complex.DenseVector)">
            <summary>
            Subtracts two <strong>Vectors</strong> and returns the results.
            </summary>
            <param name="leftSide">The vector to subtract from.</param>
            <param name="rightSide">The vector to subtract.</param>
            <returns>The result of the subtraction.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.DoNegate(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Negates vector and saves result to <paramref name="result"/>
            </summary>
            <param name="result">Target vector</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.DoMultiply(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Multiplies a scalar to each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to multiply.</param>
            <param name="result">The vector to store the result of the multiplication.</param>
            <remarks></remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.DoDotProduct(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Computes the dot product between this vector and another vector.
            </summary>
            <param name="other">The other vector to add.</param>
            <returns>s
            The result of the addition.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.op_Multiply(MathNet.Numerics.LinearAlgebra.Complex.DenseVector,System.Numerics.Complex)">
            <summary>
            Multiplies a vector with a complex.
            </summary>
            <param name="leftSide">The vector to scale.</param>
            <param name="rightSide">The Complex value.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.op_Multiply(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Complex.DenseVector)">
            <summary>
            Multiplies a vector with a complex.
            </summary>
            <param name="leftSide">The Complex value.</param>
            <param name="rightSide">The vector to scale.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.op_Multiply(MathNet.Numerics.LinearAlgebra.Complex.DenseVector,MathNet.Numerics.LinearAlgebra.Complex.DenseVector)">
            <summary>
            Computes the dot product between two <strong>Vectors</strong>.
            </summary>
            <param name="leftSide">The left row vector.</param>
            <param name="rightSide">The right column vector.</param>
            <returns>The dot product between the two vectors.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.op_Division(MathNet.Numerics.LinearAlgebra.Complex.DenseVector,System.Numerics.Complex)">
            <summary>
            Divides a vector with a complex.
            </summary>
            <param name="leftSide">The vector to divide.</param>
            <param name="rightSide">The Complex value.</param>
            <returns>The result of the division.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.AbsoluteMinimumIndex">
            <summary>
            Returns the index of the absolute minimum element.
            </summary>
            <returns>The index of absolute minimum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.AbsoluteMinimum">
            <summary>
            Returns the value of the absolute minimum element.
            </summary>
            <returns>The value of the absolute minimum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.AbsoluteMaximum">
            <summary>
            Returns the value of the absolute maximum element.
            </summary>
            <returns>The value of the absolute maximum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.AbsoluteMaximumIndex">
            <summary>
            Returns the index of the absolute maximum element.
            </summary>
            <returns>The index of absolute maximum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.Sum">
            <summary>
            Computes the sum of the vector's elements.
            </summary>
            <returns>The sum of the vector's elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.SumMagnitudes">
            <summary>
            Computes the sum of the absolute value of the vector's elements.
            </summary>
            <returns>The sum of the absolute value of the vector's elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.DoPointwiseMultiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Pointwise divide this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to pointwise divide this one by.</param>
            <param name="result">The vector to store the result of the pointwise division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.DoPointwiseDivide(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Pointwise divide this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to pointwise divide this one by.</param>
            <param name="result">The vector to store the result of the pointwise division.</param>
            <remarks></remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.OuterProduct(MathNet.Numerics.LinearAlgebra.Complex.DenseVector,MathNet.Numerics.LinearAlgebra.Complex.DenseVector)">
            <summary>
            Outer product of two vectors
            </summary>
            <param name="u">First vector</param>
            <param name="v">Second vector</param>
            <returns>Matrix M[i,j] = u[i]*v[j] </returns>
            <exception cref="T:System.ArgumentNullException">If the u vector is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the v vector is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.OuterProduct(MathNet.Numerics.LinearAlgebra.Complex.DenseVector)">
            <summary>
            Outer product of this and another vector.
            </summary>
            <param name="v">The vector to operate on.</param>
            <returns>
            Matrix M[i,j] = this[i] * v[j].
            </returns>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.OuterProduct(MathNet.Numerics.LinearAlgebra.Complex.DenseVector,MathNet.Numerics.LinearAlgebra.Complex.DenseVector)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.Norm(System.Double)">
            <summary>
            Computes the p-Norm.
            </summary>
            <param name="p">The p value.</param>
            <returns>Scalar <c>ret = (sum(abs(this[i])^p))^(1/p)</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.Parse(System.String)">
            <summary>
            Creates a Complex dense vector based on a string. The string can be in the following formats (without the
            quotes): 'n', 'n;n;..', '(n;n;..)', '[n;n;...]', where n is a Complex.
            </summary>
            <returns>
            A Complex dense vector containing the values specified by the given string.
            </returns>
            <param name="value">
            The string to parse.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates a Complex dense vector based on a string. The string can be in the following formats (without the
            quotes): 'n', 'n;n;..', '(n;n;..)', '[n;n;...]', where n is a double.
            </summary>
            <returns>
            A Complex dense vector containing the values specified by the given string.
            </returns>
            <param name="value">
            the string to parse.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.TryParse(System.String,MathNet.Numerics.LinearAlgebra.Complex.DenseVector@)">
            <summary>
            Converts the string representation of a complex dense vector to double-precision dense vector equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing a complex vector to convert.
            </param>
            <param name="result">
            The parsed value.
            </param>
            <returns>
            If the conversion succeeds, the result will contain a complex number equivalent to value.
            Otherwise the result will be <c>null</c>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.TryParse(System.String,System.IFormatProvider,MathNet.Numerics.LinearAlgebra.Complex.DenseVector@)">
            <summary>
            Converts the string representation of a complex dense vector to double-precision dense vector equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing a complex vector to convert.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about value.
            </param>
            <param name="result">
            The parsed value.
            </param>
            <returns>
            If the conversion succeeds, the result will contain a complex number equivalent to value.
            Otherwise the result will be <c>null</c>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.DoConjugate(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Conjugates vector and save result to <paramref name="result"/>
            </summary>
            <param name="result">Target vector</param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.Values">
            <summary>
            Gets the vector's data.
            </summary>
            <value>The vector's data.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix">
            <summary>
            A matrix type for diagonal matrices.
            </summary>
            <remarks>
            Diagonal matrices can be non-square matrices but the diagonal always starts
            at element 0,0. A diagonal matrix will throw an exception if non diagonal
            entries are set. The exception to this is when the off diagonal elements are
            0.0 or NaN; these settings will cause no change to the diagonal matrix.
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix._data">
            <summary>
            Gets the matrix's data.
            </summary>
            <value>The matrix's data.</value>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.#ctor(MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage{System.Numerics.Complex})">
            <summary>
            Create a new diagonal matrix straight from an initialized matrix storage instance.
            The storage is used directly without copying.
            Intended for advanced scenarios where you're working directly with
            storage for performance or interop reasons.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.#ctor(System.Int32)">
            <summary>
            Create a new square diagonal matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the order is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new diagonal matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the row or column count is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.#ctor(System.Int32,System.Int32,System.Numerics.Complex)">
            <summary>
            Create a new diagonal matrix with the given number of rows and columns.
            All diagonal cells of the matrix will be initialized to the provided value, all non-diagonal ones to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the row or column count is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.#ctor(System.Int32,System.Int32,System.Numerics.Complex[])">
            <summary>
            Create a new diagonal matrix with the given number of rows and columns directly binding to a raw array.
            The array is assumed to contain the diagonal elements only and is used directly without copying.
            Very efficient, but changes to the array and the matrix will affect each other.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.OfMatrix(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Create a new diagonal matrix as a copy of the given other matrix.
            This new matrix will be independent from the other matrix.
            The matrix to copy from must be diagonal as well.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.OfArray(System.Numerics.Complex[0:,0:])">
            <summary>
            Create a new diagonal matrix as a copy of the given two-dimensional array.
            This new matrix will be independent from the provided array.
            The array to copy from must be diagonal as well.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.OfIndexedDiagonal(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,System.Numerics.Complex}})">
            <summary>
            Create a new diagonal matrix and initialize each diagonal value from the provided indexed enumerable.
            Keys must be provided at most once, zero is assumed if a key is omitted.
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.OfDiagonal(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Numerics.Complex})">
            <summary>
            Create a new diagonal matrix and initialize each diagonal value from the provided enumerable.
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.Create(System.Int32,System.Int32,System.Func{System.Int32,System.Numerics.Complex})">
            <summary>
            Create a new diagonal matrix and initialize each diagonal value using the provided init function.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.CreateRandom(System.Int32,System.Int32,MathNet.Numerics.Distributions.IContinuousDistribution)">
            <summary>
            Create a new diagonal matrix with diagonal values sampled from the provided random distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.#ctor(System.Numerics.Complex[0:,0:])">
            <summary>
            Create a new diagonal matrix as a copy of the given two-dimensional array.
            This new matrix will be independent from the provided array.
            The array to copy from must be diagonal as well.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.#ctor(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Create a new diagonal matrix as a copy of the given other matrix.
            This new matrix will be independent from the other matrix.
            The matrix to copy from must be diagonal as well.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.CreateMatrix(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a <c>DiagonalMatrix</c> for the given number of rows and columns.
            </summary>
            <param name="numberOfRows">The number of rows.</param>
            <param name="numberOfColumns">The number of columns.</param>
            <param name="fullyMutable">True if all fields must be mutable (e.g. not a diagonal matrix).</param>
            <returns>
            A <c>DiagonalMatrix</c> with the given dimensions.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.CreateVector(System.Int32,System.Boolean)">
            <summary>
            Creates a <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Vector`1"/> with a the given dimension.
            </summary>
            <param name="size">The size of the vector.</param>
            <param name="fullyMutable">True if all fields must be mutable.</param>
            <returns>
            A <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Vector`1"/> with the given dimension.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.Add(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="other">The matrix to add to this matrix.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.DoAdd(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="other">The matrix to add to this matrix.</param>
            <param name="result">The matrix to store the result of the addition.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.Subtract(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="other">The matrix to subtract.</param>
            <returns>The result of the subtraction.</returns>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.DoSubtract(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="other">The matrix to subtract.</param>
            <param name="result">The matrix to store the result of the subtraction.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.SetDiagonal(System.Numerics.Complex[])">
            <summary>
            Copies the values of the given array to the diagonal.
            </summary>
            <param name="source">The array to copy the values from. The length of the vector should be
            Min(Rows, Columns).</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the length of <paramref name="source"/> does not
            equal Min(Rows, Columns).</exception>
            <remarks>For non-square matrices, the elements of <paramref name="source"/> are copied to
            this[i,i].</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.SetDiagonal(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Copies the values of the given <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Vector`1"/> to the diagonal.
            </summary>
            <param name="source">The vector to copy the values from. The length of the vector should be
            Min(Rows, Columns).</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the length of <paramref name="source"/> does not
            equal Min(Rows, Columns).</exception>
            <remarks>For non-square matrices, the elements of <paramref name="source"/> are copied to
            this[i,i].</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.DoMultiply(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Multiplies each element of the matrix by a scalar and places results into the result matrix.
            </summary>
            <param name="scalar">The scalar to multiply the matrix with.</param>
            <param name="result">The matrix to store the result of the multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.Multiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Multiplies this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <strong>this.Columns != other.Rows</strong>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the this.Rows x other.Columns.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.Multiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Multiplies this matrix with another matrix and returns the result.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <exception cref="T:System.ArgumentException">If <strong>this.Columns != other.Rows</strong>.</exception>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <returns>The result of multiplication.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.Multiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Multiplies this matrix with a vector and places the results into the result matrix.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <strong>result.Count != this.RowCount</strong>.</exception>
            <exception cref="T:System.ArgumentException">If <strong>this.ColumnCount != <paramref name="rightSide"/>.Count</strong>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.LeftMultiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Left multiply a matrix with a vector ( = vector * matrix ) and place the result in the result vector.
            </summary>
            <param name="leftSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <strong>result.Count != this.ColumnCount</strong>.</exception>
            <exception cref="T:System.ArgumentException">If <strong>this.RowCount != <paramref name="leftSide"/>.Count</strong>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.Determinant">
            <summary>
            Computes the determinant of this matrix.
            </summary>
            <returns>The determinant of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.Diagonal">
            <summary>
            Returns the elements of the diagonal in a <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.DenseVector"/>.
            </summary>
            <returns>The elements of the diagonal.</returns>
            <remarks>For non-square matrices, the method returns Min(Rows, Columns) elements where
            i == j (i is the row index, and j is the column index).</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.TransposeAndMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Multiplies this matrix with transpose of another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <strong>this.Columns != other.Rows</strong>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the this.Rows x other.Columns.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.TransposeAndMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Multiplies this matrix with transpose of another matrix and returns the result.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <exception cref="T:System.ArgumentException">If <strong>this.Columns != other.Rows</strong>.</exception>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <returns>The result of multiplication.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.Transpose">
            <summary>
            Returns the transpose of this matrix.
            </summary>
            <returns>The transpose of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.L1Norm">
            <summary>Calculates the L1 norm.</summary>
            <returns>The L1 norm of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.L2Norm">
            <summary>Calculates the L2 norm.</summary>
            <returns>The L2 norm of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.FrobeniusNorm">
            <summary>Calculates the Frobenius norm of this matrix.</summary>
            <returns>The Frobenius norm of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.InfinityNorm">
            <summary>Calculates the infinity norm of this matrix.</summary>
            <returns>The infinity norm of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.ConditionNumber">
            <summary>Calculates the condition number of this matrix.</summary>
            <returns>The condition number of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.Inverse">
            <summary>Computes the inverse of this matrix.</summary>
            <exception cref="T:System.ArgumentException">If <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix"/> is not a square matrix.</exception>
            <exception cref="T:System.ArgumentException">If <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix"/> is singular.</exception>
            <returns>The inverse of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.LowerTriangle">
            <summary>
            Returns a new matrix containing the lower triangle of this matrix.
            </summary>
            <returns>The lower triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.LowerTriangle(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Puts the lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.StrictlyLowerTriangle">
            <summary>
            Returns a new matrix containing the lower triangle of this matrix. The new matrix
            does not contain the diagonal elements of this matrix.
            </summary>
            <returns>The lower triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.StrictlyLowerTriangle(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Puts the strictly lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.UpperTriangle">
            <summary>
            Returns a new matrix containing the upper triangle of this matrix.
            </summary>
            <returns>The upper triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.UpperTriangle(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Puts the upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.StrictlyUpperTriangle">
            <summary>
            Returns a new matrix containing the upper triangle of this matrix. The new matrix
            does not contain the diagonal elements of this matrix.
            </summary>
            <returns>The upper triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.StrictlyUpperTriangle(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Puts the strictly upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.SubMatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a matrix that contains the values from the requested sub-matrix.
            </summary>
            <param name="rowIndex">The row to start copying from.</param>
            <param name="rowCount">The number of rows to copy. Must be positive.</param>
            <param name="columnIndex">The column to start copying from.</param>
            <param name="columnCount">The number of columns to copy. Must be positive.</param>
            <returns>The requested sub-matrix.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If: <list><item><paramref name="rowIndex"/> is
            negative, or greater than or equal to the number of rows.</item>
            <item><paramref name="columnIndex"/> is negative, or greater than or equal to the number
            of columns.</item>
            <item><c>(columnIndex + columnLength) &gt;= Columns</c></item>
            <item><c>(rowIndex + rowLength) &gt;= Rows</c></item></list></exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="rowCount"/> or <paramref name="columnCount"/>
            is not positive.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.InsertColumn(System.Int32,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Creates a new  <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix"/> and inserts the given column at the given index.
            </summary>
            <param name="columnIndex">The index of where to insert the column.</param>
            <param name="column">The column to insert.</param>
            <returns>A new <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix"/> with the inserted column.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="column "/> is <see langword="null"/>. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="columnIndex"/> is &lt; zero or &gt; the number of columns.</exception>
            <exception cref="T:System.ArgumentException">If the size of <paramref name="column"/> != the number of rows.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.InsertRow(System.Int32,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Creates a new  <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix"/> and inserts the given row at the given index.
            </summary>
            <param name="rowIndex">The index of where to insert the row.</param>
            <param name="row">The row to insert.</param>
            <returns>A new  <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix"/> with the inserted column.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="row"/> is <see langword="null"/>. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="rowIndex"/> is &lt; zero or &gt; the number of rows.</exception>
            <exception cref="T:System.ArgumentException">If the size of <paramref name="row"/> != the number of columns.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.PermuteColumns(MathNet.Numerics.Permutation)">
            <summary>
            Permute the columns of a matrix according to a permutation.
            </summary>
            <param name="p">The column permutation to apply to this matrix.</param>
            <exception cref="T:System.InvalidOperationException">Always thrown</exception>
            <remarks>Permutation in diagonal matrix are senseless, because of matrix nature</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.PermuteRows(MathNet.Numerics.Permutation)">
            <summary>
            Permute the rows of a matrix according to a permutation.
            </summary>
            <param name="p">The row permutation to apply to this matrix.</param>
            <exception cref="T:System.InvalidOperationException">Always thrown</exception>
            <remarks>Permutation in diagonal matrix are senseless, because of matrix nature</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.Identity(System.Int32)">
            <summary>
            Initializes a square <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix"/> with all zero's except for ones on the diagonal.
            </summary>
            <param name="order">the size of the square matrix.</param>
            <returns>A diagonal identity matrix.</returns>
            <exception cref="T:System.ArgumentException">
            If <paramref name="order"/> is less than one.
            </exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.IsSymmetric">
            <summary>
            Gets a value indicating whether this matrix is symmetric.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.ExtensionMethods">
            <summary>
            Extension methods which return factorizations for the various matrix classes.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.ExtensionMethods.Cholesky(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Computes the Cholesky decomposition for a matrix.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <returns>The Cholesky decomposition object.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.ExtensionMethods.LU(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Computes the LU decomposition for a matrix.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <returns>The LU decomposition object.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.ExtensionMethods.QR(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Computes the QR decomposition for a matrix.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <param name="method">The type of QR factorization to perform.</param>
            <returns>The QR decomposition object.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.ExtensionMethods.GramSchmidt(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Computes the QR decomposition for a matrix using Modified Gram-Schmidt Orthogonalization.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <returns>The QR decomposition object.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.ExtensionMethods.Svd(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},System.Boolean)">
            <summary>
            Computes the SVD decomposition for a matrix.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <param name="computeVectors">Compute the singular U and VT vectors or not.</param>
            <returns>The SVD decomposition object.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.ExtensionMethods.Evd(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Computes the EVD decomposition for a matrix.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <returns>The EVD decomposition object.</returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.Cholesky">
            <summary>
            <para>A class which encapsulates the functionality of a Cholesky factorization.</para>
            <para>For a symmetric, positive definite matrix A, the Cholesky factorization
            is an lower triangular matrix L so that A = L*L'.</para>
            </summary>
            <remarks>
            The computation of the Cholesky factorization is done at construction time. If the matrix is not symmetric
            or positive definite, the constructor will throw an exception.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Factorization.Cholesky.Determinant">
            <summary>
            Gets the determinant of the matrix for which the Cholesky matrix was computed.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Factorization.Cholesky.DeterminantLn">
            <summary>
            Gets the log determinant of the matrix for which the Cholesky matrix was computed.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.Evd">
            <summary>
            Eigenvalues and eigenvectors of a real matrix.
            </summary>
            <remarks>
            If A is symmetric, then A = V*D*V' where the eigenvalue matrix D is
            diagonal and the eigenvector matrix V is orthogonal.
            I.e. A = V*D*V' and V*VT=I.
            If A is not symmetric, then the eigenvalue matrix D is block diagonal
            with the real eigenvalues in 1-by-1 blocks and any complex eigenvalues,
            lambda + i*mu, in 2-by-2 blocks, [lambda, mu; -mu, lambda].  The
            columns of V represent the eigenvectors in the sense that A*V = V*D,
            i.e. A.Multiply(V) equals V.Multiply(D).  The matrix V may be badly
            conditioned, or even singular, so the validity of the equation
            A = V*D*Inverse(V) depends upon V.Condition().
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Factorization.Evd.Determinant">
            <summary>
            Gets the absolute value of determinant of the square matrix for which the EVD was computed.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Factorization.Evd.Rank">
            <summary>
            Gets the effective numerical matrix rank.
            </summary>
            <value>The number of non-negligible singular values.</value>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Factorization.Evd.IsFullRank">
            <summary>
            Gets a value indicating whether the matrix is full rank or not.
            </summary>
            <value><c>true</c> if the matrix is full rank; otherwise <c>false</c>.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.GramSchmidt">
            <summary>
            <para>A class which encapsulates the functionality of the QR decomposition Modified Gram-Schmidt Orthogonalization.</para>
            <para>Any real square matrix A may be decomposed as A = QR where Q is an orthogonal mxn matrix and R is an nxn upper triangular matrix.</para>
            </summary>
            <remarks>
            The computation of the QR decomposition is done at construction time by modified Gram-Schmidt Orthogonalization.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Factorization.GramSchmidt.Determinant">
            <summary>
            Gets the absolute determinant value of the matrix for which the QR matrix was computed.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Factorization.GramSchmidt.IsFullRank">
            <summary>
            Gets a value indicating whether the matrix is full rank or not.
            </summary>
            <value><c>true</c> if the matrix is full rank; otherwise <c>false</c>.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.LU">
            <summary>
            <para>A class which encapsulates the functionality of an LU factorization.</para>
            <para>For a matrix A, the LU factorization is a pair of lower triangular matrix L and
            upper triangular matrix U so that A = L*U.</para>
            <para>In the Math.Net implementation we also store a set of pivot elements for increased 
            numerical stability. The pivot elements encode a permutation matrix P such that P*A = L*U.</para>
            </summary>
            <remarks>
            The computation of the LU factorization is done at construction time.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Factorization.LU.Determinant">
            <summary>
            Gets the determinant of the matrix for which the LU factorization was computed.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.QR">
            <summary>
            <para>A class which encapsulates the functionality of the QR decomposition.</para>
            <para>Any real square matrix A (m x n) may be decomposed as A = QR where Q is an orthogonal matrix
            (its columns are orthogonal unit vectors meaning QTQ = I) and R is an upper triangular matrix 
            (also called right triangular matrix).</para>
            </summary>
            <remarks>
            The computation of the QR decomposition is done at construction time by Householder transformation.
            If a <seealso cref="F:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod.Full"/> factorization is peformed, the resulting Q matrix is an m x m matrix 
            and the R matrix is an m x n matrix. If a <seealso cref="F:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod.Thin"/> factorization is performed, the 
            resulting Q matrix is an m x n matrix and the R matrix is an n x n matrix.     
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Factorization.QR.Determinant">
            <summary>
            Gets the absolute determinant value of the matrix for which the QR matrix was computed.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Factorization.QR.IsFullRank">
            <summary>
            Gets a value indicating whether the matrix is full rank or not.
            </summary>
            <value><c>true</c> if the matrix is full rank; otherwise <c>false</c>.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.Svd">
            <summary>
            <para>A class which encapsulates the functionality of the singular value decomposition (SVD).</para>
            <para>Suppose M is an m-by-n matrix whose entries are real numbers.
            Then there exists a factorization of the form M = UΣVT where:
            - U is an m-by-m unitary matrix;
            - Σ is m-by-n diagonal matrix with nonnegative real numbers on the diagonal;
            - VT denotes transpose of V, an n-by-n unitary matrix;
            Such a factorization is called a singular-value decomposition of M. A common convention is to order the diagonal
            entries Σ(i,i) in descending order. In this case, the diagonal matrix Σ is uniquely determined
            by M (though the matrices U and V are not). The diagonal entries of Σ are known as the singular values of M.</para>
            </summary>
            <remarks>
            The computation of the singular value decomposition is done at construction time.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Factorization.Svd.Rank">
            <summary>
            Gets the effective numerical matrix rank.
            </summary>
            <value>The number of non-negligible singular values.</value>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Factorization.Svd.Norm2">
            <summary>
            Gets the two norm of the <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>.
            </summary>
            <returns>The 2-norm of the <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Factorization.Svd.ConditionNumber">
            <summary>
            Gets the condition number <b>max(S) / min(S)</b>
            </summary>
            <returns>The condition number.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Factorization.Svd.Determinant">
            <summary>
            Gets the determinant of the square matrix for which the SVD was computed.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterativeSolver">
            <summary>
            Defines the interface for <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterativeSolver"/> classes that solve the matrix equation Ax = b in
            an iterative manner.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterativeSolver.StopSolve">
            <summary>
            Stops the solve process. 
            </summary>
            <remarks>
            Note that it may take an indetermined amount of time for the solver to actually stop the process.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterativeSolver.SetIterator(MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator)">
            <summary>
            Sets the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator"/> that will be used to track the iterative process.
            </summary>
            <param name="iterator">The iterator.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterativeSolver.Solve(MathNet.Numerics.LinearAlgebra.Complex.Matrix,MathNet.Numerics.LinearAlgebra.Complex.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="vector">The solution vector, <c>b</c>.</param>
            <returns>The result vector, <c>x</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterativeSolver.Solve(MathNet.Numerics.LinearAlgebra.Complex.Matrix,MathNet.Numerics.LinearAlgebra.Complex.Vector,MathNet.Numerics.LinearAlgebra.Complex.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution vector, <c>b</c></param>
            <param name="result">The result vector, <c>x</c></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterativeSolver.Solve(MathNet.Numerics.LinearAlgebra.Complex.Matrix,MathNet.Numerics.LinearAlgebra.Complex.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <returns>The result matrix, <c>X</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterativeSolver.Solve(MathNet.Numerics.LinearAlgebra.Complex.Matrix,MathNet.Numerics.LinearAlgebra.Complex.Matrix,MathNet.Numerics.LinearAlgebra.Complex.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <param name="result">The result matrix, <c>X</c></param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterativeSolver.IterationResult">
            <summary>
            Gets the status of the iteration once the calculation is finished.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterativeSolverSetup">
            <summary>
            Defines the interface for objects that can create an iterative solver with
            specific settings. This interface is used to pass iterative solver creation 
            setup information around.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterativeSolverSetup.CreateNew">
            <summary>
            Creates a fully functional iterative solver with the default settings
            given by this setup.
            </summary>
            <returns>A new <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterativeSolver"/>.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterativeSolverSetup.SolverType">
            <summary>
            Gets the type of the solver that will be created by this setup object.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterativeSolverSetup.PreconditionerType">
            <summary>
            Gets type of preconditioner, if any, that will be created by this setup object.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterativeSolverSetup.SolutionSpeed">
            <summary>
            Gets the relative speed of the solver. 
            </summary>
            <value>Returns a value between 0 and 1, inclusive.</value>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterativeSolverSetup.Reliability">
            <summary>
            Gets the relative reliability of the solver.
            </summary>
            <value>Returns a value between 0 and 1 inclusive.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator">
            <summary>
            Defines the base interface for iterators that help control an iterative calculation.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator.Add(MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IIterationStopCriterium)">
            <summary>
            Adds an <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IIterationStopCriterium"/> to the internal collection of stop-criteria. Only a 
            single stop criterium of each type can be stored.
            </summary>
            <param name="stopCriterium">The stop criterium to add.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="stopCriterium"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="stopCriterium"/> is of the same type as an already stored criterium.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator.Remove(MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IIterationStopCriterium)">
            <summary>
            Removes the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IIterationStopCriterium"/> from the internal collection.
            </summary>
            <param name="stopCriterium">The stop criterium that must be removed.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator.Contains(MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IIterationStopCriterium)">
            <summary>
            Indicates if the specific stop criterium is stored by the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator"/>.
            </summary>
            <param name="stopCriterium">The stop criterium.</param>
            <returns><c>true</c> if the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator"/> contains the stop criterium; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator.IterationCancelled">
            <summary>
            Indicates to the iterator that the iterative process has been cancelled.
            </summary>
            <remarks>Does not reset the stop-criteria.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator.DetermineStatus(System.Int32,MathNet.Numerics.LinearAlgebra.Complex.Vector,MathNet.Numerics.LinearAlgebra.Complex.Vector,MathNet.Numerics.LinearAlgebra.Complex.Vector)">
            <summary>
            Determines the status of the iterative calculation based on the stop criteria stored
            by the current <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator"/>.  Status is set to <c>Status</c> field of current object.
            </summary>
            <param name="iterationNumber">The number of iterations that have passed so far.</param>
            <param name="solutionVector">The vector containing the current solution values.</param>
            <param name="sourceVector">The right hand side vector.</param>
            <param name="residualVector">The vector containing the current residual vectors.</param>
            <remarks>
            The individual iterators may internally track the progress of the calculation based
            on the invocation of this method. Therefore this method should only be called if the 
            calculation has moved forwards at least one step.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator.ResetToPrecalculationState">
            <summary>
            Resets the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator"/> to the pre-calculation state.
            </summary>
            <remarks>
            Note to implementers: Invoking this method should not clear the user defined
            property values, only the state that is used to track the progress of the 
            calculation.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator.Status">
            <summary>
            Gets the current calculation status.
            </summary>
            <remarks><see langword="null"/> is not a legal value. Status should be set in <see cref="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator.DetermineStatus(System.Int32,MathNet.Numerics.LinearAlgebra.Complex.Vector,MathNet.Numerics.LinearAlgebra.Complex.Vector,MathNet.Numerics.LinearAlgebra.Complex.Vector)"/> implementation.</remarks>.
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.IPreConditioner">
            <summary>
            The base interface for preconditioner classes.
            </summary>
            <remarks>
            <para>
            Preconditioners are used by iterative solvers to improve the convergence
            speed of the solving process. Increase in convergence speed
            is related to the number of iterations necessary to get a converged solution.
            So while in general the use of a preconditioner means that the iterative 
            solver will perform fewer iterations it does not guarantee that the actual
            solution time decreases given that some preconditioners can be expensive to 
            setup and run.
            </para>
            <para>
            Note that in general changes to the matrix will invalidate the preconditioner
            if the changes occur after creating the preconditioner.
            </para>
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.IPreConditioner.Initialize(MathNet.Numerics.LinearAlgebra.Complex.Matrix)">
            <summary>
            Initializes the preconditioner and loads the internal data structures.
            </summary>
            <param name="matrix">The matrix on which the preconditioner is based.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.IPreConditioner.Approximate(MathNet.Numerics.LinearAlgebra.Complex.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Mx = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <returns>The left hand side vector.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.IPreConditioner.Approximate(MathNet.Numerics.LinearAlgebra.Complex.Vector,MathNet.Numerics.LinearAlgebra.Complex.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Mx = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <param name="lhs">The left hand side vector. Also known as the result vector.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IIterationStopCriterium">
            <summary>
            The base interface for classes that provide stop criteria for iterative calculations. 
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IIterationStopCriterium.DetermineStatus(System.Int32,MathNet.Numerics.LinearAlgebra.Complex.Vector,MathNet.Numerics.LinearAlgebra.Complex.Vector,MathNet.Numerics.LinearAlgebra.Complex.Vector)">
            <summary>
            Determines the status of the iterative calculation based on the stop criteria stored
            by the current <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IIterationStopCriterium"/>. Status is set to <c>Status</c> field of current object.
            </summary>
            <param name="iterationNumber">The number of iterations that have passed so far.</param>
            <param name="solutionVector">The vector containing the current solution values.</param>
            <param name="sourceVector">The right hand side vector.</param>
            <param name="residualVector">The vector containing the current residual vectors.</param>
            <remarks>
            The individual stop criteria may internally track the progress of the calculation based
            on the invocation of this method. Therefore this method should only be called if the 
            calculation has moved forwards at least one step.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IIterationStopCriterium.ResetToPrecalculationState">
            <summary>
            Resets the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IIterationStopCriterium"/> to the pre-calculation state.
            </summary>
            <remarks>To implementers: Invoking this method should not clear the user defined
            property values, only the state that is used to track the progress of the 
            calculation.</remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IIterationStopCriterium.Status">
            <summary>
            Gets the current calculation status.
            </summary>
            <remarks><see langword="null"/> is not a legal value. Status should be set in <see cref="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IIterationStopCriterium.DetermineStatus(System.Int32,MathNet.Numerics.LinearAlgebra.Complex.Vector,MathNet.Numerics.LinearAlgebra.Complex.Vector,MathNet.Numerics.LinearAlgebra.Complex.Vector)"/> implementation.</remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IIterationStopCriterium.StopLevel">
            <summary>
            Gets the <see cref="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IIterationStopCriterium.StopLevel"/> which indicates what sort of stop criterium this
            <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IIterationStopCriterium"/> monitors.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix">
            <summary>
            A Matrix with sparse storage, intended for very large matrices where most of the cells are zero.
            The underlying storage scheme is 3-array compressed-sparse-row (CSR) Format.
            <a href="http://en.wikipedia.org/wiki/Sparse_matrix#Compressed_sparse_row_.28CSR_or_CRS.29">Wikipedia - CSR</a>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.#ctor(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage{System.Numerics.Complex})">
            <summary>
            Create a new sparse matrix straight from an initialized matrix storage instance.
            The storage is used directly without copying.
            Intended for advanced scenarios where you're working directly with
            storage for performance or interop reasons.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.#ctor(System.Int32)">
            <summary>
            Create a new square sparse matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the order is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new sparse matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the row or column count is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.OfMatrix(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Create a new sparse matrix as a copy of the given other matrix.
            This new matrix will be independent from the other matrix.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.OfArray(System.Numerics.Complex[0:,0:])">
            <summary>
            Create a new sparse matrix as a copy of the given two-dimensional array.
            This new matrix will be independent from the provided array.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.OfIndexed(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,System.Int32,System.Numerics.Complex}})">
            <summary>
            Create a new sparse matrix as a copy of the given indexed enumerable.
            Keys must be provided at most once, zero is assumed if a key is omitted.
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.OfRowMajor(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Numerics.Complex})">
            <summary>
            Create a new sparse matrix as a copy of the given enumerable.
            The enumerable is assumed to be in row-major order (row by row).
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the vector.
            </summary>
            <seealso href="http://en.wikipedia.org/wiki/Row-major_order"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.OfColumnMajor(System.Int32,System.Int32,System.Collections.Generic.IList{System.Numerics.Complex})">
            <summary>
            Create a new sparse matrix with the given number of rows and columns as a copy of the given array.
            The array is assumed to be in column-major order (column by column).
            This new matrix will be independent from the provided array.
            A new memory block will be allocated for storing the matrix.
            </summary>
            <seealso href="http://en.wikipedia.org/wiki/Row-major_order"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.OfColumns(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Numerics.Complex}})">
            <summary>
            Create a new sparse matrix as a copy of the given enumerable of enumerable columns.
            Each enumerable in the master enumerable specifies a column.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.OfColumnsCovariant``1(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create a new sparse matrix as a copy of the given enumerable of enumerable columns.
            Each enumerable in the master enumerable specifies a column.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.OfRows(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Numerics.Complex}})">
            <summary>
            Create a new sparse matrix as a copy of the given enumerable of enumerable rows.
            Each enumerable in the master enumerable specifies a row.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.OfRowsCovariant``1(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create a new sparse matrix as a copy of the given enumerable of enumerable rows.
            Each enumerable in the master enumerable specifies a row.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.Create(System.Int32,System.Int32,System.Func{System.Int32,System.Int32,System.Numerics.Complex})">
            <summary>
            Create a new sparse matrix and initialize each value using the provided init function.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.#ctor(System.Int32,System.Int32,System.Numerics.Complex)">
            <summary>
            Create a new sparse matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to the provided value.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the row or column count is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.#ctor(System.Int32,System.Int32,System.Numerics.Complex[])">
            <summary>
            Create a new sparse matrix with the given number of rows and columns as a copy of the given array.
            The array is assumed to be in column-major order (column by column).
            This new matrix will be independent from the provided array.
            A new memory block will be allocated for storing the matrix.
            </summary>
            <seealso href="http://en.wikipedia.org/wiki/Row-major_order"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.#ctor(System.Numerics.Complex[0:,0:])">
            <summary>
            Create a new sparse matrix as a copy of the given two-dimensional array.
            This new matrix will be independent from the provided array.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.#ctor(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Create a new sparse matrix as a copy of the given other matrix.
            This new matrix will be independent from the other matrix.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.CreateMatrix(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a <c>SparseMatrix</c> for the given number of rows and columns.
            </summary>
            <param name="numberOfRows">The number of rows.</param>
            <param name="numberOfColumns">The number of columns.</param>
            <param name="fullyMutable">True if all fields must be mutable (e.g. not a diagonal matrix).</param>
            <returns>
            A <c>SparseMatrix</c> with the given dimensions.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.CreateVector(System.Int32,System.Boolean)">
            <summary>
            Creates a <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.SparseVector"/> with a the given dimension.
            </summary>
            <param name="size">The size of the vector.</param>
            <param name="fullyMutable">True if all fields must be mutable.</param>
            <returns>
            A <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.SparseVector"/> with the given dimension.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.LowerTriangle">
            <summary>
            Returns a new matrix containing the lower triangle of this matrix.
            </summary>
            <returns>The lower triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.LowerTriangle(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Puts the lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.LowerTriangleImpl(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Puts the lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.UpperTriangle">
            <summary>
            Returns a new matrix containing the upper triangle of this matrix.
            </summary>
            <returns>The upper triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.UpperTriangle(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Puts the upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.UpperTriangleImpl(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Puts the upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.StrictlyLowerTriangle">
            <summary>
            Returns a new matrix containing the lower triangle of this matrix. The new matrix
            does not contain the diagonal elements of this matrix.
            </summary>
            <returns>The lower triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.StrictlyLowerTriangle(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Puts the strictly lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.StrictlyLowerTriangleImpl(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Puts the strictly lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.StrictlyUpperTriangle">
            <summary>
            Returns a new matrix containing the upper triangle of this matrix. The new matrix
            does not contain the diagonal elements of this matrix.
            </summary>
            <returns>The upper triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.StrictlyUpperTriangle(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Puts the strictly upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.StrictlyUpperTriangleImpl(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Puts the strictly upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.Transpose">
            <summary>
            Returns the transpose of this matrix.
            </summary>
            <returns>The transpose of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.FrobeniusNorm">
            <summary>Calculates the Frobenius norm of this matrix.</summary>
            <returns>The Frobenius norm of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.InfinityNorm">
            <summary>Calculates the infinity norm of this matrix.</summary>
            <returns>The infinity norm of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.Identity(System.Int32)">
            <summary>
            Initializes a square <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix"/> with all zero's except for ones on the diagonal.
            </summary>
            <param name="order">the size of the square matrix.</param>
            <returns>Identity <c>SparseMatrix</c></returns>
            <exception cref="T:System.ArgumentException">
            If <paramref name="order"/> is less than one.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.DoAdd(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="other">The matrix to add to this matrix.</param>
            <param name="result">The matrix to store the result of the addition.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.DoSubtract(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="other">The matrix to subtract to this matrix.</param>
            <param name="result">The matrix to store the result of subtraction.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.DoMultiply(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Multiplies each element of the matrix by a scalar and places results into the result matrix.
            </summary>
            <param name="scalar">The scalar to multiply the matrix with.</param>
            <param name="result">The matrix to store the result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Multiplies this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Multiplies this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.DoTransposeAndMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Multiplies this matrix with transpose of another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.DoNegate(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Negate each element of this matrix and place the results into the result matrix.
            </summary>
            <param name="result">The result of the negation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.DoPointwiseMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Pointwise multiplies this matrix with another matrix and stores the result into the result matrix.
            </summary>
            <param name="other">The matrix to pointwise multiply with this one.</param>
            <param name="result">The matrix to store the result of the pointwise multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.DoPointwiseDivide(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Pointwise divide this matrix by another matrix and stores the result into the result matrix.
            </summary>
            <param name="other">The matrix to pointwise divide this one by.</param>
            <param name="result">The matrix to store the result of the pointwise division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.IndexedEnumerator">
            <summary>
            Iterates throw each element in the matrix (row-wise).
            </summary>
            <returns>The value at the current iteration along with its position (row, column, value).</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.CheckIfOppositesAreEqual(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks if opposites in a range are equal.
            </summary>
            <param name="start">The start of the range.</param>
            <param name="end">The end of the range.</param>
            <param name="row">The row the row to check.</param>
            <returns>If the values are equal or not.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.op_Addition(MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix,MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix)">
            <summary>
            Adds two matrices together and returns the results.
            </summary>
            <remarks>This operator will allocate new memory for the result. It will
            choose the representation of either <paramref name="leftSide"/> or <paramref name="rightSide"/> depending on which
            is denser.</remarks>
            <param name="leftSide">The left matrix to add.</param>
            <param name="rightSide">The right matrix to add.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> don't have the same dimensions.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.op_UnaryPlus(MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix)">
            <summary>
            Returns a <strong>Matrix</strong> containing the same values of <paramref name="rightSide"/>.
            </summary>
            <param name="rightSide">The matrix to get the values from.</param>
            <returns>A matrix containing a the same values as <paramref name="rightSide"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.op_Subtraction(MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix,MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix)">
            <summary>
            Subtracts two matrices together and returns the results.
            </summary>
            <remarks>This operator will allocate new memory for the result. It will
            choose the representation of either <paramref name="leftSide"/> or <paramref name="rightSide"/> depending on which
            is denser.</remarks>
            <param name="leftSide">The left matrix to subtract.</param>
            <param name="rightSide">The right matrix to subtract.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> don't have the same dimensions.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.op_UnaryNegation(MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix)">
            <summary>
            Negates each element of the matrix.
            </summary>
            <param name="rightSide">The matrix to negate.</param>
            <returns>A matrix containing the negated values.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix,System.Numerics.Complex)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.op_Multiply(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix,MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix)">
            <summary>
            Multiplies two matrices.
            </summary>
            <remarks>This operator will allocate new memory for the result. It will
            choose the representation of either <paramref name="leftSide"/> or <paramref name="rightSide"/> depending on which
            is denser.</remarks>
            <param name="leftSide">The left matrix to multiply.</param>
            <param name="rightSide">The right matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the dimensions of <paramref name="leftSide"/> or <paramref name="rightSide"/> don't conform.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix,MathNet.Numerics.LinearAlgebra.Complex.SparseVector)">
            <summary>
            Multiplies a <strong>Matrix</strong> and a Vector.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The vector to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Complex.SparseVector,MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix)">
            <summary>
            Multiplies a Vector and a <strong>Matrix</strong>.
            </summary>
            <param name="leftSide">The vector to multiply.</param>
            <param name="rightSide">The matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.op_Modulus(MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix,System.Numerics.Complex)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.NonZerosCount">
            <summary>
            Gets the number of non zero elements in the matrix.
            </summary>
            <value>The number of non zero elements.</value>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.IsSymmetric">
            <summary>
            Gets a value indicating whether this matrix is symmetric.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.ExtensionMethods">
            <summary>
            Extension methods which return factorizations for the various matrix classes.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.ExtensionMethods.Cholesky(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Computes the Cholesky decomposition for a matrix.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <returns>The Cholesky decomposition object.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.ExtensionMethods.LU(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Computes the LU decomposition for a matrix.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <returns>The LU decomposition object.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.ExtensionMethods.QR(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Computes the QR decomposition for a matrix.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <param name="method">The type of QR factorization to perform.</param>
            <returns>The QR decomposition object.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.ExtensionMethods.GramSchmidt(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Computes the QR decomposition for a matrix using Modified Gram-Schmidt Orthogonalization.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <returns>The QR decomposition object.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.ExtensionMethods.Svd(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},System.Boolean)">
            <summary>
            Computes the SVD decomposition for a matrix.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <param name="computeVectors">Compute the singular U and VT vectors or not.</param>
            <returns>The SVD decomposition object.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.ExtensionMethods.Evd(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Computes the EVD decomposition for a matrix.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <returns>The EVD decomposition object.</returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.Cholesky">
            <summary>
            <para>A class which encapsulates the functionality of a Cholesky factorization.</para>
            <para>For a symmetric, positive definite matrix A, the Cholesky factorization
            is an lower triangular matrix L so that A = L*L'.</para>
            </summary>
            <remarks>
            The computation of the Cholesky factorization is done at construction time. If the matrix is not symmetric
            or positive definite, the constructor will throw an exception.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Factorization.Cholesky.Determinant">
            <summary>
            Gets the determinant of the matrix for which the Cholesky matrix was computed.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Factorization.Cholesky.DeterminantLn">
            <summary>
            Gets the log determinant of the matrix for which the Cholesky matrix was computed.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix">
            <summary>
            A Matrix class with dense storage. The underlying storage is a one dimensional array in column-major order (column by column).
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Matrix">
            <summary>
            <c>double</c> version of the <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/> class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.#ctor(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage{System.Double})">
            <summary>
            Initializes a new instance of the Matrix class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.L1Norm">
            <summary>Calculates the L1 norm.</summary>
            <returns>The L1 norm of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.ConjugateTranspose">
            <summary>
            Returns the conjugate transpose of this matrix.
            </summary>        
            <returns>The conjugate transpose of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.FrobeniusNorm">
            <summary>Calculates the Frobenius norm of this matrix.</summary>
            <returns>The Frobenius norm of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.InfinityNorm">
            <summary>Calculates the infinity norm of this matrix.</summary>
            <returns>The infinity norm of this matrix.</returns>   
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.DoAdd(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="other">The matrix to add to this matrix.</param>
            <param name="result">The matrix to store the result of the addition.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.DoSubtract(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="other">The matrix to subtract to this matrix.</param>
            <param name="result">The matrix to store the result of subtraction.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.DoMultiply(System.Double,MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Multiplies each element of the matrix by a scalar and places results into the result matrix.
            </summary>
            <param name="scalar">The scalar to multiply the matrix with.</param>
            <param name="result">The matrix to store the result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Multiplies this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.DoDivide(System.Double,MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Divides each element of the matrix by a scalar and places results into the result matrix.
            </summary>
            <param name="scalar">The scalar to divide the matrix with.</param>
            <param name="result">The matrix to store the result of the division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Multiplies this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.DoTransposeAndMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Multiplies this matrix with transpose of another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.DoTransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Multiplies the transpose of this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.DoTransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Multiplies the transpose of this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.DoNegate(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Negate each element of this matrix and place the results into the result matrix.
            </summary>
            <param name="result">The result of the negation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.DoConjugate(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Complex conjugates each element of this matrix and place the results into the result matrix.
            </summary>
            <param name="result">The result of the conjugation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.DoPointwiseMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Pointwise multiplies this matrix with another matrix and stores the result into the result matrix.
            </summary>
            <param name="other">The matrix to pointwise multiply with this one.</param>
            <param name="result">The matrix to store the result of the pointwise multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.DoPointwiseDivide(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Pointwise divide this matrix by another matrix and stores the result into the result matrix.
            </summary>
            <param name="other">The matrix to pointwise divide this one by.</param>
            <param name="result">The matrix to store the result of the pointwise division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.DoModulus(System.Double,MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Computes the modulus for each element of the matrix.
            </summary>
            <param name="divisor">The divisor to use.</param>
            <param name="result">Matrix to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.Trace">
            <summary>
            Computes the trace of this matrix.
            </summary>
            <returns>The trace of this matrix</returns>
            <exception cref="T:System.ArgumentException">If the matrix is not square</exception>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix._rowCount">
            <summary>
            Number of rows.
            </summary>
            <remarks>Using this instead of the RowCount property to speed up calculating
            a matrix index in the data array.</remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix._columnCount">
            <summary>
            Number of columns.
            </summary>
            <remarks>Using this instead of the ColumnCount property to speed up calculating
            a matrix index in the data array.</remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix._values">
            <summary>
            Gets the matrix's data.
            </summary>
            <value>The matrix's data.</value>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.#ctor(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage{System.Double})">
            <summary>
            Create a new dense matrix straight from an initialized matrix storage instance.
            The storage is used directly without copying.
            Intended for advanced scenarios where you're working directly with
            storage for performance or interop reasons.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.#ctor(System.Int32)">
            <summary>
            Create a new square dense matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the order is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new dense matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the row or column count is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.#ctor(System.Int32,System.Int32,System.Double[])">
            <summary>
            Create a new dense matrix with the given number of rows and columns directly binding to a raw array.
            The array is assumed to be in column-major order (column by column) and is used directly without copying.
            Very efficient, but changes to the array and the matrix will affect each other.
            </summary>
            <seealso href="http://en.wikipedia.org/wiki/Row-major_order"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.OfMatrix(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Create a new dense matrix as a copy of the given other matrix.
            This new matrix will be independent from the other matrix.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.OfArray(System.Double[0:,0:])">
            <summary>
            Create a new dense matrix as a copy of the given two-dimensional array.
            This new matrix will be independent from the provided array.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.OfIndexed(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,System.Int32,System.Double}})">
            <summary>
            Create a new dense matrix as a copy of the given indexed enumerable.
            Keys must be provided at most once, zero is assumed if a key is omitted.
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.OfColumnMajor(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Create a new dense matrix as a copy of the given enumerable.
            The enumerable is assumed to be in column-major order (column by column).
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.OfColumns(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Double}})">
            <summary>
            Create a new dense matrix as a copy of the given enumerable of enumerable columns.
            Each enumerable in the master enumerable specifies a column.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.OfColumnVectors(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double}[])">
            <summary>
            Create a new dense matrix as a copy of the given column vectors.
            This new matrix will be independent from the vectors.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.OfColumnsCovariant``1(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create a new dense matrix as a copy of the given enumerable of enumerable columns.
            Each enumerable in the master enumerable specifies a column.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.OfRows(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Double}})">
            <summary>
            Create a new dense matrix as a copy of the given enumerable of enumerable rows.
            Each enumerable in the master enumerable specifies a row.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.OfRowVectors(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double}[])">
            <summary>
            Create a new dense matrix as a copy of the given row vectors.
            This new matrix will be independent from the vectors.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.OfRowsCovariant``1(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create a new dense matrix as a copy of the given enumerable of enumerable rows.
            Each enumerable in the master enumerable specifies a row.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.Create(System.Int32,System.Int32,System.Func{System.Int32,System.Int32,System.Double})">
            <summary>
            Create a new dense matrix and initialize each value using the provided init function.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.CreateRandom(System.Int32,System.Int32,MathNet.Numerics.Distributions.IContinuousDistribution)">
            <summary>
            Create a new dense matrix with values sampled from the provided random distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            Create a new dense matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to the provided value.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the row or column count is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.#ctor(System.Double[0:,0:])">
            <summary>
            Create a new dense matrix as a copy of the given two-dimensional array.
            This new matrix will be independent from the provided array.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.#ctor(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Create a new dense matrix as a copy of the given other matrix.
            This new matrix will be independent from the other matrix.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.CreateMatrix(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a <c>DenseMatrix</c> for the given number of rows and columns.
            </summary>
            <param name="numberOfRows">The number of rows.</param>
            <param name="numberOfColumns">The number of columns.</param>
            <param name="fullyMutable">True if all fields must be mutable (e.g. not a diagonal matrix).</param>
            <returns>
            A <c>DenseMatrix</c> with the given dimensions.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.CreateVector(System.Int32,System.Boolean)">
            <summary>
            Creates a <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Vector`1"/> with a the given dimension.
            </summary>
            <param name="size">The size of the vector.</param>
            <param name="fullyMutable">True if all fields must be mutable.</param>
            <returns>
            A <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Vector`1"/> with the given dimension.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.Transpose">
            <summary>
            Returns the transpose of this matrix.
            </summary>
            <returns>The transpose of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.L1Norm">
            <summary>Calculates the L1 norm.</summary>
            <returns>The L1 norm of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.FrobeniusNorm">
            <summary>Calculates the Frobenius norm of this matrix.</summary>
            <returns>The Frobenius norm of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.InfinityNorm">
            <summary>Calculates the infinity norm of this matrix.</summary>
            <returns>The infinity norm of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.Identity(System.Int32)">
            <summary>
            Initializes a square <see cref="T:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix"/> with all zero's except for ones on the diagonal.
            </summary>
            <param name="order">the size of the square matrix.</param>
            <returns>A dense identity matrix.</returns>
            <exception cref="T:System.ArgumentException">
            If <paramref name="order"/> is less than one.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.DoAdd(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="other">The matrix to add to this matrix.</param>
            <param name="result">The matrix to store the result of add</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.DoSubtract(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="other">The matrix to subtract.</param>
            <param name="result">The matrix to store the result of the subtraction.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.DoMultiply(System.Double,MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Multiplies each element of the matrix by a scalar and places results into the result matrix.
            </summary>
            <param name="scalar">The scalar to multiply the matrix with.</param>
            <param name="result">The matrix to store the result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Multiplies this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Multiplies this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.DoTransposeAndMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Multiplies this matrix with transpose of another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.DoTransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Multiplies the transpose of this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.DoTransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Multiplies the transpose of this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.DoNegate(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Negate each element of this matrix and place the results into the result matrix.
            </summary>
            <param name="result">The result of the negation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.DoPointwiseMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Pointwise multiplies this matrix with another matrix and stores the result into the result matrix.
            </summary>
            <param name="other">The matrix to pointwise multiply with this one.</param>
            <param name="result">The matrix to store the result of the pointwise multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.DoPointwiseDivide(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Pointwise divide this matrix by another matrix and stores the result into the result matrix.
            </summary>
            <param name="other">The matrix to pointwise divide this one by.</param>
            <param name="result">The matrix to store the result of the pointwise division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.DoModulus(System.Double,MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Computes the modulus for each element of the matrix.
            </summary>
            <param name="divisor">The divisor to use.</param>
            <param name="result">Matrix to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.Trace">
            <summary>
            Computes the trace of this matrix.
            </summary>
            <returns>The trace of this matrix</returns>
            <exception cref="T:System.ArgumentException">If the matrix is not square</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.op_Addition(MathNet.Numerics.LinearAlgebra.Double.DenseMatrix,MathNet.Numerics.LinearAlgebra.Double.DenseMatrix)">
            <summary>
            Adds two matrices together and returns the results.
            </summary>
            <remarks>This operator will allocate new memory for the result. It will
            choose the representation of either <paramref name="leftSide"/> or <paramref name="rightSide"/> depending on which
            is denser.</remarks>
            <param name="leftSide">The left matrix to add.</param>
            <param name="rightSide">The right matrix to add.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> don't have the same dimensions.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.op_UnaryPlus(MathNet.Numerics.LinearAlgebra.Double.DenseMatrix)">
            <summary>
            Returns a <strong>Matrix</strong> containing the same values of <paramref name="rightSide"/>.
            </summary>
            <param name="rightSide">The matrix to get the values from.</param>
            <returns>A matrix containing a the same values as <paramref name="rightSide"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.op_Subtraction(MathNet.Numerics.LinearAlgebra.Double.DenseMatrix,MathNet.Numerics.LinearAlgebra.Double.DenseMatrix)">
            <summary>
            Subtracts two matrices together and returns the results.
            </summary>
            <remarks>This operator will allocate new memory for the result. It will
            choose the representation of either <paramref name="leftSide"/> or <paramref name="rightSide"/> depending on which
            is denser.</remarks>
            <param name="leftSide">The left matrix to subtract.</param>
            <param name="rightSide">The right matrix to subtract.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> don't have the same dimensions.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.op_UnaryNegation(MathNet.Numerics.LinearAlgebra.Double.DenseMatrix)">
            <summary>
            Negates each element of the matrix.
            </summary>
            <param name="rightSide">The matrix to negate.</param>
            <returns>A matrix containing the negated values.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Double.DenseMatrix,System.Double)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.op_Multiply(System.Double,MathNet.Numerics.LinearAlgebra.Double.DenseMatrix)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Double.DenseMatrix,MathNet.Numerics.LinearAlgebra.Double.DenseMatrix)">
            <summary>
            Multiplies two matrices.
            </summary>
            <remarks>This operator will allocate new memory for the result. It will
            choose the representation of either <paramref name="leftSide"/> or <paramref name="rightSide"/> depending on which
            is denser.</remarks>
            <param name="leftSide">The left matrix to multiply.</param>
            <param name="rightSide">The right matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the dimensions of <paramref name="leftSide"/> or <paramref name="rightSide"/> don't conform.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Double.DenseMatrix,MathNet.Numerics.LinearAlgebra.Double.DenseVector)">
            <summary>
            Multiplies a <strong>Matrix</strong> and a Vector.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The vector to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Double.DenseVector,MathNet.Numerics.LinearAlgebra.Double.DenseMatrix)">
            <summary>
            Multiplies a Vector and a <strong>Matrix</strong>.
            </summary>
            <param name="leftSide">The vector to multiply.</param>
            <param name="rightSide">The matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.op_Modulus(MathNet.Numerics.LinearAlgebra.Double.DenseMatrix,System.Double)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.Data">
            <summary>
            Gets the matrix's data.
            </summary>
            <value>The matrix's data.</value>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.Values">
            <summary>
            Gets the matrix's data.
            </summary>
            <value>The matrix's data.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix">
            <summary>
            A matrix type for diagonal matrices.
            </summary>
            <remarks>
            Diagonal matrices can be non-square matrices but the diagonal always starts
            at element 0,0. A diagonal matrix will throw an exception if non diagonal
            entries are set. The exception to this is when the off diagonal elements are
            0.0 or NaN; these settings will cause no change to the diagonal matrix.
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix._data">
            <summary>
            Gets the matrix's data.
            </summary>
            <value>The matrix's data.</value>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.#ctor(MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage{System.Double})">
            <summary>
            Create a new diagonal matrix straight from an initialized matrix storage instance.
            The storage is used directly without copying.
            Intended for advanced scenarios where you're working directly with
            storage for performance or interop reasons.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.#ctor(System.Int32)">
            <summary>
            Create a new square diagonal matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the order is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new diagonal matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the row or column count is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            Create a new diagonal matrix with the given number of rows and columns.
            All diagonal cells of the matrix will be initialized to the provided value, all non-diagonal ones to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the row or column count is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.#ctor(System.Int32,System.Int32,System.Double[])">
            <summary>
            Create a new diagonal matrix with the given number of rows and columns directly binding to a raw array.
            The array is assumed to contain the diagonal elements only and is used directly without copying.
            Very efficient, but changes to the array and the matrix will affect each other.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.OfMatrix(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Create a new diagonal matrix as a copy of the given other matrix.
            This new matrix will be independent from the other matrix.
            The matrix to copy from must be diagonal as well.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.OfArray(System.Double[0:,0:])">
            <summary>
            Create a new diagonal matrix as a copy of the given two-dimensional array.
            This new matrix will be independent from the provided array.
            The array to copy from must be diagonal as well.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.OfIndexedDiagonal(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,System.Double}})">
            <summary>
            Create a new diagonal matrix and initialize each diagonal value from the provided indexed enumerable.
            Keys must be provided at most once, zero is assumed if a key is omitted.
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.OfDiagonal(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Create a new diagonal matrix and initialize each diagonal value from the provided enumerable.
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.Create(System.Int32,System.Int32,System.Func{System.Int32,System.Double})">
            <summary>
            Create a new diagonal matrix and initialize each diagonal value using the provided init function.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.CreateRandom(System.Int32,System.Int32,MathNet.Numerics.Distributions.IContinuousDistribution)">
            <summary>
            Create a new diagonal matrix with diagonal values sampled from the provided random distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.#ctor(System.Double[0:,0:])">
            <summary>
            Create a new diagonal matrix as a copy of the given two-dimensional array.
            This new matrix will be independent from the provided array.
            The array to copy from must be diagonal as well.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.#ctor(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Create a new diagonal matrix as a copy of the given other matrix.
            This new matrix will be independent from the other matrix.
            The matrix to copy from must be diagonal as well.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.CreateMatrix(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a <c>DiagonalMatrix</c> for the given number of rows and columns.
            </summary>
            <param name="numberOfRows">The number of rows.</param>
            <param name="numberOfColumns">The number of columns.</param>
            <param name="fullyMutable">True if all fields must be mutable (e.g. not a diagonal matrix).</param>
            <returns>
            A <c>DiagonalMatrix</c> with the given dimensions.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.CreateVector(System.Int32,System.Boolean)">
            <summary>
            Creates a <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Vector`1"/> with a the given dimension.
            </summary>
            <param name="size">The size of the vector.</param>
            <param name="fullyMutable">True if all fields must be mutable.</param>
            <returns>
            A <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Vector`1"/> with the given dimension.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.Add(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="other">The matrix to add to this matrix.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.DoAdd(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="other">The matrix to add to this matrix.</param>
            <param name="result">The matrix to store the result of the addition.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.Subtract(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="other">The matrix to subtract.</param>
            <returns>The result of the subtraction.</returns>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.DoSubtract(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="other">The matrix to subtract.</param>
            <param name="result">The matrix to store the result of the subtraction.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.SetDiagonal(System.Double[])">
            <summary>
            Copies the values of the given array to the diagonal.
            </summary>
            <param name="source">The array to copy the values from. The length of the vector should be
            Min(Rows, Columns).</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the length of <paramref name="source"/> does not
            equal Min(Rows, Columns).</exception>
            <remarks>For non-square matrices, the elements of <paramref name="source"/> are copied to
            this[i,i].</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.SetDiagonal(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Copies the values of the given <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Vector`1"/> to the diagonal.
            </summary>
            <param name="source">The vector to copy the values from. The length of the vector should be
            Min(Rows, Columns).</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the length of <paramref name="source"/> does not
            equal Min(Rows, Columns).</exception>
            <remarks>For non-square matrices, the elements of <paramref name="source"/> are copied to
            this[i,i].</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.DoMultiply(System.Double,MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Multiplies each element of the matrix by a scalar and places results into the result matrix.
            </summary>
            <param name="scalar">The scalar to multiply the matrix with.</param>
            <param name="result">The matrix to store the result of the multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.Multiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Multiplies this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <strong>this.Columns != other.Rows</strong>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the this.Rows x other.Columns.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.Multiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Multiplies this matrix with another matrix and returns the result.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <exception cref="T:System.ArgumentException">If <strong>this.Columns != other.Rows</strong>.</exception>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <returns>The result of multiplication.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.Multiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Multiplies this matrix with a vector and places the results into the result matrix.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <strong>result.Count != this.RowCount</strong>.</exception>
            <exception cref="T:System.ArgumentException">If <strong>this.ColumnCount != <paramref name="rightSide"/>.Count</strong>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.LeftMultiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Left multiply a matrix with a vector ( = vector * matrix ) and place the result in the result vector.
            </summary>
            <param name="leftSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <strong>result.Count != this.ColumnCount</strong>.</exception>
            <exception cref="T:System.ArgumentException">If <strong>this.RowCount != <paramref name="leftSide"/>.Count</strong>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.Determinant">
            <summary>
            Computes the determinant of this matrix.
            </summary>
            <returns>The determinant of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.Diagonal">
            <summary>
            Returns the elements of the diagonal in a <see cref="T:MathNet.Numerics.LinearAlgebra.Double.DenseVector"/>.
            </summary>
            <returns>The elements of the diagonal.</returns>
            <remarks>For non-square matrices, the method returns Min(Rows, Columns) elements where
            i == j (i is the row index, and j is the column index).</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.TransposeAndMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Multiplies this matrix with transpose of another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <strong>this.Columns != other.Rows</strong>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the this.Rows x other.Columns.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.TransposeAndMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Multiplies this matrix with transpose of another matrix and returns the result.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <exception cref="T:System.ArgumentException">If <strong>this.Columns != other.Rows</strong>.</exception>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <returns>The result of multiplication.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.Transpose">
            <summary>
            Returns the transpose of this matrix.
            </summary>
            <returns>The transpose of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.L1Norm">
            <summary>Calculates the L1 norm.</summary>
            <returns>The L1 norm of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.L2Norm">
            <summary>Calculates the L2 norm.</summary>
            <returns>The L2 norm of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.FrobeniusNorm">
            <summary>Calculates the Frobenius norm of this matrix.</summary>
            <returns>The Frobenius norm of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.InfinityNorm">
            <summary>Calculates the infinity norm of this matrix.</summary>
            <returns>The infinity norm of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.ConditionNumber">
            <summary>Calculates the condition number of this matrix.</summary>
            <returns>The condition number of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.Inverse">
            <summary>Computes the inverse of this matrix.</summary>
            <exception cref="T:System.ArgumentException">If <see cref="T:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix"/> is not a square matrix.</exception>
            <exception cref="T:System.ArgumentException">If <see cref="T:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix"/> is singular.</exception>
            <returns>The inverse of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.LowerTriangle">
            <summary>
            Returns a new matrix containing the lower triangle of this matrix.
            </summary>
            <returns>The lower triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.LowerTriangle(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Puts the lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.StrictlyLowerTriangle">
            <summary>
            Returns a new matrix containing the lower triangle of this matrix. The new matrix
            does not contain the diagonal elements of this matrix.
            </summary>
            <returns>The lower triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.StrictlyLowerTriangle(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Puts the strictly lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.UpperTriangle">
            <summary>
            Returns a new matrix containing the upper triangle of this matrix.
            </summary>
            <returns>The upper triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.UpperTriangle(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Puts the upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.StrictlyUpperTriangle">
            <summary>
            Returns a new matrix containing the upper triangle of this matrix. The new matrix
            does not contain the diagonal elements of this matrix.
            </summary>
            <returns>The upper triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.StrictlyUpperTriangle(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Puts the strictly upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.SubMatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a matrix that contains the values from the requested sub-matrix.
            </summary>
            <param name="rowIndex">The row to start copying from.</param>
            <param name="rowCount">The number of rows to copy. Must be positive.</param>
            <param name="columnIndex">The column to start copying from.</param>
            <param name="columnCount">The number of columns to copy. Must be positive.</param>
            <returns>The requested sub-matrix.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If: <list><item><paramref name="rowIndex"/> is
            negative, or greater than or equal to the number of rows.</item>
            <item><paramref name="columnIndex"/> is negative, or greater than or equal to the number
            of columns.</item>
            <item><c>(columnIndex + columnLength) &gt;= Columns</c></item>
            <item><c>(rowIndex + rowLength) &gt;= Rows</c></item></list></exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="rowCount"/> or <paramref name="columnCount"/>
            is not positive.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.InsertColumn(System.Int32,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Creates a new  <see cref="T:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix"/> and inserts the given column at the given index.
            </summary>
            <param name="columnIndex">The index of where to insert the column.</param>
            <param name="column">The column to insert.</param>
            <returns>A new <see cref="T:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix"/> with the inserted column.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="column "/> is <see langword="null"/>. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="columnIndex"/> is &lt; zero or &gt; the number of columns.</exception>
            <exception cref="T:System.ArgumentException">If the size of <paramref name="column"/> != the number of rows.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.InsertRow(System.Int32,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Creates a new  <see cref="T:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix"/> and inserts the given row at the given index.
            </summary>
            <param name="rowIndex">The index of where to insert the row.</param>
            <param name="row">The row to insert.</param>
            <returns>A new  <see cref="T:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix"/> with the inserted column.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="row"/> is <see langword="null"/>. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="rowIndex"/> is &lt; zero or &gt; the number of rows.</exception>
            <exception cref="T:System.ArgumentException">If the size of <paramref name="row"/> != the number of columns.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.PermuteColumns(MathNet.Numerics.Permutation)">
            <summary>
            Permute the columns of a matrix according to a permutation.
            </summary>
            <param name="p">The column permutation to apply to this matrix.</param>
            <exception cref="T:System.InvalidOperationException">Always thrown</exception>
            <remarks>Permutation in diagonal matrix are senseless, because of matrix nature</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.PermuteRows(MathNet.Numerics.Permutation)">
            <summary>
            Permute the rows of a matrix according to a permutation.
            </summary>
            <param name="p">The row permutation to apply to this matrix.</param>
            <exception cref="T:System.InvalidOperationException">Always thrown</exception>
            <remarks>Permutation in diagonal matrix are senseless, because of matrix nature</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.DoModulus(System.Double,MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Computes the modulus for each element of the matrix.
            </summary>
            <param name="divisor">The divisor to use.</param>
            <param name="result">Matrix to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.Identity(System.Int32)">
            <summary>
            Initializes a square <see cref="T:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix"/> with all zero's except for ones on the diagonal.
            </summary>
            <param name="order">the size of the square matrix.</param>
            <returns>A diagonal identity matrix.</returns>
            <exception cref="T:System.ArgumentException">
            If <paramref name="order"/> is less than one.
            </exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.IsSymmetric">
            <summary>
            Gets a value indicating whether this matrix is symmetric.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.Evd">
            <summary>
            Eigenvalues and eigenvectors of a real matrix.
            </summary>
            <remarks>
            If A is symmetric, then A = V*D*V' where the eigenvalue matrix D is
            diagonal and the eigenvector matrix V is orthogonal.
            I.e. A = V*D*V' and V*VT=I.
            If A is not symmetric, then the eigenvalue matrix D is block diagonal
            with the real eigenvalues in 1-by-1 blocks and any complex eigenvalues,
            lambda + i*mu, in 2-by-2 blocks, [lambda, mu; -mu, lambda].  The
            columns of V represent the eigenvectors in the sense that A*V = V*D,
            i.e. A.Multiply(V) equals V.Multiply(D).  The matrix V may be badly
            conditioned, or even singular, so the validity of the equation
            A = V*D*Inverse(V) depends upon V.Condition().
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Factorization.Evd.Determinant">
            <summary>
            Gets the absolute value of determinant of the square matrix for which the EVD was computed.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Factorization.Evd.Rank">
            <summary>
            Gets the effective numerical matrix rank.
            </summary>
            <value>The number of non-negligible singular values.</value>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Factorization.Evd.IsFullRank">
            <summary>
            Gets a value indicating whether the matrix is full rank or not.
            </summary>
            <value><c>true</c> if the matrix is full rank; otherwise <c>false</c>.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.GramSchmidt">
            <summary>
            <para>A class which encapsulates the functionality of the QR decomposition Modified Gram-Schmidt Orthogonalization.</para>
            <para>Any real square matrix A may be decomposed as A = QR where Q is an orthogonal mxn matrix and R is an nxn upper triangular matrix.</para>
            </summary>
            <remarks>
            The computation of the QR decomposition is done at construction time by modified Gram-Schmidt Orthogonalization.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Factorization.GramSchmidt.Determinant">
            <summary>
            Gets the absolute determinant value of the matrix for which the QR matrix was computed.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Factorization.GramSchmidt.IsFullRank">
            <summary>
            Gets a value indicating whether the matrix is full rank or not.
            </summary>
            <value><c>true</c> if the matrix is full rank; otherwise <c>false</c>.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.QR">
            <summary>
            <para>A class which encapsulates the functionality of the QR decomposition.</para>
            <para>Any real square matrix A (m x n) may be decomposed as A = QR where Q is an orthogonal matrix
            (its columns are orthogonal unit vectors meaning QTQ = I) and R is an upper triangular matrix 
            (also called right triangular matrix).</para>
            </summary>
            <remarks>
            The computation of the QR decomposition is done at construction time by Householder transformation.
            If a <seealso cref="F:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod.Full"/> factorization is performed, the resulting Q matrix is an m x m matrix 
            and the R matrix is an m x n matrix. If a <seealso cref="F:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod.Thin"/> factorization is performed, the 
            resulting Q matrix is an m x n matrix and the R matrix is an n x n matrix.     
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Factorization.QR.Determinant">
            <summary>
            Gets the absolute determinant value of the matrix for which the QR matrix was computed.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Factorization.QR.IsFullRank">
            <summary>
            Gets a value indicating whether the matrix is full rank or not.
            </summary>
            <value><c>true</c> if the matrix is full rank; otherwise <c>false</c>.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.Svd">
            <summary>
            <para>A class which encapsulates the functionality of the singular value decomposition (SVD).</para>
            <para>Suppose M is an m-by-n matrix whose entries are real numbers. 
            Then there exists a factorization of the form M = UΣVT where:
            - U is an m-by-m unitary matrix;
            - Σ is m-by-n diagonal matrix with nonnegative real numbers on the diagonal;
            - VT denotes transpose of V, an n-by-n unitary matrix; 
            Such a factorization is called a singular-value decomposition of M. A common convention is to order the diagonal 
            entries Σ(i,i) in descending order. In this case, the diagonal matrix Σ is uniquely determined 
            by M (though the matrices U and V are not). The diagonal entries of Σ are known as the singular values of M.</para>
            </summary>
            <remarks>
            The computation of the singular value decomposition is done at construction time.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Factorization.Svd.Rank">
            <summary>
            Gets the effective numerical matrix rank.
            </summary>
            <value>The number of non-negligible singular values.</value>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Factorization.Svd.Norm2">
            <summary>
            Gets the two norm of the <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>.
            </summary>
            <returns>The 2-norm of the <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Factorization.Svd.ConditionNumber">
            <summary>
            Gets the condition number <b>max(S) / min(S)</b>
            </summary>
            <returns>The condition number.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Factorization.Svd.Determinant">
            <summary>
            Gets the determinant of the square matrix for which the SVD was computed.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.LU">
            <summary>
            <para>A class which encapsulates the functionality of an LU factorization.</para>
            <para>For a matrix A, the LU factorization is a pair of lower triangular matrix L and
            upper triangular matrix U so that A = L*U.</para>
            <para>In the Math.Net implementation we also store a set of pivot elements for increased 
            numerical stability. The pivot elements encode a permutation matrix P such that P*A = L*U.</para>
            </summary>
            <remarks>
            The computation of the LU factorization is done at construction time.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Factorization.LU.Determinant">
            <summary>
            Gets the determinant of the matrix for which the LU factorization was computed.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterativeSolver">
            <summary>
            Defines the interface for <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterativeSolver"/> classes that solve the matrix equation Ax = b in
            an iterative manner.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterativeSolver.StopSolve">
            <summary>
            Stops the solve process. 
            </summary>
            <remarks>
            Note that it may take an indetermined amount of time for the solver to actually stop the process.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterativeSolver.SetIterator(MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator)">
            <summary>
            Sets the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator"/> that will be used to track the iterative process.
            </summary>
            <param name="iterator">The iterator.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterativeSolver.Solve(MathNet.Numerics.LinearAlgebra.Double.Matrix,MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="vector">The solution vector, <c>b</c>.</param>
            <returns>The result vector, <c>x</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterativeSolver.Solve(MathNet.Numerics.LinearAlgebra.Double.Matrix,MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution vector, <c>b</c></param>
            <param name="result">The result vector, <c>x</c></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterativeSolver.Solve(MathNet.Numerics.LinearAlgebra.Double.Matrix,MathNet.Numerics.LinearAlgebra.Double.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <returns>The result matrix, <c>X</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterativeSolver.Solve(MathNet.Numerics.LinearAlgebra.Double.Matrix,MathNet.Numerics.LinearAlgebra.Double.Matrix,MathNet.Numerics.LinearAlgebra.Double.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <param name="result">The result matrix, <c>X</c></param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterativeSolver.IterationResult">
            <summary>
            Gets the status of the iteration once the calculation is finished.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterativeSolverSetup">
            <summary>
            Defines the interface for objects that can create an iterative solver with
            specific settings. This interface is used to pass iterative solver creation 
            setup information around.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterativeSolverSetup.CreateNew">
            <summary>
            Creates a fully functional iterative solver with the default settings
            given by this setup.
            </summary>
            <returns>A new <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterativeSolver"/>.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterativeSolverSetup.SolverType">
            <summary>
            Gets the type of the solver that will be created by this setup object.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterativeSolverSetup.PreconditionerType">
            <summary>
            Gets type of preconditioner, if any, that will be created by this setup object.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterativeSolverSetup.SolutionSpeed">
            <summary>
            Gets the relative speed of the solver. 
            </summary>
            <value>Returns a value between 0 and 1, inclusive.</value>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterativeSolverSetup.Reliability">
            <summary>
            Gets the relative reliability of the solver.
            </summary>
            <value>Returns a value between 0 and 1 inclusive.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator">
            <summary>
            Defines the base interface for iterators that help control an iterative calculation.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator.Add(MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IIterationStopCriterium)">
            <summary>
            Adds an <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IIterationStopCriterium"/> to the internal collection of stop-criteria. Only a 
            single stop criterium of each type can be stored.
            </summary>
            <param name="stopCriterium">The stop criterium to add.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="stopCriterium"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="stopCriterium"/> is of the same type as an already stored criterium.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator.Remove(MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IIterationStopCriterium)">
            <summary>
            Removes the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IIterationStopCriterium"/> from the internal collection.
            </summary>
            <param name="stopCriterium">The stop criterium that must be removed.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator.Contains(MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IIterationStopCriterium)">
            <summary>
            Indicates if the specific stop criterium is stored by the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator"/>.
            </summary>
            <param name="stopCriterium">The stop criterium.</param>
            <returns><c>true</c> if the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator"/> contains the stop criterium; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator.IterationCancelled">
            <summary>
            Indicates to the iterator that the iterative process has been cancelled.
            </summary>
            <remarks>Does not reset the stop-criteria.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator.DetermineStatus(System.Int32,MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Determines the status of the iterative calculation based on the stop criteria stored
            by the current <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator"/>.  Status is set to <c>Status</c> field of current object.
            </summary>
            <param name="iterationNumber">The number of iterations that have passed so far.</param>
            <param name="solutionVector">The vector containing the current solution values.</param>
            <param name="sourceVector">The right hand side vector.</param>
            <param name="residualVector">The vector containing the current residual vectors.</param>
            <remarks>
            The individual iterators may internally track the progress of the calculation based
            on the invocation of this method. Therefore this method should only be called if the 
            calculation has moved forwards at least one step.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator.ResetToPrecalculationState">
            <summary>
            Resets the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator"/> to the pre-calculation state.
            </summary>
            <remarks>
            Note to implementers: Invoking this method should not clear the user defined
            property values, only the state that is used to track the progress of the 
            calculation.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator.Status">
            <summary>
            Gets the current calculation status.
            </summary>
            <remarks><see langword="null"/> is not a legal value. Status should be set in <see cref="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator.DetermineStatus(System.Int32,MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector)"/> implementation.</remarks>.
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.IPreConditioner">
            <summary>
            The base interface for preconditioner classes.
            </summary>
            <remarks>
            <para>
            Preconditioners are used by iterative solvers to improve the convergence
            speed of the solving process. Increase in convergence speed
            is related to the number of iterations necessary to get a converged solution.
            So while in general the use of a preconditioner means that the iterative 
            solver will perform fewer iterations it does not guarantee that the actual
            solution time decreases given that some preconditioners can be expensive to 
            setup and run.
            </para>
            <para>
            Note that in general changes to the matrix will invalidate the preconditioner
            if the changes occur after creating the preconditioner.
            </para>
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.IPreConditioner.Initialize(MathNet.Numerics.LinearAlgebra.Double.Matrix)">
            <summary>
            Initializes the preconditioner and loads the internal data structures.
            </summary>
            <param name="matrix">The matrix on which the preconditioner is based.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.IPreConditioner.Approximate(MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Mx = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <returns>The left hand side vector.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.IPreConditioner.Approximate(MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Mx = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <param name="lhs">The left hand side vector. Also known as the result vector.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IIterationStopCriterium">
            <summary>
            The base interface for classes that provide stop criteria for iterative calculations. 
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IIterationStopCriterium.DetermineStatus(System.Int32,MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Determines the status of the iterative calculation based on the stop criteria stored
            by the current <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IIterationStopCriterium"/>. Status is set to <c>Status</c> field of current object.
            </summary>
            <param name="iterationNumber">The number of iterations that have passed so far.</param>
            <param name="solutionVector">The vector containing the current solution values.</param>
            <param name="sourceVector">The right hand side vector.</param>
            <param name="residualVector">The vector containing the current residual vectors.</param>
            <remarks>
            The individual stop criteria may internally track the progress of the calculation based
            on the invocation of this method. Therefore this method should only be called if the 
            calculation has moved forwards at least one step.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IIterationStopCriterium.ResetToPrecalculationState">
            <summary>
            Resets the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IIterationStopCriterium"/> to the pre-calculation state.
            </summary>
            <remarks>To implementers: Invoking this method should not clear the user defined
            property values, only the state that is used to track the progress of the 
            calculation.</remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IIterationStopCriterium.Status">
            <summary>
            Gets the current calculation status.
            </summary>
            <remarks><see langword="null"/> is not a legal value. Status should be set in <see cref="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IIterationStopCriterium.DetermineStatus(System.Int32,MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector)"/> implementation.</remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IIterationStopCriterium.StopLevel">
            <summary>
            Gets the <see cref="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IIterationStopCriterium.StopLevel"/> which indicates what sort of stop criterium this
            <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IIterationStopCriterium"/> monitors.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix">
            <summary>
            A Matrix with sparse storage, intended for very large matrices where most of the cells are zero.
            The underlying storage scheme is 3-array compressed-sparse-row (CSR) Format.
            <a href="http://en.wikipedia.org/wiki/Sparse_matrix#Compressed_sparse_row_.28CSR_or_CRS.29">Wikipedia - CSR</a>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.#ctor(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage{System.Double})">
            <summary>
            Create a new sparse matrix straight from an initialized matrix storage instance.
            The storage is used directly without copying.
            Intended for advanced scenarios where you're working directly with
            storage for performance or interop reasons.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.#ctor(System.Int32)">
            <summary>
            Create a new square sparse matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the order is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new sparse matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the row or column count is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.OfMatrix(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Create a new sparse matrix as a copy of the given other matrix.
            This new matrix will be independent from the other matrix.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.OfArray(System.Double[0:,0:])">
            <summary>
            Create a new sparse matrix as a copy of the given two-dimensional array.
            This new matrix will be independent from the provided array.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.OfIndexed(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,System.Int32,System.Double}})">
            <summary>
            Create a new sparse matrix as a copy of the given indexed enumerable.
            Keys must be provided at most once, zero is assumed if a key is omitted.
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.OfRowMajor(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Create a new sparse matrix as a copy of the given enumerable.
            The enumerable is assumed to be in row-major order (row by row).
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the vector.
            </summary>
            <seealso href="http://en.wikipedia.org/wiki/Row-major_order"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.OfColumnMajor(System.Int32,System.Int32,System.Collections.Generic.IList{System.Double})">
            <summary>
            Create a new sparse matrix with the given number of rows and columns as a copy of the given array.
            The array is assumed to be in column-major order (column by column).
            This new matrix will be independent from the provided array.
            A new memory block will be allocated for storing the matrix.
            </summary>
            <seealso href="http://en.wikipedia.org/wiki/Row-major_order"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.OfColumns(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Double}})">
            <summary>
            Create a new sparse matrix as a copy of the given enumerable of enumerable columns.
            Each enumerable in the master enumerable specifies a column.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.OfColumnsCovariant``1(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create a new sparse matrix as a copy of the given enumerable of enumerable columns.
            Each enumerable in the master enumerable specifies a column.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.OfRows(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Double}})">
            <summary>
            Create a new sparse matrix as a copy of the given enumerable of enumerable rows.
            Each enumerable in the master enumerable specifies a row.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.OfRowsCovariant``1(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create a new sparse matrix as a copy of the given enumerable of enumerable rows.
            Each enumerable in the master enumerable specifies a row.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.Create(System.Int32,System.Int32,System.Func{System.Int32,System.Int32,System.Double})">
            <summary>
            Create a new sparse matrix and initialize each value using the provided init function.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            Create a new sparse matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to the provided value.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the row or column count is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.#ctor(System.Int32,System.Int32,System.Double[])">
            <summary>
            Create a new sparse matrix with the given number of rows and columns as a copy of the given array.
            The array is assumed to be in column-major order (column by column).
            This new matrix will be independent from the provided array.
            A new memory block will be allocated for storing the matrix.
            </summary>
            <seealso href="http://en.wikipedia.org/wiki/Row-major_order"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.#ctor(System.Double[0:,0:])">
            <summary>
            Create a new sparse matrix as a copy of the given two-dimensional array.
            This new matrix will be independent from the provided array.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.#ctor(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Create a new sparse matrix as a copy of the given other matrix.
            This new matrix will be independent from the other matrix.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.CreateMatrix(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a <c>SparseMatrix</c> for the given number of rows and columns.
            </summary>
            <param name="numberOfRows">The number of rows.</param>
            <param name="numberOfColumns">The number of columns.</param>
            <param name="fullyMutable">True if all fields must be mutable (e.g. not a diagonal matrix).</param>
            <returns>
            A <c>SparseMatrix</c> with the given dimensions.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.CreateVector(System.Int32,System.Boolean)">
            <summary>
            Creates a <see cref="T:MathNet.Numerics.LinearAlgebra.Double.SparseVector"/> with a the given dimension.
            </summary>
            <param name="size">The size of the vector.</param>
            <param name="fullyMutable">True if all fields must be mutable.</param>
            <returns>
            A <see cref="T:MathNet.Numerics.LinearAlgebra.Double.SparseVector"/> with the given dimension.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.LowerTriangle">
            <summary>
            Returns a new matrix containing the lower triangle of this matrix.
            </summary>
            <returns>The lower triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.LowerTriangle(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Puts the lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.LowerTriangleImpl(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Puts the lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.UpperTriangle">
            <summary>
            Returns a new matrix containing the upper triangle of this matrix.
            </summary>
            <returns>The upper triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.UpperTriangle(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Puts the upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.UpperTriangleImpl(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Puts the upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.StrictlyLowerTriangle">
            <summary>
            Returns a new matrix containing the lower triangle of this matrix. The new matrix
            does not contain the diagonal elements of this matrix.
            </summary>
            <returns>The lower triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.StrictlyLowerTriangle(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Puts the strictly lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.StrictlyLowerTriangleImpl(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Puts the strictly lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.StrictlyUpperTriangle">
            <summary>
            Returns a new matrix containing the upper triangle of this matrix. The new matrix
            does not contain the diagonal elements of this matrix.
            </summary>
            <returns>The upper triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.StrictlyUpperTriangle(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Puts the strictly upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.StrictlyUpperTriangleImpl(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Puts the strictly upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.Transpose">
            <summary>
            Returns the transpose of this matrix.
            </summary>
            <returns>The transpose of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.FrobeniusNorm">
            <summary>Calculates the Frobenius norm of this matrix.</summary>
            <returns>The Frobenius norm of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.InfinityNorm">
            <summary>Calculates the infinity norm of this matrix.</summary>
            <returns>The infinity norm of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.Identity(System.Int32)">
            <summary>
            Initializes a square <see cref="T:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix"/> with all zero's except for ones on the diagonal.
            </summary>
            <param name="order">the size of the square matrix.</param>
            <returns>Identity <c>SparseMatrix</c></returns>
            <exception cref="T:System.ArgumentException">
            If <paramref name="order"/> is less than one.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.DoAdd(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="other">The matrix to add to this matrix.</param>
            <param name="result">The matrix to store the result of the addition.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.DoSubtract(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="other">The matrix to subtract to this matrix.</param>
            <param name="result">The matrix to store the result of subtraction.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.DoMultiply(System.Double,MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Multiplies each element of the matrix by a scalar and places results into the result matrix.
            </summary>
            <param name="scalar">The scalar to multiply the matrix with.</param>
            <param name="result">The matrix to store the result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Multiplies this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Multiplies this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.DoTransposeAndMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Multiplies this matrix with transpose of another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.DoNegate(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Negate each element of this matrix and place the results into the result matrix.
            </summary>
            <param name="result">The result of the negation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.DoPointwiseMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Pointwise multiplies this matrix with another matrix and stores the result into the result matrix.
            </summary>
            <param name="other">The matrix to pointwise multiply with this one.</param>
            <param name="result">The matrix to store the result of the pointwise multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.DoPointwiseDivide(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Pointwise divide this matrix by another matrix and stores the result into the result matrix.
            </summary>
            <param name="other">The matrix to pointwise divide this one by.</param>
            <param name="result">The matrix to store the result of the pointwise division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.DoModulus(System.Double,MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Computes the modulus for each element of the matrix.
            </summary>
            <param name="divisor">The divisor to use.</param>
            <param name="result">Matrix to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.IndexedEnumerator">
            <summary>
            Iterates throw each element in the matrix (row-wise).
            </summary>
            <returns>The value at the current iteration along with its position (row, column, value).</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.CheckIfOppositesAreEqual(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks if opposites in a range are equal.
            </summary>
            <param name="start">The start of the range.</param>
            <param name="end">The end of the range.</param>
            <param name="row">The row the row to check.</param>
            <returns>If the values are equal or not.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.op_Addition(MathNet.Numerics.LinearAlgebra.Double.SparseMatrix,MathNet.Numerics.LinearAlgebra.Double.SparseMatrix)">
            <summary>
            Adds two matrices together and returns the results.
            </summary>
            <remarks>This operator will allocate new memory for the result. It will
            choose the representation of either <paramref name="leftSide"/> or <paramref name="rightSide"/> depending on which
            is denser.</remarks>
            <param name="leftSide">The left matrix to add.</param>
            <param name="rightSide">The right matrix to add.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> don't have the same dimensions.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.op_UnaryPlus(MathNet.Numerics.LinearAlgebra.Double.SparseMatrix)">
            <summary>
            Returns a <strong>Matrix</strong> containing the same values of <paramref name="rightSide"/>.
            </summary>
            <param name="rightSide">The matrix to get the values from.</param>
            <returns>A matrix containing a the same values as <paramref name="rightSide"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.op_Subtraction(MathNet.Numerics.LinearAlgebra.Double.SparseMatrix,MathNet.Numerics.LinearAlgebra.Double.SparseMatrix)">
            <summary>
            Subtracts two matrices together and returns the results.
            </summary>
            <remarks>This operator will allocate new memory for the result. It will
            choose the representation of either <paramref name="leftSide"/> or <paramref name="rightSide"/> depending on which
            is denser.</remarks>
            <param name="leftSide">The left matrix to subtract.</param>
            <param name="rightSide">The right matrix to subtract.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> don't have the same dimensions.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.op_UnaryNegation(MathNet.Numerics.LinearAlgebra.Double.SparseMatrix)">
            <summary>
            Negates each element of the matrix.
            </summary>
            <param name="rightSide">The matrix to negate.</param>
            <returns>A matrix containing the negated values.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Double.SparseMatrix,System.Double)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.op_Multiply(System.Double,MathNet.Numerics.LinearAlgebra.Double.SparseMatrix)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Double.SparseMatrix,MathNet.Numerics.LinearAlgebra.Double.SparseMatrix)">
            <summary>
            Multiplies two matrices.
            </summary>
            <remarks>This operator will allocate new memory for the result. It will
            choose the representation of either <paramref name="leftSide"/> or <paramref name="rightSide"/> depending on which
            is denser.</remarks>
            <param name="leftSide">The left matrix to multiply.</param>
            <param name="rightSide">The right matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the dimensions of <paramref name="leftSide"/> or <paramref name="rightSide"/> don't conform.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Double.SparseMatrix,MathNet.Numerics.LinearAlgebra.Double.SparseVector)">
            <summary>
            Multiplies a <strong>Matrix</strong> and a Vector.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The vector to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Double.SparseVector,MathNet.Numerics.LinearAlgebra.Double.SparseMatrix)">
            <summary>
            Multiplies a Vector and a <strong>Matrix</strong>.
            </summary>
            <param name="leftSide">The vector to multiply.</param>
            <param name="rightSide">The matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.op_Modulus(MathNet.Numerics.LinearAlgebra.Double.SparseMatrix,System.Double)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.NonZerosCount">
            <summary>
            Gets the number of non zero elements in the matrix.
            </summary>
            <value>The number of non zero elements.</value>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.IsSymmetric">
            <summary>
            Gets a value indicating whether this matrix is symmetric.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Vector">
            <summary>
            <c>double</c> version of the <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Vector`1"/> class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.#ctor(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage{System.Double})">
            <summary>
            Initializes a new instance of the Vector class. 
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.DoAdd(System.Double,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Adds a scalar to each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">
            The scalar to add.
            </param>
            <param name="result">
            The vector to store the result of the addition.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.DoAdd(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Adds another vector to this vector and stores the result into the result vector.
            </summary>
            <param name="other">
            The vector to add to this one.
            </param>
            <param name="result">
            The vector to store the result of the addition.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.DoSubtract(System.Double,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Subtracts a scalar from each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">
            The scalar to subtract.
            </param>
            <param name="result">
            The vector to store the result of the subtraction.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.DoSubtract(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Subtracts another vector to this vector and stores the result into the result vector.
            </summary>
            <param name="other">
            The vector to subtract from this one.
            </param>
            <param name="result">
            The vector to store the result of the subtraction.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.DoMultiply(System.Double,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Multiplies a scalar to each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">
            The scalar to multiply.
            </param>
            <param name="result">
            The vector to store the result of the multiplication.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.DoDivide(System.Double,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Divides each element of the vector by a scalar and stores the result in the result vector.
            </summary>
            <param name="scalar">
            The scalar to divide with.
            </param>
            <param name="result">
            The vector to store the result of the division.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.DoDivideByThis(System.Double,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Divides a scalar by each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to divide.</param>
            <param name="result">The vector to store the result of the division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.DoPointwiseMultiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Pointwise multiplies this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to pointwise multiply with this one.</param>
            <param name="result">The vector to store the result of the pointwise multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.DoPointwiseDivide(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Pointwise divide this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to pointwise divide this one by.</param>
            <param name="result">The vector to store the result of the pointwise division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.DoPointwiseModulus(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Pointwise modulus this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to pointwise modulus this one by.</param>
            <param name="result">The result of the modulus.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.DoModulusByThis(System.Double,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Computes the modulus for the given dividend for each element of the vector.
            </summary>
            <param name="scalar">The dividend to use.</param>
            <param name="result">A vector to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.DoDotProduct(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Computes the dot product between this vector and another vector.
            </summary>
            <param name="other">
            The other vector to add.
            </param>
            <returns>s
            The result of the addition.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.DoModulus(System.Double,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Computes the modulus for each element of the vector for the given divisor.
            </summary>
            <param name="divisor">The divisor to use.</param>
            <param name="result">A vector to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.AbsoluteMinimum">
            <summary>
            Returns the value of the absolute minimum element.
            </summary>
            <returns>The value of the absolute minimum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.AbsoluteMinimumIndex">
            <summary>
            Returns the index of the absolute minimum element.
            </summary>
            <returns>The index of absolute minimum element.</returns>   
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.AbsoluteMaximum">
            <summary>
            Returns the value of the absolute maximum element.
            </summary>
            <returns>The value of the absolute maximum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.AbsoluteMaximumIndex">
            <summary>
            Returns the index of the absolute maximum element.
            </summary>
            <returns>The index of absolute maximum element.</returns>   
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.Sum">
            <summary>
            Computes the sum of the vector's elements.
            </summary>
            <returns>The sum of the vector's elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.SumMagnitudes">
            <summary>
            Computes the sum of the absolute value of the vector's elements.
            </summary>
            <returns>The sum of the absolute value of the vector's elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.Norm(System.Double)">
            <summary>
            Computes the p-Norm.
            </summary>
            <param name="p">
            The p value.
            </param>
            <returns>
            <c>Scalar ret = (sum(abs(this[i])^p))^(1/p)</c>
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.DoConjugate(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Conjugates vector and save result to <paramref name="result"/>
            </summary>
            <param name="result">Target vector</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.DoNegate(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Negates vector and saves result to <paramref name="result"/>
            </summary>
            <param name="result">Target vector</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.MaximumIndex">
            <summary>
            Returns the index of the absolute maximum element.
            </summary>
            <returns>The index of absolute maximum element.</returns>          
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.MinimumIndex">
            <summary>
            Returns the index of the minimum element.
            </summary>
            <returns>The index of minimum element.</returns>  
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.Normalize(System.Double)">
            <summary>
            Normalizes this vector to a unit vector with respect to the p-norm.
            </summary>
            <param name="p">
            The p value.
            </param>
            <returns>
            This vector normalized to a unit vector with respect to the p-norm.
            </returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Common">
            <summary>
            A setup functions to help simplify the generic code.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Common.OneOf``1">
            <summary>
            Sets the value of <c>1.0</c> for type T.
            </summary>
            <typeparam name="T">The type to return the value of 1.0 of.</typeparam>
            <returns>The value of <c>1.0</c> for type T.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Common.ZeroOf``1">
            <summary>
            Sets the value of <c>0.0</c> for type T.
            </summary>
            <typeparam name="T">The type to return the value of 0.0 of.</typeparam>
            <returns>The value of <c>0.0</c> for type T.</returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector">
            <summary>
            A vector using dense storage.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector._length">
            <summary>
            Number of elements
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector._values">
            <summary>
            Gets the vector's data.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.#ctor(MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage{MathNet.Numerics.Complex32})">
            <summary>
            Create a new dense vector straight from an initialized vector storage instance.
            The storage is used directly without copying.
            Intended for advanced scenarios where you're working directly with
            storage for performance or interop reasons.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.#ctor(System.Int32)">
            <summary>
            Create a new dense vector with the given length.
            All cells of the vector will be initialized to zero.
            Zero-length vectors are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If length is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.#ctor(MathNet.Numerics.Complex32[])">
            <summary>
            Create a new dense vector directly binding to a raw array.
            The array is used directly without copying.
            Very efficient, but changes to the array and the vector will affect each other.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.OfVector(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Create a new dense vector as a copy of the given other vector.
            This new vector will be independent from the other vector.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.OfEnumerable(System.Collections.Generic.IEnumerable{MathNet.Numerics.Complex32})">
            <summary>
            Create a new dense vector as a copy of the given enumerable.
            This new vector will be independent from the enumerable.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.OfIndexedEnumerable(System.Int32,System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,MathNet.Numerics.Complex32}})">
            <summary>
            Create a new dense vector as a copy of the given indexed enumerable.
            Keys must be provided at most once, zero is assumed if a key is omitted.
            This new vector will be independent from the enumerable.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.Create(System.Int32,System.Func{System.Int32,MathNet.Numerics.Complex32})">
            <summary>
            Create a new dense vector and initialize each value using the provided init function.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.CreateRandom(System.Int32,MathNet.Numerics.Distributions.IContinuousDistribution)">
            <summary>
            Create a new dense vector with values sampled from the provided random distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.#ctor(System.Int32,MathNet.Numerics.Complex32)">
            <summary>
            Create a new dense vector with the given length.
            All cells of the vector will be initialized with the provided value.
            Zero-length vectors are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If length is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.#ctor(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Create a new dense vector as a copy of the given other vector.
            This new vector will be independent from the other vector.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.#ctor(System.Collections.Generic.IEnumerable{MathNet.Numerics.Complex32})">
            <summary>
            Create a new dense vector as a copy of the given enumerable.
            This new vector will be independent from the enumerable.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.op_Explicit(MathNet.Numerics.LinearAlgebra.Complex32.DenseVector)~MathNet.Numerics.Complex32[]">
            <summary>
            Returns a reference to the internal data structure.
            </summary>
            <param name="vector">The <c>DenseVector</c> whose internal data we are
            returning.</param>
            <returns>
            A reference to the internal date of the given vector.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.op_Implicit(MathNet.Numerics.Complex32[])~MathNet.Numerics.LinearAlgebra.Complex32.DenseVector">
            <summary>
            Returns a vector bound directly to a reference of the provided array.
            </summary>
            <param name="array">The array to bind to the <c>DenseVector</c> object.</param>
            <returns>
            A <c>DenseVector</c> whose values are bound to the given array.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.CreateMatrix(System.Int32,System.Int32)">
            <summary>
            Creates a matrix with the given dimensions using the same storage type
            as this vector.
            </summary>
            <param name="rows">
            The number of rows.
            </param>
            <param name="columns">
            The number of columns.
            </param>
            <returns>
            A matrix with the given dimensions.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.CreateVector(System.Int32)">
            <summary>
            Creates a <strong>Vector</strong> of the given size using the same storage type
            as this vector.
            </summary>
            <param name="size">
            The size of the <strong>Vector</strong> to create.
            </param>
            <returns>
            The new <c>Vector</c>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.DoAdd(MathNet.Numerics.Complex32,MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Adds a scalar to each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to add.</param>
            <param name="result">The vector to store the result of the addition.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.DoAdd(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Adds another vector to this vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to add to this one.</param>
            <param name="result">The vector to store the result of the addition.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.op_Addition(MathNet.Numerics.LinearAlgebra.Complex32.DenseVector,MathNet.Numerics.LinearAlgebra.Complex32.DenseVector)">
            <summary>
            Adds two <strong>Vectors</strong> together and returns the results.
            </summary>
            <param name="leftSide">One of the vectors to add.</param>
            <param name="rightSide">The other vector to add.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.DoSubtract(MathNet.Numerics.Complex32,MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Subtracts a scalar from each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to subtract.</param>
            <param name="result">The vector to store the result of the subtraction.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.DoSubtract(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Subtracts another vector from this vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to subtract from this one.</param>
            <param name="result">The vector to store the result of the subtraction.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.op_UnaryNegation(MathNet.Numerics.LinearAlgebra.Complex32.DenseVector)">
            <summary>
            Returns a <strong>Vector</strong> containing the negated values of <paramref name="rightSide"/>.
            </summary>
            <param name="rightSide">The vector to get the values from.</param>
            <returns>A vector containing the negated values as <paramref name="rightSide"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.op_Subtraction(MathNet.Numerics.LinearAlgebra.Complex32.DenseVector,MathNet.Numerics.LinearAlgebra.Complex32.DenseVector)">
            <summary>
            Subtracts two <strong>Vectors</strong> and returns the results.
            </summary>
            <param name="leftSide">The vector to subtract from.</param>
            <param name="rightSide">The vector to subtract.</param>
            <returns>The result of the subtraction.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.DoNegate(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Negates vector and saves result to <paramref name="result"/>
            </summary>
            <param name="result">Target vector</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.DoMultiply(MathNet.Numerics.Complex32,MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Multiplies a scalar to each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to multiply.</param>
            <param name="result">The vector to store the result of the multiplication.</param>
            <remarks></remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.DoDotProduct(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Computes the dot product between this vector and another vector.
            </summary>
            <param name="other">The other vector to add.</param>
            <returns>s
            The result of the addition.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.op_Multiply(MathNet.Numerics.LinearAlgebra.Complex32.DenseVector,MathNet.Numerics.Complex32)">
            <summary>
            Multiplies a vector with a complex.
            </summary>
            <param name="leftSide">The vector to scale.</param>
            <param name="rightSide">The Complex32 value.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.op_Multiply(MathNet.Numerics.Complex32,MathNet.Numerics.LinearAlgebra.Complex32.DenseVector)">
            <summary>
            Multiplies a vector with a complex.
            </summary>
            <param name="leftSide">The Complex32 value.</param>
            <param name="rightSide">The vector to scale.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.op_Multiply(MathNet.Numerics.LinearAlgebra.Complex32.DenseVector,MathNet.Numerics.LinearAlgebra.Complex32.DenseVector)">
            <summary>
            Computes the dot product between two <strong>Vectors</strong>.
            </summary>
            <param name="leftSide">The left row vector.</param>
            <param name="rightSide">The right column vector.</param>
            <returns>The dot product between the two vectors.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.op_Division(MathNet.Numerics.LinearAlgebra.Complex32.DenseVector,MathNet.Numerics.Complex32)">
            <summary>
            Divides a vector with a complex.
            </summary>
            <param name="leftSide">The vector to divide.</param>
            <param name="rightSide">The Complex32 value.</param>
            <returns>The result of the division.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.AbsoluteMinimumIndex">
            <summary>
            Returns the index of the absolute minimum element.
            </summary>
            <returns>The index of absolute minimum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.AbsoluteMinimum">
            <summary>
            Returns the value of the absolute minimum element.
            </summary>
            <returns>The value of the absolute minimum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.AbsoluteMaximum">
            <summary>
            Returns the value of the absolute maximum element.
            </summary>
            <returns>The value of the absolute maximum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.AbsoluteMaximumIndex">
            <summary>
            Returns the index of the absolute maximum element.
            </summary>
            <returns>The index of absolute maximum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.Sum">
            <summary>
            Computes the sum of the vector's elements.
            </summary>
            <returns>The sum of the vector's elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.SumMagnitudes">
            <summary>
            Computes the sum of the absolute value of the vector's elements.
            </summary>
            <returns>The sum of the absolute value of the vector's elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.DoPointwiseMultiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Pointwise divide this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to pointwise divide this one by.</param>
            <param name="result">The vector to store the result of the pointwise division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.DoPointwiseDivide(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Pointwise divide this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to pointwise divide this one by.</param>
            <param name="result">The vector to store the result of the pointwise division.</param>
            <remarks></remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.OuterProduct(MathNet.Numerics.LinearAlgebra.Complex32.DenseVector,MathNet.Numerics.LinearAlgebra.Complex32.DenseVector)">
            <summary>
            Outer product of two vectors
            </summary>
            <param name="u">First vector</param>
            <param name="v">Second vector</param>
            <returns>Matrix M[i,j] = u[i]*v[j] </returns>
            <exception cref="T:System.ArgumentNullException">If the u vector is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the v vector is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.OuterProduct(MathNet.Numerics.LinearAlgebra.Complex32.DenseVector)">
            <summary>
            Outer product of this and another vector.
            </summary>
            <param name="v">The vector to operate on.</param>
            <returns>
            Matrix M[i,j] = this[i] * v[j].
            </returns>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.OuterProduct(MathNet.Numerics.LinearAlgebra.Complex32.DenseVector,MathNet.Numerics.LinearAlgebra.Complex32.DenseVector)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.Norm(System.Double)">
            <summary>
            Computes the p-Norm.
            </summary>
            <param name="p">The p value.</param>
            <returns>Scalar <c>ret = (sum(abs(this[i])^p))^(1/p)</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.Parse(System.String)">
            <summary>
            Creates a Complex32 dense vector based on a string. The string can be in the following formats (without the
            quotes): 'n', 'n;n;..', '(n;n;..)', '[n;n;...]', where n is a Complex32.
            </summary>
            <returns>
            A Complex32 dense vector containing the values specified by the given string.
            </returns>
            <param name="value">
            The string to parse.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates a Complex32 dense vector based on a string. The string can be in the following formats (without the
            quotes): 'n', 'n;n;..', '(n;n;..)', '[n;n;...]', where n is a double.
            </summary>
            <returns>
            A Complex32 dense vector containing the values specified by the given string.
            </returns>
            <param name="value">
            the string to parse.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.TryParse(System.String,MathNet.Numerics.LinearAlgebra.Complex32.DenseVector@)">
            <summary>
            Converts the string representation of a complex dense vector to double-precision dense vector equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing a complex vector to convert.
            </param>
            <param name="result">
            The parsed value.
            </param>
            <returns>
            If the conversion succeeds, the result will contain a complex number equivalent to value.
            Otherwise the result will be <c>null</c>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.TryParse(System.String,System.IFormatProvider,MathNet.Numerics.LinearAlgebra.Complex32.DenseVector@)">
            <summary>
            Converts the string representation of a complex dense vector to double-precision dense vector equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing a complex vector to convert.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about value.
            </param>
            <param name="result">
            The parsed value.
            </param>
            <returns>
            If the conversion succeeds, the result will contain a complex number equivalent to value.
            Otherwise the result will be <c>null</c>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.DoConjugate(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Conjugates vector and save result to <paramref name="result"/>
            </summary>
            <param name="result">Target vector</param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.DenseVector.Values">
            <summary>
            Gets the vector's data.
            </summary>
            <value>The vector's data.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.DenseGramSchmidt">
            <summary>
            <para>A class which encapsulates the functionality of the QR decomposition Modified Gram-Schmidt Orthogonalization.</para>
            <para>Any complex square matrix A may be decomposed as A = QR where Q is an unitary mxn matrix and R is an nxn upper triangular matrix.</para>
            </summary>
            <remarks>
            The computation of the QR decomposition is done at construction time by modified Gram-Schmidt Orthogonalization.
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.DenseGramSchmidt._provider">
            <summary>
            used for QR solve
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.DenseGramSchmidt.#ctor(MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.DenseGramSchmidt"/> class. This object creates an unitary matrix 
            using the modified Gram-Schmidt method.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> row count is less then column count</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is rank deficient</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.DenseGramSchmidt.Factorize(MathNet.Numerics.Complex32[],System.Int32,System.Int32,MathNet.Numerics.Complex32[])">
            <summary>
            Factorize matrix using the modified Gram-Schmidt method.
            </summary>
            <param name="q">Initial matrix. On exit is replaced by <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/> Q.</param>
            <param name="rowsQ">Number of rows in <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/> Q.</param>
            <param name="columnsQ">Number of columns in <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/> Q.</param>
            <param name="r">On exit is filled by <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/> R.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.DenseGramSchmidt.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.DenseGramSchmidt.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.DenseEvd">
            <summary>
            Eigenvalues and eigenvectors of a complex matrix.
            </summary>
            <remarks>
            If A is hermitan, then A = V*D*V' where the eigenvalue matrix D is
            diagonal and the eigenvector matrix V is hermitan.
            I.e. A = V*D*V' and V*VH=I.
            If A is not symmetric, then the eigenvalue matrix D is block diagonal
            with the real eigenvalues in 1-by-1 blocks and any complex eigenvalues,
            lambda + i*mu, in 2-by-2 blocks, [lambda, mu; -mu, lambda].  The
            columns of V represent the eigenvectors in the sense that A*V = V*D,
            i.e. A.Multiply(V) equals V.Multiply(D).  The matrix V may be badly
            conditioned, or even singular, so the validity of the equation
            A = V*D*Inverse(V) depends upon V.Condition().
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.DenseEvd.#ctor(MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.DenseEvd"/> class. This object will compute the
            the eigenvalue decomposition when the constructor is called and cache it's decomposition.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If EVD algorithm failed to converge with matrix <paramref name="matrix"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.DenseEvd.SymmetricTridiagonalize(MathNet.Numerics.Complex32[],System.Single[],System.Single[],MathNet.Numerics.Complex32[],System.Int32)">
            <summary>
            Reduces a complex hermitian matrix to a real symmetric tridiagonal matrix using unitary similarity transformations.
            </summary>
            <param name="matrixA">Source matrix to reduce</param>
            <param name="d">Output: Arrays for internal storage of real parts of eigenvalues</param>
            <param name="e">Output: Arrays for internal storage of imaginary parts of eigenvalues</param>
            <param name="tau">Output: Arrays that contains further information about the transformations.</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedures HTRIDI by 
            Smith, Boyle, Dongarra, Garbow, Ikebe, Klema, Moler, and Wilkinson, Handbook for 
            Auto. Comp., Vol.ii-Linear Algebra, and the corresponding 
            Fortran subroutine in EISPACK.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.DenseEvd.SymmetricDiagonalize(MathNet.Numerics.Complex32[],System.Single[],System.Single[],System.Int32)">
            <summary>
            Symmetric tridiagonal QL algorithm.
            </summary>
            <param name="dataEv">Data array of matrix V (eigenvectors)</param>
            <param name="d">Arrays for internal storage of real parts of eigenvalues</param>
            <param name="e">Arrays for internal storage of imaginary parts of eigenvalues</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedures tql2, by
            Bowdler, Martin, Reinsch, and Wilkinson, Handbook for
            Auto. Comp., Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutine in EISPACK.</remarks>
            <exception cref="T:MathNet.Numerics.NonConvergenceException"></exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.DenseEvd.SymmetricUntridiagonalize(MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[],System.Int32)">
            <summary>
            Determines eigenvectors by undoing the symmetric tridiagonalize transformation
            </summary>
            <param name="dataEv">Data array of matrix V (eigenvectors)</param>
            <param name="matrixA">Previously tridiagonalized matrix by <see cref="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.DenseEvd.SymmetricTridiagonalize(MathNet.Numerics.Complex32[],System.Single[],System.Single[],MathNet.Numerics.Complex32[],System.Int32)"/>.</param>
            <param name="tau">Contains further information about the transformations</param>
            <param name="order">Input matrix order</param>
            <remarks>This is derived from the Algol procedures HTRIBK, by
            by Smith, Boyle, Dongarra, Garbow, Ikebe, Klema, Moler, and Wilkinson, Handbook for
            Auto. Comp., Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutine in EISPACK.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.DenseEvd.NonsymmetricReduceToHessenberg(MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[],System.Int32)">
            <summary>
            Nonsymmetric reduction to Hessenberg form.
            </summary>
            <param name="dataEv">Data array of matrix V (eigenvectors)</param>
            <param name="matrixH">Array for internal storage of nonsymmetric Hessenberg form.</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedures orthes and ortran,
            by Martin and Wilkinson, Handbook for Auto. Comp.,
            Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutines in EISPACK.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.DenseEvd.NonsymmetricReduceHessenberToRealSchur(MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[],System.Int32)">
            <summary>
            Nonsymmetric reduction from Hessenberg to real Schur form.
            </summary>
            <param name="vectorV">Data array of the eigenvectors</param>
            <param name="dataEv">Data array of matrix V (eigenvectors)</param>
            <param name="matrixH">Array for internal storage of nonsymmetric Hessenberg form.</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedure hqr2,
            by Martin and Wilkinson, Handbook for Auto. Comp.,
            Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutine in EISPACK.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.DenseEvd.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.DenseEvd.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A EVD factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.DenseCholesky">
            <summary>
            <para>A class which encapsulates the functionality of a Cholesky factorization for dense matrices.</para>
            <para>For a symmetric, positive definite matrix A, the Cholesky factorization
            is an lower triangular matrix L so that A = L*L'.</para>
            </summary>
            <remarks>
            The computation of the Cholesky factorization is done at construction time. If the matrix is not symmetric
            or positive definite, the constructor will throw an exception.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.DenseCholesky.#ctor(MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.DenseCholesky"/> class. This object will compute the
            Cholesky factorization when the constructor is called and cache it's factorization.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not positive definite.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.DenseCholesky.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A Cholesky factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.DenseCholesky.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A Cholesky factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.DenseLU">
            <summary>
            <para>A class which encapsulates the functionality of an LU factorization.</para>
            <para>For a matrix A, the LU factorization is a pair of lower triangular matrix L and
            upper triangular matrix U so that A = L*U.</para>
            </summary>
            <remarks>
            The computation of the LU factorization is done at construction time.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.DenseLU.#ctor(MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.DenseLU"/> class. This object will compute the
            LU factorization when the constructor is called and cache it's factorization.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.DenseLU.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Solves a system of linear equations, <c>AX = B</c>, with A LU factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <c>B</c>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <c>X</c>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.DenseLU.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Solves a system of linear equations, <c>Ax = b</c>, with A LU factorized.
            </summary>
            <param name="input">The right hand side vector, <c>b</c>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <c>x</c>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.DenseLU.Inverse">
            <summary>
            Returns the inverse of this matrix. The inverse is calculated using LU decomposition.
            </summary>
            <returns>The inverse of this matrix.</returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.DenseQR">
            <summary>
            <para>A class which encapsulates the functionality of the QR decomposition.</para>
            <para>Any real square matrix A may be decomposed as A = QR where Q is an orthogonal matrix 
            (its columns are orthogonal unit vectors meaning QTQ = I) and R is an upper triangular matrix 
            (also called right triangular matrix).</para>
            </summary>
            <remarks>
            The computation of the QR decomposition is done at construction time by Householder transformation.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.DenseQR.#ctor(MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix,MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.DenseQR"/> class. This object will compute the
            QR factorization when the constructor is called and cache it's factorization.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <param name="method">The QR factorization method to use.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> row count is less then column count</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.DenseQR.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.DenseQR.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.DenseQR.Tau">
            <summary>
             Gets or sets Tau vector. Contains additional information on Q - used for native solver.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.DenseSvd">
            <summary>
            <para>A class which encapsulates the functionality of the singular value decomposition (SVD) for <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix"/>.</para>
            <para>Suppose M is an m-by-n matrix whose entries are real numbers. 
            Then there exists a factorization of the form M = UΣVT where:
            - U is an m-by-m unitary matrix;
            - Σ is m-by-n diagonal matrix with nonnegative real numbers on the diagonal;
            - VT denotes transpose of V, an n-by-n unitary matrix; 
            Such a factorization is called a singular-value decomposition of M. A common convention is to order the diagonal 
            entries Σ(i,i) in descending order. In this case, the diagonal matrix Σ is uniquely determined 
            by M (though the matrices U and V are not). The diagonal entries of Σ are known as the singular values of M.</para>
            </summary>
            <remarks>
            The computation of the singular value decomposition is done at construction time.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.DenseSvd.#ctor(MathNet.Numerics.LinearAlgebra.Complex32.DenseMatrix,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.DenseSvd"/> class. This object will compute the
            the singular value decomposition when the constructor is called and cache it's decomposition.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <param name="computeVectors">Compute the singular U and VT vectors or not.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If SVD algorithm failed to converge with matrix <paramref name="matrix"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.DenseSvd.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.DenseSvd.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserGramSchmidt">
            <summary>
            <para>A class which encapsulates the functionality of the QR decomposition Modified Gram-Schmidt Orthogonalization.</para>
            <para>Any complex square matrix A may be decomposed as A = QR where Q is an unitary mxn matrix and R is an nxn upper triangular matrix.</para>
            </summary>
            <remarks>
            The computation of the QR decomposition is done at construction time by modified Gram-Schmidt Orthogonalization.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserGramSchmidt.#ctor(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserGramSchmidt"/> class. This object creates an unitary matrix 
            using the modified Gram-Schmidt method.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> row count is less then column count</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is rank deficient</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserGramSchmidt.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserGramSchmidt.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserCholesky">
            <summary>
            <para>A class which encapsulates the functionality of a Cholesky factorization for user matrices.</para>
            <para>For a symmetric, positive definite matrix A, the Cholesky factorization
            is an lower triangular matrix L so that A = L*L'.</para>
            </summary>
            <remarks>
            The computation of the Cholesky factorization is done at construction time. If the matrix is not symmetric
            or positive definite, the constructor will throw an exception.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserCholesky.#ctor(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserCholesky"/> class. This object will compute the
            Cholesky factorization when the constructor is called and cache it's factorization.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not positive definite.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserCholesky.DoCholeskyStep(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},System.Int32,System.Int32,System.Int32,MathNet.Numerics.Complex32[],System.Int32)">
            <summary>
            Calculate Cholesky step
            </summary>
            <param name="data">Factor matrix</param>
            <param name="rowDim">Number of rows</param>
            <param name="firstCol">Column start</param>
            <param name="colLimit">Total columns</param>
            <param name="multipliers">Multipliers calculated previously</param>
            <param name="availableCores">Number of available processors</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserCholesky.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A Cholesky factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserCholesky.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A Cholesky factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserEvd">
            <summary>
            Eigenvalues and eigenvectors of a complex matrix.
            </summary>
            <remarks>
            If A is hermitan, then A = V*D*V' where the eigenvalue matrix D is
            diagonal and the eigenvector matrix V is hermitan.
            I.e. A = V*D*V' and V*VH=I.
            If A is not symmetric, then the eigenvalue matrix D is block diagonal
            with the real eigenvalues in 1-by-1 blocks and any complex eigenvalues,
            lambda + i*mu, in 2-by-2 blocks, [lambda, mu; -mu, lambda].  The
            columns of V represent the eigenvectors in the sense that A*V = V*D,
            i.e. A.Multiply(V) equals V.Multiply(D).  The matrix V may be badly
            conditioned, or even singular, so the validity of the equation
            A = V*D*Inverse(V) depends upon V.Condition().
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserEvd.#ctor(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserEvd"/> class. This object will compute the
            the eigenvalue decomposition when the constructor is called and cache it's decomposition.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If EVD algorithm failed to converge with matrix <paramref name="matrix"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserEvd.SymmetricTridiagonalize(MathNet.Numerics.Complex32[0:,0:],System.Single[],System.Single[],MathNet.Numerics.Complex32[],System.Int32)">
            <summary>
            Reduces a complex hermitian matrix to a real symmetric tridiagonal matrix using unitary similarity transformations.
            </summary>
            <param name="matrixA">Source matrix to reduce</param>
            <param name="d">Output: Arrays for internal storage of real parts of eigenvalues</param>
            <param name="e">Output: Arrays for internal storage of imaginary parts of eigenvalues</param>
            <param name="tau">Output: Arrays that contains further information about the transformations.</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedures HTRIDI by 
            Smith, Boyle, Dongarra, Garbow, Ikebe, Klema, Moler, and Wilkinson, Handbook for 
            Auto. Comp., Vol.ii-Linear Algebra, and the corresponding 
            Fortran subroutine in EISPACK.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserEvd.SymmetricDiagonalize(System.Single[],System.Single[],System.Int32)">
            <summary>
            Symmetric tridiagonal QL algorithm.
            </summary>
            <param name="d">Arrays for internal storage of real parts of eigenvalues</param>
            <param name="e">Arrays for internal storage of imaginary parts of eigenvalues</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedures tql2, by
            Bowdler, Martin, Reinsch, and Wilkinson, Handbook for
            Auto. Comp., Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutine in EISPACK.</remarks>
            <exception cref="T:MathNet.Numerics.NonConvergenceException"></exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserEvd.SymmetricUntridiagonalize(MathNet.Numerics.Complex32[0:,0:],MathNet.Numerics.Complex32[],System.Int32)">
            <summary>
            Determines eigenvectors by undoing the symmetric tridiagonalize transformation
            </summary>
            <param name="matrixA">Previously tridiagonalized matrix by <see cref="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserEvd.SymmetricTridiagonalize(MathNet.Numerics.Complex32[0:,0:],System.Single[],System.Single[],MathNet.Numerics.Complex32[],System.Int32)"/>.</param>
            <param name="tau">Contains further information about the transformations</param>
            <param name="order">Input matrix order</param>
            <remarks>This is derived from the Algol procedures HTRIBK, by
            by Smith, Boyle, Dongarra, Garbow, Ikebe, Klema, Moler, and Wilkinson, Handbook for
            Auto. Comp., Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutine in EISPACK.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserEvd.NonsymmetricReduceToHessenberg(MathNet.Numerics.Complex32[0:,0:],System.Int32)">
            <summary>
            Nonsymmetric reduction to Hessenberg form.
            </summary>
            <param name="matrixH">Array for internal storage of nonsymmetric Hessenberg form.</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedures orthes and ortran,
            by Martin and Wilkinson, Handbook for Auto. Comp.,
            Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutines in EISPACK.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserEvd.NonsymmetricReduceHessenberToRealSchur(MathNet.Numerics.Complex32[0:,0:],System.Int32)">
            <summary>
            Nonsymmetric reduction from Hessenberg to real Schur form.
            </summary>
            <param name="matrixH">Array for internal storage of nonsymmetric Hessenberg form.</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedure hqr2,
            by Martin and Wilkinson, Handbook for Auto. Comp.,
            Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutine in EISPACK.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserEvd.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserEvd.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A EVD factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserLU">
            <summary>
            <para>A class which encapsulates the functionality of an LU factorization.</para>
            <para>For a matrix A, the LU factorization is a pair of lower triangular matrix L and
            upper triangular matrix U so that A = L*U.</para>
            </summary>
            <remarks>
            The computation of the LU factorization is done at construction time.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserLU.#ctor(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserLU"/> class. This object will compute the
            LU factorization when the constructor is called and cache it's factorization.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserLU.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Solves a system of linear equations, <c>AX = B</c>, with A LU factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <c>B</c>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <c>X</c>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserLU.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Solves a system of linear equations, <c>Ax = b</c>, with A LU factorized.
            </summary>
            <param name="input">The right hand side vector, <c>b</c>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <c>x</c>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserLU.Inverse">
            <summary>
            Returns the inverse of this matrix. The inverse is calculated using LU decomposition.
            </summary>
            <returns>The inverse of this matrix.</returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserQR">
            <summary>
            <para>A class which encapsulates the functionality of the QR decomposition.</para>
            <para>Any real square matrix A may be decomposed as A = QR where Q is an orthogonal matrix 
            (its columns are orthogonal unit vectors meaning QTQ = I) and R is an upper triangular matrix 
            (also called right triangular matrix).</para>
            </summary>
            <remarks>
            The computation of the QR decomposition is done at construction time by Householder transformation.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserQR.#ctor(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserQR"/> class. This object will compute the
            QR factorization when the constructor is called and cache it's factorization.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <param name="method">The QR factorization method to use.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserQR.GenerateColumn(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},System.Int32,System.Int32)">
            <summary>
            Generate column from initial matrix to work array
            </summary>
            <param name="a">Initial matrix</param>
            <param name="row">The first row</param>
            <param name="column">Column index</param>
            <returns>Generated vector</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserQR.ComputeQR(MathNet.Numerics.Complex32[],MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Perform calculation of Q or R
            </summary>
            <param name="u">Work array</param>
            <param name="a">Q or R matrices</param>
            <param name="rowStart">The first row</param>
            <param name="rowDim">The last row</param>
            <param name="columnStart">The first column</param>
            <param name="columnDim">The last column</param>
            <param name="availableCores">Number of available CPUs</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserQR.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserQR.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserSvd">
            <summary>
            <para>A class which encapsulates the functionality of the singular value decomposition (SVD) for <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>.</para>
            <para>Suppose M is an m-by-n matrix whose entries are real numbers. 
            Then there exists a factorization of the form M = UΣVT where:
            - U is an m-by-m unitary matrix;
            - Σ is m-by-n diagonal matrix with nonnegative real numbers on the diagonal;
            - VT denotes transpose of V, an n-by-n unitary matrix; 
            Such a factorization is called a singular-value decomposition of M. A common convention is to order the diagonal 
            entries Σ(i,i) in descending order. In this case, the diagonal matrix Σ is uniquely determined 
            by M (though the matrices U and V are not). The diagonal entries of Σ are known as the singular values of M.</para>
            </summary>
            <remarks>
            The computation of the singular value decomposition is done at construction time.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserSvd.#ctor(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserSvd"/> class. This object will compute the
            the singular value decomposition when the constructor is called and cache it's decomposition.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <param name="computeVectors">Compute the singular U and VT vectors or not.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:MathNet.Numerics.NonConvergenceException"></exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserSvd.Csign(MathNet.Numerics.Complex32,MathNet.Numerics.Complex32)">
            <summary>
            Calculates absolute value of <paramref name="z1"/> multiplied on signum function of <paramref name="z2"/>
            </summary>
            <param name="z1">Complex32 value z1</param>
            <param name="z2">Complex32 value z2</param>
            <returns>Result multiplication of signum function and absolute value</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserSvd.Swap(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},System.Int32,System.Int32,System.Int32)">
            <summary>
            Interchanges two vectors  <paramref name="columnA"/>  and  <paramref name="columnB"/>
            </summary>
            <param name="a">Source matrix</param>
            <param name="rowCount">The number of rows in <paramref name="a"/></param>
            <param name="columnA">Column A index to swap</param>
            <param name="columnB">Column B index to swap</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserSvd.CscalColumn(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},System.Int32,System.Int32,System.Int32,MathNet.Numerics.Complex32)">
            <summary>
            Scale column <paramref name="column"/> by <paramref name="z"/> starting from row <paramref name="rowStart"/>
            </summary>
            <param name="a">Source matrix</param>
            <param name="rowCount">The number of rows in <paramref name="a"/> </param>
            <param name="column">Column to scale</param>
            <param name="rowStart">Row to scale from</param>
            <param name="z">Scale value</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserSvd.CscalVector(MathNet.Numerics.Complex32[],System.Int32,MathNet.Numerics.Complex32)">
            <summary>
            Scale vector <paramref name="a"/> by <paramref name="z"/> starting from index <paramref name="start"/>
            </summary>
            <param name="a">Source vector</param>
            <param name="start">Row to scale from</param>
            <param name="z">Scale value</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserSvd.Srotg(System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Given the Cartesian coordinates (da, db) of a point p, these fucntion return the parameters da, db, c, and s 
            associated with the Givens rotation that zeros the y-coordinate of the point.
            </summary>
            <param name="da">Provides the x-coordinate of the point p. On exit contains the parameter r associated with the Givens rotation</param>
            <param name="db">Provides the y-coordinate of the point p. On exit contains the parameter z associated with the Givens rotation</param>
            <param name="c">Contains the parameter c associated with the Givens rotation</param>
            <param name="s">Contains the parameter s associated with the Givens rotation</param>
            <remarks>This is equivalent to the DROTG LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserSvd.Cnrm2Column(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculate Norm 2 of the column <paramref name="column"/> in matrix <paramref name="a"/> starting from row <paramref name="rowStart"/>
            </summary>
            <param name="a">Source matrix</param>
            <param name="rowCount">The number of rows in <paramref name="a"/></param>
            <param name="column">Column index</param>
            <param name="rowStart">Start row index</param>
            <returns>Norm2 (Euclidean norm) of the column</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserSvd.Cnrm2Vector(MathNet.Numerics.Complex32[],System.Int32)">
            <summary>
            Calculate Norm 2 of the vector <paramref name="a"/> starting from index <paramref name="rowStart"/>
            </summary>
            <param name="a">Source vector</param>
            <param name="rowStart">Start index</param>
            <returns>Norm2 (Euclidean norm) of the vector</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserSvd.Cdotc(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculate dot product of <paramref name="columnA"/> and <paramref name="columnB"/> conjugating the first vector.
            </summary>
            <param name="a">Source matrix</param>
            <param name="rowCount">The number of rows in <paramref name="a"/></param>
            <param name="columnA">Index of column A</param>
            <param name="columnB">Index of column B</param>
            <param name="rowStart">Starting row index</param>
            <returns>Dot product value</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserSvd.Csrot(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Performs rotation of points in the plane. Given two vectors x <paramref name="columnA"/> and y <paramref name="columnB"/>, 
            each vector element of these vectors is replaced as follows: x(i) = c*x(i) + s*y(i); y(i) = c*y(i) - s*x(i)
            </summary>
            <param name="a">Source matrix</param>
            <param name="rowCount">The number of rows in <paramref name="a"/></param>
            <param name="columnA">Index of column A</param>
            <param name="columnB">Index of column B</param>
            <param name="c">scalar cos value</param>
            <param name="s">scalar sin value</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserSvd.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Matrix{MathNet.Numerics.Complex32})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Factorization.UserSvd.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.BiCgStab">
            <summary>
            A Bi-Conjugate Gradient stabilized iterative matrix solver.
            </summary>
            <remarks>
            <para>
            The Bi-Conjugate Gradient Stabilized (BiCGStab) solver is an 'improvement'
            of the standard Conjugate Gradient (CG) solver. Unlike the CG solver the
            BiCGStab can be used on non-symmetric matrices. <br/>
            Note that much of the success of the solver depends on the selection of the
            proper preconditioner.
            </para>
            <para>
            The Bi-CGSTAB algorithm was taken from: <br/>
            Templates for the solution of linear systems: Building blocks
            for iterative methods
            <br/>
            Richard Barrett, Michael Berry, Tony F. Chan, James Demmel,
            June M. Donato, Jack Dongarra, Victor Eijkhout, Roldan Pozo,
            Charles Romine and Henk van der Vorst
            <br/>
            Url: <a href="http://www.netlib.org/templates/Templates.html">http://www.netlib.org/templates/Templates.html</a>
            <br/>
            Algorithm is described in Chapter 2, section 2.3.8, page 27
            </para>
            <para>
            The example code below provides an indication of the possible use of the
            solver.
            </para>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.BiCgStab.DefaultStatus">
            <summary>
            The status used if there is no status, i.e. the solver hasn't run yet and there is no
            iterator.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.BiCgStab._preconditioner">
            <summary>
            The preconditioner that will be used. Can be set to <see langword="null" />, in which case the default
            pre-conditioner will be used.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.BiCgStab._iterator">
            <summary>
            The iterative process controller.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.BiCgStab._hasBeenStopped">
            <summary>
            Indicates if the user has stopped the solver.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.BiCgStab.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.BiCgStab"/> class.
            </summary>
            <remarks>
            When using this constructor the solver will use the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator"/> with
            the standard settings and a default preconditioner.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.BiCgStab.#ctor(MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.BiCgStab"/> class.
            </summary>
            <remarks>
            <para>
            When using this constructor the solver will use a default preconditioner.
            </para>
            <para>
            The main advantages of using a user defined <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator"/> are:
            <list type="number">
            <item>It is possible to set the desired convergence limits.</item>
            <item>
            It is possible to check the reason for which the solver finished 
            the iterative procedure by calling the <see cref="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator.Status"/> property.
            </item>
            </list>
            </para>
            </remarks>
            <param name="iterator">The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator"/> that will be used to monitor the iterative process. </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.BiCgStab.#ctor(MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.IPreConditioner)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.BiCgStab"/> class.
            </summary>
            <remarks>
            When using this constructor the solver will use the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator"/> with
            the standard settings.
            </remarks>
            <param name="preconditioner">The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the matrix equation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.BiCgStab.#ctor(MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.IPreConditioner,MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.BiCgStab"/> class.
            </summary>
            <remarks>
            <para>
            The main advantages of using a user defined <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator"/> are:
            <list type="number">
            <item>It is possible to set the desired convergence limits.</item>
            <item>
            It is possible to check the reason for which the solver finished 
            the iterative procedure by calling the <see cref="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator.Status"/> property.
            </item>
            </list>
            </para>
            </remarks>
            <param name="preconditioner">The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the matrix equation. </param>
            <param name="iterator">The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator"/> that will be used to monitor the iterative process. </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.BiCgStab.SetPreconditioner(MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.IPreConditioner)">
            <summary>
            Sets the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the iterative process.
            </summary>
            <param name="preconditioner">The preconditioner.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.BiCgStab.SetIterator(MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator)">
            <summary>
            Sets the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator"/> that will be used to track the iterative process.
            </summary>
            <param name="iterator">The iterator.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.BiCgStab.StopSolve">
            <summary>
            Stops the solve process. 
            </summary>
            <remarks>
            Note that it may take an indetermined amount of time for the solver to actually stop the process.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.BiCgStab.Solve(MathNet.Numerics.LinearAlgebra.Complex32.Matrix,MathNet.Numerics.LinearAlgebra.Complex32.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Matrix"/>, <c>A</c>.</param>
            <param name="vector">The solution <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Vector"/>, <c>b</c>.</param>
            <returns>The result <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Vector"/>, <c>x</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.BiCgStab.Solve(MathNet.Numerics.LinearAlgebra.Complex32.Matrix,MathNet.Numerics.LinearAlgebra.Complex32.Vector,MathNet.Numerics.LinearAlgebra.Complex32.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Matrix"/>, <c>A</c>.</param>
            <param name="input">The solution <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Vector"/>, <c>b</c>.</param>
            <param name="result">The result <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Vector"/>, <c>x</c>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.BiCgStab.CalculateTrueResidual(MathNet.Numerics.LinearAlgebra.Complex32.Matrix,MathNet.Numerics.LinearAlgebra.Complex32.Vector,MathNet.Numerics.LinearAlgebra.Complex32.Vector,MathNet.Numerics.LinearAlgebra.Complex32.Vector)">
            <summary>
            Calculates the <c>true</c> residual of the matrix equation Ax = b according to: residual = b - Ax
            </summary>
            <param name="matrix">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Matrix"/> A.</param>
            <param name="residual">Residual values in <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Vector"/>.</param>
            <param name="x">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Vector"/> x.</param>
            <param name="b">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Vector"/> b.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.BiCgStab.ShouldContinue(System.Int32,MathNet.Numerics.LinearAlgebra.Complex32.Vector,MathNet.Numerics.LinearAlgebra.Complex32.Vector,MathNet.Numerics.LinearAlgebra.Complex32.Vector)">
            <summary>
            Determine if calculation should continue
            </summary>
            <param name="iterationNumber">Number of iterations passed</param>
            <param name="result">Result <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Vector"/>.</param>
            <param name="source">Source <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Vector"/>.</param>
            <param name="residuals">Residual <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Vector"/>.</param>
            <returns><c>true</c> if continue, otherwise <c>false</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.BiCgStab.Solve(MathNet.Numerics.LinearAlgebra.Complex32.Matrix,MathNet.Numerics.LinearAlgebra.Complex32.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Matrix"/>, <c>A</c>.</param>
            <param name="input">The solution <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Matrix"/>, <c>B</c>.</param>
            <returns>The result <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Matrix"/>, <c>X</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.BiCgStab.Solve(MathNet.Numerics.LinearAlgebra.Complex32.Matrix,MathNet.Numerics.LinearAlgebra.Complex32.Matrix,MathNet.Numerics.LinearAlgebra.Complex32.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Matrix"/>, <c>A</c>.</param>
            <param name="input">The solution <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Matrix"/>, <c>B</c>.</param>
            <param name="result">The result <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Matrix"/>, <c>X</c></param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.BiCgStab.IterationResult">
            <summary>
            Gets the status of the iteration once the calculation is finished.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.CompositeSolver">
            <summary>
            A composite matrix solver. The actual solver is made by a sequence of
            matrix solvers. 
            </summary>
            <remarks>
            <para>
            Solver based on:<br />
            Faster PDE-based simulations using robust composite linear solvers<br />
            S. Bhowmicka, P. Raghavan a,*, L. McInnes b, B. Norris<br />
            Future Generation Computer Systems, Vol 20, 2004, pp 373–387<br />
            </para>
            <para>
            Note that if an iterator is passed to this solver it will be used for all the sub-solvers.
            </para>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.CompositeSolver.NonRunningStatus">
            <summary>
            The default status used if the solver is not running.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.CompositeSolver.RunningStatus">
            <summary>
            The default status used if the solver is running.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.CompositeSolver.SolverSetups">
            <summary>
            The collection of iterative solver setups. Stored based on the
            ratio between the relative speed and relative accuracy.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.CompositeSolver.LoadSolverInformation">
            <summary>
            Loads all the available <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterativeSolverSetup"/> objects from the MathNet.Numerics assembly.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.CompositeSolver.LoadSolverInformation(System.Type[])">
            <summary>
            Loads the available <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterativeSolverSetup"/> objects from the MathNet.Numerics assembly.
            </summary>
            <param name="typesToExclude">The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterativeSolver"/> types that should not be loaded.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.CompositeSolver.LoadSolverInformationFromAssembly(System.String)">
            <summary>
            Loads the available <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterativeSolverSetup"/> objects from the assembly specified by the file location.
            </summary>
            <param name="assemblyLocation">The fully qualified path to the assembly.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.CompositeSolver.LoadSolverInformationFromAssembly(System.String,System.Type[])">
            <summary>
            Loads the available <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterativeSolverSetup"/> objects from the assembly specified by the file location.
            </summary>
            <param name="assemblyLocation">The fully qualified path to the assembly.</param>
            <param name="typesToExclude">The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterativeSolver"/> types that should not be loaded. </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.CompositeSolver.LoadSolverInformationFromAssembly(System.Reflection.AssemblyName)">
            <summary>
            Loads the available <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterativeSolverSetup"/> objects from the assembly specified by the assembly name.
            </summary>
            <param name="assemblyName">The <see cref="T:System.Reflection.AssemblyName"/> of the assembly that should be searched for setup objects. </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.CompositeSolver.LoadSolverInformationFromAssembly(System.Reflection.AssemblyName,System.Type[])">
            <summary>
            Loads the available <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterativeSolverSetup"/> objects from the assembly specified by the assembly name.
            </summary>
            <param name="assemblyName">The <see cref="T:System.Reflection.AssemblyName"/> of the assembly that should be searched for setup objects.</param>
            <param name="typesToExclude">The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterativeSolver"/> types that should not be loaded.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.CompositeSolver.LoadSolverInformationFromAssembly(System.Type)">
            <summary>
            Loads the available <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterativeSolverSetup"/> objects from the assembly specified by the type.
            </summary>
            <param name="typeInAssembly">The type in the assembly which should be searched for setup objects.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.CompositeSolver.LoadSolverInformationFromAssembly(System.Type,System.Type[])">
            <summary>
            Loads the available <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterativeSolverSetup"/> objects from the assembly specified by the type.
            </summary>
            <param name="typeInAssembly">The type in the assembly which should be searched for setup objects.</param>
            <param name="typesToExclude">The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterativeSolver"/> types that should not be loaded.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.CompositeSolver.LoadSolverInformationFromAssembly(System.Reflection.Assembly)">
            <summary>
            Loads the available <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterativeSolverSetup"/> objects from the specified assembly.
            </summary>
            <param name="assembly">The assembly which will be searched for setup objects.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.CompositeSolver.LoadSolverInformationFromAssembly(System.Reflection.Assembly,System.Type[])">
            <summary>
            Loads the available <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterativeSolverSetup"/> objects from the specified assembly.
            </summary>
            <param name="assembly">The assembly which will be searched for setup objects.</param>
            <param name="typesToExclude">The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterativeSolver"/> types that should not be loaded.</param>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.CompositeSolver._solvers">
            <summary>
            The collection of solvers that will be used to 
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.CompositeSolver._status">
            <summary>
            The status of the calculation.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.CompositeSolver._iterator">
            <summary>
            The iterator that is used to control the iteration process.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.CompositeSolver._hasBeenStopped">
            <summary>
            A flag indicating if the solver has been stopped or not.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.CompositeSolver._currentSolver">
            <summary>
            The solver that is currently running. Reference is used to be able to stop the
            solver if the user cancels the solve process.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.CompositeSolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.CompositeSolver"/> class with the default iterator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.CompositeSolver.#ctor(MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.CompositeSolver"/> class with the specified iterator.
            </summary>
            <param name="iterator">The iterator that will be used to control the iteration process. </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.CompositeSolver.SetIterator(MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator)">
            <summary>
            Sets the <c>IIterator</c> that will be used to track the iterative process.
            </summary>
            <param name="iterator">The iterator.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.CompositeSolver.StopSolve">
            <summary>
            Stops the solve process. 
            </summary>
            <remarks>
            Note that it may take an indetermined amount of time for the solver to actually stop the process.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.CompositeSolver.Solve(MathNet.Numerics.LinearAlgebra.Complex32.Matrix,MathNet.Numerics.LinearAlgebra.Complex32.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="vector">The solution vector, <c>b</c>.</param>
            <returns>The result vector, <c>x</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.CompositeSolver.Solve(MathNet.Numerics.LinearAlgebra.Complex32.Matrix,MathNet.Numerics.LinearAlgebra.Complex32.Vector,MathNet.Numerics.LinearAlgebra.Complex32.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution vector, <c>b</c></param>
            <param name="result">The result vector, <c>x</c></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.CompositeSolver.LoadSolvers">
            <summary>
            Load solvers
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.CompositeSolver.Solve(MathNet.Numerics.LinearAlgebra.Complex32.Matrix,MathNet.Numerics.LinearAlgebra.Complex32.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <returns>The result matrix, <c>X</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.CompositeSolver.Solve(MathNet.Numerics.LinearAlgebra.Complex32.Matrix,MathNet.Numerics.LinearAlgebra.Complex32.Matrix,MathNet.Numerics.LinearAlgebra.Complex32.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <param name="result">The result matrix, <c>X</c></param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.CompositeSolver.IterationResult">
            <summary>
            Gets the status of the iteration once the calculation is finished.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.CompositeSolver.DoubleComparer">
            <summary>
            An <c>IComparer</c> used to compare double precision floating points.
            </summary>
            NOTE: The instance of this class is used only in <see cref="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.CompositeSolver.SolverSetups"/>. If C# suppports interface inheritence
            NOTE: and methods in anonymous types, then this class should be deleted and anonymous type implemented with IComaprer support
            NOTE: in <see cref="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.CompositeSolver.SolverSetups"/> constructor
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.CompositeSolver.DoubleComparer.Compare(System.Double,System.Double)">
            <summary>
            Compares two double values based on the selected comparison method.
            </summary>
            <param name="x">The first double to compare.</param>
            <param name="y">The second double to compare.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return 
            value has the following meanings: 
            Value Meaning Less than zero This object is less than the other parameter.
            Zero This object is equal to other. 
            Greater than zero This object is greater than other. 
            </returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.GpBiCg">
            <summary>
            A Generalized Product Bi-Conjugate Gradient iterative matrix solver.
            </summary>
            <remarks>
            <para>
            The Generalized Product Bi-Conjugate Gradient (GPBiCG) solver is an 
            alternative version of the Bi-Conjugate Gradient stabilized (CG) solver.
            Unlike the CG solver the GPBiCG solver can be used on 
            non-symmetric matrices. <br/>
            Note that much of the success of the solver depends on the selection of the
            proper preconditioner.
            </para>
            <para>
            The GPBiCG algorithm was taken from: <br/>
            GPBiCG(m,l): A hybrid of BiCGSTAB and GPBiCG methods with 
            efficiency and robustness
            <br/>
            S. Fujino
            <br/>
            Applied Numerical Mathematics, Volume 41, 2002, pp 107 - 117
            <br/>
            </para>
            <para>
            The example code below provides an indication of the possible use of the
            solver.
            </para>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.GpBiCg.DefaultStatus">
            <summary>
            The status used if there is no status, i.e. the solver hasn't run yet and there is no
            iterator.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.GpBiCg._preconditioner">
            <summary>
            The preconditioner that will be used. Can be set to <c>null</c>, in which case the default
            pre-conditioner will be used.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.GpBiCg._iterator">
            <summary>
            The iterative process controller.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.GpBiCg._numberOfBiCgStabSteps">
            <summary>
            Indicates the number of <c>BiCGStab</c> steps should be taken 
            before switching.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.GpBiCg._numberOfGpbiCgSteps">
            <summary>
            Indicates the number of <c>GPBiCG</c> steps should be taken 
            before switching.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.GpBiCg._hasBeenStopped">
            <summary>
            Indicates if the user has stopped the solver.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.GpBiCg.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.GpBiCg"/> class.
            </summary>
            <remarks>
            When using this constructor the solver will use the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator"/> with
            the standard settings and a default preconditioner.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.GpBiCg.#ctor(MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.GpBiCg"/> class.
            </summary>
            <remarks>
            <para>
            When using this constructor the solver will use a default preconditioner.
            </para>
            <para>
            The main advantages of using a user defined <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator"/> are:
            <list type="number">
            <item>It is possible to set the desired convergence limits.</item>
            <item>
            It is possible to check the reason for which the solver finished 
            the iterative procedure by calling the <see cref="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator.Status"/> property.
            </item>
            </list>
            </para>
            </remarks>
            <param name="iterator">The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator"/> that will be used to monitor the iterative process.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.GpBiCg.#ctor(MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.IPreConditioner)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.GpBiCg"/> class.
            </summary>
            <remarks>
            When using this constructor the solver will use the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator"/> with
            the standard settings.
            </remarks>
            <param name="preconditioner">The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the matrix equation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.GpBiCg.#ctor(MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.IPreConditioner,MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.GpBiCg"/> class.
            </summary>
            <remarks>
            <para>
            The main advantages of using a user defined <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator"/> are:
            <list type="number">
            <item>It is possible to set the desired convergence limits.</item>
            <item>
            It is possible to check the reason for which the solver finished 
            the iterative procedure by calling the <see cref="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator.Status"/> property.
            </item>
            </list>
            </para>
            </remarks>
            <param name="preconditioner">The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the matrix equation.</param>
            <param name="iterator">The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator"/> that will be used to monitor the iterative process.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.GpBiCg.SetPreconditioner(MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.IPreConditioner)">
            <summary>
            Sets the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the iterative process.
            </summary>
            <param name="preconditioner">The preconditioner.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.GpBiCg.SetIterator(MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator)">
            <summary>
            Sets the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator"/> that will be used to track the iterative process.
            </summary>
            <param name="iterator">The iterator.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.GpBiCg.StopSolve">
            <summary>
            Stops the solve process. 
            </summary>
            <remarks>
            Note that it may take an indetermined amount of time for the solver to actually
            stop the process.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.GpBiCg.Solve(MathNet.Numerics.LinearAlgebra.Complex32.Matrix,MathNet.Numerics.LinearAlgebra.Complex32.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="vector">The solution vector, <c>b</c>.</param>
            <returns>The result vector, <c>x</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.GpBiCg.Solve(MathNet.Numerics.LinearAlgebra.Complex32.Matrix,MathNet.Numerics.LinearAlgebra.Complex32.Vector,MathNet.Numerics.LinearAlgebra.Complex32.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution vector, <c>b</c></param>
            <param name="result">The result vector, <c>x</c></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.GpBiCg.CalculateTrueResidual(MathNet.Numerics.LinearAlgebra.Complex32.Matrix,MathNet.Numerics.LinearAlgebra.Complex32.Vector,MathNet.Numerics.LinearAlgebra.Complex32.Vector,MathNet.Numerics.LinearAlgebra.Complex32.Vector)">
            <summary>
            Calculates the <c>true</c> residual of the matrix equation Ax = b according to: residual = b - Ax
            </summary>
            <param name="matrix">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Matrix"/> A.</param>
            <param name="residual">Residual values in <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Vector"/>.</param>
            <param name="x">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Vector"/> x.</param>
            <param name="b">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Vector"/> b.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.GpBiCg.ShouldContinue(System.Int32,MathNet.Numerics.LinearAlgebra.Complex32.Vector,MathNet.Numerics.LinearAlgebra.Complex32.Vector,MathNet.Numerics.LinearAlgebra.Complex32.Vector)">
            <summary>
            Determine if calculation should continue
            </summary>
            <param name="iterationNumber">Number of iterations passed</param>
            <param name="result">Result <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Vector"/>.</param>
            <param name="source">Source <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Vector"/>.</param>
            <param name="residuals">Residual <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Vector"/>.</param>
            <returns><c>true</c> if continue, otherwise <c>false</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.GpBiCg.ShouldRunBiCgStabSteps(System.Int32)">
            <summary>
            Decide if to do steps with BiCgStab
            </summary>
            <param name="iterationNumber">Number of iteration</param>
            <returns><c>true</c> if yes, otherwise <c>false</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.GpBiCg.Solve(MathNet.Numerics.LinearAlgebra.Complex32.Matrix,MathNet.Numerics.LinearAlgebra.Complex32.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <returns>The result matrix, <c>X</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.GpBiCg.Solve(MathNet.Numerics.LinearAlgebra.Complex32.Matrix,MathNet.Numerics.LinearAlgebra.Complex32.Matrix,MathNet.Numerics.LinearAlgebra.Complex32.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <param name="result">The result matrix, <c>X</c></param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.GpBiCg.NumberOfBiCgStabSteps">
            <summary>
            Gets or sets the number of steps taken with the <c>BiCgStab</c> algorithm
            before switching over to the <c>GPBiCG</c> algorithm.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.GpBiCg.NumberOfGpBiCgSteps">
            <summary>
            Gets or sets the number of steps taken with the <c>GPBiCG</c> algorithm
            before switching over to the <c>BiCgStab</c> algorithm.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.GpBiCg.IterationResult">
            <summary>
            Gets the status of the iteration once the calculation is finished.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.MlkBiCgStab">
            <summary>
            A Multiple-Lanczos Bi-Conjugate Gradient stabilized iterative matrix solver.
            </summary>
            <remarks>
            <para>
            The Multiple-Lanczos Bi-Conjugate Gradient stabilized (ML(k)-BiCGStab) solver is an 'improvement'
            of the standard BiCgStab solver. 
            </para>
            <para>
            The algorithm was taken from: <br/>
            ML(k)BiCGSTAB: A BiCGSTAB variant based on multiple Lanczos starting vectors
            <br/>
            Man-chung Yeung and Tony F. Chan
            <br/>
            SIAM Journal of Scientific Computing
            <br/>
            Volume 21, Number 4, pp. 1263 - 1290
            </para>
            <para>
            The example code below provides an indication of the possible use of the
            solver.
            </para>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.MlkBiCgStab.DefaultNumberOfStartingVectors">
            <summary>
            The default number of starting vectors.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.MlkBiCgStab.DefaultStatus">
            <summary>
            The status used if there is no status, i.e. the solver hasn't run yet and there is no
            iterator.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.MlkBiCgStab._preconditioner">
            <summary>
            The preconditioner that will be used. Can be set to <see langword="null" />, in which case the default
            pre-conditioner will be used.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.MlkBiCgStab._iterator">
            <summary>
            The iterative process controller.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.MlkBiCgStab._startingVectors">
            <summary>
            The collection of starting vectors which are used as the basis for the Krylov sub-space.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.MlkBiCgStab._numberOfStartingVectors">
            <summary>
            The number of starting vectors used by the algorithm
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.MlkBiCgStab._hasBeenStopped">
            <summary>
            Indicates if the user has stopped the solver.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.MlkBiCgStab.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.MlkBiCgStab"/> class.
            </summary>
            <remarks>
            When using this constructor the solver will use the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator"/> with
            the standard settings and a default preconditioner.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.MlkBiCgStab.#ctor(MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.MlkBiCgStab"/> class.
            </summary>
            <remarks>
            <para>
            When using this constructor the solver will use a default preconditioner.
            </para>
            <para>
            The main advantages of using a user defined <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator"/> are:
            <list type="number">
            <item>It is possible to set the desired convergence limits.</item>
            <item>
            It is possible to check the reason for which the solver finished 
            the iterative procedure by calling the <see cref="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator.Status"/> property.
            </item>
            </list>
            </para>
            </remarks>
            <param name="iterator">The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator"/> that will be used to monitor the iterative process.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.MlkBiCgStab.#ctor(MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.IPreConditioner)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.MlkBiCgStab"/> class.
            </summary>
            <remarks>
            When using this constructor the solver will use the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator"/> with
            the standard settings.
            </remarks>
            <param name="preconditioner">The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the matrix equation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.MlkBiCgStab.#ctor(MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.IPreConditioner,MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.MlkBiCgStab"/> class.
            </summary>
            <remarks>
            <para>
            The main advantages of using a user defined <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator"/> are:
            <list type="number">
            <item>It is possible to set the desired convergence limits.</item>
            <item>
            It is possible to check the reason for which the solver finished 
            the iterative procedure by calling the <see cref="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator.Status"/> property.
            </item>
            </list>
            </para>
            </remarks>
            <param name="preconditioner">The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the matrix equation.</param>
            <param name="iterator">The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator"/> that will be used to monitor the iterative process.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.MlkBiCgStab.ResetNumberOfStartingVectors">
            <summary>
            Resets the number of starting vectors to the default value.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.MlkBiCgStab.SetPreconditioner(MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.IPreConditioner)">
            <summary>
            Sets the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the iterative process.
            </summary>
            <param name="preconditioner">The preconditioner.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.MlkBiCgStab.SetIterator(MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator)">
            <summary>
            Sets the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator"/> that will be used to track the iterative process.
            </summary>
            <param name="iterator">The iterator.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.MlkBiCgStab.StopSolve">
            <summary>
            Stops the solve process. 
            </summary>
            <remarks>
            Note that it may take an indetermined amount of time for the solver to actually stop the process.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.MlkBiCgStab.Solve(MathNet.Numerics.LinearAlgebra.Complex32.Matrix,MathNet.Numerics.LinearAlgebra.Complex32.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="vector">The solution vector, <c>b</c>.</param>
            <returns>The result vector, <c>x</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.MlkBiCgStab.Solve(MathNet.Numerics.LinearAlgebra.Complex32.Matrix,MathNet.Numerics.LinearAlgebra.Complex32.Vector,MathNet.Numerics.LinearAlgebra.Complex32.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution vector, <c>b</c></param>
            <param name="result">The result vector, <c>x</c></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.MlkBiCgStab.NumberOfStartingVectorsToCreate(System.Int32,System.Int32)">
            <summary>
            Gets the number of starting vectors to create
            </summary>
            <param name="maximumNumberOfStartingVectors">Maximum number</param>
            <param name="numberOfVariables">Number of variables</param>
            <returns>Number of starting vectors to create</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.MlkBiCgStab.CreateStartingVectors(System.Int32,System.Int32)">
            <summary>
            Returns an array of starting vectors.
            </summary>
            <param name="maximumNumberOfStartingVectors">The maximum number of starting vectors that should be created.</param>
            <param name="numberOfVariables">The number of variables.</param>
            <returns>
             An array with starting vectors. The array will never be larger than the
             <paramref name="maximumNumberOfStartingVectors"/> but it may be smaller if
             the <paramref name="numberOfVariables"/> is smaller than 
             the <paramref name="maximumNumberOfStartingVectors"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.MlkBiCgStab.CreateVectorArray(System.Int32,System.Int32)">
            <summary>
            Create random vectors array
            </summary>
            <param name="arraySize">Number of vectors</param>
            <param name="vectorSize">Size of each vector</param>
            <returns>Array of random vectors</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.MlkBiCgStab.CalculateTrueResidual(MathNet.Numerics.LinearAlgebra.Complex32.Matrix,MathNet.Numerics.LinearAlgebra.Complex32.Vector,MathNet.Numerics.LinearAlgebra.Complex32.Vector,MathNet.Numerics.LinearAlgebra.Complex32.Vector)">
            <summary>
            Calculates the <c>true</c> residual of the matrix equation Ax = b according to: residual = b - Ax
            </summary>
            <param name="matrix">Source <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Matrix"/>A.</param>
            <param name="residual">Residual <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Vector"/> data.</param>
            <param name="x">x <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Vector"/> data.</param>
            <param name="b">b <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Vector"/> data.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.MlkBiCgStab.ShouldContinue(System.Int32,MathNet.Numerics.LinearAlgebra.Complex32.Vector,MathNet.Numerics.LinearAlgebra.Complex32.Vector,MathNet.Numerics.LinearAlgebra.Complex32.Vector)">
            <summary>
            Determine if calculation should continue
            </summary>
            <param name="iterationNumber">Number of iterations passed</param>
            <param name="result">Result <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Vector"/>.</param>
            <param name="source">Source <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Vector"/>.</param>
            <param name="residuals">Residual <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Vector"/>.</param>
            <returns><c>true</c> if continue, otherwise <c>false</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.MlkBiCgStab.Solve(MathNet.Numerics.LinearAlgebra.Complex32.Matrix,MathNet.Numerics.LinearAlgebra.Complex32.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <returns>The result matrix, <c>X</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.MlkBiCgStab.Solve(MathNet.Numerics.LinearAlgebra.Complex32.Matrix,MathNet.Numerics.LinearAlgebra.Complex32.Matrix,MathNet.Numerics.LinearAlgebra.Complex32.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <param name="result">The result matrix, <c>X</c></param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.MlkBiCgStab.NumberOfStartingVectors">
            <summary>
            Gets or sets the number of starting vectors.
            </summary>
            <remarks>
            Must be larger than 1 and smaller than the number of variables in the matrix that 
            for which this solver will be used.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.MlkBiCgStab.StartingVectors">
            <summary>
            Gets or sets a series of orthonormal vectors which will be used as basis for the 
            Krylov sub-space.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.MlkBiCgStab.IterationResult">
            <summary>
            Gets the status of the iteration once the calculation is finished.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.TFQMR">
            <summary>
            A Transpose Free Quasi-Minimal Residual (TFQMR) iterative matrix solver.
            </summary>
            <remarks>
            <para>
            The TFQMR algorithm was taken from: <br/>
            Iterative methods for sparse linear systems.
            <br/>
            Yousef Saad
            <br/>
            Algorithm is described in Chapter 7, section 7.4.3, page 219
            </para>
            <para>
            The example code below provides an indication of the possible use of the
            solver.
            </para>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.TFQMR.DefaultStatus">
            <summary>
            The status used if there is no status, i.e. the solver hasn't run yet and there is no
            iterator.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.TFQMR._preconditioner">
            <summary>
            The preconditioner that will be used. Can be set to <see langword="null" />, in which case the default
            pre-conditioner will be used.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.TFQMR._iterator">
            <summary>
            The iterative process controller.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.TFQMR._hasBeenStopped">
            <summary>
            Indicates if the user has stopped the solver.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.TFQMR.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.TFQMR"/> class.
            </summary>
            <remarks>
            When using this constructor the solver will use the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator"/> with
            the standard settings and a default preconditioner.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.TFQMR.#ctor(MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.TFQMR"/> class.
            </summary>
            <remarks>
            <para>
            When using this constructor the solver will use a default preconditioner.
            </para>
            <para>
            The main advantages of using a user defined <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator"/> are:
            <list type="number">
            <item>It is possible to set the desired convergence limits.</item>
            <item>
            It is possible to check the reason for which the solver finished 
            the iterative procedure by calling the <see cref="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator.Status"/> property.
            </item>
            </list>
            </para>
            </remarks>
            <param name="iterator">The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator"/> that will be used to monitor the iterative process.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.TFQMR.#ctor(MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.IPreConditioner)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.TFQMR"/> class.
            </summary>
            <remarks>
            When using this constructor the solver will use the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator"/> with
            the standard settings.
            </remarks>
            <param name="preconditioner">The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the matrix equation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.TFQMR.#ctor(MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.IPreConditioner,MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.TFQMR"/> class.
            </summary>
            <remarks>
            <para>
            The main advantages of using a user defined <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator"/> are:
            <list type="number">
            <item>It is possible to set the desired convergence limits.</item>
            <item>
            It is possible to check the reason for which the solver finished 
            the iterative procedure by calling the <see cref="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator.Status"/> property.
            </item>
            </list>
            </para>
            </remarks>
            <param name="preconditioner">The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the matrix equation.</param>
            <param name="iterator">The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator"/> that will be used to monitor the iterative process.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.TFQMR.SetPreconditioner(MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.IPreConditioner)">
            <summary>
            Sets the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the iterative process.
            </summary>
            <param name="preconditioner">The preconditioner.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.TFQMR.SetIterator(MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator)">
            <summary>
            Sets the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator"/> that will be used to track the iterative process.
            </summary>
            <param name="iterator">The iterator.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.TFQMR.StopSolve">
            <summary>
            Stops the solve process. 
            </summary>
            <remarks>
            Note that it may take an indetermined amount of time for the solver to actually stop the process.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.TFQMR.Solve(MathNet.Numerics.LinearAlgebra.Complex32.Matrix,MathNet.Numerics.LinearAlgebra.Complex32.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="vector">The solution vector, <c>b</c>.</param>
            <returns>The result vector, <c>x</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.TFQMR.Solve(MathNet.Numerics.LinearAlgebra.Complex32.Matrix,MathNet.Numerics.LinearAlgebra.Complex32.Vector,MathNet.Numerics.LinearAlgebra.Complex32.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution vector, <c>b</c></param>
            <param name="result">The result vector, <c>x</c></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.TFQMR.CalculateTrueResidual(MathNet.Numerics.LinearAlgebra.Complex32.Matrix,MathNet.Numerics.LinearAlgebra.Complex32.Vector,MathNet.Numerics.LinearAlgebra.Complex32.Vector,MathNet.Numerics.LinearAlgebra.Complex32.Vector)">
            <summary>
            Calculates the <c>true</c> residual of the matrix equation Ax = b according to: residual = b - Ax
            </summary>
            <param name="matrix">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Matrix"/> A.</param>
            <param name="residual">Residual values in <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Vector"/>.</param>
            <param name="x">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Vector"/> x.</param>
            <param name="b">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Vector"/> b.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.TFQMR.ShouldContinue(System.Int32,MathNet.Numerics.LinearAlgebra.Complex32.Vector,MathNet.Numerics.LinearAlgebra.Complex32.Vector,MathNet.Numerics.LinearAlgebra.Complex32.Vector)">
            <summary>
            Determine if calculation should continue
            </summary>
            <param name="iterationNumber">Number of iterations passed</param>
            <param name="result">Result <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Vector"/>.</param>
            <param name="source">Source <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Vector"/>.</param>
            <param name="residuals">Residual <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Vector"/>.</param>
            <returns><c>true</c> if continue, otherwise <c>false</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.TFQMR.IsEven(System.Int32)">
            <summary>
            Is <paramref name="number"/> even?
            </summary>
            <param name="number">Number to check</param>
            <returns><c>true</c> if <paramref name="number"/> even, otherwise <c>false</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.TFQMR.Solve(MathNet.Numerics.LinearAlgebra.Complex32.Matrix,MathNet.Numerics.LinearAlgebra.Complex32.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <returns>The result matrix, <c>X</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.TFQMR.Solve(MathNet.Numerics.LinearAlgebra.Complex32.Matrix,MathNet.Numerics.LinearAlgebra.Complex32.Matrix,MathNet.Numerics.LinearAlgebra.Complex32.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <param name="result">The result matrix, <c>X</c></param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterative.TFQMR.IterationResult">
            <summary>
            Gets the status of the iteration once the calculation is finished.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterator">
            <summary>
            An iterator that is used to check if an iterative calculation should continue or stop.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterator.DefaultStatus">
            <summary>
            The default status for the iterator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterator.CreateDefault">
            <summary>
            Creates a default iterator with all the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IIterationStopCriterium"/> objects.
            </summary>
            <returns>A new <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator"/> object.</returns>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterator._stopCriterias">
            <summary>
            The collection that holds all the stop criteria and the flag indicating if they should be added
            to the child iterators.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterator._status">
            <summary>
            The status of the iterator.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterator._wasIterationCancelled">
            <summary>
            Indicates if the iteration was cancelled.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterator"/> class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterator.#ctor(System.Collections.Generic.IEnumerable{MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IIterationStopCriterium})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterator"/> class with the specified stop criteria.
            </summary>
            <param name="stopCriteria">
            The specified stop criteria. Only one stop criterium of each type can be passed in. None
            of the stop criteria will be passed on to child iterators.
            </param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="stopCriteria"/> contains multiple stop criteria of the same type.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterator.Add(MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IIterationStopCriterium)">
            <summary>
            Adds an <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IIterationStopCriterium"/> to the internal collection of stop-criteria. Only a 
            single stop criterium of each type can be stored.
            </summary>
            <param name="stopCriterium">The stop criterium to add.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="stopCriterium"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="stopCriterium"/> is of the same type as an already 
            stored criterium.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterator.Remove(MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IIterationStopCriterium)">
            <summary>
            Removes the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IIterationStopCriterium"/> from the internal collection.
            </summary>
            <param name="stopCriterium">The stop criterium that must be removed.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterator.Contains(MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IIterationStopCriterium)">
            <summary>
            Indicates if the specific stop criterium is stored by the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator"/>.
            </summary>
            <param name="stopCriterium">The stop criterium.</param>
            <returns><c>true</c> if the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator"/> contains the stop criterium; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterator.IterationCancelled">
            <summary>
            Indicates to the iterator that the iterative process has been cancelled.
            </summary>
            <remarks>
            Does not reset the stop-criteria.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterator.DetermineStatus(System.Int32,MathNet.Numerics.LinearAlgebra.Complex32.Vector,MathNet.Numerics.LinearAlgebra.Complex32.Vector,MathNet.Numerics.LinearAlgebra.Complex32.Vector)">
            <summary>
            Determines the status of the iterative calculation based on the stop criteria stored
            by the current <c>IIterator</c>. Result is set into <c>Status</c> field.
            </summary>
            <param name="iterationNumber">The number of iterations that have passed so far.</param>
            <param name="solutionVector">The vector containing the current solution values.</param>
            <param name="sourceVector">The right hand side vector.</param>
            <param name="residualVector">The vector containing the current residual vectors.</param>
            <remarks>
            The individual iterators may internally track the progress of the calculation based
            on the invocation of this method. Therefore this method should only be called if the 
            calculation has moved forwards at least one step.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterator.ResetToPrecalculationState">
            <summary>
            Resets the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterator"/> to the pre-calculation state.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterator.Clone">
            <summary>
            Creates a deep clone of the current iterator.
            </summary>
            <returns>The deep clone of the current iterator.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterator.NumberOfCriteria">
            <summary>
            Gets the number of stored stop criteria.
            </summary>
            <remarks>Used for testing only.</remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterator.StoredStopCriteria">
            <summary>
            Gets an <c>IEnumerator</c> that enumerates over all the stored stop criteria.
            </summary>
            <remarks>Used for testing only.</remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Iterator.Status">
            <summary>
            Gets the current calculation status.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.Diagonal">
            <summary>
            A diagonal preconditioner. The preconditioner uses the inverse
            of the matrix diagonal as preconditioning values.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.Diagonal._inverseDiagonals">
            <summary>
            The inverse of the matrix diagonal.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.Diagonal.DiagonalEntries">
            <summary>
            Returns the decomposed matrix diagonal.
            </summary>
            <returns>The matrix diagonal.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.Diagonal.Initialize(MathNet.Numerics.LinearAlgebra.Complex32.Matrix)">
            <summary>
            Initializes the preconditioner and loads the internal data structures.
            </summary>
            <param name="matrix">
            The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Matrix"/> upon which this preconditioner is based.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <see langword="null"/>. </exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.Diagonal.Approximate(MathNet.Numerics.LinearAlgebra.Complex32.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <returns>The left hand side vector.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.Diagonal.Approximate(MathNet.Numerics.LinearAlgebra.Complex32.Vector,MathNet.Numerics.LinearAlgebra.Complex32.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <param name="lhs">The left hand side vector. Also known as the result vector.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.Ilutp">
            <summary>
            This class performs an Incomplete LU factorization with drop tolerance
            and partial pivoting. The drop tolerance indicates which additional entries
            will be dropped from the factorized LU matrices.
            </summary>
            <remarks>
            The ILUTP-Mem algorithm was taken from: <br/>
            ILUTP_Mem: a Space-Efficient Incomplete LU Preconditioner
            <br/>
            Tzu-Yi Chen, Department of Mathematics and Computer Science, <br/>
            Pomona College, Claremont CA 91711, USA <br/>
            Published in: <br/>
            Lecture Notes in Computer Science <br/>
            Volume 3046 / 2004 <br/>
            pp. 20 - 28 <br/>
            Algorithm is described in Section 2, page 22
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.Ilutp.DefaultFillLevel">
            <summary>
            The default fill level.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.Ilutp.DefaultDropTolerance">
            <summary>
            The default drop tolerance.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.Ilutp._upper">
            <summary>
            The decomposed upper triangular matrix.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.Ilutp._lower">
            <summary>
            The decomposed lower triangular matrix.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.Ilutp._pivots">
            <summary>
            The array containing the pivot values.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.Ilutp._fillLevel">
            <summary>
            The fill level.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.Ilutp._dropTolerance">
            <summary>
            The drop tolerance.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.Ilutp._pivotTolerance">
            <summary>
            The pivot tolerance.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.Ilutp.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.Ilutp"/> class with the default settings.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.Ilutp.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.Ilutp"/> class with the specified settings.
            </summary>
            <param name="fillLevel">
            The amount of fill that is allowed in the matrix. The value is a fraction of 
            the number of non-zero entries in the original matrix. Values should be positive.
            </param>
            <param name="dropTolerance">
            The absolute drop tolerance which indicates below what absolute value an entry 
            will be dropped from the matrix. A drop tolerance of 0.0 means that no values
            will be dropped. Values should always be positive.
            </param>
            <param name="pivotTolerance">
            The pivot tolerance which indicates at what level pivoting will take place. A
            value of 0.0 means that no pivoting will take place.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.Ilutp.UpperTriangle">
            <summary>
            Returns the upper triagonal matrix that was created during the LU decomposition.
            </summary>
            <remarks>
            This method is used for debugging purposes only and should normally not be used.
            </remarks>
            <returns>A new matrix containing the upper triagonal elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.Ilutp.LowerTriangle">
            <summary>
            Returns the lower triagonal matrix that was created during the LU decomposition.
            </summary>
            <remarks>
            This method is used for debugging purposes only and should normally not be used.
            </remarks>
            <returns>A new matrix containing the lower triagonal elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.Ilutp.Pivots">
            <summary>
            Returns the pivot array. This array is not needed for normal use because
            the preconditioner will return the solution vector values in the proper order.
            </summary>
            <remarks>
            This method is used for debugging purposes only and should normally not be used.
            </remarks>
            <returns>The pivot array.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.Ilutp.Initialize(MathNet.Numerics.LinearAlgebra.Complex32.Matrix)">
            <summary>
            Initializes the preconditioner and loads the internal data structures.
            </summary>
            <param name="matrix">
            The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Matrix"/> upon which this preconditioner is based. Note that the 
            method takes a general matrix type. However internally the data is stored 
            as a sparse matrix. Therefore it is not recommended to pass a dense matrix.
            </param>
            <exception cref="T:System.ArgumentNullException"> If <paramref name="matrix"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.Ilutp.PivotRow(MathNet.Numerics.LinearAlgebra.Complex32.Vector)">
            <summary>
            Pivot elements in the <paramref name="row"/> according to internal pivot array
            </summary>
            <param name="row">Row <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Vector"/> to pivot in</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.Ilutp.PivotMapFound(System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Int32)">
            <summary>
            Was pivoting already performed
            </summary>
            <param name="knownPivots">Pivots already done</param>
            <param name="currentItem">Current item to pivot</param>
            <returns><c>true</c> if performed, otherwise <c>false</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.Ilutp.SwapColumns(MathNet.Numerics.LinearAlgebra.Complex32.Matrix,System.Int32,System.Int32)">
            <summary>
            Swap columns in the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Matrix"/>
            </summary>
            <param name="matrix">Source <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Matrix"/>.</param>
            <param name="firstColumn">First column index to swap</param>
            <param name="secondColumn">Second column index to swap</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.Ilutp.FindLargestItems(System.Int32,System.Int32,System.Int32[],MathNet.Numerics.LinearAlgebra.Complex32.Vector)">
            <summary>
            Sort vector descending, not changing vector but placing sorted indicies to <paramref name="sortedIndices"/>
            </summary>
            <param name="lowerBound">Start sort form</param>
            <param name="upperBound">Sort till upper bound</param>
            <param name="sortedIndices">Array with sorted vector indicies</param>
            <param name="values">Source <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Vector"/></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.Ilutp.Approximate(MathNet.Numerics.LinearAlgebra.Complex32.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <returns>The left hand side vector.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.Ilutp.Approximate(MathNet.Numerics.LinearAlgebra.Complex32.Vector,MathNet.Numerics.LinearAlgebra.Complex32.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <param name="lhs">The left hand side vector. Also known as the result vector.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.Ilutp.Pivot(MathNet.Numerics.LinearAlgebra.Complex32.Vector,MathNet.Numerics.LinearAlgebra.Complex32.Vector)">
            <summary>
            Pivot elements in <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Vector"/> according to internal pivot array
            </summary>
            <param name="vector">Source <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Vector"/>.</param>
            <param name="result">Result <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Vector"/> after pivoting.</param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.Ilutp.FillLevel">
            <summary>
            Gets or sets the amount of fill that is allowed in the matrix. The
            value is a fraction of the number of non-zero entries in the original
            matrix. The standard value is 200.
            </summary>
            <remarks>
            <para>
            Values should always be positive and can be higher than 1.0. A value lower
            than 1.0 means that the eventual preconditioner matrix will have fewer
            non-zero entries as the original matrix. A value higher than 1.0 means that
            the eventual preconditioner can have more non-zero values than the original 
            matrix.
            </para>
            <para>
            Note that any changes to the <b>FillLevel</b> after creating the preconditioner
            will invalidate the created preconditioner and will require a re-initialization of
            the preconditioner.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if a negative value is provided.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.Ilutp.DropTolerance">
            <summary>
            Gets or sets the absolute drop tolerance which indicates below what absolute value
            an entry will be dropped from the matrix. The standard value is 0.0001.
            </summary>
            <remarks>
            <para>
            The values should always be positive and can be larger than 1.0. A low value will
            keep more small numbers in the preconditioner matrix. A high value will remove 
            more small numbers from the preconditioner matrix.
            </para>
            <para>
            Note that any changes to the <b>DropTolerance</b> after creating the preconditioner
            will invalidate the created preconditioner and will require a re-initialization of
            the preconditioner.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if a negative value is provided.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.Ilutp.PivotTolerance">
            <summary>
            Gets or sets the pivot tolerance which indicates at what level pivoting will
            take place. The standard value is 0.0 which means pivoting will never take place.
            </summary>
            <remarks>
            <para>
            The pivot tolerance is used to calculate if pivoting is necessary. Pivoting
            will take place if any of the values in a row is bigger than the 
            diagonal value of that row divided by the pivot tolerance, i.e. pivoting
            will take place if <b>row(i,j) &gt; row(i,i) / PivotTolerance</b> for
            any <b>j</b> that is not equal to <b>i</b>.
            </para>
            <para>
            Note that any changes to the <b>PivotTolerance</b> after creating the preconditioner
            will invalidate the created preconditioner and will require a re-initialization of
            the preconditioner.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if a negative value is provided.</exception>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.IlutpElementSorter">
            <summary>
            An element sort algorithm for the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.Ilutp"/> class.
            </summary>
            <remarks>
            This sort algorithm is used to sort the columns in a sparse matrix based on
            the value of the element on the diagonal of the matrix.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.IlutpElementSorter.SortDoubleIndicesDecreasing(System.Int32,System.Int32,System.Int32[],MathNet.Numerics.LinearAlgebra.Complex32.Vector)">
            <summary>
            Sorts the elements of the <paramref name="values"/> vector in decreasing
            fashion. The vector itself is not affected.
            </summary>
            <param name="lowerBound">The starting index.</param>
            <param name="upperBound">The stopping index.</param>
            <param name="sortedIndices">An array that will contain the sorted indices once the algorithm finishes.</param>
            <param name="values">The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Vector"/> that contains the values that need to be sorted.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.IlutpElementSorter.HeapSortDoublesIndices(System.Int32,System.Int32,System.Int32[],MathNet.Numerics.LinearAlgebra.Complex32.Vector)">
            <summary>
            Sorts the elements of the <paramref name="values"/> vector in decreasing
            fashion using heap sort algorithm. The vector itself is not affected.
            </summary>
            <param name="lowerBound">The starting index.</param>
            <param name="upperBound">The stopping index.</param>
            <param name="sortedIndices">An array that will contain the sorted indices once the algorithm finishes.</param>
            <param name="values">The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Vector"/> that contains the values that need to be sorted.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.IlutpElementSorter.BuildDoubleIndexHeap(System.Int32,System.Int32,System.Int32[],MathNet.Numerics.LinearAlgebra.Complex32.Vector)">
            <summary>
            Build heap for double indicies
            </summary>
            <param name="start">Root position</param>
            <param name="count">Length of <paramref name="values"/></param>
            <param name="sortedIndices">Indicies of <paramref name="values"/></param>
            <param name="values">Target <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Vector"/></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.IlutpElementSorter.SiftDoubleIndices(System.Int32[],MathNet.Numerics.LinearAlgebra.Complex32.Vector,System.Int32,System.Int32)">
            <summary>
            Sift double indicies
            </summary>
            <param name="sortedIndices">Indicies of <paramref name="values"/></param>
            <param name="values">Target <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Vector"/></param>
            <param name="begin">Root position</param>
            <param name="count">Length of <paramref name="values"/></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.IlutpElementSorter.SortIntegersDecreasing(System.Int32[])">
            <summary>
            Sorts the given integers in a decreasing fashion.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.IlutpElementSorter.HeapSortIntegers(System.Int32[],System.Int32)">
            <summary>
            Sort the given integers in a decreasing fashion using heapsort algorithm 
            </summary>
            <param name="values">Array of values to sort</param>
            <param name="count">Length of <paramref name="values"/></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.IlutpElementSorter.BuildHeap(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Build heap
            </summary>
            <param name="values">Target values array</param>
            <param name="start">Root position</param>
            <param name="count">Length of <paramref name="values"/></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.IlutpElementSorter.Sift(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Sift values
            </summary>
            <param name="values">Target value array</param>
            <param name="start">Root position</param>
            <param name="count">Length of <paramref name="values"/></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.IlutpElementSorter.Exchange(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Exchange values in array
            </summary>
            <param name="values">Target values array</param>
            <param name="first">First value to exchange</param>
            <param name="second">Second value to exchange</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.IncompleteLU">
            <summary>
            An incomplete, level 0, LU factorization preconditioner.
            </summary>
            <remarks>
            The ILU(0) algorithm was taken from: <br/>
            Iterative methods for sparse linear systems <br/>
            Yousef Saad <br/>
            Algorithm is described in Chapter 10, section 10.3.2, page 275 <br/>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.IncompleteLU._decompositionLU">
            <summary>
            The matrix holding the lower (L) and upper (U) matrices. The
            decomposition matrices are combined to reduce storage.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.IncompleteLU.UpperTriangle">
            <summary>
            Returns the upper triagonal matrix that was created during the LU decomposition.
            </summary>
            <returns>A new matrix containing the upper triagonal elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.IncompleteLU.LowerTriangle">
            <summary>
            Returns the lower triagonal matrix that was created during the LU decomposition.
            </summary>
            <returns>A new matrix containing the lower triagonal elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.IncompleteLU.Initialize(MathNet.Numerics.LinearAlgebra.Complex32.Matrix)">
            <summary>
            Initializes the preconditioner and loads the internal data structures.
            </summary>
            <param name="matrix">The matrix upon which the preconditioner is based. </param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.IncompleteLU.Approximate(MathNet.Numerics.LinearAlgebra.Complex32.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <returns>The left hand side vector.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.IncompleteLU.Approximate(MathNet.Numerics.LinearAlgebra.Complex32.Vector,MathNet.Numerics.LinearAlgebra.Complex32.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <param name="lhs">The left hand side vector. Also known as the result vector.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.UnitPreconditioner">
            <summary>
            A unit preconditioner. This preconditioner does not actually do anything
            it is only used when running an <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.IIterativeSolver"/> without
            a preconditioner.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.UnitPreconditioner._size">
            <summary>
            The coefficient matrix on which this preconditioner operates.
            Is used to check dimensions on the different vectors that are processed.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.UnitPreconditioner.Initialize(MathNet.Numerics.LinearAlgebra.Complex32.Matrix)">
            <summary>
            Initializes the preconditioner and loads the internal data structures.
            </summary>
            <param name="matrix">
            The matrix upon which the preconditioner is based.
            </param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <see langword="null"/>. </exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.UnitPreconditioner.Approximate(MathNet.Numerics.LinearAlgebra.Complex32.Vector,MathNet.Numerics.LinearAlgebra.Complex32.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <param name="lhs">The left hand side vector. Also known as the result vector.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rhs"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="lhs"/> is <see langword="null"/>. </exception>
            <exception cref="T:System.ArgumentException">
              <para>
                If <paramref name="rhs"/> and <paramref name="lhs"/> do not have the same size.
              </para>
              <para>
                - or -
              </para>
              <para>
                If the size of <paramref name="rhs"/> is different the number of rows of the coefficient matrix.
              </para>
            </exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.Preconditioners.UnitPreconditioner.Approximate(MathNet.Numerics.LinearAlgebra.Complex32.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <returns>The left hand side vector.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rhs"/> is <see langword="null"/>. </exception>
            <exception cref="T:System.ArgumentException">
            If the size of <paramref name="rhs"/> is different the number of rows of the coefficient matrix.
            </exception>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.DivergenceStopCriterium">
            <summary>
            Monitors an iterative calculation for signs of divergence.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.DivergenceStopCriterium.DefaultMaximumRelativeIncrease">
            <summary>
            Default value for the maximum relative increase that the 
            residual may experience before a divergence warning is issued.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.DivergenceStopCriterium.DefaultMinimumNumberOfIterations">
            <summary>
            Default value for the minimum number of iterations over which 
            the residual must grow before a divergence warning is issued.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.DivergenceStopCriterium.DefaultLastIterationNumber">
            <summary>
            Defines the default last iteration number. Set to -1 because iterations normally
            start at 0.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.DivergenceStopCriterium.DefaultStatus">
            <summary>
            The default status.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.DivergenceStopCriterium._maximumRelativeIncrease">
            <summary>
            The maximum relative increase the residual may experience without triggering a divergence warning.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.DivergenceStopCriterium._minimumNumberOfIterations">
            <summary>
            The number of iterations over which a residual increase should be tracked before issuing a divergence warning.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.DivergenceStopCriterium._status">
            <summary>
            The status of the calculation
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.DivergenceStopCriterium._residualHistory">
            <summary>
            The array that holds the tracking information.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.DivergenceStopCriterium._lastIteration">
            <summary>
            The iteration number of the last iteration.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.DivergenceStopCriterium.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.DivergenceStopCriterium"/> class with the default maximum 
            relative increase and the default minimum number of tracking iterations.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.DivergenceStopCriterium.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.DivergenceStopCriterium"/> class with the specified maximum 
            relative increase and the default minimum number of tracking iterations.
            </summary>
            <param name="maximumRelativeIncrease">The maximum relative increase that the residual may experience before a divergence warning is issued.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.DivergenceStopCriterium.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.DivergenceStopCriterium"/> class with the default maximum 
            relative increase and the specified minimum number of tracking iterations.
            </summary>
            <param name="minimumIterations">The minimum number of iterations over which the residual must grow before a divergence warning is issued. </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.DivergenceStopCriterium.#ctor(System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.DivergenceStopCriterium"/> class with the specified maximum 
            relative increase and the specified minimum number of tracking iterations.
            </summary>
            <param name="maximumRelativeIncrease">The maximum relative increase that the residual may experience before a divergence warning is issued. </param>
            <param name="minimumIterations">The minimum number of iterations over which the residual must grow before a divergence warning is issued.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.DivergenceStopCriterium.ResetMaximumRelativeIncreaseToDefault">
            <summary>
            Returns the maximum relative increase to the default.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.DivergenceStopCriterium.ResetNumberOfIterationsToDefault">
            <summary>
            Returns the minimum number of iterations to the default.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.DivergenceStopCriterium.DetermineStatus(System.Int32,MathNet.Numerics.LinearAlgebra.Complex32.Vector,MathNet.Numerics.LinearAlgebra.Complex32.Vector,MathNet.Numerics.LinearAlgebra.Complex32.Vector)">
            <summary>
            Determines the status of the iterative calculation based on the stop criteria stored
            by the current <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IIterationStopCriterium"/>. Result is set into <c>Status</c> field.
            </summary>
            <param name="iterationNumber">The number of iterations that have passed so far.</param>
            <param name="solutionVector">The vector containing the current solution values.</param>
            <param name="sourceVector">The right hand side vector.</param>
            <param name="residualVector">The vector containing the current residual vectors.</param>
            <remarks>
            The individual stop criteria may internally track the progress of the calculation based
            on the invocation of this method. Therefore this method should only be called if the 
            calculation has moved forwards at least one step.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.DivergenceStopCriterium.IsDiverging">
            <summary>
            Detect if solution is diverging
            </summary>
            <returns><c>true</c> if diverging, otherwise <c>false</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.DivergenceStopCriterium.SetStatusToDiverged">
            <summary>
            Set status to <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationDiverged"/>
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.DivergenceStopCriterium.SetStatusToRunning">
            <summary>
            Set status to <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationRunning"/>
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.DivergenceStopCriterium.ResetToPrecalculationState">
            <summary>
            Resets the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IIterationStopCriterium"/> to the pre-calculation state.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.DivergenceStopCriterium.Clone">
            <summary>
            Clones the current <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.DivergenceStopCriterium"/> and its settings.
            </summary>
            <returns>A new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.DivergenceStopCriterium"/> class.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.DivergenceStopCriterium.MaximumRelativeIncrease">
            <summary>
            Gets or sets the maximum relative increase that the residual may experience before a divergence warning is issued.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <c>Maximum</c> is set to zero or below.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.DivergenceStopCriterium.MinimumNumberOfIterations">
            <summary>
            Gets or sets the minimum number of iterations over which the residual must grow before
            issuing a divergence warning.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <c>value</c> is set to less than one.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.DivergenceStopCriterium.RequiredHistoryLength">
            <summary>
            Gets required history Length
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.DivergenceStopCriterium.Status">
            <summary>
            Gets the current calculation status.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.DivergenceStopCriterium.StopLevel">
            <summary>
            Gets the <see cref="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.DivergenceStopCriterium.StopLevel"/> which indicates what sort of stop criterium this
            <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IIterationStopCriterium"/> monitors.
            </summary>
            <value>Returns <see cref="F:MathNet.Numerics.LinearAlgebra.Generic.Solvers.StopCriterium.StopLevel.Divergence"/>.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.FailureStopCriterium">
            <summary>
            Defines an <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IIterationStopCriterium"/> that monitors residuals for NaN's.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.FailureStopCriterium.DefaultLastIterationNumber">
            <summary>
            Defines the default last iteration number. Set to -1 because iterations normally
            start at 0.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.FailureStopCriterium.DefaultStatus">
            <summary>
            The default status.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.FailureStopCriterium._status">
            <summary>
            The status of the calculation
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.FailureStopCriterium._lastIteration">
            <summary>
            The iteration number of the last iteration.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.FailureStopCriterium.DetermineStatus(System.Int32,MathNet.Numerics.LinearAlgebra.Complex32.Vector,MathNet.Numerics.LinearAlgebra.Complex32.Vector,MathNet.Numerics.LinearAlgebra.Complex32.Vector)">
            <summary>
            Determines the status of the iterative calculation based on the stop criteria stored
            by the current <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IIterationStopCriterium"/>. Result is set into <c>Status</c> field.
            </summary>
            <param name="iterationNumber">The number of iterations that have passed so far.</param>
            <param name="solutionVector">The vector containing the current solution values.</param>
            <param name="sourceVector">The right hand side vector.</param>
            <param name="residualVector">The vector containing the current residual vectors.</param>
            <remarks>
            The individual stop criteria may internally track the progress of the calculation based
            on the invocation of this method. Therefore this method should only be called if the 
            calculation has moved forwards at least one step.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.FailureStopCriterium.SetStatusToFailed">
            <summary>
            Set status to <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationFailure"/>
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.FailureStopCriterium.SetStatusToRunning">
            <summary>
            Set status to <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationRunning"/>
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.FailureStopCriterium.ResetToPrecalculationState">
            <summary>
            Resets the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IIterationStopCriterium"/> to the pre-calculation state.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.FailureStopCriterium.Clone">
            <summary>
            Clones the current <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.FailureStopCriterium"/> and its settings.
            </summary>
            <returns>A new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.FailureStopCriterium"/> class.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.FailureStopCriterium.Status">
            <summary>
            Gets the current calculation status.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.FailureStopCriterium.StopLevel">
            <summary>
            Gets the <see cref="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.FailureStopCriterium.StopLevel"/>which indicates what sort of stop criterium this
            <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IIterationStopCriterium"/> monitors.
            </summary>
            <value>Returns <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationFailure"/>.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IterationCountStopCriterium">
            <summary>
            Defines an <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IIterationStopCriterium"/> that monitors the numbers of iteration 
            steps as stop criterium.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IterationCountStopCriterium.DefaultMaximumNumberOfIterations">
            <summary>
            The default value for the maximum number of iterations the process is allowed
            to perform.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IterationCountStopCriterium.DefaultStatus">
            <summary>
            The default status.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IterationCountStopCriterium._maximumNumberOfIterations">
            <summary>
            The maximum number of iterations the calculation is allowed to perform.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IterationCountStopCriterium._status">
            <summary>
            The status of the calculation
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IterationCountStopCriterium.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IterationCountStopCriterium"/> class with the default maximum 
            number of iterations.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IterationCountStopCriterium.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IterationCountStopCriterium"/> class with the specified maximum
            number of iterations.
            </summary>
            <param name="maximumNumberOfIterations">The maximum number of iterations the calculation is allowed to perform.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IterationCountStopCriterium.ResetMaximumNumberOfIterationsToDefault">
            <summary>
            Returns the maximum number of iterations to the default.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IterationCountStopCriterium.DetermineStatus(System.Int32,MathNet.Numerics.LinearAlgebra.Complex32.Vector,MathNet.Numerics.LinearAlgebra.Complex32.Vector,MathNet.Numerics.LinearAlgebra.Complex32.Vector)">
            <summary>
            Determines the status of the iterative calculation based on the stop criteria stored
            by the current <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IterationCountStopCriterium"/>. Result is set into <c>Status</c> field.
            </summary>
            <param name="iterationNumber">The number of iterations that have passed so far.</param>
            <param name="solutionVector">The vector containing the current solution values.</param>
            <param name="sourceVector">The right hand side vector.</param>
            <param name="residualVector">The vector containing the current residual vectors.</param>
            <remarks>
            The individual stop criteria may internally track the progress of the calculation based
            on the invocation of this method. Therefore this method should only be called if the 
            calculation has moved forwards at least one step.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IterationCountStopCriterium.SetStatusToFinished">
            <summary>
            Set status to <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationFailure"/>
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IterationCountStopCriterium.SetStatusToRunning">
            <summary>
            Set status to <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationRunning"/>
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IterationCountStopCriterium.ResetToPrecalculationState">
            <summary>
            Resets the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IterationCountStopCriterium"/> to the pre-calculation state.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IterationCountStopCriterium.Clone">
            <summary>
            Clones the current <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IterationCountStopCriterium"/> and its settings.
            </summary>
            <returns>A new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IterationCountStopCriterium"/> class.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IterationCountStopCriterium.MaximumNumberOfIterations">
            <summary>
            Gets or sets the maximum number of iterations the calculation is allowed to perform.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <c>Maximum</c> is set to a negative value.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IterationCountStopCriterium.Status">
            <summary>
            Gets the current calculation status.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IterationCountStopCriterium.StopLevel">
            <summary>
            Gets the <see cref="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IterationCountStopCriterium.StopLevel"/> which indicates what sort of stop criterium this
            <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IterationCountStopCriterium"/> monitors.
            </summary>
            <value>Returns <see cref="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IterationCountStopCriterium.StopLevel"/>.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.ResidualStopCriterium">
            <summary>
            Defines an <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IIterationStopCriterium"/> that monitors residuals as stop criterium.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.ResidualStopCriterium.DefaultMaximumResidual">
            <summary>
            The default value for the maximum value of the residual.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.ResidualStopCriterium.DefaultMinimumIterationsBelowMaximum">
            <summary>
            The default value for the minimum number of iterations.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.ResidualStopCriterium.DefaultLastIterationNumber">
            <summary>
            Defines the default last iteration number. Set to -1 because iterations normally start at 0.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.ResidualStopCriterium.DefaultStatus">
            <summary>
            The default status.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.ResidualStopCriterium._maximum">
            <summary>
            The maximum value for the residual below which the calculation is considered converged.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.ResidualStopCriterium._minimumIterationsBelowMaximum">
            <summary>
            The minimum number of iterations for which the residual has to be below the maximum before
            the calculation is considered converged.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.ResidualStopCriterium._status">
            <summary>
            The status of the calculation
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.ResidualStopCriterium._iterationCount">
            <summary>
            The number of iterations since the residuals got below the maximum.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.ResidualStopCriterium._lastIteration">
            <summary>
            The iteration number of the last iteration.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.ResidualStopCriterium.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.ResidualStopCriterium"/> class with the default maximum 
            residual and the default minimum number of iterations.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.ResidualStopCriterium.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.ResidualStopCriterium"/> class with the specified 
            maximum residual and the default minimum number of iterations.
            </summary>
            <param name="maximum">The maximum value for the residual below which the calculation is considered converged.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.ResidualStopCriterium.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.ResidualStopCriterium"/> class with the default maximum residual
            and specified minimum number of iterations.
            </summary>
            <param name="minimumIterationsBelowMaximum">
            The minimum number of iterations for which the residual has to be below the maximum before
            the calculation is considered converged.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.ResidualStopCriterium.#ctor(System.Single,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.ResidualStopCriterium"/> class with the specified 
            maximum residual and minimum number of iterations.
            </summary>
            <param name="maximum">
            The maximum value for the residual below which the calculation is considered converged.
            </param>
            <param name="minimumIterationsBelowMaximum">
            The minimum number of iterations for which the residual has to be below the maximum before
            the calculation is considered converged.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.ResidualStopCriterium.ResetMaximumResidualToDefault">
            <summary>
            Returns the maximum residual to the default.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.ResidualStopCriterium.ResetMinimumIterationsBelowMaximumToDefault">
            <summary>
            Returns the minimum number of iterations to the default.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.ResidualStopCriterium.DetermineStatus(System.Int32,MathNet.Numerics.LinearAlgebra.Complex32.Vector,MathNet.Numerics.LinearAlgebra.Complex32.Vector,MathNet.Numerics.LinearAlgebra.Complex32.Vector)">
            <summary>
            Determines the status of the iterative calculation based on the stop criteria stored
            by the current <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IIterationStopCriterium"/>. Result is set into <c>Status</c> field.
            </summary>
            <param name="iterationNumber">The number of iterations that have passed so far.</param>
            <param name="solutionVector">The vector containing the current solution values.</param>
            <param name="sourceVector">The right hand side vector.</param>
            <param name="residualVector">The vector containing the current residual vectors.</param>
            <remarks>
            The individual stop criteria may internally track the progress of the calculation based
            on the invocation of this method. Therefore this method should only be called if the 
            calculation has moved forwards at least one step.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.ResidualStopCriterium.ComputeStopCriterium(System.Single)">
            <summary>
            Calculate stop criterium
            </summary>
            <param name="solutionNorm">Solution vector norm</param>
            <returns>Criterium value</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.ResidualStopCriterium.SetStatusToDiverged">
            <summary>
            Set status to <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationDiverged"/>
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.ResidualStopCriterium.SetStatusToConverged">
            <summary>
            Set status to <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationConverged"/>
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.ResidualStopCriterium.SetStatusToRunning">
            <summary>
            Set status to <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationRunning"/>
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.ResidualStopCriterium.ResetToPrecalculationState">
            <summary>
            Resets the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IIterationStopCriterium"/> to the pre-calculation state.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.ResidualStopCriterium.Clone">
            <summary>
            Clones the current <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.ResidualStopCriterium"/> and its settings.
            </summary>
            <returns>A new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.ResidualStopCriterium"/> class.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.ResidualStopCriterium.Maximum">
            <summary>
            Gets or sets the maximum value for the residual below which the calculation is considered 
            converged.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <c>Maximum</c> is set to a negative value.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.ResidualStopCriterium.MinimumIterationsBelowMaximum">
            <summary>
            Gets or sets the minimum number of iterations for which the residual has to be
            below the maximum before the calculation is considered converged.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <c>BelowMaximumFor</c> is set to a value less than 1.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.ResidualStopCriterium.Status">
            <summary>
            Gets the current calculation status.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.ResidualStopCriterium.StopLevel">
            <summary>
            Gets the <see cref="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.ResidualStopCriterium.StopLevel"/> which indicates what sort of stop criterium this
            <see cref="T:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.IIterationStopCriterium"/> monitors.
            </summary>
            <value>Returns <see cref="P:MathNet.Numerics.LinearAlgebra.Complex32.Solvers.StopCriterium.ResidualStopCriterium.StopLevel"/>.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex32.SparseVector">
            <summary>
            A vector with sparse storage, intended for very large vectors where most of the cells are zero.
            </summary>
            <remarks>The sparse vector is not thread safe.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseVector.#ctor(MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage{MathNet.Numerics.Complex32})">
            <summary>
            Create a new sparse vector straight from an initialized vector storage instance.
            The storage is used directly without copying.
            Intended for advanced scenarios where you're working directly with
            storage for performance or interop reasons.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseVector.#ctor(System.Int32)">
            <summary>
            Create a new sparse vector with the given length.
            All cells of the vector will be initialized to zero.
            Zero-length vectors are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If length is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseVector.OfVector(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Create a new sparse vector as a copy of the given other vector.
            This new vector will be independent from the other vector.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseVector.OfEnumerable(System.Collections.Generic.IEnumerable{MathNet.Numerics.Complex32})">
            <summary>
            Create a new sparse vector as a copy of the given enumerable.
            This new vector will be independent from the enumerable.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseVector.OfIndexedEnumerable(System.Int32,System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,MathNet.Numerics.Complex32}})">
            <summary>
            Create a new sparse vector as a copy of the given indexed enumerable.
            Keys must be provided at most once, zero is assumed if a key is omitted.
            This new vector will be independent from the enumerable.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseVector.Create(System.Int32,System.Func{System.Int32,MathNet.Numerics.Complex32})">
            <summary>
            Create a new sparse vector and initialize each value using the provided init function.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseVector.#ctor(System.Int32,MathNet.Numerics.Complex32)">
            <summary>
            Create a new sparse vector with the given length.
            All cells of the vector will be initialized with the provided value.
            Zero-length vectors are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If length is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseVector.#ctor(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Create a new sparse vector as a copy of the given other vector.
            This new vector will be independent from the other vector.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseVector.#ctor(System.Collections.Generic.IEnumerable{MathNet.Numerics.Complex32})">
            <summary>
            Create a new sparse vector as a copy of the given enumerable.
            This new vector will be independent from the enumerable.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseVector.CreateMatrix(System.Int32,System.Int32)">
            <summary>
            Creates a matrix with the given dimensions using the same storage type
            as this vector.
            </summary>
            <param name="rows">
            The number of rows.
            </param>
            <param name="columns">
            The number of columns.
            </param>
            <returns>
            A matrix with the given dimensions.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseVector.CreateVector(System.Int32)">
            <summary>
            Creates a <strong>Vector</strong> of the given size using the same storage type
            as this vector.
            </summary>
            <param name="size">
            The size of the <strong>Vector</strong> to create.
            </param>
            <returns>
            The new <c>Vector</c>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseVector.DoConjugate(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Conjugates vector and save result to <paramref name="result"/>
            </summary>
            <param name="result">Target vector</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseVector.DoAdd(MathNet.Numerics.Complex32,MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Adds a scalar to each element of the vector and stores the result in the result vector.
            Warning, the new 'sparse vector' with a non-zero scalar added to it will be a 100% filled
            sparse vector and very inefficient. Would be better to work with a dense vector instead.
            </summary>
            <param name="scalar">
            The scalar to add.
            </param>
            <param name="result">
            The vector to store the result of the addition.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseVector.DoAdd(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Adds another vector to this vector and stores the result into the result vector.
            </summary>
            <param name="other">
            The vector to add to this one.
            </param>
            <param name="result">
            The vector to store the result of the addition.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseVector.DoSubtract(MathNet.Numerics.Complex32,MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Subtracts a scalar from each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">
            The scalar to subtract.
            </param>
            <param name="result">
            The vector to store the result of the subtraction.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseVector.DoSubtract(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Subtracts another vector to this vector and stores the result into the result vector.
            </summary>
            <param name="other">
            The vector to subtract from this one.
            </param>
            <param name="result">
            The vector to store the result of the subtraction.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseVector.DoNegate(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Negates vector and saves result to <paramref name="result"/>
            </summary>
            <param name="result">Target vector</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseVector.DoMultiply(MathNet.Numerics.Complex32,MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Multiplies a scalar to each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">
            The scalar to multiply.
            </param>
            <param name="result">
            The vector to store the result of the multiplication.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseVector.DoDotProduct(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Computes the dot product between this vector and another vector.
            </summary>
            <param name="other">
            The other vector to add.
            </param>
            <returns>s
            The result of the addition.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseVector.op_Addition(MathNet.Numerics.LinearAlgebra.Complex32.SparseVector,MathNet.Numerics.LinearAlgebra.Complex32.SparseVector)">
            <summary>
            Adds two <strong>Vectors</strong> together and returns the results.
            </summary>
            <param name="leftSide">One of the vectors to add.</param>
            <param name="rightSide">The other vector to add.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseVector.op_UnaryNegation(MathNet.Numerics.LinearAlgebra.Complex32.SparseVector)">
            <summary>
            Returns a <strong>Vector</strong> containing the negated values of <paramref name="rightSide"/>. 
            </summary>
            <param name="rightSide">The vector to get the values from.</param>
            <returns>A vector containing the negated values as <paramref name="rightSide"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseVector.op_Subtraction(MathNet.Numerics.LinearAlgebra.Complex32.SparseVector,MathNet.Numerics.LinearAlgebra.Complex32.SparseVector)">
            <summary>
            Subtracts two <strong>Vectors</strong> and returns the results.
            </summary>
            <param name="leftSide">The vector to subtract from.</param>
            <param name="rightSide">The vector to subtract.</param>
            <returns>The result of the subtraction.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseVector.op_Multiply(MathNet.Numerics.LinearAlgebra.Complex32.SparseVector,MathNet.Numerics.Complex32)">
            <summary>
            Multiplies a vector with a complex.
            </summary>
            <param name="leftSide">The vector to scale.</param>
            <param name="rightSide">The complex value.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseVector.op_Multiply(MathNet.Numerics.Complex32,MathNet.Numerics.LinearAlgebra.Complex32.SparseVector)">
            <summary>
            Multiplies a vector with a complex.
            </summary>
            <param name="leftSide">The complex value.</param>
            <param name="rightSide">The vector to scale.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseVector.op_Multiply(MathNet.Numerics.LinearAlgebra.Complex32.SparseVector,MathNet.Numerics.LinearAlgebra.Complex32.SparseVector)">
            <summary>
            Computes the dot product between two <strong>Vectors</strong>.
            </summary>
            <param name="leftSide">The left row vector.</param>
            <param name="rightSide">The right column vector.</param>
            <returns>The dot product between the two vectors.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseVector.op_Division(MathNet.Numerics.LinearAlgebra.Complex32.SparseVector,MathNet.Numerics.Complex32)">
            <summary>
            Divides a vector with a complex.
            </summary>
            <param name="leftSide">The vector to divide.</param>
            <param name="rightSide">The complex value.</param>
            <returns>The result of the division.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseVector.op_Modulus(MathNet.Numerics.LinearAlgebra.Complex32.SparseVector,MathNet.Numerics.Complex32)">
            <summary>
            Computes the modulus of each element of the vector of the given divisor.
            </summary>
            <param name="leftSide">The vector whose elements we want to compute the modulus of.</param>
            <param name="rightSide">The divisor to use,</param>
            <returns>The result of the calculation</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseVector.AbsoluteMinimumIndex">
            <summary>
            Returns the index of the absolute minimum element.
            </summary>
            <returns>The index of absolute minimum element.</returns>   
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseVector.Sum">
            <summary>
            Computes the sum of the vector's elements.
            </summary>
            <returns>The sum of the vector's elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseVector.SumMagnitudes">
            <summary>
            Computes the sum of the absolute value of the vector's elements.
            </summary>
            <returns>The sum of the absolute value of the vector's elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseVector.DoPointwiseMultiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Pointwise multiplies this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to pointwise multiply with this one.</param>
            <param name="result">The vector to store the result of the pointwise multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseVector.DoPointwiseDivide(MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32},MathNet.Numerics.LinearAlgebra.Generic.Vector{MathNet.Numerics.Complex32})">
            <summary>
            Pointwise multiplies this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to pointwise multiply with this one.</param>
            <param name="result">The vector to store the result of the pointwise multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseVector.OuterProduct(MathNet.Numerics.LinearAlgebra.Complex32.SparseVector,MathNet.Numerics.LinearAlgebra.Complex32.SparseVector)">
            <summary>
            Outer product of two vectors
            </summary>
            <param name="u">First vector</param>
            <param name="v">Second vector</param>
            <returns>Matrix M[i,j] = u[i]*v[j] </returns>
            <exception cref="T:System.ArgumentNullException">If the u vector is <see langword="null"/>.</exception> 
            <exception cref="T:System.ArgumentNullException">If the v vector is <see langword="null"/>.</exception> 
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseVector.OuterProduct(MathNet.Numerics.LinearAlgebra.Complex32.SparseVector)">
            <summary>
            Outer product of this and another vector.
            </summary>
            <param name="v">The vector to operate on.</param>
            <returns>
            Matrix M[i,j] = this[i] * v[j].
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseVector.Norm(System.Double)">
            <summary>
            Computes the p-Norm.
            </summary>
            <param name="p">The p value.</param>
            <returns>Scalar <c>ret = (sum(abs(this[i])^p))^(1/p)</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseVector.Parse(System.String)">
            <summary>
            Creates a double sparse vector based on a string. The string can be in the following formats (without the
            quotes): 'n', 'n,n,..', '(n,n,..)', '[n,n,...]', where n is a Complex32.
            </summary>
            <returns>
            A double sparse vector containing the values specified by the given string.
            </returns>
            <param name="value">
            The string to parse.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseVector.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates a double sparse vector based on a string. The string can be in the following formats (without the
            quotes): 'n', 'n;n;..', '(n;n;..)', '[n;n;...]', where n is a Complex32.
            </summary>
            <returns>
            A double sparse vector containing the values specified by the given string.
            </returns>
            <param name="value">
            the string to parse.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseVector.TryParse(System.String,MathNet.Numerics.LinearAlgebra.Complex32.SparseVector@)">
            <summary>
            Converts the string representation of a complex sparse vector to double-precision sparse vector equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing a complex vector to convert.
            </param>
            <param name="result">
            The parsed value.
            </param>
            <returns>
            If the conversion succeeds, the result will contain a complex number equivalent to value.
            Otherwise the result will be <c>null</c>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex32.SparseVector.TryParse(System.String,System.IFormatProvider,MathNet.Numerics.LinearAlgebra.Complex32.SparseVector@)">
            <summary>
            Converts the string representation of a complex sparse vector to double-precision sparse vector equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing a complex vector to convert.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about value.
            </param>
            <param name="result">
            The parsed value.
            </param>
            <returns>
            If the conversion succeeds, the result will contain a complex number equivalent to value.
            Otherwise the result will be <c>null</c>.
            </returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex32.SparseVector.NonZerosCount">
            <summary>
            Gets the number of non zero elements in the vector.
            </summary>
            <value>The number of non zero elements.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseGramSchmidt">
            <summary>
            <para>A class which encapsulates the functionality of the QR decomposition Modified Gram-Schmidt Orthogonalization.</para>
            <para>Any complex square matrix A may be decomposed as A = QR where Q is an unitary mxn matrix and R is an nxn upper triangular matrix.</para>
            </summary>
            <remarks>
            The computation of the QR decomposition is done at construction time by modified Gram-Schmidt Orthogonalization.
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseGramSchmidt._provider">
            <summary>
            used for QR solve
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseGramSchmidt.#ctor(MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseGramSchmidt"/> class. This object creates an unitary matrix 
            using the modified Gram-Schmidt method.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> row count is less then column count</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is rank deficient</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseGramSchmidt.Factorize(System.Numerics.Complex[],System.Int32,System.Int32,System.Numerics.Complex[])">
            <summary>
            Factorize matrix using the modified Gram-Schmidt method.
            </summary>
            <param name="q">Initial matrix. On exit is replaced by <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/> Q.</param>
            <param name="rowsQ">Number of rows in <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/> Q.</param>
            <param name="columnsQ">Number of columns in <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/> Q.</param>
            <param name="r">On exit is filled by <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/> R.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseGramSchmidt.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseGramSchmidt.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseEvd">
            <summary>
            Eigenvalues and eigenvectors of a complex matrix.
            </summary>
            <remarks>
            If A is hermitan, then A = V*D*V' where the eigenvalue matrix D is
            diagonal and the eigenvector matrix V is hermitan.
            I.e. A = V*D*V' and V*VH=I.
            If A is not symmetric, then the eigenvalue matrix D is block diagonal
            with the real eigenvalues in 1-by-1 blocks and any complex eigenvalues,
            lambda + i*mu, in 2-by-2 blocks, [lambda, mu; -mu, lambda].  The
            columns of V represent the eigenvectors in the sense that A*V = V*D,
            i.e. A.Multiply(V) equals V.Multiply(D).  The matrix V may be badly
            conditioned, or even singular, so the validity of the equation
            A = V*D*Inverse(V) depends upon V.Condition().
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseEvd.#ctor(MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseEvd"/> class. This object will compute the
            the eigenvalue decomposition when the constructor is called and cache it's decomposition.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If EVD algorithm failed to converge with matrix <paramref name="matrix"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseEvd.SymmetricTridiagonalize(System.Numerics.Complex[],System.Double[],System.Double[],System.Numerics.Complex[],System.Int32)">
            <summary>
            Reduces a complex hermitian matrix to a real symmetric tridiagonal matrix using unitary similarity transformations.
            </summary>
            <param name="matrixA">Source matrix to reduce</param>
            <param name="d">Output: Arrays for internal storage of real parts of eigenvalues</param>
            <param name="e">Output: Arrays for internal storage of imaginary parts of eigenvalues</param>
            <param name="tau">Output: Arrays that contains further information about the transformations.</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedures HTRIDI by 
            Smith, Boyle, Dongarra, Garbow, Ikebe, Klema, Moler, and Wilkinson, Handbook for 
            Auto. Comp., Vol.ii-Linear Algebra, and the corresponding 
            Fortran subroutine in EISPACK.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseEvd.SymmetricDiagonalize(System.Numerics.Complex[],System.Double[],System.Double[],System.Int32)">
            <summary>
            Symmetric tridiagonal QL algorithm.
            </summary>
            <param name="dataEv">Data array of matrix V (eigenvectors)</param>
            <param name="d">Arrays for internal storage of real parts of eigenvalues</param>
            <param name="e">Arrays for internal storage of imaginary parts of eigenvalues</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedures tql2, by
            Bowdler, Martin, Reinsch, and Wilkinson, Handbook for
            Auto. Comp., Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutine in EISPACK.</remarks>
            <exception cref="T:MathNet.Numerics.NonConvergenceException"></exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseEvd.SymmetricUntridiagonalize(System.Numerics.Complex[],System.Numerics.Complex[],System.Numerics.Complex[],System.Int32)">
            <summary>
            Determines eigenvectors by undoing the symmetric tridiagonalize transformation
            </summary>
            <param name="dataEv">Data array of matrix V (eigenvectors)</param>
            <param name="matrixA">Previously tridiagonalized matrix by <see cref="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseEvd.SymmetricTridiagonalize(System.Numerics.Complex[],System.Double[],System.Double[],System.Numerics.Complex[],System.Int32)"/>.</param>
            <param name="tau">Contains further information about the transformations</param>
            <param name="order">Input matrix order</param>
            <remarks>This is derived from the Algol procedures HTRIBK, by
            by Smith, Boyle, Dongarra, Garbow, Ikebe, Klema, Moler, and Wilkinson, Handbook for
            Auto. Comp., Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutine in EISPACK.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseEvd.NonsymmetricReduceToHessenberg(System.Numerics.Complex[],System.Numerics.Complex[],System.Int32)">
            <summary>
            Nonsymmetric reduction to Hessenberg form.
            </summary>
            <param name="dataEv">Data array of matrix V (eigenvectors)</param>
            <param name="matrixH">Array for internal storage of nonsymmetric Hessenberg form.</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedures orthes and ortran,
            by Martin and Wilkinson, Handbook for Auto. Comp.,
            Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutines in EISPACK.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseEvd.NonsymmetricReduceHessenberToRealSchur(System.Numerics.Complex[],System.Numerics.Complex[],System.Numerics.Complex[],System.Int32)">
            <summary>
            Nonsymmetric reduction from Hessenberg to real Schur form.
            </summary>
            <param name="vectorV">Data array of the eigenvectors</param>
            <param name="dataEv">Data array of matrix V (eigenvectors)</param>
            <param name="matrixH">Array for internal storage of nonsymmetric Hessenberg form.</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedure hqr2,
            by Martin and Wilkinson, Handbook for Auto. Comp.,
            Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutine in EISPACK.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseEvd.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseEvd.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A EVD factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseCholesky">
            <summary>
            <para>A class which encapsulates the functionality of a Cholesky factorization for dense matrices.</para>
            <para>For a symmetric, positive definite matrix A, the Cholesky factorization
            is an lower triangular matrix L so that A = L*L'.</para>
            </summary>
            <remarks>
            The computation of the Cholesky factorization is done at construction time. If the matrix is not symmetric
            or positive definite, the constructor will throw an exception.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseCholesky.#ctor(MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseCholesky"/> class. This object will compute the
            Cholesky factorization when the constructor is called and cache it's factorization.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not positive definite.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseCholesky.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A Cholesky factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseCholesky.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A Cholesky factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseLU">
            <summary>
            <para>A class which encapsulates the functionality of an LU factorization.</para>
            <para>For a matrix A, the LU factorization is a pair of lower triangular matrix L and
            upper triangular matrix U so that A = L*U.</para>
            </summary>
            <remarks>
            The computation of the LU factorization is done at construction time.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseLU.#ctor(MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseLU"/> class. This object will compute the
            LU factorization when the constructor is called and cache it's factorization.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseLU.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <c>AX = B</c>, with A LU factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <c>B</c>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <c>X</c>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseLU.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <c>Ax = b</c>, with A LU factorized.
            </summary>
            <param name="input">The right hand side vector, <c>b</c>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <c>x</c>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseLU.Inverse">
            <summary>
            Returns the inverse of this matrix. The inverse is calculated using LU decomposition.
            </summary>
            <returns>The inverse of this matrix.</returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseQR">
            <summary>
            <para>A class which encapsulates the functionality of the QR decomposition.</para>
            <para>Any real square matrix A may be decomposed as A = QR where Q is an orthogonal matrix 
            (its columns are orthogonal unit vectors meaning QTQ = I) and R is an upper triangular matrix 
            (also called right triangular matrix).</para>
            </summary>
            <remarks>
            The computation of the QR decomposition is done at construction time by Householder transformation.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseQR.#ctor(MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix,MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseQR"/> class. This object will compute the
            QR factorization when the constructor is called and cache it's factorization.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <param name="method">The type of QR factorization to perform.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> row count is less then column count</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseQR.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseQR.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseQR.Tau">
            <summary>
             Gets or sets Tau vector. Contains additional information on Q - used for native solver.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseSvd">
            <summary>
            <para>A class which encapsulates the functionality of the singular value decomposition (SVD) for <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix"/>.</para>
            <para>Suppose M is an m-by-n matrix whose entries are real numbers. 
            Then there exists a factorization of the form M = UΣVT where:
            - U is an m-by-m unitary matrix;
            - Σ is m-by-n diagonal matrix with nonnegative real numbers on the diagonal;
            - VT denotes transpose of V, an n-by-n unitary matrix; 
            Such a factorization is called a singular-value decomposition of M. A common convention is to order the diagonal 
            entries Σ(i,i) in descending order. In this case, the diagonal matrix Σ is uniquely determined 
            by M (though the matrices U and V are not). The diagonal entries of Σ are known as the singular values of M.</para>
            </summary>
            <remarks>
            The computation of the singular value decomposition is done at construction time.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseSvd.#ctor(MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseSvd"/> class. This object will compute the
            the singular value decomposition when the constructor is called and cache it's decomposition.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <param name="computeVectors">Compute the singular U and VT vectors or not.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If SVD algorithm failed to converge with matrix <paramref name="matrix"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseSvd.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseSvd.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserGramSchmidt">
            <summary>
            <para>A class which encapsulates the functionality of the QR decomposition Modified Gram-Schmidt Orthogonalization.</para>
            <para>Any complex square matrix A may be decomposed as A = QR where Q is an unitary mxn matrix and R is an nxn upper triangular matrix.</para>
            </summary>
            <remarks>
            The computation of the QR decomposition is done at construction time by modified Gram-Schmidt Orthogonalization.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserGramSchmidt.#ctor(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserGramSchmidt"/> class. This object creates an unitary matrix 
            using the modified Gram-Schmidt method.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> row count is less then column count</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is rank deficient</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserGramSchmidt.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserGramSchmidt.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserCholesky">
            <summary>
            <para>A class which encapsulates the functionality of a Cholesky factorization for user matrices.</para>
            <para>For a symmetric, positive definite matrix A, the Cholesky factorization
            is an lower triangular matrix L so that A = L*L'.</para>
            </summary>
            <remarks>
            The computation of the Cholesky factorization is done at construction time. If the matrix is not symmetric
            or positive definite, the constructor will throw an exception.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserCholesky.#ctor(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserCholesky"/> class. This object will compute the
            Cholesky factorization when the constructor is called and cache it's factorization.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not positive definite.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserCholesky.DoCholeskyStep(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},System.Int32,System.Int32,System.Int32,System.Numerics.Complex[],System.Int32)">
            <summary>
            Calculate Cholesky step
            </summary>
            <param name="data">Factor matrix</param>
            <param name="rowDim">Number of rows</param>
            <param name="firstCol">Column start</param>
            <param name="colLimit">Total columns</param>
            <param name="multipliers">Multipliers calculated previously</param>
            <param name="availableCores">Number of available processors</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserCholesky.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A Cholesky factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserCholesky.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A Cholesky factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserEvd">
            <summary>
            Eigenvalues and eigenvectors of a complex matrix.
            </summary>
            <remarks>
            If A is hermitan, then A = V*D*V' where the eigenvalue matrix D is
            diagonal and the eigenvector matrix V is hermitan.
            I.e. A = V*D*V' and V*VH=I.
            If A is not symmetric, then the eigenvalue matrix D is block diagonal
            with the real eigenvalues in 1-by-1 blocks and any complex eigenvalues,
            lambda + i*mu, in 2-by-2 blocks, [lambda, mu; -mu, lambda].  The
            columns of V represent the eigenvectors in the sense that A*V = V*D,
            i.e. A.Multiply(V) equals V.Multiply(D).  The matrix V may be badly
            conditioned, or even singular, so the validity of the equation
            A = V*D*Inverse(V) depends upon V.Condition().
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserEvd.#ctor(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserEvd"/> class. This object will compute the
            the eigenvalue decomposition when the constructor is called and cache it's decomposition.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If EVD algorithm failed to converge with matrix <paramref name="matrix"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserEvd.SymmetricTridiagonalize(System.Numerics.Complex[0:,0:],System.Double[],System.Double[],System.Numerics.Complex[],System.Int32)">
            <summary>
            Reduces a complex hermitian matrix to a real symmetric tridiagonal matrix using unitary similarity transformations.
            </summary>
            <param name="matrixA">Source matrix to reduce</param>
            <param name="d">Output: Arrays for internal storage of real parts of eigenvalues</param>
            <param name="e">Output: Arrays for internal storage of imaginary parts of eigenvalues</param>
            <param name="tau">Output: Arrays that contains further information about the transformations.</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedures HTRIDI by 
            Smith, Boyle, Dongarra, Garbow, Ikebe, Klema, Moler, and Wilkinson, Handbook for 
            Auto. Comp., Vol.ii-Linear Algebra, and the corresponding 
            Fortran subroutine in EISPACK.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserEvd.SymmetricDiagonalize(System.Double[],System.Double[],System.Int32)">
            <summary>
            Symmetric tridiagonal QL algorithm.
            </summary>
            <param name="d">Arrays for internal storage of real parts of eigenvalues</param>
            <param name="e">Arrays for internal storage of imaginary parts of eigenvalues</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedures tql2, by
            Bowdler, Martin, Reinsch, and Wilkinson, Handbook for
            Auto. Comp., Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutine in EISPACK.</remarks>
            <exception cref="T:MathNet.Numerics.NonConvergenceException"></exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserEvd.SymmetricUntridiagonalize(System.Numerics.Complex[0:,0:],System.Numerics.Complex[],System.Int32)">
            <summary>
            Determines eigenvectors by undoing the symmetric tridiagonalize transformation
            </summary>
            <param name="matrixA">Previously tridiagonalized matrix by <see cref="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserEvd.SymmetricTridiagonalize(System.Numerics.Complex[0:,0:],System.Double[],System.Double[],System.Numerics.Complex[],System.Int32)"/>.</param>
            <param name="tau">Contains further information about the transformations</param>
            <param name="order">Input matrix order</param>
            <remarks>This is derived from the Algol procedures HTRIBK, by
            by Smith, Boyle, Dongarra, Garbow, Ikebe, Klema, Moler, and Wilkinson, Handbook for
            Auto. Comp., Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutine in EISPACK.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserEvd.NonsymmetricReduceToHessenberg(System.Numerics.Complex[0:,0:],System.Int32)">
            <summary>
            Nonsymmetric reduction to Hessenberg form.
            </summary>
            <param name="matrixH">Array for internal storage of nonsymmetric Hessenberg form.</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedures orthes and ortran,
            by Martin and Wilkinson, Handbook for Auto. Comp.,
            Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutines in EISPACK.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserEvd.NonsymmetricReduceHessenberToRealSchur(System.Numerics.Complex[0:,0:],System.Int32)">
            <summary>
            Nonsymmetric reduction from Hessenberg to real Schur form.
            </summary>
            <param name="matrixH">Array for internal storage of nonsymmetric Hessenberg form.</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedure hqr2,
            by Martin and Wilkinson, Handbook for Auto. Comp.,
            Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutine in EISPACK.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserEvd.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserEvd.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A EVD factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserLU">
            <summary>
            <para>A class which encapsulates the functionality of an LU factorization.</para>
            <para>For a matrix A, the LU factorization is a pair of lower triangular matrix L and
            upper triangular matrix U so that A = L*U.</para>
            </summary>
            <remarks>
            The computation of the LU factorization is done at construction time.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserLU.#ctor(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserLU"/> class. This object will compute the
            LU factorization when the constructor is called and cache it's factorization.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserLU.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <c>AX = B</c>, with A LU factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <c>B</c>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <c>X</c>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserLU.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <c>Ax = b</c>, with A LU factorized.
            </summary>
            <param name="input">The right hand side vector, <c>b</c>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <c>x</c>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserLU.Inverse">
            <summary>
            Returns the inverse of this matrix. The inverse is calculated using LU decomposition.
            </summary>
            <returns>The inverse of this matrix.</returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserQR">
            <summary>
            <para>A class which encapsulates the functionality of the QR decomposition.</para>
            <para>Any real square matrix A may be decomposed as A = QR where Q is an orthogonal matrix 
            (its columns are orthogonal unit vectors meaning QTQ = I) and R is an upper triangular matrix 
            (also called right triangular matrix).</para>
            </summary>
            <remarks>
            The computation of the QR decomposition is done at construction time by Householder transformation.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserQR.#ctor(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserQR"/> class. This object will compute the
            QR factorization when the constructor is called and cache it's factorization.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <param name="method">The QR factorization method to use.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserQR.GenerateColumn(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},System.Int32,System.Int32)">
            <summary>
            Generate column from initial matrix to work array
            </summary>
            <param name="a">Initial matrix</param>
            <param name="row">The first row</param>
            <param name="column">Column index</param>
            <returns>Generated vector</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserQR.ComputeQR(System.Numerics.Complex[],MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Perform calculation of Q or R
            </summary>
            <param name="u">Work array</param>
            <param name="a">Q or R matrices</param>
            <param name="rowStart">The first row</param>
            <param name="rowDim">The last row</param>
            <param name="columnStart">The first column</param>
            <param name="columnDim">The last column</param>
            <param name="availableCores">Number of available CPUs</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserQR.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserQR.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserSvd">
            <summary>
            <para>A class which encapsulates the functionality of the singular value decomposition (SVD) for <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>.</para>
            <para>Suppose M is an m-by-n matrix whose entries are real numbers. 
            Then there exists a factorization of the form M = UΣVT where:
            - U is an m-by-m unitary matrix;
            - Σ is m-by-n diagonal matrix with nonnegative real numbers on the diagonal;
            - VT denotes transpose of V, an n-by-n unitary matrix; 
            Such a factorization is called a singular-value decomposition of M. A common convention is to order the diagonal 
            entries Σ(i,i) in descending order. In this case, the diagonal matrix Σ is uniquely determined 
            by M (though the matrices U and V are not). The diagonal entries of Σ are known as the singular values of M.</para>
            </summary>
            <remarks>
            The computation of the singular value decomposition is done at construction time.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserSvd.#ctor(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserSvd"/> class. This object will compute the
            the singular value decomposition when the constructor is called and cache it's decomposition.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <param name="computeVectors">Compute the singular U and VT vectors or not.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:MathNet.Numerics.NonConvergenceException"></exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserSvd.Csign(System.Numerics.Complex,System.Numerics.Complex)">
            <summary>
            Calculates absolute value of <paramref name="z1"/> multiplied on signum function of <paramref name="z2"/>
            </summary>
            <param name="z1">Complex value z1</param>
            <param name="z2">Complex value z2</param>
            <returns>Result multiplication of signum function and absolute value</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserSvd.Swap(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},System.Int32,System.Int32,System.Int32)">
            <summary>
            Interchanges two vectors  <paramref name="columnA"/>  and  <paramref name="columnB"/>
            </summary>
            <param name="a">Source matrix</param>
            <param name="rowCount">The number of rows in <paramref name="a"/></param>
            <param name="columnA">Column A index to swap</param>
            <param name="columnB">Column B index to swap</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserSvd.CscalColumn(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},System.Int32,System.Int32,System.Int32,System.Numerics.Complex)">
            <summary>
            Scale column <paramref name="column"/> by <paramref name="z"/> starting from row <paramref name="rowStart"/>
            </summary>
            <param name="a">Source matrix</param>
            <param name="rowCount">The number of rows in <paramref name="a"/> </param>
            <param name="column">Column to scale</param>
            <param name="rowStart">Row to scale from</param>
            <param name="z">Scale value</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserSvd.CscalVector(System.Numerics.Complex[],System.Int32,System.Numerics.Complex)">
            <summary>
            Scale vector <paramref name="a"/> by <paramref name="z"/> starting from index <paramref name="start"/>
            </summary>
            <param name="a">Source vector</param>
            <param name="start">Row to scale from</param>
            <param name="z">Scale value</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserSvd.Srotg(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Given the Cartesian coordinates (da, db) of a point p, these fucntion return the parameters da, db, c, and s 
            associated with the Givens rotation that zeros the y-coordinate of the point.
            </summary>
            <param name="da">Provides the x-coordinate of the point p. On exit contains the parameter r associated with the Givens rotation</param>
            <param name="db">Provides the y-coordinate of the point p. On exit contains the parameter z associated with the Givens rotation</param>
            <param name="c">Contains the parameter c associated with the Givens rotation</param>
            <param name="s">Contains the parameter s associated with the Givens rotation</param>
            <remarks>This is equivalent to the DROTG LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserSvd.Cnrm2Column(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculate Norm 2 of the column <paramref name="column"/> in matrix <paramref name="a"/> starting from row <paramref name="rowStart"/>
            </summary>
            <param name="a">Source matrix</param>
            <param name="rowCount">The number of rows in <paramref name="a"/></param>
            <param name="column">Column index</param>
            <param name="rowStart">Start row index</param>
            <returns>Norm2 (Euclidean norm) of the column</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserSvd.Cnrm2Vector(System.Numerics.Complex[],System.Int32)">
            <summary>
            Calculate Norm 2 of the vector <paramref name="a"/> starting from index <paramref name="rowStart"/>
            </summary>
            <param name="a">Source vector</param>
            <param name="rowStart">Start index</param>
            <returns>Norm2 (Euclidean norm) of the vector</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserSvd.Cdotc(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculate dot product of <paramref name="columnA"/> and <paramref name="columnB"/> conjugating the first vector.
            </summary>
            <param name="a">Source matrix</param>
            <param name="rowCount">The number of rows in <paramref name="a"/></param>
            <param name="columnA">Index of column A</param>
            <param name="columnB">Index of column B</param>
            <param name="rowStart">Starting row index</param>
            <returns>Dot product value</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserSvd.Csrot(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Performs rotation of points in the plane. Given two vectors x <paramref name="columnA"/> and y <paramref name="columnB"/>, 
            each vector element of these vectors is replaced as follows: x(i) = c*x(i) + s*y(i); y(i) = c*y(i) - s*x(i)
            </summary>
            <param name="a">Source matrix</param>
            <param name="rowCount">The number of rows in <paramref name="a"/></param>
            <param name="columnA">Index of column A</param>
            <param name="columnB">Index of column B</param>
            <param name="c">scalar cos value</param>
            <param name="s">scalar sin value</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserSvd.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserSvd.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.BiCgStab">
            <summary>
            A Bi-Conjugate Gradient stabilized iterative matrix solver.
            </summary>
            <remarks>
            <para>
            The Bi-Conjugate Gradient Stabilized (BiCGStab) solver is an 'improvement'
            of the standard Conjugate Gradient (CG) solver. Unlike the CG solver the
            BiCGStab can be used on non-symmetric matrices. <br/>
            Note that much of the success of the solver depends on the selection of the
            proper preconditioner.
            </para>
            <para>
            The Bi-CGSTAB algorithm was taken from: <br/>
            Templates for the solution of linear systems: Building blocks
            for iterative methods
            <br/>
            Richard Barrett, Michael Berry, Tony F. Chan, James Demmel,
            June M. Donato, Jack Dongarra, Victor Eijkhout, Roldan Pozo,
            Charles Romine and Henk van der Vorst
            <br/>
            Url: <a href="http://www.netlib.org/templates/Templates.html">http://www.netlib.org/templates/Templates.html</a>
            <br/>
            Algorithm is described in Chapter 2, section 2.3.8, page 27
            </para>
            <para>
            The example code below provides an indication of the possible use of the
            solver.
            </para>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.BiCgStab.DefaultStatus">
            <summary>
            The status used if there is no status, i.e. the solver hasn't run yet and there is no
            iterator.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.BiCgStab._preconditioner">
            <summary>
            The preconditioner that will be used. Can be set to <see langword="null" />, in which case the default
            pre-conditioner will be used.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.BiCgStab._iterator">
            <summary>
            The iterative process controller.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.BiCgStab._hasBeenStopped">
            <summary>
            Indicates if the user has stopped the solver.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.BiCgStab.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.BiCgStab"/> class.
            </summary>
            <remarks>
            When using this constructor the solver will use the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator"/> with
            the standard settings and a default preconditioner.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.BiCgStab.#ctor(MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.BiCgStab"/> class.
            </summary>
            <remarks>
            <para>
            When using this constructor the solver will use a default preconditioner.
            </para>
            <para>
            The main advantages of using a user defined <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator"/> are:
            <list type="number">
            <item>It is possible to set the desired convergence limits.</item>
            <item>
            It is possible to check the reason for which the solver finished 
            the iterative procedure by calling the <see cref="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator.Status"/> property.
            </item>
            </list>
            </para>
            </remarks>
            <param name="iterator">The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator"/> that will be used to monitor the iterative process. </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.BiCgStab.#ctor(MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.IPreConditioner)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.BiCgStab"/> class.
            </summary>
            <remarks>
            When using this constructor the solver will use the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator"/> with
            the standard settings.
            </remarks>
            <param name="preconditioner">The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the matrix equation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.BiCgStab.#ctor(MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.IPreConditioner,MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.BiCgStab"/> class.
            </summary>
            <remarks>
            <para>
            The main advantages of using a user defined <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator"/> are:
            <list type="number">
            <item>It is possible to set the desired convergence limits.</item>
            <item>
            It is possible to check the reason for which the solver finished 
            the iterative procedure by calling the <see cref="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator.Status"/> property.
            </item>
            </list>
            </para>
            </remarks>
            <param name="preconditioner">The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the matrix equation. </param>
            <param name="iterator">The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator"/> that will be used to monitor the iterative process. </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.BiCgStab.SetPreconditioner(MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.IPreConditioner)">
            <summary>
            Sets the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the iterative process.
            </summary>
            <param name="preconditioner">The preconditioner.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.BiCgStab.SetIterator(MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator)">
            <summary>
            Sets the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator"/> that will be used to track the iterative process.
            </summary>
            <param name="iterator">The iterator.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.BiCgStab.StopSolve">
            <summary>
            Stops the solve process. 
            </summary>
            <remarks>
            Note that it may take an indetermined amount of time for the solver to actually stop the process.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.BiCgStab.Solve(MathNet.Numerics.LinearAlgebra.Complex.Matrix,MathNet.Numerics.LinearAlgebra.Complex.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Matrix"/>, <c>A</c>.</param>
            <param name="vector">The solution <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/>, <c>b</c>.</param>
            <returns>The result <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/>, <c>x</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.BiCgStab.Solve(MathNet.Numerics.LinearAlgebra.Complex.Matrix,MathNet.Numerics.LinearAlgebra.Complex.Vector,MathNet.Numerics.LinearAlgebra.Complex.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Matrix"/>, <c>A</c>.</param>
            <param name="input">The solution <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/>, <c>b</c>.</param>
            <param name="result">The result <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/>, <c>x</c>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.BiCgStab.CalculateTrueResidual(MathNet.Numerics.LinearAlgebra.Complex.Matrix,MathNet.Numerics.LinearAlgebra.Complex.Vector,MathNet.Numerics.LinearAlgebra.Complex.Vector,MathNet.Numerics.LinearAlgebra.Complex.Vector)">
            <summary>
            Calculates the <c>true</c> residual of the matrix equation Ax = b according to: residual = b - Ax
            </summary>
            <param name="matrix">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Matrix"/> A.</param>
            <param name="residual">Residual values in <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/>.</param>
            <param name="x">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/> x.</param>
            <param name="b">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/> b.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.BiCgStab.ShouldContinue(System.Int32,MathNet.Numerics.LinearAlgebra.Complex.Vector,MathNet.Numerics.LinearAlgebra.Complex.Vector,MathNet.Numerics.LinearAlgebra.Complex.Vector)">
            <summary>
            Determine if calculation should continue
            </summary>
            <param name="iterationNumber">Number of iterations passed</param>
            <param name="result">Result <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/>.</param>
            <param name="source">Source <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/>.</param>
            <param name="residuals">Residual <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/>.</param>
            <returns><c>true</c> if continue, otherwise <c>false</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.BiCgStab.Solve(MathNet.Numerics.LinearAlgebra.Complex.Matrix,MathNet.Numerics.LinearAlgebra.Complex.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Matrix"/>, <c>A</c>.</param>
            <param name="input">The solution <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Matrix"/>, <c>B</c>.</param>
            <returns>The result <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Matrix"/>, <c>X</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.BiCgStab.Solve(MathNet.Numerics.LinearAlgebra.Complex.Matrix,MathNet.Numerics.LinearAlgebra.Complex.Matrix,MathNet.Numerics.LinearAlgebra.Complex.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Matrix"/>, <c>A</c>.</param>
            <param name="input">The solution <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Matrix"/>, <c>B</c>.</param>
            <param name="result">The result <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Matrix"/>, <c>X</c></param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.BiCgStab.IterationResult">
            <summary>
            Gets the status of the iteration once the calculation is finished.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.CompositeSolver">
            <summary>
            A composite matrix solver. The actual solver is made by a sequence of
            matrix solvers. 
            </summary>
            <remarks>
            <para>
            Solver based on:<br />
            Faster PDE-based simulations using robust composite linear solvers<br />
            S. Bhowmicka, P. Raghavan a,*, L. McInnes b, B. Norris<br />
            Future Generation Computer Systems, Vol 20, 2004, pp 373–387<br />
            </para>
            <para>
            Note that if an iterator is passed to this solver it will be used for all the sub-solvers.
            </para>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.CompositeSolver.NonRunningStatus">
            <summary>
            The default status used if the solver is not running.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.CompositeSolver.RunningStatus">
            <summary>
            The default status used if the solver is running.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.CompositeSolver.SolverSetups">
            <summary>
            The collection of iterative solver setups. Stored based on the
            ratio between the relative speed and relative accuracy.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.CompositeSolver.LoadSolverInformation">
            <summary>
            Loads all the available <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterativeSolverSetup"/> objects from the MathNet.Numerics assembly.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.CompositeSolver.LoadSolverInformation(System.Type[])">
            <summary>
            Loads the available <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterativeSolverSetup"/> objects from the MathNet.Numerics assembly.
            </summary>
            <param name="typesToExclude">The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterativeSolver"/> types that should not be loaded.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.CompositeSolver.LoadSolverInformationFromAssembly(System.String)">
            <summary>
            Loads the available <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterativeSolverSetup"/> objects from the assembly specified by the file location.
            </summary>
            <param name="assemblyLocation">The fully qualified path to the assembly.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.CompositeSolver.LoadSolverInformationFromAssembly(System.String,System.Type[])">
            <summary>
            Loads the available <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterativeSolverSetup"/> objects from the assembly specified by the file location.
            </summary>
            <param name="assemblyLocation">The fully qualified path to the assembly.</param>
            <param name="typesToExclude">The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterativeSolver"/> types that should not be loaded. </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.CompositeSolver.LoadSolverInformationFromAssembly(System.Reflection.AssemblyName)">
            <summary>
            Loads the available <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterativeSolverSetup"/> objects from the assembly specified by the assembly name.
            </summary>
            <param name="assemblyName">The <see cref="T:System.Reflection.AssemblyName"/> of the assembly that should be searched for setup objects. </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.CompositeSolver.LoadSolverInformationFromAssembly(System.Reflection.AssemblyName,System.Type[])">
            <summary>
            Loads the available <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterativeSolverSetup"/> objects from the assembly specified by the assembly name.
            </summary>
            <param name="assemblyName">The <see cref="T:System.Reflection.AssemblyName"/> of the assembly that should be searched for setup objects.</param>
            <param name="typesToExclude">The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterativeSolver"/> types that should not be loaded.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.CompositeSolver.LoadSolverInformationFromAssembly(System.Type)">
            <summary>
            Loads the available <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterativeSolverSetup"/> objects from the assembly specified by the type.
            </summary>
            <param name="typeInAssembly">The type in the assembly which should be searched for setup objects.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.CompositeSolver.LoadSolverInformationFromAssembly(System.Type,System.Type[])">
            <summary>
            Loads the available <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterativeSolverSetup"/> objects from the assembly specified by the type.
            </summary>
            <param name="typeInAssembly">The type in the assembly which should be searched for setup objects.</param>
            <param name="typesToExclude">The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterativeSolver"/> types that should not be loaded.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.CompositeSolver.LoadSolverInformationFromAssembly(System.Reflection.Assembly)">
            <summary>
            Loads the available <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterativeSolverSetup"/> objects from the specified assembly.
            </summary>
            <param name="assembly">The assembly which will be searched for setup objects.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.CompositeSolver.LoadSolverInformationFromAssembly(System.Reflection.Assembly,System.Type[])">
            <summary>
            Loads the available <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterativeSolverSetup"/> objects from the specified assembly.
            </summary>
            <param name="assembly">The assembly which will be searched for setup objects.</param>
            <param name="typesToExclude">The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterativeSolver"/> types that should not be loaded.</param>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.CompositeSolver._solvers">
            <summary>
            The collection of solvers that will be used to 
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.CompositeSolver._status">
            <summary>
            The status of the calculation.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.CompositeSolver._iterator">
            <summary>
            The iterator that is used to control the iteration process.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.CompositeSolver._hasBeenStopped">
            <summary>
            A flag indicating if the solver has been stopped or not.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.CompositeSolver._currentSolver">
            <summary>
            The solver that is currently running. Reference is used to be able to stop the
            solver if the user cancels the solve process.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.CompositeSolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.CompositeSolver"/> class with the default iterator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.CompositeSolver.#ctor(MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.CompositeSolver"/> class with the specified iterator.
            </summary>
            <param name="iterator">The iterator that will be used to control the iteration process. </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.CompositeSolver.SetIterator(MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator)">
            <summary>
            Sets the <c>IIterator</c> that will be used to track the iterative process.
            </summary>
            <param name="iterator">The iterator.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.CompositeSolver.StopSolve">
            <summary>
            Stops the solve process. 
            </summary>
            <remarks>
            Note that it may take an indetermined amount of time for the solver to actually stop the process.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.CompositeSolver.Solve(MathNet.Numerics.LinearAlgebra.Complex.Matrix,MathNet.Numerics.LinearAlgebra.Complex.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="vector">The solution vector, <c>b</c>.</param>
            <returns>The result vector, <c>x</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.CompositeSolver.Solve(MathNet.Numerics.LinearAlgebra.Complex.Matrix,MathNet.Numerics.LinearAlgebra.Complex.Vector,MathNet.Numerics.LinearAlgebra.Complex.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution vector, <c>b</c></param>
            <param name="result">The result vector, <c>x</c></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.CompositeSolver.LoadSolvers">
            <summary>
            Load solvers
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.CompositeSolver.Solve(MathNet.Numerics.LinearAlgebra.Complex.Matrix,MathNet.Numerics.LinearAlgebra.Complex.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <returns>The result matrix, <c>X</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.CompositeSolver.Solve(MathNet.Numerics.LinearAlgebra.Complex.Matrix,MathNet.Numerics.LinearAlgebra.Complex.Matrix,MathNet.Numerics.LinearAlgebra.Complex.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <param name="result">The result matrix, <c>X</c></param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.CompositeSolver.IterationResult">
            <summary>
            Gets the status of the iteration once the calculation is finished.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.CompositeSolver.DoubleComparer">
            <summary>
            An <c>IComparer</c> used to compare double precision floating points.
            </summary>
            NOTE: The instance of this class is used only in <see cref="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.CompositeSolver.SolverSetups"/>. If C# suppports interface inheritence
            NOTE: and methods in anonymous types, then this class should be deleted and anonymous type implemented with IComaprer support
            NOTE: in <see cref="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.CompositeSolver.SolverSetups"/> constructor
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.CompositeSolver.DoubleComparer.Compare(System.Double,System.Double)">
            <summary>
            Compares two double values based on the selected comparison method.
            </summary>
            <param name="x">The first double to compare.</param>
            <param name="y">The second double to compare.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return 
            value has the following meanings: 
            Value Meaning Less than zero This object is less than the other parameter.
            Zero This object is equal to other. 
            Greater than zero This object is greater than other. 
            </returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.GpBiCg">
            <summary>
            A Generalized Product Bi-Conjugate Gradient iterative matrix solver.
            </summary>
            <remarks>
            <para>
            The Generalized Product Bi-Conjugate Gradient (GPBiCG) solver is an 
            alternative version of the Bi-Conjugate Gradient stabilized (CG) solver.
            Unlike the CG solver the GPBiCG solver can be used on 
            non-symmetric matrices. <br/>
            Note that much of the success of the solver depends on the selection of the
            proper preconditioner.
            </para>
            <para>
            The GPBiCG algorithm was taken from: <br/>
            GPBiCG(m,l): A hybrid of BiCGSTAB and GPBiCG methods with 
            efficiency and robustness
            <br/>
            S. Fujino
            <br/>
            Applied Numerical Mathematics, Volume 41, 2002, pp 107 - 117
            <br/>
            </para>
            <para>
            The example code below provides an indication of the possible use of the
            solver.
            </para>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.GpBiCg.DefaultStatus">
            <summary>
            The status used if there is no status, i.e. the solver hasn't run yet and there is no
            iterator.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.GpBiCg._preconditioner">
            <summary>
            The preconditioner that will be used. Can be set to <c>null</c>, in which case the default
            pre-conditioner will be used.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.GpBiCg._iterator">
            <summary>
            The iterative process controller.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.GpBiCg._numberOfBiCgStabSteps">
            <summary>
            Indicates the number of <c>BiCGStab</c> steps should be taken 
            before switching.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.GpBiCg._numberOfGpbiCgSteps">
            <summary>
            Indicates the number of <c>GPBiCG</c> steps should be taken 
            before switching.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.GpBiCg._hasBeenStopped">
            <summary>
            Indicates if the user has stopped the solver.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.GpBiCg.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.GpBiCg"/> class.
            </summary>
            <remarks>
            When using this constructor the solver will use the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator"/> with
            the standard settings and a default preconditioner.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.GpBiCg.#ctor(MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.GpBiCg"/> class.
            </summary>
            <remarks>
            <para>
            When using this constructor the solver will use a default preconditioner.
            </para>
            <para>
            The main advantages of using a user defined <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator"/> are:
            <list type="number">
            <item>It is possible to set the desired convergence limits.</item>
            <item>
            It is possible to check the reason for which the solver finished 
            the iterative procedure by calling the <see cref="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator.Status"/> property.
            </item>
            </list>
            </para>
            </remarks>
            <param name="iterator">The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator"/> that will be used to monitor the iterative process.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.GpBiCg.#ctor(MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.IPreConditioner)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.GpBiCg"/> class.
            </summary>
            <remarks>
            When using this constructor the solver will use the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator"/> with
            the standard settings.
            </remarks>
            <param name="preconditioner">The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the matrix equation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.GpBiCg.#ctor(MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.IPreConditioner,MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.GpBiCg"/> class.
            </summary>
            <remarks>
            <para>
            The main advantages of using a user defined <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator"/> are:
            <list type="number">
            <item>It is possible to set the desired convergence limits.</item>
            <item>
            It is possible to check the reason for which the solver finished 
            the iterative procedure by calling the <see cref="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator.Status"/> property.
            </item>
            </list>
            </para>
            </remarks>
            <param name="preconditioner">The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the matrix equation.</param>
            <param name="iterator">The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator"/> that will be used to monitor the iterative process.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.GpBiCg.SetPreconditioner(MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.IPreConditioner)">
            <summary>
            Sets the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the iterative process.
            </summary>
            <param name="preconditioner">The preconditioner.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.GpBiCg.SetIterator(MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator)">
            <summary>
            Sets the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator"/> that will be used to track the iterative process.
            </summary>
            <param name="iterator">The iterator.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.GpBiCg.StopSolve">
            <summary>
            Stops the solve process. 
            </summary>
            <remarks>
            Note that it may take an indetermined amount of time for the solver to actually
            stop the process.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.GpBiCg.Solve(MathNet.Numerics.LinearAlgebra.Complex.Matrix,MathNet.Numerics.LinearAlgebra.Complex.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="vector">The solution vector, <c>b</c>.</param>
            <returns>The result vector, <c>x</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.GpBiCg.Solve(MathNet.Numerics.LinearAlgebra.Complex.Matrix,MathNet.Numerics.LinearAlgebra.Complex.Vector,MathNet.Numerics.LinearAlgebra.Complex.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution vector, <c>b</c></param>
            <param name="result">The result vector, <c>x</c></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.GpBiCg.CalculateTrueResidual(MathNet.Numerics.LinearAlgebra.Complex.Matrix,MathNet.Numerics.LinearAlgebra.Complex.Vector,MathNet.Numerics.LinearAlgebra.Complex.Vector,MathNet.Numerics.LinearAlgebra.Complex.Vector)">
            <summary>
            Calculates the <c>true</c> residual of the matrix equation Ax = b according to: residual = b - Ax
            </summary>
            <param name="matrix">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Matrix"/> A.</param>
            <param name="residual">Residual values in <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/>.</param>
            <param name="x">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/> x.</param>
            <param name="b">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/> b.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.GpBiCg.ShouldContinue(System.Int32,MathNet.Numerics.LinearAlgebra.Complex.Vector,MathNet.Numerics.LinearAlgebra.Complex.Vector,MathNet.Numerics.LinearAlgebra.Complex.Vector)">
            <summary>
            Determine if calculation should continue
            </summary>
            <param name="iterationNumber">Number of iterations passed</param>
            <param name="result">Result <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/>.</param>
            <param name="source">Source <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/>.</param>
            <param name="residuals">Residual <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/>.</param>
            <returns><c>true</c> if continue, otherwise <c>false</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.GpBiCg.ShouldRunBiCgStabSteps(System.Int32)">
            <summary>
            Decide if to do steps with BiCgStab
            </summary>
            <param name="iterationNumber">Number of iteration</param>
            <returns><c>true</c> if yes, otherwise <c>false</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.GpBiCg.Solve(MathNet.Numerics.LinearAlgebra.Complex.Matrix,MathNet.Numerics.LinearAlgebra.Complex.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <returns>The result matrix, <c>X</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.GpBiCg.Solve(MathNet.Numerics.LinearAlgebra.Complex.Matrix,MathNet.Numerics.LinearAlgebra.Complex.Matrix,MathNet.Numerics.LinearAlgebra.Complex.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <param name="result">The result matrix, <c>X</c></param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.GpBiCg.NumberOfBiCgStabSteps">
            <summary>
            Gets or sets the number of steps taken with the <c>BiCgStab</c> algorithm
            before switching over to the <c>GPBiCG</c> algorithm.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.GpBiCg.NumberOfGpBiCgSteps">
            <summary>
            Gets or sets the number of steps taken with the <c>GPBiCG</c> algorithm
            before switching over to the <c>BiCgStab</c> algorithm.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.GpBiCg.IterationResult">
            <summary>
            Gets the status of the iteration once the calculation is finished.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.MlkBiCgStab">
            <summary>
            A Multiple-Lanczos Bi-Conjugate Gradient stabilized iterative matrix solver.
            </summary>
            <remarks>
            <para>
            The Multiple-Lanczos Bi-Conjugate Gradient stabilized (ML(k)-BiCGStab) solver is an 'improvement'
            of the standard BiCgStab solver. 
            </para>
            <para>
            The algorithm was taken from: <br/>
            ML(k)BiCGSTAB: A BiCGSTAB variant based on multiple Lanczos starting vectors
            <br/>
            Man-chung Yeung and Tony F. Chan
            <br/>
            SIAM Journal of Scientific Computing
            <br/>
            Volume 21, Number 4, pp. 1263 - 1290
            </para>
            <para>
            The example code below provides an indication of the possible use of the
            solver.
            </para>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.MlkBiCgStab.DefaultNumberOfStartingVectors">
            <summary>
            The default number of starting vectors.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.MlkBiCgStab.DefaultStatus">
            <summary>
            The status used if there is no status, i.e. the solver hasn't run yet and there is no
            iterator.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.MlkBiCgStab._preconditioner">
            <summary>
            The preconditioner that will be used. Can be set to <see langword="null" />, in which case the default
            pre-conditioner will be used.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.MlkBiCgStab._iterator">
            <summary>
            The iterative process controller.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.MlkBiCgStab._startingVectors">
            <summary>
            The collection of starting vectors which are used as the basis for the Krylov sub-space.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.MlkBiCgStab._numberOfStartingVectors">
            <summary>
            The number of starting vectors used by the algorithm
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.MlkBiCgStab._hasBeenStopped">
            <summary>
            Indicates if the user has stopped the solver.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.MlkBiCgStab.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.MlkBiCgStab"/> class.
            </summary>
            <remarks>
            When using this constructor the solver will use the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator"/> with
            the standard settings and a default preconditioner.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.MlkBiCgStab.#ctor(MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.MlkBiCgStab"/> class.
            </summary>
            <remarks>
            <para>
            When using this constructor the solver will use a default preconditioner.
            </para>
            <para>
            The main advantages of using a user defined <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator"/> are:
            <list type="number">
            <item>It is possible to set the desired convergence limits.</item>
            <item>
            It is possible to check the reason for which the solver finished 
            the iterative procedure by calling the <see cref="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator.Status"/> property.
            </item>
            </list>
            </para>
            </remarks>
            <param name="iterator">The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator"/> that will be used to monitor the iterative process.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.MlkBiCgStab.#ctor(MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.IPreConditioner)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.MlkBiCgStab"/> class.
            </summary>
            <remarks>
            When using this constructor the solver will use the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator"/> with
            the standard settings.
            </remarks>
            <param name="preconditioner">The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the matrix equation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.MlkBiCgStab.#ctor(MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.IPreConditioner,MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.MlkBiCgStab"/> class.
            </summary>
            <remarks>
            <para>
            The main advantages of using a user defined <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator"/> are:
            <list type="number">
            <item>It is possible to set the desired convergence limits.</item>
            <item>
            It is possible to check the reason for which the solver finished 
            the iterative procedure by calling the <see cref="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator.Status"/> property.
            </item>
            </list>
            </para>
            </remarks>
            <param name="preconditioner">The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the matrix equation.</param>
            <param name="iterator">The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator"/> that will be used to monitor the iterative process.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.MlkBiCgStab.ResetNumberOfStartingVectors">
            <summary>
            Resets the number of starting vectors to the default value.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.MlkBiCgStab.SetPreconditioner(MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.IPreConditioner)">
            <summary>
            Sets the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the iterative process.
            </summary>
            <param name="preconditioner">The preconditioner.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.MlkBiCgStab.SetIterator(MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator)">
            <summary>
            Sets the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator"/> that will be used to track the iterative process.
            </summary>
            <param name="iterator">The iterator.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.MlkBiCgStab.StopSolve">
            <summary>
            Stops the solve process. 
            </summary>
            <remarks>
            Note that it may take an indetermined amount of time for the solver to actually stop the process.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.MlkBiCgStab.Solve(MathNet.Numerics.LinearAlgebra.Complex.Matrix,MathNet.Numerics.LinearAlgebra.Complex.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="vector">The solution vector, <c>b</c>.</param>
            <returns>The result vector, <c>x</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.MlkBiCgStab.Solve(MathNet.Numerics.LinearAlgebra.Complex.Matrix,MathNet.Numerics.LinearAlgebra.Complex.Vector,MathNet.Numerics.LinearAlgebra.Complex.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution vector, <c>b</c></param>
            <param name="result">The result vector, <c>x</c></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.MlkBiCgStab.NumberOfStartingVectorsToCreate(System.Int32,System.Int32)">
            <summary>
            Gets the number of starting vectors to create
            </summary>
            <param name="maximumNumberOfStartingVectors">Maximum number</param>
            <param name="numberOfVariables">Number of variables</param>
            <returns>Number of starting vectors to create</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.MlkBiCgStab.CreateStartingVectors(System.Int32,System.Int32)">
            <summary>
            Returns an array of starting vectors.
            </summary>
            <param name="maximumNumberOfStartingVectors">The maximum number of starting vectors that should be created.</param>
            <param name="numberOfVariables">The number of variables.</param>
            <returns>
             An array with starting vectors. The array will never be larger than the
             <paramref name="maximumNumberOfStartingVectors"/> but it may be smaller if
             the <paramref name="numberOfVariables"/> is smaller than 
             the <paramref name="maximumNumberOfStartingVectors"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.MlkBiCgStab.CreateVectorArray(System.Int32,System.Int32)">
            <summary>
            Create random vecrors array
            </summary>
            <param name="arraySize">Number of vectors</param>
            <param name="vectorSize">Size of each vector</param>
            <returns>Array of random vectors</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.MlkBiCgStab.CalculateTrueResidual(MathNet.Numerics.LinearAlgebra.Complex.Matrix,MathNet.Numerics.LinearAlgebra.Complex.Vector,MathNet.Numerics.LinearAlgebra.Complex.Vector,MathNet.Numerics.LinearAlgebra.Complex.Vector)">
            <summary>
            Calculates the <c>true</c> residual of the matrix equation Ax = b according to: residual = b - Ax
            </summary>
            <param name="matrix">Source <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Matrix"/>A.</param>
            <param name="residual">Residual <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/> data.</param>
            <param name="x">x <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/> data.</param>
            <param name="b">b <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/> data.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.MlkBiCgStab.ShouldContinue(System.Int32,MathNet.Numerics.LinearAlgebra.Complex.Vector,MathNet.Numerics.LinearAlgebra.Complex.Vector,MathNet.Numerics.LinearAlgebra.Complex.Vector)">
            <summary>
            Determine if calculation should continue
            </summary>
            <param name="iterationNumber">Number of iterations passed</param>
            <param name="result">Result <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/>.</param>
            <param name="source">Source <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/>.</param>
            <param name="residuals">Residual <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/>.</param>
            <returns><c>true</c> if continue, otherwise <c>false</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.MlkBiCgStab.Solve(MathNet.Numerics.LinearAlgebra.Complex.Matrix,MathNet.Numerics.LinearAlgebra.Complex.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <returns>The result matrix, <c>X</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.MlkBiCgStab.Solve(MathNet.Numerics.LinearAlgebra.Complex.Matrix,MathNet.Numerics.LinearAlgebra.Complex.Matrix,MathNet.Numerics.LinearAlgebra.Complex.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <param name="result">The result matrix, <c>X</c></param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.MlkBiCgStab.NumberOfStartingVectors">
            <summary>
            Gets or sets the number of starting vectors.
            </summary>
            <remarks>
            Must be larger than 1 and smaller than the number of variables in the matrix that 
            for which this solver will be used.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.MlkBiCgStab.StartingVectors">
            <summary>
            Gets or sets a series of orthonormal vectors which will be used as basis for the 
            Krylov sub-space.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.MlkBiCgStab.IterationResult">
            <summary>
            Gets the status of the iteration once the calculation is finished.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.TFQMR">
            <summary>
            A Transpose Free Quasi-Minimal Residual (TFQMR) iterative matrix solver.
            </summary>
            <remarks>
            <para>
            The TFQMR algorithm was taken from: <br/>
            Iterative methods for sparse linear systems.
            <br/>
            Yousef Saad
            <br/>
            Algorithm is described in Chapter 7, section 7.4.3, page 219
            </para>
            <para>
            The example code below provides an indication of the possible use of the
            solver.
            </para>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.TFQMR.DefaultStatus">
            <summary>
            The status used if there is no status, i.e. the solver hasn't run yet and there is no
            iterator.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.TFQMR._preconditioner">
            <summary>
            The preconditioner that will be used. Can be set to <see langword="null" />, in which case the default
            pre-conditioner will be used.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.TFQMR._iterator">
            <summary>
            The iterative process controller.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.TFQMR._hasBeenStopped">
            <summary>
            Indicates if the user has stopped the solver.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.TFQMR.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.TFQMR"/> class.
            </summary>
            <remarks>
            When using this constructor the solver will use the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator"/> with
            the standard settings and a default preconditioner.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.TFQMR.#ctor(MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.TFQMR"/> class.
            </summary>
            <remarks>
            <para>
            When using this constructor the solver will use a default preconditioner.
            </para>
            <para>
            The main advantages of using a user defined <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator"/> are:
            <list type="number">
            <item>It is possible to set the desired convergence limits.</item>
            <item>
            It is possible to check the reason for which the solver finished 
            the iterative procedure by calling the <see cref="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator.Status"/> property.
            </item>
            </list>
            </para>
            </remarks>
            <param name="iterator">The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator"/> that will be used to monitor the iterative process.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.TFQMR.#ctor(MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.IPreConditioner)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.TFQMR"/> class.
            </summary>
            <remarks>
            When using this constructor the solver will use the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator"/> with
            the standard settings.
            </remarks>
            <param name="preconditioner">The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the matrix equation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.TFQMR.#ctor(MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.IPreConditioner,MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.TFQMR"/> class.
            </summary>
            <remarks>
            <para>
            The main advantages of using a user defined <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator"/> are:
            <list type="number">
            <item>It is possible to set the desired convergence limits.</item>
            <item>
            It is possible to check the reason for which the solver finished 
            the iterative procedure by calling the <see cref="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator.Status"/> property.
            </item>
            </list>
            </para>
            </remarks>
            <param name="preconditioner">The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the matrix equation.</param>
            <param name="iterator">The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator"/> that will be used to monitor the iterative process.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.TFQMR.SetPreconditioner(MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.IPreConditioner)">
            <summary>
            Sets the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the iterative process.
            </summary>
            <param name="preconditioner">The preconditioner.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.TFQMR.SetIterator(MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator)">
            <summary>
            Sets the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator"/> that will be used to track the iterative process.
            </summary>
            <param name="iterator">The iterator.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.TFQMR.StopSolve">
            <summary>
            Stops the solve process. 
            </summary>
            <remarks>
            Note that it may take an indetermined amount of time for the solver to actually stop the process.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.TFQMR.Solve(MathNet.Numerics.LinearAlgebra.Complex.Matrix,MathNet.Numerics.LinearAlgebra.Complex.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="vector">The solution vector, <c>b</c>.</param>
            <returns>The result vector, <c>x</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.TFQMR.Solve(MathNet.Numerics.LinearAlgebra.Complex.Matrix,MathNet.Numerics.LinearAlgebra.Complex.Vector,MathNet.Numerics.LinearAlgebra.Complex.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution vector, <c>b</c></param>
            <param name="result">The result vector, <c>x</c></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.TFQMR.CalculateTrueResidual(MathNet.Numerics.LinearAlgebra.Complex.Matrix,MathNet.Numerics.LinearAlgebra.Complex.Vector,MathNet.Numerics.LinearAlgebra.Complex.Vector,MathNet.Numerics.LinearAlgebra.Complex.Vector)">
            <summary>
            Calculates the <c>true</c> residual of the matrix equation Ax = b according to: residual = b - Ax
            </summary>
            <param name="matrix">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Matrix"/> A.</param>
            <param name="residual">Residual values in <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/>.</param>
            <param name="x">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/> x.</param>
            <param name="b">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/> b.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.TFQMR.ShouldContinue(System.Int32,MathNet.Numerics.LinearAlgebra.Complex.Vector,MathNet.Numerics.LinearAlgebra.Complex.Vector,MathNet.Numerics.LinearAlgebra.Complex.Vector)">
            <summary>
            Determine if calculation should continue
            </summary>
            <param name="iterationNumber">Number of iterations passed</param>
            <param name="result">Result <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/>.</param>
            <param name="source">Source <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/>.</param>
            <param name="residuals">Residual <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/>.</param>
            <returns><c>true</c> if continue, otherwise <c>false</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.TFQMR.IsEven(System.Int32)">
            <summary>
            Is <paramref name="number"/> even?
            </summary>
            <param name="number">Number to check</param>
            <returns><c>true</c> if <paramref name="number"/> even, otherwise <c>false</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.TFQMR.Solve(MathNet.Numerics.LinearAlgebra.Complex.Matrix,MathNet.Numerics.LinearAlgebra.Complex.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <returns>The result matrix, <c>X</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.TFQMR.Solve(MathNet.Numerics.LinearAlgebra.Complex.Matrix,MathNet.Numerics.LinearAlgebra.Complex.Matrix,MathNet.Numerics.LinearAlgebra.Complex.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <param name="result">The result matrix, <c>X</c></param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterative.TFQMR.IterationResult">
            <summary>
            Gets the status of the iteration once the calculation is finished.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterator">
            <summary>
            An iterator that is used to check if an iterative calculation should continue or stop.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterator.DefaultStatus">
            <summary>
            The default status for the iterator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterator.CreateDefault">
            <summary>
            Creates a default iterator with all the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IIterationStopCriterium"/> objects.
            </summary>
            <returns>A new <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator"/> object.</returns>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterator._stopCriterias">
            <summary>
            The collection that holds all the stop criteria and the flag indicating if they should be added
            to the child iterators.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterator._status">
            <summary>
            The status of the iterator.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterator._wasIterationCancelled">
            <summary>
            Indicates if the iteration was cancelled.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterator"/> class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterator.#ctor(System.Collections.Generic.IEnumerable{MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IIterationStopCriterium})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterator"/> class with the specified stop criteria.
            </summary>
            <param name="stopCriteria">
            The specified stop criteria. Only one stop criterium of each type can be passed in. None
            of the stop criteria will be passed on to child iterators.
            </param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="stopCriteria"/> contains multiple stop criteria of the same type.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterator.Add(MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IIterationStopCriterium)">
            <summary>
            Adds an <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IIterationStopCriterium"/> to the internal collection of stop-criteria. Only a 
            single stop criterium of each type can be stored.
            </summary>
            <param name="stopCriterium">The stop criterium to add.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="stopCriterium"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="stopCriterium"/> is of the same type as an already 
            stored criterium.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterator.Remove(MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IIterationStopCriterium)">
            <summary>
            Removes the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IIterationStopCriterium"/> from the internal collection.
            </summary>
            <param name="stopCriterium">The stop criterium that must be removed.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterator.Contains(MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IIterationStopCriterium)">
            <summary>
            Indicates if the specific stop criterium is stored by the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator"/>.
            </summary>
            <param name="stopCriterium">The stop criterium.</param>
            <returns><c>true</c> if the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator"/> contains the stop criterium; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterator.IterationCancelled">
            <summary>
            Indicates to the iterator that the iterative process has been cancelled.
            </summary>
            <remarks>
            Does not reset the stop-criteria.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterator.DetermineStatus(System.Int32,MathNet.Numerics.LinearAlgebra.Complex.Vector,MathNet.Numerics.LinearAlgebra.Complex.Vector,MathNet.Numerics.LinearAlgebra.Complex.Vector)">
            <summary>
            Determines the status of the iterative calculation based on the stop criteria stored
            by the current <c>IIterator</c>. Result is set into <c>Status</c> field.
            </summary>
            <param name="iterationNumber">The number of iterations that have passed so far.</param>
            <param name="solutionVector">The vector containing the current solution values.</param>
            <param name="sourceVector">The right hand side vector.</param>
            <param name="residualVector">The vector containing the current residual vectors.</param>
            <remarks>
            The individual iterators may internally track the progress of the calculation based
            on the invocation of this method. Therefore this method should only be called if the 
            calculation has moved forwards at least one step.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterator.ResetToPrecalculationState">
            <summary>
            Resets the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterator"/> to the pre-calculation state.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterator.Clone">
            <summary>
            Creates a deep clone of the current iterator.
            </summary>
            <returns>The deep clone of the current iterator.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterator.NumberOfCriteria">
            <summary>
            Gets the number of stored stop criteria.
            </summary>
            <remarks>Used for testing only.</remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterator.StoredStopCriteria">
            <summary>
            Gets an <c>IEnumerator</c> that enumerates over all the stored stop criteria.
            </summary>
            <remarks>Used for testing only.</remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Iterator.Status">
            <summary>
            Gets the current calculation status.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.Diagonal">
            <summary>
            A diagonal preconditioner. The preconditioner uses the inverse
            of the matrix diagonal as preconditioning values.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.Diagonal._inverseDiagonals">
            <summary>
            The inverse of the matrix diagonal.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.Diagonal.DiagonalEntries">
            <summary>
            Returns the decomposed matrix diagonal.
            </summary>
            <returns>The matrix diagonal.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.Diagonal.Initialize(MathNet.Numerics.LinearAlgebra.Complex.Matrix)">
            <summary>
            Initializes the preconditioner and loads the internal data structures.
            </summary>
            <param name="matrix">
            The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Matrix"/> upon which this preconditioner is based.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <see langword="null"/>. </exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.Diagonal.Approximate(MathNet.Numerics.LinearAlgebra.Complex.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <returns>The left hand side vector.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.Diagonal.Approximate(MathNet.Numerics.LinearAlgebra.Complex.Vector,MathNet.Numerics.LinearAlgebra.Complex.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <param name="lhs">The left hand side vector. Also known as the result vector.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.Ilutp">
            <summary>
            This class performs an Incomplete LU factorization with drop tolerance
            and partial pivoting. The drop tolerance indicates which additional entries
            will be dropped from the factorized LU matrices.
            </summary>
            <remarks>
            The ILUTP-Mem algorithm was taken from: <br/>
            ILUTP_Mem: a Space-Efficient Incomplete LU Preconditioner
            <br/>
            Tzu-Yi Chen, Department of Mathematics and Computer Science, <br/>
            Pomona College, Claremont CA 91711, USA <br/>
            Published in: <br/>
            Lecture Notes in Computer Science <br/>
            Volume 3046 / 2004 <br/>
            pp. 20 - 28 <br/>
            Algorithm is described in Section 2, page 22
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.Ilutp.DefaultFillLevel">
            <summary>
            The default fill level.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.Ilutp.DefaultDropTolerance">
            <summary>
            The default drop tolerance.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.Ilutp._upper">
            <summary>
            The decomposed upper triangular matrix.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.Ilutp._lower">
            <summary>
            The decomposed lower triangular matrix.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.Ilutp._pivots">
            <summary>
            The array containing the pivot values.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.Ilutp._fillLevel">
            <summary>
            The fill level.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.Ilutp._dropTolerance">
            <summary>
            The drop tolerance.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.Ilutp._pivotTolerance">
            <summary>
            The pivot tolerance.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.Ilutp.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.Ilutp"/> class with the default settings.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.Ilutp.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.Ilutp"/> class with the specified settings.
            </summary>
            <param name="fillLevel">
            The amount of fill that is allowed in the matrix. The value is a fraction of 
            the number of non-zero entries in the original matrix. Values should be positive.
            </param>
            <param name="dropTolerance">
            The absolute drop tolerance which indicates below what absolute value an entry 
            will be dropped from the matrix. A drop tolerance of 0.0 means that no values
            will be dropped. Values should always be positive.
            </param>
            <param name="pivotTolerance">
            The pivot tolerance which indicates at what level pivoting will take place. A
            value of 0.0 means that no pivoting will take place.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.Ilutp.UpperTriangle">
            <summary>
            Returns the upper triagonal matrix that was created during the LU decomposition.
            </summary>
            <remarks>
            This method is used for debugging purposes only and should normally not be used.
            </remarks>
            <returns>A new matrix containing the upper triagonal elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.Ilutp.LowerTriangle">
            <summary>
            Returns the lower triagonal matrix that was created during the LU decomposition.
            </summary>
            <remarks>
            This method is used for debugging purposes only and should normally not be used.
            </remarks>
            <returns>A new matrix containing the lower triagonal elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.Ilutp.Pivots">
            <summary>
            Returns the pivot array. This array is not needed for normal use because
            the preconditioner will return the solution vector values in the proper order.
            </summary>
            <remarks>
            This method is used for debugging purposes only and should normally not be used.
            </remarks>
            <returns>The pivot array.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.Ilutp.Initialize(MathNet.Numerics.LinearAlgebra.Complex.Matrix)">
            <summary>
            Initializes the preconditioner and loads the internal data structures.
            </summary>
            <param name="matrix">
            The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Matrix"/> upon which this preconditioner is based. Note that the 
            method takes a general matrix type. However internally the data is stored 
            as a sparse matrix. Therefore it is not recommended to pass a dense matrix.
            </param>
            <exception cref="T:System.ArgumentNullException"> If <paramref name="matrix"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.Ilutp.PivotRow(MathNet.Numerics.LinearAlgebra.Complex.Vector)">
            <summary>
            Pivot elements in the <paramref name="row"/> according to internal pivot array
            </summary>
            <param name="row">Row <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/> to pivot in</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.Ilutp.PivotMapFound(System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Int32)">
            <summary>
            Was pivoting already performed
            </summary>
            <param name="knownPivots">Pivots already done</param>
            <param name="currentItem">Current item to pivot</param>
            <returns><c>true</c> if performed, otherwise <c>false</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.Ilutp.SwapColumns(MathNet.Numerics.LinearAlgebra.Complex.Matrix,System.Int32,System.Int32)">
            <summary>
            Swap columns in the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Matrix"/>
            </summary>
            <param name="matrix">Source <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Matrix"/>.</param>
            <param name="firstColumn">First column index to swap</param>
            <param name="secondColumn">Second column index to swap</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.Ilutp.FindLargestItems(System.Int32,System.Int32,System.Int32[],MathNet.Numerics.LinearAlgebra.Complex.Vector)">
            <summary>
            Sort vector descending, not changing vector but placing sorted indicies to <paramref name="sortedIndices"/>
            </summary>
            <param name="lowerBound">Start sort form</param>
            <param name="upperBound">Sort till upper bound</param>
            <param name="sortedIndices">Array with sorted vector indicies</param>
            <param name="values">Source <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.Ilutp.Approximate(MathNet.Numerics.LinearAlgebra.Complex.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <returns>The left hand side vector.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.Ilutp.Approximate(MathNet.Numerics.LinearAlgebra.Complex.Vector,MathNet.Numerics.LinearAlgebra.Complex.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <param name="lhs">The left hand side vector. Also known as the result vector.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.Ilutp.Pivot(MathNet.Numerics.LinearAlgebra.Complex.Vector,MathNet.Numerics.LinearAlgebra.Complex.Vector)">
            <summary>
            Pivot elements in <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/> according to internal pivot array
            </summary>
            <param name="vector">Source <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/>.</param>
            <param name="result">Result <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/> after pivoting.</param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.Ilutp.FillLevel">
            <summary>
            Gets or sets the amount of fill that is allowed in the matrix. The
            value is a fraction of the number of non-zero entries in the original
            matrix. The standard value is 200.
            </summary>
            <remarks>
            <para>
            Values should always be positive and can be higher than 1.0. A value lower
            than 1.0 means that the eventual preconditioner matrix will have fewer
            non-zero entries as the original matrix. A value higher than 1.0 means that
            the eventual preconditioner can have more non-zero values than the original 
            matrix.
            </para>
            <para>
            Note that any changes to the <b>FillLevel</b> after creating the preconditioner
            will invalidate the created preconditioner and will require a re-initialization of
            the preconditioner.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if a negative value is provided.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.Ilutp.DropTolerance">
            <summary>
            Gets or sets the absolute drop tolerance which indicates below what absolute value
            an entry will be dropped from the matrix. The standard value is 0.0001.
            </summary>
            <remarks>
            <para>
            The values should always be positive and can be larger than 1.0. A low value will
            keep more small numbers in the preconditioner matrix. A high value will remove 
            more small numbers from the preconditioner matrix.
            </para>
            <para>
            Note that any changes to the <b>DropTolerance</b> after creating the preconditioner
            will invalidate the created preconditioner and will require a re-initialization of
            the preconditioner.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if a negative value is provided.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.Ilutp.PivotTolerance">
            <summary>
            Gets or sets the pivot tolerance which indicates at what level pivoting will
            take place. The standard value is 0.0 which means pivoting will never take place.
            </summary>
            <remarks>
            <para>
            The pivot tolerance is used to calculate if pivoting is necessary. Pivoting
            will take place if any of the values in a row is bigger than the 
            diagonal value of that row divided by the pivot tolerance, i.e. pivoting
            will take place if <b>row(i,j) &gt; row(i,i) / PivotTolerance</b> for
            any <b>j</b> that is not equal to <b>i</b>.
            </para>
            <para>
            Note that any changes to the <b>PivotTolerance</b> after creating the preconditioner
            will invalidate the created preconditioner and will require a re-initialization of
            the preconditioner.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if a negative value is provided.</exception>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.IlutpElementSorter">
            <summary>
            An element sort algorithm for the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.Ilutp"/> class.
            </summary>
            <remarks>
            This sort algorithm is used to sort the columns in a sparse matrix based on
            the value of the element on the diagonal of the matrix.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.IlutpElementSorter.SortDoubleIndicesDecreasing(System.Int32,System.Int32,System.Int32[],MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Sorts the elements of the <paramref name="values"/> vector in decreasing
            fashion. The vector itself is not affected.
            </summary>
            <param name="lowerBound">The starting index.</param>
            <param name="upperBound">The stopping index.</param>
            <param name="sortedIndices">An array that will contain the sorted indices once the algorithm finishes.</param>
            <param name="values">The <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Vector`1"/> that contains the values that need to be sorted.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.IlutpElementSorter.HeapSortDoublesIndices(System.Int32,System.Int32,System.Int32[],MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Sorts the elements of the <paramref name="values"/> vector in decreasing
            fashion using heap sort algorithm. The vector itself is not affected.
            </summary>
            <param name="lowerBound">The starting index.</param>
            <param name="upperBound">The stopping index.</param>
            <param name="sortedIndices">An array that will contain the sorted indices once the algorithm finishes.</param>
            <param name="values">The <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Vector`1"/> that contains the values that need to be sorted.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.IlutpElementSorter.BuildDoubleIndexHeap(System.Int32,System.Int32,System.Int32[],MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Build heap for double indicies
            </summary>
            <param name="start">Root position</param>
            <param name="count">Length of <paramref name="values"/></param>
            <param name="sortedIndices">Indicies of <paramref name="values"/></param>
            <param name="values">Target <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Vector`1"/></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.IlutpElementSorter.SiftDoubleIndices(System.Int32[],MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex},System.Int32,System.Int32)">
            <summary>
            Sift double indicies
            </summary>
            <param name="sortedIndices">Indicies of <paramref name="values"/></param>
            <param name="values">Target <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Vector`1"/></param>
            <param name="begin">Root position</param>
            <param name="count">Length of <paramref name="values"/></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.IlutpElementSorter.SortIntegersDecreasing(System.Int32[])">
            <summary>
            Sorts the given integers in a decreasing fashion.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.IlutpElementSorter.HeapSortIntegers(System.Int32[],System.Int32)">
            <summary>
            Sort the given integers in a decreasing fashion using heapsort algorithm 
            </summary>
            <param name="values">Array of values to sort</param>
            <param name="count">Length of <paramref name="values"/></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.IlutpElementSorter.BuildHeap(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Build heap
            </summary>
            <param name="values">Target values array</param>
            <param name="start">Root position</param>
            <param name="count">Length of <paramref name="values"/></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.IlutpElementSorter.Sift(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Sift values
            </summary>
            <param name="values">Target value array</param>
            <param name="start">Root position</param>
            <param name="count">Length of <paramref name="values"/></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.IlutpElementSorter.Exchange(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Exchange values in array
            </summary>
            <param name="values">Target values array</param>
            <param name="first">First value to exchange</param>
            <param name="second">Second value to exchange</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.IncompleteLU">
            <summary>
            An incomplete, level 0, LU factorization preconditioner.
            </summary>
            <remarks>
            The ILU(0) algorithm was taken from: <br/>
            Iterative methods for sparse linear systems <br/>
            Yousef Saad <br/>
            Algorithm is described in Chapter 10, section 10.3.2, page 275 <br/>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.IncompleteLU._decompositionLU">
            <summary>
            The matrix holding the lower (L) and upper (U) matrices. The
            decomposition matrices are combined to reduce storage.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.IncompleteLU.UpperTriangle">
            <summary>
            Returns the upper triagonal matrix that was created during the LU decomposition.
            </summary>
            <returns>A new matrix containing the upper triagonal elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.IncompleteLU.LowerTriangle">
            <summary>
            Returns the lower triagonal matrix that was created during the LU decomposition.
            </summary>
            <returns>A new matrix containing the lower triagonal elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.IncompleteLU.Initialize(MathNet.Numerics.LinearAlgebra.Complex.Matrix)">
            <summary>
            Initializes the preconditioner and loads the internal data structures.
            </summary>
            <param name="matrix">The matrix upon which the preconditioner is based. </param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.IncompleteLU.Approximate(MathNet.Numerics.LinearAlgebra.Complex.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <returns>The left hand side vector.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.IncompleteLU.Approximate(MathNet.Numerics.LinearAlgebra.Complex.Vector,MathNet.Numerics.LinearAlgebra.Complex.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <param name="lhs">The left hand side vector. Also known as the result vector.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.UnitPreconditioner">
            <summary>
            A unit preconditioner. This preconditioner does not actually do anything
            it is only used when running an <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.IIterativeSolver"/> without
            a preconditioner.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.UnitPreconditioner._size">
            <summary>
            The coefficient matrix on which this preconditioner operates.
            Is used to check dimensions on the different vectors that are processed.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.UnitPreconditioner.Initialize(MathNet.Numerics.LinearAlgebra.Complex.Matrix)">
            <summary>
            Initializes the preconditioner and loads the internal data structures.
            </summary>
            <param name="matrix">
            The matrix upon which the preconditioner is based.
            </param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <see langword="null"/>. </exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.UnitPreconditioner.Approximate(MathNet.Numerics.LinearAlgebra.Complex.Vector,MathNet.Numerics.LinearAlgebra.Complex.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <param name="lhs">The left hand side vector. Also known as the result vector.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rhs"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="lhs"/> is <see langword="null"/>. </exception>
            <exception cref="T:System.ArgumentException">
              <para>
                If <paramref name="rhs"/> and <paramref name="lhs"/> do not have the same size.
              </para>
              <para>
                - or -
              </para>
              <para>
                If the size of <paramref name="rhs"/> is different the number of rows of the coefficient matrix.
              </para>
            </exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.Preconditioners.UnitPreconditioner.Approximate(MathNet.Numerics.LinearAlgebra.Complex.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <returns>The left hand side vector.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rhs"/> is <see langword="null"/>. </exception>
            <exception cref="T:System.ArgumentException">
            If the size of <paramref name="rhs"/> is different the number of rows of the coefficient matrix.
            </exception>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.DivergenceStopCriterium">
            <summary>
            Monitors an iterative calculation for signs of divergence.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.DivergenceStopCriterium.DefaultMaximumRelativeIncrease">
            <summary>
            Default value for the maximum relative increase that the 
            residual may experience before a divergence warning is issued.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.DivergenceStopCriterium.DefaultMinimumNumberOfIterations">
            <summary>
            Default value for the minimum number of iterations over which 
            the residual must grow before a divergence warning is issued.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.DivergenceStopCriterium.DefaultLastIterationNumber">
            <summary>
            Defines the default last iteration number. Set to -1 because iterations normally
            start at 0.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.DivergenceStopCriterium.DefaultStatus">
            <summary>
            The default status.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.DivergenceStopCriterium._maximumRelativeIncrease">
            <summary>
            The maximum relative increase the residual may experience without triggering a divergence warning.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.DivergenceStopCriterium._minimumNumberOfIterations">
            <summary>
            The number of iterations over which a residual increase should be tracked before issuing a divergence warning.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.DivergenceStopCriterium._status">
            <summary>
            The status of the calculation
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.DivergenceStopCriterium._residualHistory">
            <summary>
            The array that holds the tracking information.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.DivergenceStopCriterium._lastIteration">
            <summary>
            The iteration number of the last iteration.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.DivergenceStopCriterium.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.DivergenceStopCriterium"/> class with the default maximum 
            relative increase and the default minimum number of tracking iterations.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.DivergenceStopCriterium.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.DivergenceStopCriterium"/> class with the specified maximum 
            relative increase and the default minimum number of tracking iterations.
            </summary>
            <param name="maximumRelativeIncrease">The maximum relative increase that the residual may experience before a divergence warning is issued.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.DivergenceStopCriterium.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.DivergenceStopCriterium"/> class with the default maximum 
            relative increase and the specified minimum number of tracking iterations.
            </summary>
            <param name="minimumIterations">The minimum number of iterations over which the residual must grow before a divergence warning is issued. </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.DivergenceStopCriterium.#ctor(System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.DivergenceStopCriterium"/> class with the specified maximum 
            relative increase and the specified minimum number of tracking iterations.
            </summary>
            <param name="maximumRelativeIncrease">The maximum relative increase that the residual may experience before a divergence warning is issued. </param>
            <param name="minimumIterations">The minimum number of iterations over which the residual must grow before a divergence warning is issued.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.DivergenceStopCriterium.ResetMaximumRelativeIncreaseToDefault">
            <summary>
            Returns the maximum relative increase to the default.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.DivergenceStopCriterium.ResetNumberOfIterationsToDefault">
            <summary>
            Returns the minimum number of iterations to the default.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.DivergenceStopCriterium.DetermineStatus(System.Int32,MathNet.Numerics.LinearAlgebra.Complex.Vector,MathNet.Numerics.LinearAlgebra.Complex.Vector,MathNet.Numerics.LinearAlgebra.Complex.Vector)">
            <summary>
            Determines the status of the iterative calculation based on the stop criteria stored
            by the current <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IIterationStopCriterium"/>. Result is set into <c>Status</c> field.
            </summary>
            <param name="iterationNumber">The number of iterations that have passed so far.</param>
            <param name="solutionVector">The vector containing the current solution values.</param>
            <param name="sourceVector">The right hand side vector.</param>
            <param name="residualVector">The vector containing the current residual vectors.</param>
            <remarks>
            The individual stop criteria may internally track the progress of the calculation based
            on the invocation of this method. Therefore this method should only be called if the 
            calculation has moved forwards at least one step.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.DivergenceStopCriterium.IsDiverging">
            <summary>
            Detect if solution is diverging
            </summary>
            <returns><c>true</c> if diverging, otherwise <c>false</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.DivergenceStopCriterium.SetStatusToDiverged">
            <summary>
            Set status to <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationDiverged"/>
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.DivergenceStopCriterium.SetStatusToRunning">
            <summary>
            Set status to <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationRunning"/>
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.DivergenceStopCriterium.ResetToPrecalculationState">
            <summary>
            Resets the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IIterationStopCriterium"/> to the pre-calculation state.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.DivergenceStopCriterium.Clone">
            <summary>
            Clones the current <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.DivergenceStopCriterium"/> and its settings.
            </summary>
            <returns>A new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.DivergenceStopCriterium"/> class.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.DivergenceStopCriterium.MaximumRelativeIncrease">
            <summary>
            Gets or sets the maximum relative increase that the residual may experience before a divergence warning is issued.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <c>Maximum</c> is set to zero or below.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.DivergenceStopCriterium.MinimumNumberOfIterations">
            <summary>
            Gets or sets the minimum number of iterations over which the residual must grow before
            issuing a divergence warning.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <c>value</c> is set to less than one.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.DivergenceStopCriterium.RequiredHistoryLength">
            <summary>
            Gets required history Length
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.DivergenceStopCriterium.Status">
            <summary>
            Gets the current calculation status.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.DivergenceStopCriterium.StopLevel">
            <summary>
            Gets the <see cref="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.DivergenceStopCriterium.StopLevel"/> which indicates what sort of stop criterium this
            <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IIterationStopCriterium"/> monitors.
            </summary>
            <value>Returns <see cref="F:MathNet.Numerics.LinearAlgebra.Generic.Solvers.StopCriterium.StopLevel.Divergence"/>.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.FailureStopCriterium">
            <summary>
            Defines an <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IIterationStopCriterium"/> that monitors residuals for NaN's.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.FailureStopCriterium.DefaultLastIterationNumber">
            <summary>
            Defines the default last iteration number. Set to -1 because iterations normally
            start at 0.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.FailureStopCriterium.DefaultStatus">
            <summary>
            The default status.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.FailureStopCriterium._status">
            <summary>
            The status of the calculation
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.FailureStopCriterium._lastIteration">
            <summary>
            The iteration number of the last iteration.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.FailureStopCriterium.DetermineStatus(System.Int32,MathNet.Numerics.LinearAlgebra.Complex.Vector,MathNet.Numerics.LinearAlgebra.Complex.Vector,MathNet.Numerics.LinearAlgebra.Complex.Vector)">
            <summary>
            Determines the status of the iterative calculation based on the stop criteria stored
            by the current <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IIterationStopCriterium"/>. Result is set into <c>Status</c> field.
            </summary>
            <param name="iterationNumber">The number of iterations that have passed so far.</param>
            <param name="solutionVector">The vector containing the current solution values.</param>
            <param name="sourceVector">The right hand side vector.</param>
            <param name="residualVector">The vector containing the current residual vectors.</param>
            <remarks>
            The individual stop criteria may internally track the progress of the calculation based
            on the invocation of this method. Therefore this method should only be called if the 
            calculation has moved forwards at least one step.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.FailureStopCriterium.SetStatusToFailed">
            <summary>
            Set status to <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationFailure"/>
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.FailureStopCriterium.SetStatusToRunning">
            <summary>
            Set status to <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationRunning"/>
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.FailureStopCriterium.ResetToPrecalculationState">
            <summary>
            Resets the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IIterationStopCriterium"/> to the pre-calculation state.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.FailureStopCriterium.Clone">
            <summary>
            Clones the current <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.FailureStopCriterium"/> and its settings.
            </summary>
            <returns>A new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.FailureStopCriterium"/> class.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.FailureStopCriterium.Status">
            <summary>
            Gets the current calculation status.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.FailureStopCriterium.StopLevel">
            <summary>
            Gets the <see cref="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.FailureStopCriterium.StopLevel"/>which indicates what sort of stop criterium this
            <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IIterationStopCriterium"/> monitors.
            </summary>
            <value>Returns <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationFailure"/>.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IterationCountStopCriterium">
            <summary>
            Defines an <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IIterationStopCriterium"/> that monitors the numbers of iteration 
            steps as stop criterium.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IterationCountStopCriterium.DefaultMaximumNumberOfIterations">
            <summary>
            The default value for the maximum number of iterations the process is allowed
            to perform.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IterationCountStopCriterium.DefaultStatus">
            <summary>
            The default status.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IterationCountStopCriterium._maximumNumberOfIterations">
            <summary>
            The maximum number of iterations the calculation is allowed to perform.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IterationCountStopCriterium._status">
            <summary>
            The status of the calculation
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IterationCountStopCriterium.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IterationCountStopCriterium"/> class with the default maximum 
            number of iterations.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IterationCountStopCriterium.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IterationCountStopCriterium"/> class with the specified maximum
            number of iterations.
            </summary>
            <param name="maximumNumberOfIterations">The maximum number of iterations the calculation is allowed to perform.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IterationCountStopCriterium.ResetMaximumNumberOfIterationsToDefault">
            <summary>
            Returns the maximum number of iterations to the default.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IterationCountStopCriterium.DetermineStatus(System.Int32,MathNet.Numerics.LinearAlgebra.Complex.Vector,MathNet.Numerics.LinearAlgebra.Complex.Vector,MathNet.Numerics.LinearAlgebra.Complex.Vector)">
            <summary>
            Determines the status of the iterative calculation based on the stop criteria stored
            by the current <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IterationCountStopCriterium"/>. Result is set into <c>Status</c> field.
            </summary>
            <param name="iterationNumber">The number of iterations that have passed so far.</param>
            <param name="solutionVector">The vector containing the current solution values.</param>
            <param name="sourceVector">The right hand side vector.</param>
            <param name="residualVector">The vector containing the current residual vectors.</param>
            <remarks>
            The individual stop criteria may internally track the progress of the calculation based
            on the invocation of this method. Therefore this method should only be called if the 
            calculation has moved forwards at least one step.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IterationCountStopCriterium.SetStatusToFinished">
            <summary>
            Set status to <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationFailure"/>
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IterationCountStopCriterium.SetStatusToRunning">
            <summary>
            Set status to <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationRunning"/>
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IterationCountStopCriterium.ResetToPrecalculationState">
            <summary>
            Resets the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IterationCountStopCriterium"/> to the pre-calculation state.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IterationCountStopCriterium.Clone">
            <summary>
            Clones the current <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IterationCountStopCriterium"/> and its settings.
            </summary>
            <returns>A new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IterationCountStopCriterium"/> class.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IterationCountStopCriterium.MaximumNumberOfIterations">
            <summary>
            Gets or sets the maximum number of iterations the calculation is allowed to perform.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <c>Maximum</c> is set to a negative value.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IterationCountStopCriterium.Status">
            <summary>
            Gets the current calculation status.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IterationCountStopCriterium.StopLevel">
            <summary>
            Gets the <see cref="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IterationCountStopCriterium.StopLevel"/> which indicates what sort of stop criterium this
            <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IterationCountStopCriterium"/> monitors.
            </summary>
            <value>Returns <see cref="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IterationCountStopCriterium.StopLevel"/>.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.ResidualStopCriterium">
            <summary>
            Defines an <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IIterationStopCriterium"/> that monitors residuals as stop criterium.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.ResidualStopCriterium.DefaultMaximumResidual">
            <summary>
            The default value for the maximum value of the residual.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.ResidualStopCriterium.DefaultMinimumIterationsBelowMaximum">
            <summary>
            The default value for the minimum number of iterations.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.ResidualStopCriterium.DefaultLastIterationNumber">
            <summary>
            Defines the default last iteration number. Set to -1 because iterations normally start at 0.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.ResidualStopCriterium.DefaultStatus">
            <summary>
            The default status.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.ResidualStopCriterium._maximum">
            <summary>
            The maximum value for the residual below which the calculation is considered converged.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.ResidualStopCriterium._minimumIterationsBelowMaximum">
            <summary>
            The minimum number of iterations for which the residual has to be below the maximum before
            the calculation is considered converged.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.ResidualStopCriterium._status">
            <summary>
            The status of the calculation
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.ResidualStopCriterium._iterationCount">
            <summary>
            The number of iterations since the residuals got below the maximum.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.ResidualStopCriterium._lastIteration">
            <summary>
            The iteration number of the last iteration.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.ResidualStopCriterium.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.ResidualStopCriterium"/> class with the default maximum 
            residual and the default minimum number of iterations.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.ResidualStopCriterium.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.ResidualStopCriterium"/> class with the specified 
            maximum residual and the default minimum number of iterations.
            </summary>
            <param name="maximum">The maximum value for the residual below which the calculation is considered converged.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.ResidualStopCriterium.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.ResidualStopCriterium"/> class with the default maximum residual
            and specified minimum number of iterations.
            </summary>
            <param name="minimumIterationsBelowMaximum">
            The minimum number of iterations for which the residual has to be below the maximum before
            the calculation is considered converged.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.ResidualStopCriterium.#ctor(System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.ResidualStopCriterium"/> class with the specified 
            maximum residual and minimum number of iterations.
            </summary>
            <param name="maximum">
            The maximum value for the residual below which the calculation is considered converged.
            </param>
            <param name="minimumIterationsBelowMaximum">
            The minimum number of iterations for which the residual has to be below the maximum before
            the calculation is considered converged.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.ResidualStopCriterium.ResetMaximumResidualToDefault">
            <summary>
            Returns the maximum residual to the default.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.ResidualStopCriterium.ResetMinimumIterationsBelowMaximumToDefault">
            <summary>
            Returns the minimum number of iterations to the default.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.ResidualStopCriterium.DetermineStatus(System.Int32,MathNet.Numerics.LinearAlgebra.Complex.Vector,MathNet.Numerics.LinearAlgebra.Complex.Vector,MathNet.Numerics.LinearAlgebra.Complex.Vector)">
            <summary>
            Determines the status of the iterative calculation based on the stop criteria stored
            by the current <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IIterationStopCriterium"/>. Result is set into <c>Status</c> field.
            </summary>
            <param name="iterationNumber">The number of iterations that have passed so far.</param>
            <param name="solutionVector">The vector containing the current solution values.</param>
            <param name="sourceVector">The right hand side vector.</param>
            <param name="residualVector">The vector containing the current residual vectors.</param>
            <remarks>
            The individual stop criteria may internally track the progress of the calculation based
            on the invocation of this method. Therefore this method should only be called if the 
            calculation has moved forwards at least one step.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.ResidualStopCriterium.ComputeStopCriterium(System.Double)">
            <summary>
            Calculate stop criterium
            </summary>
            <param name="solutionNorm">Solution vector norm</param>
            <returns>Criterium value</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.ResidualStopCriterium.SetStatusToDiverged">
            <summary>
            Set status to <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationDiverged"/>
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.ResidualStopCriterium.SetStatusToConverged">
            <summary>
            Set status to <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationConverged"/>
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.ResidualStopCriterium.SetStatusToRunning">
            <summary>
            Set status to <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationRunning"/>
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.ResidualStopCriterium.ResetToPrecalculationState">
            <summary>
            Resets the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IIterationStopCriterium"/> to the pre-calculation state.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.ResidualStopCriterium.Clone">
            <summary>
            Clones the current <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.ResidualStopCriterium"/> and its settings.
            </summary>
            <returns>A new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.ResidualStopCriterium"/> class.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.ResidualStopCriterium.Maximum">
            <summary>
            Gets or sets the maximum value for the residual below which the calculation is considered 
            converged.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <c>Maximum</c> is set to a negative value.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.ResidualStopCriterium.MinimumIterationsBelowMaximum">
            <summary>
            Gets or sets the minimum number of iterations for which the residual has to be
            below the maximum before the calculation is considered converged.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <c>BelowMaximumFor</c> is set to a value less than 1.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.ResidualStopCriterium.Status">
            <summary>
            Gets the current calculation status.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.ResidualStopCriterium.StopLevel">
            <summary>
            Gets the <see cref="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.ResidualStopCriterium.StopLevel"/> which indicates what sort of stop criterium this
            <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.IIterationStopCriterium"/> monitors.
            </summary>
            <value>Returns <see cref="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.StopCriterium.ResidualStopCriterium.StopLevel"/>.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.SparseVector">
            <summary>
            A vector with sparse storage, intended for very large vectors where most of the cells are zero.
            </summary>
            <remarks>The sparse vector is not thread safe.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.#ctor(MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage{System.Numerics.Complex})">
            <summary>
            Create a new sparse vector straight from an initialized vector storage instance.
            The storage is used directly without copying.
            Intended for advanced scenarios where you're working directly with
            storage for performance or interop reasons.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.#ctor(System.Int32)">
            <summary>
            Create a new sparse vector with the given length.
            All cells of the vector will be initialized to zero.
            Zero-length vectors are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If length is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.OfVector(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Create a new sparse vector as a copy of the given other vector.
            This new vector will be independent from the other vector.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.OfEnumerable(System.Collections.Generic.IEnumerable{System.Numerics.Complex})">
            <summary>
            Create a new sparse vector as a copy of the given enumerable.
            This new vector will be independent from the enumerable.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.OfIndexedEnumerable(System.Int32,System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,System.Numerics.Complex}})">
            <summary>
            Create a new sparse vector as a copy of the given indexed enumerable.
            Keys must be provided at most once, zero is assumed if a key is omitted.
            This new vector will be independent from the enumerable.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.Create(System.Int32,System.Func{System.Int32,System.Numerics.Complex})">
            <summary>
            Create a new sparse vector and initialize each value using the provided init function.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.#ctor(System.Int32,System.Numerics.Complex)">
            <summary>
            Create a new sparse vector with the given length.
            All cells of the vector will be initialized with the provided value.
            Zero-length vectors are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If length is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.#ctor(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Create a new sparse vector as a copy of the given other vector.
            This new vector will be independent from the other vector.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.#ctor(System.Collections.Generic.IEnumerable{System.Numerics.Complex})">
            <summary>
            Create a new sparse vector as a copy of the given enumerable.
            This new vector will be independent from the enumerable.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.CreateMatrix(System.Int32,System.Int32)">
            <summary>
            Creates a matrix with the given dimensions using the same storage type
            as this vector.
            </summary>
            <param name="rows">
            The number of rows.
            </param>
            <param name="columns">
            The number of columns.
            </param>
            <returns>
            A matrix with the given dimensions.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.CreateVector(System.Int32)">
            <summary>
            Creates a <strong>Vector</strong> of the given size using the same storage type
            as this vector.
            </summary>
            <param name="size">
            The size of the <strong>Vector</strong> to create.
            </param>
            <returns>
            The new <c>Vector</c>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.DoConjugate(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Conjugates vector and save result to <paramref name="result"/>
            </summary>
            <param name="result">Target vector</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.DoAdd(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Adds a scalar to each element of the vector and stores the result in the result vector.
            Warning, the new 'sparse vector' with a non-zero scalar added to it will be a 100% filled
            sparse vector and very inefficient. Would be better to work with a dense vector instead.
            </summary>
            <param name="scalar">
            The scalar to add.
            </param>
            <param name="result">
            The vector to store the result of the addition.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.DoAdd(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Adds another vector to this vector and stores the result into the result vector.
            </summary>
            <param name="other">
            The vector to add to this one.
            </param>
            <param name="result">
            The vector to store the result of the addition.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.DoSubtract(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Subtracts a scalar from each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">
            The scalar to subtract.
            </param>
            <param name="result">
            The vector to store the result of the subtraction.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.DoSubtract(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Subtracts another vector to this vector and stores the result into the result vector.
            </summary>
            <param name="other">
            The vector to subtract from this one.
            </param>
            <param name="result">
            The vector to store the result of the subtraction.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.DoNegate(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Negates vector and saves result to <paramref name="result"/>
            </summary>
            <param name="result">Target vector</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.DoMultiply(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Multiplies a scalar to each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">
            The scalar to multiply.
            </param>
            <param name="result">
            The vector to store the result of the multiplication.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.DoDotProduct(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Computes the dot product between this vector and another vector.
            </summary>
            <param name="other">
            The other vector to add.
            </param>
            <returns>s
            The result of the addition.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.op_Addition(MathNet.Numerics.LinearAlgebra.Complex.SparseVector,MathNet.Numerics.LinearAlgebra.Complex.SparseVector)">
            <summary>
            Adds two <strong>Vectors</strong> together and returns the results.
            </summary>
            <param name="leftSide">One of the vectors to add.</param>
            <param name="rightSide">The other vector to add.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.op_UnaryNegation(MathNet.Numerics.LinearAlgebra.Complex.SparseVector)">
            <summary>
            Returns a <strong>Vector</strong> containing the negated values of <paramref name="rightSide"/>. 
            </summary>
            <param name="rightSide">The vector to get the values from.</param>
            <returns>A vector containing the negated values as <paramref name="rightSide"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.op_Subtraction(MathNet.Numerics.LinearAlgebra.Complex.SparseVector,MathNet.Numerics.LinearAlgebra.Complex.SparseVector)">
            <summary>
            Subtracts two <strong>Vectors</strong> and returns the results.
            </summary>
            <param name="leftSide">The vector to subtract from.</param>
            <param name="rightSide">The vector to subtract.</param>
            <returns>The result of the subtraction.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.op_Multiply(MathNet.Numerics.LinearAlgebra.Complex.SparseVector,System.Numerics.Complex)">
            <summary>
            Multiplies a vector with a complex.
            </summary>
            <param name="leftSide">The vector to scale.</param>
            <param name="rightSide">The complex value.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.op_Multiply(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Complex.SparseVector)">
            <summary>
            Multiplies a vector with a complex.
            </summary>
            <param name="leftSide">The complex value.</param>
            <param name="rightSide">The vector to scale.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.op_Multiply(MathNet.Numerics.LinearAlgebra.Complex.SparseVector,MathNet.Numerics.LinearAlgebra.Complex.SparseVector)">
            <summary>
            Computes the dot product between two <strong>Vectors</strong>.
            </summary>
            <param name="leftSide">The left row vector.</param>
            <param name="rightSide">The right column vector.</param>
            <returns>The dot product between the two vectors.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.op_Division(MathNet.Numerics.LinearAlgebra.Complex.SparseVector,System.Numerics.Complex)">
            <summary>
            Divides a vector with a complex.
            </summary>
            <param name="leftSide">The vector to divide.</param>
            <param name="rightSide">The complex value.</param>
            <returns>The result of the division.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.op_Modulus(MathNet.Numerics.LinearAlgebra.Complex.SparseVector,System.Numerics.Complex)">
            <summary>
            Computes the modulus of each element of the vector of the given divisor.
            </summary>
            <param name="leftSide">The vector whose elements we want to compute the modulus of.</param>
            <param name="rightSide">The divisor to use,</param>
            <returns>The result of the calculation</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.AbsoluteMinimumIndex">
            <summary>
            Returns the index of the absolute minimum element.
            </summary>
            <returns>The index of absolute minimum element.</returns>   
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.Sum">
            <summary>
            Computes the sum of the vector's elements.
            </summary>
            <returns>The sum of the vector's elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.SumMagnitudes">
            <summary>
            Computes the sum of the absolute value of the vector's elements.
            </summary>
            <returns>The sum of the absolute value of the vector's elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.DoPointwiseMultiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Pointwise multiplies this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to pointwise multiply with this one.</param>
            <param name="result">The vector to store the result of the pointwise multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.DoPointwiseDivide(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Numerics.Complex})">
            <summary>
            Pointwise multiplies this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to pointwise multiply with this one.</param>
            <param name="result">The vector to store the result of the pointwise multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.OuterProduct(MathNet.Numerics.LinearAlgebra.Complex.SparseVector,MathNet.Numerics.LinearAlgebra.Complex.SparseVector)">
            <summary>
            Outer product of two vectors
            </summary>
            <param name="u">First vector</param>
            <param name="v">Second vector</param>
            <returns>Matrix M[i,j] = u[i]*v[j] </returns>
            <exception cref="T:System.ArgumentNullException">If the u vector is <see langword="null"/>.</exception> 
            <exception cref="T:System.ArgumentNullException">If the v vector is <see langword="null"/>.</exception> 
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.OuterProduct(MathNet.Numerics.LinearAlgebra.Complex.SparseVector)">
            <summary>
            Outer product of this and another vector.
            </summary>
            <param name="v">The vector to operate on.</param>
            <returns>
            Matrix M[i,j] = this[i] * v[j].
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.Norm(System.Double)">
            <summary>
            Computes the p-Norm.
            </summary>
            <param name="p">The p value.</param>
            <returns>Scalar <c>ret = (sum(abs(this[i])^p))^(1/p)</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.Parse(System.String)">
            <summary>
            Creates a double sparse vector based on a string. The string can be in the following formats (without the
            quotes): 'n', 'n,n,..', '(n,n,..)', '[n,n,...]', where n is a Complex.
            </summary>
            <returns>
            A double sparse vector containing the values specified by the given string.
            </returns>
            <param name="value">
            The string to parse.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates a double sparse vector based on a string. The string can be in the following formats (without the
            quotes): 'n', 'n;n;..', '(n;n;..)', '[n;n;...]', where n is a Complex.
            </summary>
            <returns>
            A double sparse vector containing the values specified by the given string.
            </returns>
            <param name="value">
            the string to parse.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.TryParse(System.String,MathNet.Numerics.LinearAlgebra.Complex.SparseVector@)">
            <summary>
            Converts the string representation of a complex sparse vector to double-precision sparse vector equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing a complex vector to convert.
            </param>
            <param name="result">
            The parsed value.
            </param>
            <returns>
            If the conversion succeeds, the result will contain a complex number equivalent to value.
            Otherwise the result will be <c>null</c>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.TryParse(System.String,System.IFormatProvider,MathNet.Numerics.LinearAlgebra.Complex.SparseVector@)">
            <summary>
            Converts the string representation of a complex sparse vector to double-precision sparse vector equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing a complex vector to convert.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about value.
            </param>
            <param name="result">
            The parsed value.
            </param>
            <returns>
            If the conversion succeeds, the result will contain a complex number equivalent to value.
            Otherwise the result will be <c>null</c>.
            </returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.NonZerosCount">
            <summary>
            Gets the number of non zero elements in the vector.
            </summary>
            <value>The number of non zero elements.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.DenseVector">
            <summary>
            A vector using dense storage.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.DenseVector._length">
            <summary>
            Number of elements
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.DenseVector._values">
            <summary>
            Gets the vector's data.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.#ctor(MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage{System.Double})">
            <summary>
            Create a new dense vector straight from an initialized vector storage instance.
            The storage is used directly without copying.
            Intended for advanced scenarios where you're working directly with
            storage for performance or interop reasons.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.#ctor(System.Int32)">
            <summary>
            Create a new dense vector with the given length.
            All cells of the vector will be initialized to zero.
            Zero-length vectors are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If length is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.#ctor(System.Double[])">
            <summary>
            Create a new dense vector directly binding to a raw array.
            The array is used directly without copying.
            Very efficient, but changes to the array and the vector will affect each other.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.OfVector(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Create a new dense vector as a copy of the given other vector.
            This new vector will be independent from the other vector.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.OfEnumerable(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Create a new dense vector as a copy of the given enumerable.
            This new vector will be independent from the enumerable.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.OfIndexedEnumerable(System.Int32,System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,System.Double}})">
            <summary>
            Create a new dense vector as a copy of the given indexed enumerable.
            Keys must be provided at most once, zero is assumed if a key is omitted.
            This new vector will be independent from the enumerable.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.Create(System.Int32,System.Func{System.Int32,System.Double})">
            <summary>
            Create a new dense vector and initialize each value using the provided init function.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.CreateRandom(System.Int32,MathNet.Numerics.Distributions.IContinuousDistribution)">
            <summary>
            Create a new dense vector with values sampled from the provided random distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.#ctor(System.Int32,System.Double)">
            <summary>
            Create a new dense vector with the given length.
            All cells of the vector will be initialized with the provided value.
            Zero-length vectors are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If length is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.#ctor(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Create a new dense vector as a copy of the given other vector.
            This new vector will be independent from the other vector.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Create a new dense vector as a copy of the given enumerable.
            This new vector will be independent from the enumerable.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.op_Explicit(MathNet.Numerics.LinearAlgebra.Double.DenseVector)~System.Double[]">
            <summary>
            Returns a reference to the internal data structure.
            </summary>
            <param name="vector">The <c>DenseVector</c> whose internal data we are
            returning.</param>
            <returns>
            A reference to the internal date of the given vector.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.op_Implicit(System.Double[])~MathNet.Numerics.LinearAlgebra.Double.DenseVector">
            <summary>
            Returns a vector bound directly to a reference of the provided array.
            </summary>
            <param name="array">The array to bind to the <c>DenseVector</c> object.</param>
            <returns>
            A <c>DenseVector</c> whose values are bound to the given array.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.CreateMatrix(System.Int32,System.Int32)">
            <summary>
            Creates a matrix with the given dimensions using the same storage type
            as this vector.
            </summary>
            <param name="rows">
            The number of rows.
            </param>
            <param name="columns">
            The number of columns.
            </param>
            <returns>
            A matrix with the given dimensions.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.CreateVector(System.Int32)">
            <summary>
            Creates a <strong>Vector</strong> of the given size using the same storage type
            as this vector.
            </summary>
            <param name="size">
            The size of the <strong>Vector</strong> to create.
            </param>
            <returns>
            The new <c>Vector</c>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.DoAdd(System.Double,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Adds a scalar to each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to add.</param>
            <param name="result">The vector to store the result of the addition.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.DoAdd(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Adds another vector to this vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to add to this one.</param>
            <param name="result">The vector to store the result of the addition.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.op_Addition(MathNet.Numerics.LinearAlgebra.Double.DenseVector,MathNet.Numerics.LinearAlgebra.Double.DenseVector)">
            <summary>
            Adds two <strong>Vectors</strong> together and returns the results.
            </summary>
            <param name="leftSide">One of the vectors to add.</param>
            <param name="rightSide">The other vector to add.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.DoSubtract(System.Double,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Subtracts a scalar from each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to subtract.</param>
            <param name="result">The vector to store the result of the subtraction.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.DoSubtract(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Subtracts another vector to this vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to subtract from this one.</param>
            <param name="result">The vector to store the result of the subtraction.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.op_UnaryNegation(MathNet.Numerics.LinearAlgebra.Double.DenseVector)">
            <summary>
            Returns a <strong>Vector</strong> containing the negated values of <paramref name="rightSide"/>.
            </summary>
            <param name="rightSide">The vector to get the values from.</param>
            <returns>A vector containing the negated values as <paramref name="rightSide"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.op_Subtraction(MathNet.Numerics.LinearAlgebra.Double.DenseVector,MathNet.Numerics.LinearAlgebra.Double.DenseVector)">
            <summary>
            Subtracts two <strong>Vectors</strong> and returns the results.
            </summary>
            <param name="leftSide">The vector to subtract from.</param>
            <param name="rightSide">The vector to subtract.</param>
            <returns>The result of the subtraction.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.DoNegate(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Negates vector and saves result to <paramref name="result"/>
            </summary>
            <param name="result">Target vector</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.DoMultiply(System.Double,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Multiplies a scalar to each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to multiply.</param>
            <param name="result">The vector to store the result of the multiplication.</param>
            <remarks></remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.DoDotProduct(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Computes the dot product between this vector and another vector.
            </summary>
            <param name="other">The other vector to add.</param>
            <returns>s
            The result of the addition.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.op_Multiply(MathNet.Numerics.LinearAlgebra.Double.DenseVector,System.Double)">
            <summary>
            Multiplies a vector with a scalar.
            </summary>
            <param name="leftSide">The vector to scale.</param>
            <param name="rightSide">The scalar value.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.op_Multiply(System.Double,MathNet.Numerics.LinearAlgebra.Double.DenseVector)">
            <summary>
            Multiplies a vector with a scalar.
            </summary>
            <param name="leftSide">The scalar value.</param>
            <param name="rightSide">The vector to scale.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.op_Multiply(MathNet.Numerics.LinearAlgebra.Double.DenseVector,MathNet.Numerics.LinearAlgebra.Double.DenseVector)">
            <summary>
            Computes the dot product between two <strong>Vectors</strong>.
            </summary>
            <param name="leftSide">The left row vector.</param>
            <param name="rightSide">The right column vector.</param>
            <returns>The dot product between the two vectors.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.op_Division(MathNet.Numerics.LinearAlgebra.Double.DenseVector,System.Double)">
            <summary>
            Divides a vector with a scalar.
            </summary>
            <param name="leftSide">The vector to divide.</param>
            <param name="rightSide">The scalar value.</param>
            <returns>The result of the division.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.DoModulus(System.Double,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Computes the modulus for each element of the vector for the given divisor.
            </summary>
            <param name="divisor">The divisor to use.</param>
            <param name="result">A vector to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.op_Modulus(MathNet.Numerics.LinearAlgebra.Double.DenseVector,System.Double)">
            <summary>
            Computes the modulus of each element of the vector of the given divisor.
            </summary>
            <param name="leftSide">The vector whose elements we want to compute the modulus of.</param>
            <param name="rightSide">The divisor to use,</param>
            <returns>The result of the calculation</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.AbsoluteMinimumIndex">
            <summary>
            Returns the index of the absolute minimum element.
            </summary>
            <returns>The index of absolute minimum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.AbsoluteMinimum">
            <summary>
            Returns the value of the absolute minimum element.
            </summary>
            <returns>The value of the absolute minimum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.AbsoluteMaximum">
            <summary>
            Returns the value of the absolute maximum element.
            </summary>
            <returns>The value of the absolute maximum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.AbsoluteMaximumIndex">
            <summary>
            Returns the index of the absolute maximum element.
            </summary>
            <returns>The index of absolute maximum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.MaximumIndex">
            <summary>
            Returns the index of the absolute maximum element.
            </summary>
            <returns>The index of absolute maximum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.MinimumIndex">
            <summary>
            Returns the index of the minimum element.
            </summary>
            <returns>The index of minimum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.Sum">
            <summary>
            Computes the sum of the vector's elements.
            </summary>
            <returns>The sum of the vector's elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.SumMagnitudes">
            <summary>
            Computes the sum of the absolute value of the vector's elements.
            </summary>
            <returns>The sum of the absolute value of the vector's elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.DoPointwiseMultiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Pointwise divide this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to pointwise divide this one by.</param>
            <param name="result">The vector to store the result of the pointwise division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.DoPointwiseDivide(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Pointwise divide this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to pointwise divide this one by.</param>
            <param name="result">The vector to store the result of the pointwise division.</param>
            <remarks></remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.OuterProduct(MathNet.Numerics.LinearAlgebra.Double.DenseVector,MathNet.Numerics.LinearAlgebra.Double.DenseVector)">
            <summary>
            Outer product of two vectors
            </summary>
            <param name="u">First vector</param>
            <param name="v">Second vector</param>
            <returns>Matrix M[i,j] = u[i]*v[j] </returns>
            <exception cref="T:System.ArgumentNullException">If the u vector is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the v vector is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.OuterProduct(MathNet.Numerics.LinearAlgebra.Double.DenseVector)">
            <summary>
            Outer product of this and another vector.
            </summary>
            <param name="v">The vector to operate on.</param>
            <returns>
            Matrix M[i,j] = this[i] * v[j].
            </returns>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.OuterProduct(MathNet.Numerics.LinearAlgebra.Double.DenseVector,MathNet.Numerics.LinearAlgebra.Double.DenseVector)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.Norm(System.Double)">
            <summary>
            Computes the p-Norm.
            </summary>
            <param name="p">The p value.</param>
            <returns>Scalar <c>ret = (sum(abs(this[i])^p))^(1/p)</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.Parse(System.String)">
            <summary>
            Creates a double dense vector based on a string. The string can be in the following formats (without the
            quotes): 'n', 'n,n,..', '(n,n,..)', '[n,n,...]', where n is a double.
            </summary>
            <returns>
            A double dense vector containing the values specified by the given string.
            </returns>
            <param name="value">
            The string to parse.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates a double dense vector based on a string. The string can be in the following formats (without the
            quotes): 'n', 'n,n,..', '(n,n,..)', '[n,n,...]', where n is a double.
            </summary>
            <returns>
            A double dense vector containing the values specified by the given string.
            </returns>
            <param name="value">
            the string to parse.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.TryParse(System.String,MathNet.Numerics.LinearAlgebra.Double.DenseVector@)">
            <summary>
            Converts the string representation of a real dense vector to double-precision dense vector equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing a real vector to convert.
            </param>
            <param name="result">
            The parsed value.
            </param>
            <returns>
            If the conversion succeeds, the result will contain a complex number equivalent to value.
            Otherwise the result will be <c>null</c>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.TryParse(System.String,System.IFormatProvider,MathNet.Numerics.LinearAlgebra.Double.DenseVector@)">
            <summary>
            Converts the string representation of a real dense vector to double-precision dense vector equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing a real vector to convert.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about value.
            </param>
            <param name="result">
            The parsed value.
            </param>
            <returns>
            If the conversion succeeds, the result will contain a complex number equivalent to value.
            Otherwise the result will be <c>null</c>.
            </returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.DenseVector.Values">
            <summary>
            Gets the vector's data.
            </summary>
            <value>The vector's data.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseGramSchmidt">
            <summary>
            <para>A class which encapsulates the functionality of the QR decomposition Modified Gram-Schmidt Orthogonalization.</para>
            <para>Any real square matrix A may be decomposed as A = QR where Q is an orthogonal mxn matrix and R is an nxn upper triangular matrix.</para>
            </summary>
            <remarks>
            The computation of the QR decomposition is done at construction time by modified Gram-Schmidt Orthogonalization.
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseGramSchmidt._provider">
            <summary>
            used for QR solve
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseGramSchmidt.#ctor(MathNet.Numerics.LinearAlgebra.Double.DenseMatrix)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseGramSchmidt"/> class. This object creates an orthogonal matrix 
            using the modified Gram-Schmidt method.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> row count is less then column count</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is rank deficient</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseGramSchmidt.Factorize(System.Double[],System.Int32,System.Int32,System.Double[])">
            <summary>
            Factorize matrix using the modified Gram-Schmidt method.
            </summary>
            <param name="q">Initial matrix. On exit is replaced by <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/> Q.</param>
            <param name="rowsQ">Number of rows in <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/> Q.</param>
            <param name="columnsQ">Number of columns in <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/> Q.</param>
            <param name="r">On exit is filled by <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/> R.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseGramSchmidt.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseGramSchmidt.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseEvd">
            <summary>
            Eigenvalues and eigenvectors of a real matrix.
            </summary>
            <remarks>
            If A is symmetric, then A = V*D*V' where the eigenvalue matrix D is
            diagonal and the eigenvector matrix V is orthogonal.
            I.e. A = V*D*V' and V*VT=I.
            If A is not symmetric, then the eigenvalue matrix D is block diagonal
            with the real eigenvalues in 1-by-1 blocks and any complex eigenvalues,
            lambda + i*mu, in 2-by-2 blocks, [lambda, mu; -mu, lambda].  The
            columns of V represent the eigenvectors in the sense that A*V = V*D,
            i.e. A.Multiply(V) equals V.Multiply(D).  The matrix V may be badly
            conditioned, or even singular, so the validity of the equation
            A = V*D*Inverse(V) depends upon V.Condition().
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseEvd.#ctor(MathNet.Numerics.LinearAlgebra.Double.DenseMatrix)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseEvd"/> class. This object will compute the
            the eigenvalue decomposition when the constructor is called and cache it's decomposition.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If EVD algorithm failed to converge with matrix <paramref name="matrix"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseEvd.SymmetricTridiagonalize(System.Double[],System.Double[],System.Double[],System.Int32)">
            <summary>
            Symmetric Householder reduction to tridiagonal form.
            </summary>
            <param name="a">Data array of matrix V (eigenvectors)</param>
            <param name="d">Arrays for internal storage of real parts of eigenvalues</param>
            <param name="e">Arrays for internal storage of imaginary parts of eigenvalues</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedures tred2 by 
            Bowdler, Martin, Reinsch, and Wilkinson, Handbook for 
            Auto. Comp., Vol.ii-Linear Algebra, and the corresponding 
            Fortran subroutine in EISPACK.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseEvd.SymmetricDiagonalize(System.Double[],System.Double[],System.Double[],System.Int32)">
            <summary>
            Symmetric tridiagonal QL algorithm.
            </summary>
            <param name="a">Data array of matrix V (eigenvectors)</param>
            <param name="d">Arrays for internal storage of real parts of eigenvalues</param>
            <param name="e">Arrays for internal storage of imaginary parts of eigenvalues</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedures tql2, by
            Bowdler, Martin, Reinsch, and Wilkinson, Handbook for
            Auto. Comp., Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutine in EISPACK.</remarks>
            <exception cref="T:MathNet.Numerics.NonConvergenceException"></exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseEvd.NonsymmetricReduceToHessenberg(System.Double[],System.Double[],System.Int32)">
            <summary>
            Nonsymmetric reduction to Hessenberg form.
            </summary>
            <param name="a">Data array of matrix V (eigenvectors)</param>
            <param name="matrixH">Array for internal storage of nonsymmetric Hessenberg form.</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedures orthes and ortran,
            by Martin and Wilkinson, Handbook for Auto. Comp.,
            Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutines in EISPACK.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseEvd.NonsymmetricReduceHessenberToRealSchur(System.Double[],System.Double[],System.Double[],System.Double[],System.Int32)">
            <summary>
            Nonsymmetric reduction from Hessenberg to real Schur form.
            </summary>
            <param name="a">Data array of matrix V (eigenvectors)</param>
            <param name="matrixH">Array for internal storage of nonsymmetric Hessenberg form.</param>
            <param name="d">Arrays for internal storage of real parts of eigenvalues</param>
            <param name="e">Arrays for internal storage of imaginary parts of eigenvalues</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedure hqr2,
            by Martin and Wilkinson, Handbook for Auto. Comp.,
            Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutine in EISPACK.</remarks>
            <exception cref="T:MathNet.Numerics.NonConvergenceException"></exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseEvd.Cdiv(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Complex scalar division X/Y.
            </summary>
            <param name="xreal">Real part of X</param>
            <param name="ximag">Imaginary part of X</param>
            <param name="yreal">Real part of Y</param>
            <param name="yimag">Imaginary part of Y</param>
            <returns>Division result as a <see cref="T:System.Numerics.Complex"/> number.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseEvd.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseEvd.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A EVD factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserEvd">
            <summary>
            Eigenvalues and eigenvectors of a real matrix.
            </summary>
            <remarks>
            If A is symmetric, then A = V*D*V' where the eigenvalue matrix D is
            diagonal and the eigenvector matrix V is orthogonal.
            I.e. A = V*D*V' and V*VT=I.
            If A is not symmetric, then the eigenvalue matrix D is block diagonal
            with the real eigenvalues in 1-by-1 blocks and any complex eigenvalues,
            lambda + i*mu, in 2-by-2 blocks, [lambda, mu; -mu, lambda].  The
            columns of V represent the eigenvectors in the sense that A*V = V*D,
            i.e. A.Multiply(V) equals V.Multiply(D).  The matrix V may be badly
            conditioned, or even singular, so the validity of the equation
            A = V*D*Inverse(V) depends upon V.Condition().
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserEvd.#ctor(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserEvd"/> class. This object will compute the
            the eigenvalue decomposition when the constructor is called and cache it's decomposition.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If EVD algorithm failed to converge with matrix <paramref name="matrix"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserEvd.SymmetricTridiagonalize(System.Double[],System.Double[],System.Int32)">
            <summary>
            Symmetric Householder reduction to tridiagonal form.
            </summary>
            <param name="d">Arrays for internal storage of real parts of eigenvalues</param>
            <param name="e">Arrays for internal storage of imaginary parts of eigenvalues</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedures tred2 by 
            Bowdler, Martin, Reinsch, and Wilkinson, Handbook for 
            Auto. Comp., Vol.ii-Linear Algebra, and the corresponding 
            Fortran subroutine in EISPACK.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserEvd.SymmetricDiagonalize(System.Double[],System.Double[],System.Int32)">
            <summary>
            Symmetric tridiagonal QL algorithm.
            </summary>
            <param name="d">Arrays for internal storage of real parts of eigenvalues</param>
            <param name="e">Arrays for internal storage of imaginary parts of eigenvalues</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedures tql2, by
            Bowdler, Martin, Reinsch, and Wilkinson, Handbook for
            Auto. Comp., Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutine in EISPACK.</remarks>
            <exception cref="T:MathNet.Numerics.NonConvergenceException"></exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserEvd.NonsymmetricReduceToHessenberg(System.Double[0:,0:],System.Int32)">
            <summary>
            Nonsymmetric reduction to Hessenberg form.
            </summary>
            <param name="matrixH">Array for internal storage of nonsymmetric Hessenberg form.</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedures orthes and ortran,
            by Martin and Wilkinson, Handbook for Auto. Comp.,
            Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutines in EISPACK.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserEvd.NonsymmetricReduceHessenberToRealSchur(System.Double[0:,0:],System.Double[],System.Double[],System.Int32)">
            <summary>
            Nonsymmetric reduction from Hessenberg to real Schur form.
            </summary>
            <param name="matrixH">Array for internal storage of nonsymmetric Hessenberg form.</param>
            <param name="d">Arrays for internal storage of real parts of eigenvalues</param>
            <param name="e">Arrays for internal storage of imaginary parts of eigenvalues</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedure hqr2,
            by Martin and Wilkinson, Handbook for Auto. Comp.,
            Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutine in EISPACK.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserEvd.Cdiv(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Complex scalar division X/Y.
            </summary>
            <param name="xreal">Real part of X</param>
            <param name="ximag">Imaginary part of X</param>
            <param name="yreal">Real part of Y</param>
            <param name="yimag">Imaginary part of Y</param>
            <returns>Division result as a <see cref="T:System.Numerics.Complex"/> number.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserEvd.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserEvd.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A EVD factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix">
            <summary>
            A Matrix class with dense storage. The underlying storage is a one dimensional array in column-major order (column by column).
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Matrix">
            <summary>
            <c>float</c> version of the <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/> class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.#ctor(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage{System.Single})">
            <summary>
            Initializes a new instance of the Matrix class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.L1Norm">
            <summary>Calculates the L1 norm.</summary>
            <returns>The L1 norm of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.ConjugateTranspose">
            <summary>
            Returns the conjugate transpose of this matrix.
            </summary>        
            <returns>The conjugate transpose of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.FrobeniusNorm">
            <summary>Calculates the Frobenius norm of this matrix.</summary>
            <returns>The Frobenius norm of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.InfinityNorm">
            <summary>Calculates the infinity norm of this matrix.</summary>
            <returns>The infinity norm of this matrix.</returns>   
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.DoAdd(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="other">The matrix to add to this matrix.</param>
            <param name="result">The matrix to store the result of the addition.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.DoSubtract(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="other">The matrix to subtract to this matrix.</param>
            <param name="result">The matrix to store the result of subtraction.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.DoMultiply(System.Single,MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Multiplies each element of the matrix by a scalar and places results into the result matrix.
            </summary>
            <param name="scalar">The scalar to multiply the matrix with.</param>
            <param name="result">The matrix to store the result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Multiplies this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Multiplies this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.DoDivide(System.Single,MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Divides each element of the matrix by a scalar and places results into the result matrix.
            </summary>
            <param name="scalar">The scalar to divide the matrix with.</param>
            <param name="result">The matrix to store the result of the division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.DoTransposeAndMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Multiplies this matrix with transpose of another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.DoTransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Multiplies the transpose of this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.DoTransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Multiplies the transpose of this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.DoModulus(System.Single,MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Computes the modulus for each element of the matrix.
            </summary>
            <param name="divisor">The divisor to use.</param>
            <param name="result">Matrix to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.DoNegate(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Negate each element of this matrix and place the results into the result matrix.
            </summary>
            <param name="result">The result of the negation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.DoConjugate(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Complex conjugates each element of this matrix and place the results into the result matrix.
            </summary>
            <param name="result">The result of the conjugation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.DoPointwiseMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Pointwise multiplies this matrix with another matrix and stores the result into the result matrix.
            </summary>
            <param name="other">The matrix to pointwise multiply with this one.</param>
            <param name="result">The matrix to store the result of the pointwise multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.DoPointwiseDivide(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Pointwise divide this matrix by another matrix and stores the result into the result matrix.
            </summary>
            <param name="other">The matrix to pointwise divide this one by.</param>
            <param name="result">The matrix to store the result of the pointwise division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.Trace">
            <summary>
            Computes the trace of this matrix.
            </summary>
            <returns>The trace of this matrix</returns>
            <exception cref="T:System.ArgumentException">If the matrix is not square</exception>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix._rowCount">
            <summary>
            Number of rows.
            </summary>
            <remarks>Using this instead of the RowCount property to speed up calculating
            a matrix index in the data array.</remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix._columnCount">
            <summary>
            Number of columns.
            </summary>
            <remarks>Using this instead of the ColumnCount property to speed up calculating
            a matrix index in the data array.</remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix._values">
            <summary>
            Gets the matrix's data.
            </summary>
            <value>The matrix's data.</value>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.#ctor(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage{System.Single})">
            <summary>
            Create a new dense matrix straight from an initialized matrix storage instance.
            The storage is used directly without copying.
            Intended for advanced scenarios where you're working directly with
            storage for performance or interop reasons.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.#ctor(System.Int32)">
            <summary>
            Create a new square dense matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the order is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new dense matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the row or column count is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.#ctor(System.Int32,System.Int32,System.Single[])">
            <summary>
            Create a new dense matrix with the given number of rows and columns directly binding to a raw array.
            The array is assumed to be in column-major order (column by column) and is used directly without copying.
            Very efficient, but changes to the array and the matrix will affect each other.
            </summary>
            <seealso href="http://en.wikipedia.org/wiki/Row-major_order"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.OfMatrix(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Create a new dense matrix as a copy of the given other matrix.
            This new matrix will be independent from the other matrix.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.OfArray(System.Single[0:,0:])">
            <summary>
            Create a new dense matrix as a copy of the given two-dimensional array.
            This new matrix will be independent from the provided array.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.OfIndexed(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,System.Int32,System.Single}})">
            <summary>
            Create a new dense matrix as a copy of the given indexed enumerable.
            Keys must be provided at most once, zero is assumed if a key is omitted.
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.OfColumnMajor(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Create a new dense matrix as a copy of the given enumerable.
            The enumerable is assumed to be in column-major order (column by column).
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.OfColumns(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Single}})">
            <summary>
            Create a new dense matrix as a copy of the given enumerable of enumerable columns.
            Each enumerable in the master enumerable specifies a column.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.OfColumnVectors(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single}[])">
            <summary>
            Create a new dense matrix as a copy of the given column vectors.
            This new matrix will be independent from the vectors.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.OfColumnsCovariant``1(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create a new dense matrix as a copy of the given enumerable of enumerable columns.
            Each enumerable in the master enumerable specifies a column.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.OfRows(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Single}})">
            <summary>
            Create a new dense matrix as a copy of the given enumerable of enumerable rows.
            Each enumerable in the master enumerable specifies a row.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.OfRowVectors(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single}[])">
            <summary>
            Create a new dense matrix as a copy of the given row vectors.
            This new matrix will be independent from the vectors.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.OfRowsCovariant``1(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create a new dense matrix as a copy of the given enumerable of enumerable rows.
            Each enumerable in the master enumerable specifies a row.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.Create(System.Int32,System.Int32,System.Func{System.Int32,System.Int32,System.Single})">
            <summary>
            Create a new dense matrix and initialize each value using the provided init function.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.CreateRandom(System.Int32,System.Int32,MathNet.Numerics.Distributions.IContinuousDistribution)">
            <summary>
            Create a new dense matrix with values sampled from the provided random distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.#ctor(System.Int32,System.Int32,System.Single)">
            <summary>
            Create a new dense matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to the provided value.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the row or column count is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.#ctor(System.Single[0:,0:])">
            <summary>
            Create a new dense matrix as a copy of the given two-dimensional array.
            This new matrix will be independent from the provided array.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.#ctor(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Create a new dense matrix as a copy of the given other matrix.
            This new matrix will be independent from the other matrix.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.CreateMatrix(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a <c>DenseMatrix</c> for the given number of rows and columns.
            </summary>
            <param name="numberOfRows">The number of rows.</param>
            <param name="numberOfColumns">The number of columns.</param>
            <param name="fullyMutable">True if all fields must be mutable (e.g. not a diagonal matrix).</param>
            <returns>
            A <c>DenseMatrix</c> with the given dimensions.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.CreateVector(System.Int32,System.Boolean)">
            <summary>
            Creates a <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Vector`1"/> with a the given dimension.
            </summary>
            <param name="size">The size of the vector.</param>
            <param name="fullyMutable">True if all fields must be mutable.</param>
            <returns>
            A <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Vector`1"/> with the given dimension.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.Transpose">
            <summary>
            Returns the transpose of this matrix.
            </summary>
            <returns>The transpose of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.L1Norm">
            <summary>Calculates the L1 norm.</summary>
            <returns>The L1 norm of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.FrobeniusNorm">
            <summary>Calculates the Frobenius norm of this matrix.</summary>
            <returns>The Frobenius norm of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.InfinityNorm">
            <summary>Calculates the infinity norm of this matrix.</summary>
            <returns>The infinity norm of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.Identity(System.Int32)">
            <summary>
            Initializes a square <see cref="T:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix"/> with all zero's except for ones on the diagonal.
            </summary>
            <param name="order">the size of the square matrix.</param>
            <returns>A dense identity matrix.</returns>
            <exception cref="T:System.ArgumentException">
            If <paramref name="order"/> is less than one.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.DoAdd(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="other">The matrix to add to this matrix.</param>
            <param name="result">The matrix to store the result of add</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.DoSubtract(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="other">The matrix to subtract.</param>
            <param name="result">The matrix to store the result of the subtraction.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.DoMultiply(System.Single,MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Multiplies each element of the matrix by a scalar and places results into the result matrix.
            </summary>
            <param name="scalar">The scalar to multiply the matrix with.</param>
            <param name="result">The matrix to store the result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Multiplies this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Multiplies this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.DoTransposeAndMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Multiplies this matrix with transpose of another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.DoTransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Multiplies the transpose of this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.DoTransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Multiplies the transpose of this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.DoNegate(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Negate each element of this matrix and place the results into the result matrix.
            </summary>
            <param name="result">The result of the negation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.DoPointwiseMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Pointwise multiplies this matrix with another matrix and stores the result into the result matrix.
            </summary>
            <param name="other">The matrix to pointwise multiply with this one.</param>
            <param name="result">The matrix to store the result of the pointwise multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.DoPointwiseDivide(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Pointwise divide this matrix by another matrix and stores the result into the result matrix.
            </summary>
            <param name="other">The matrix to pointwise divide this one by.</param>
            <param name="result">The matrix to store the result of the pointwise division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.DoModulus(System.Single,MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Computes the modulus for each element of the matrix.
            </summary>
            <param name="divisor">The divisor to use.</param>
            <param name="result">Matrix to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.Trace">
            <summary>
            Computes the trace of this matrix.
            </summary>
            <returns>The trace of this matrix</returns>
            <exception cref="T:System.ArgumentException">If the matrix is not square</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.op_Addition(MathNet.Numerics.LinearAlgebra.Single.DenseMatrix,MathNet.Numerics.LinearAlgebra.Single.DenseMatrix)">
            <summary>
            Adds two matrices together and returns the results.
            </summary>
            <remarks>This operator will allocate new memory for the result. It will
            choose the representation of either <paramref name="leftSide"/> or <paramref name="rightSide"/> depending on which
            is denser.</remarks>
            <param name="leftSide">The left matrix to add.</param>
            <param name="rightSide">The right matrix to add.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> don't have the same dimensions.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.op_UnaryPlus(MathNet.Numerics.LinearAlgebra.Single.DenseMatrix)">
            <summary>
            Returns a <strong>Matrix</strong> containing the same values of <paramref name="rightSide"/>.
            </summary>
            <param name="rightSide">The matrix to get the values from.</param>
            <returns>A matrix containing a the same values as <paramref name="rightSide"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.op_Subtraction(MathNet.Numerics.LinearAlgebra.Single.DenseMatrix,MathNet.Numerics.LinearAlgebra.Single.DenseMatrix)">
            <summary>
            Subtracts two matrices together and returns the results.
            </summary>
            <remarks>This operator will allocate new memory for the result. It will
            choose the representation of either <paramref name="leftSide"/> or <paramref name="rightSide"/> depending on which
            is denser.</remarks>
            <param name="leftSide">The left matrix to subtract.</param>
            <param name="rightSide">The right matrix to subtract.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> don't have the same dimensions.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.op_UnaryNegation(MathNet.Numerics.LinearAlgebra.Single.DenseMatrix)">
            <summary>
            Negates each element of the matrix.
            </summary>
            <param name="rightSide">The matrix to negate.</param>
            <returns>A matrix containing the negated values.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Single.DenseMatrix,System.Single)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.op_Multiply(System.Single,MathNet.Numerics.LinearAlgebra.Single.DenseMatrix)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Single.DenseMatrix,MathNet.Numerics.LinearAlgebra.Single.DenseMatrix)">
            <summary>
            Multiplies two matrices.
            </summary>
            <remarks>This operator will allocate new memory for the result. It will
            choose the representation of either <paramref name="leftSide"/> or <paramref name="rightSide"/> depending on which
            is denser.</remarks>
            <param name="leftSide">The left matrix to multiply.</param>
            <param name="rightSide">The right matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the dimensions of <paramref name="leftSide"/> or <paramref name="rightSide"/> don't conform.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Single.DenseMatrix,MathNet.Numerics.LinearAlgebra.Single.DenseVector)">
            <summary>
            Multiplies a <strong>Matrix</strong> and a Vector.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The vector to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Single.DenseVector,MathNet.Numerics.LinearAlgebra.Single.DenseMatrix)">
            <summary>
            Multiplies a Vector and a <strong>Matrix</strong>.
            </summary>
            <param name="leftSide">The vector to multiply.</param>
            <param name="rightSide">The matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.op_Modulus(MathNet.Numerics.LinearAlgebra.Single.DenseMatrix,System.Single)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.Data">
            <summary>
            Gets the matrix's data.
            </summary>
            <value>The matrix's data.</value>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.Values">
            <summary>
            Gets the matrix's data.
            </summary>
            <value>The matrix's data.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.DenseVector">
            <summary>
            A vector using dense storage.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Vector">
            <summary>
            <c>float</c> version of the <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Vector`1"/> class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.#ctor(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage{System.Single})">
            <summary>
            Initializes a new instance of the Vector class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.DoAdd(System.Single,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Adds a scalar to each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">
            The scalar to add.
            </param>
            <param name="result">
            The vector to store the result of the addition.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.DoAdd(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Adds another vector to this vector and stores the result into the result vector.
            </summary>
            <param name="other">
            The vector to add to this one.
            </param>
            <param name="result">
            The vector to store the result of the addition.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.DoSubtract(System.Single,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Subtracts a scalar from each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">
            The scalar to subtract.
            </param>
            <param name="result">
            The vector to store the result of the subtraction.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.DoSubtract(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Subtracts another vector to this vector and stores the result into the result vector.
            </summary>
            <param name="other">
            The vector to subtract from this one.
            </param>
            <param name="result">
            The vector to store the result of the subtraction.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.DoMultiply(System.Single,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Multiplies a scalar to each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">
            The scalar to multiply.
            </param>
            <param name="result">
            The vector to store the result of the multiplication.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.DoDivide(System.Single,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Divides each element of the vector by a scalar and stores the result in the result vector.
            </summary>
            <param name="scalar">
            The scalar to divide with.
            </param>
            <param name="result">
            The vector to store the result of the division.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.DoDivideByThis(System.Single,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Divides a scalar by each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to divide.</param>
            <param name="result">The vector to store the result of the division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.DoPointwiseMultiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Pointwise multiplies this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to pointwise multiply with this one.</param>
            <param name="result">The vector to store the result of the pointwise multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.DoPointwiseDivide(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Pointwise divide this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to pointwise divide this one by.</param>
            <param name="result">The vector to store the result of the pointwise division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.DoPointwiseModulus(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Pointwise modulus this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to pointwise modulus this one by.</param>
            <param name="result">The result of the modulus.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.DoDotProduct(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Computes the dot product between this vector and another vector.
            </summary>
            <param name="other">
            The other vector to add.
            </param>
            <returns>s
            The result of the addition.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.DoModulus(System.Single,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Computes the modulus for each element of the vector for the given divisor.
            </summary>
            <param name="divisor">The divisor to use.</param>
            <param name="result">A vector to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.DoModulusByThis(System.Single,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Computes the modulus for the given dividend for each element of the vector.
            </summary>
            <param name="scalar">The dividend to use.</param>
            <param name="result">A vector to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.AbsoluteMinimum">
            <summary>
            Returns the value of the absolute minimum element.
            </summary>
            <returns>The value of the absolute minimum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.AbsoluteMinimumIndex">
            <summary>
            Returns the index of the absolute minimum element.
            </summary>
            <returns>The index of absolute minimum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.AbsoluteMaximum">
            <summary>
            Returns the value of the absolute maximum element.
            </summary>
            <returns>The value of the absolute maximum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.AbsoluteMaximumIndex">
            <summary>
            Returns the index of the absolute maximum element.
            </summary>
            <returns>The index of absolute maximum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.Sum">
            <summary>
            Computes the sum of the vector's elements.
            </summary>
            <returns>The sum of the vector's elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.SumMagnitudes">
            <summary>
            Computes the sum of the absolute value of the vector's elements.
            </summary>
            <returns>The sum of the absolute value of the vector's elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.Norm(System.Double)">
            <summary>
            Computes the p-Norm.
            </summary>
            <param name="p">
            The p value.
            </param>
            <returns>
            <c>Scalar ret = (sum(abs(At(i))^p))^(1/p)</c>
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.DoConjugate(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Conjugates vector and save result to <paramref name="result"/>
            </summary>
            <param name="result">Target vector</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.DoNegate(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Negates vector and saves result to <paramref name="result"/>
            </summary>
            <param name="result">Target vector</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.MaximumIndex">
            <summary>
            Returns the index of the absolute maximum element.
            </summary>
            <returns>The index of absolute maximum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.MinimumIndex">
            <summary>
            Returns the index of the minimum element.
            </summary>
            <returns>The index of minimum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.Normalize(System.Double)">
            <summary>
            Normalizes this vector to a unit vector with respect to the p-norm.
            </summary>
            <param name="p">
            The p value.
            </param>
            <returns>
            This vector normalized to a unit vector with respect to the p-norm.
            </returns>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.DenseVector._length">
            <summary>
            Number of elements
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.DenseVector._values">
            <summary>
            Gets the vector's data.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.#ctor(MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage{System.Single})">
            <summary>
            Create a new dense vector straight from an initialized vector storage instance.
            The storage is used directly without copying.
            Intended for advanced scenarios where you're working directly with
            storage for performance or interop reasons.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.#ctor(System.Int32)">
            <summary>
            Create a new dense vector with the given length.
            All cells of the vector will be initialized to zero.
            Zero-length vectors are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If length is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.#ctor(System.Single[])">
            <summary>
            Create a new dense vector directly binding to a raw array.
            The array is used directly without copying.
            Very efficient, but changes to the array and the vector will affect each other.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.OfVector(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Create a new dense vector as a copy of the given other vector.
            This new vector will be independent from the other vector.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.OfEnumerable(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Create a new dense vector as a copy of the given enumerable.
            This new vector will be independent from the enumerable.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.OfIndexedEnumerable(System.Int32,System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,System.Single}})">
            <summary>
            Create a new dense vector as a copy of the given indexed enumerable.
            Keys must be provided at most once, zero is assumed if a key is omitted.
            This new vector will be independent from the enumerable.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.Create(System.Int32,System.Func{System.Int32,System.Single})">
            <summary>
            Create a new dense vector and initialize each value using the provided init function.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.CreateRandom(System.Int32,MathNet.Numerics.Distributions.IContinuousDistribution)">
            <summary>
            Create a new dense vector with values sampled from the provided random distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.#ctor(System.Int32,System.Single)">
            <summary>
            Create a new dense vector with the given length.
            All cells of the vector will be initialized with the provided value.
            Zero-length vectors are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If length is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.#ctor(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Create a new dense vector as a copy of the given other vector.
            This new vector will be independent from the other vector.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.#ctor(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Create a new dense vector as a copy of the given enumerable.
            This new vector will be independent from the enumerable.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.op_Explicit(MathNet.Numerics.LinearAlgebra.Single.DenseVector)~System.Single[]">
            <summary>
            Returns a reference to the internal data structure.
            </summary>
            <param name="vector">The <c>DenseVector</c> whose internal data we are
            returning.</param>
            <returns>
            A reference to the internal date of the given vector.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.op_Implicit(System.Single[])~MathNet.Numerics.LinearAlgebra.Single.DenseVector">
            <summary>
            Returns a vector bound directly to a reference of the provided array.
            </summary>
            <param name="array">The array to bind to the <c>DenseVector</c> object.</param>
            <returns>
            A <c>DenseVector</c> whose values are bound to the given array.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.CreateMatrix(System.Int32,System.Int32)">
            <summary>
            Creates a matrix with the given dimensions using the same storage type
            as this vector.
            </summary>
            <param name="rows">
            The number of rows.
            </param>
            <param name="columns">
            The number of columns.
            </param>
            <returns>
            A matrix with the given dimensions.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.CreateVector(System.Int32)">
            <summary>
            Creates a <strong>Vector</strong> of the given size using the same storage type
            as this vector.
            </summary>
            <param name="size">
            The size of the <strong>Vector</strong> to create.
            </param>
            <returns>
            The new <c>Vector</c>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.DoAdd(System.Single,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Adds a scalar to each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to add.</param>
            <param name="result">The vector to store the result of the addition.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.DoAdd(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Adds another vector to this vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to add to this one.</param>
            <param name="result">The vector to store the result of the addition.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.op_Addition(MathNet.Numerics.LinearAlgebra.Single.DenseVector,MathNet.Numerics.LinearAlgebra.Single.DenseVector)">
            <summary>
            Adds two <strong>Vectors</strong> together and returns the results.
            </summary>
            <param name="leftSide">One of the vectors to add.</param>
            <param name="rightSide">The other vector to add.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.DoSubtract(System.Single,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Subtracts a scalar from each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to subtract.</param>
            <param name="result">The vector to store the result of the subtraction.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.DoSubtract(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Subtracts another vector from this vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to subtract from this one.</param>
            <param name="result">The vector to store the result of the subtraction.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.op_UnaryNegation(MathNet.Numerics.LinearAlgebra.Single.DenseVector)">
            <summary>
            Returns a <strong>Vector</strong> containing the negated values of <paramref name="rightSide"/>.
            </summary>
            <param name="rightSide">The vector to get the values from.</param>
            <returns>A vector containing the negated values as <paramref name="rightSide"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.op_Subtraction(MathNet.Numerics.LinearAlgebra.Single.DenseVector,MathNet.Numerics.LinearAlgebra.Single.DenseVector)">
            <summary>
            Subtracts two <strong>Vectors</strong> and returns the results.
            </summary>
            <param name="leftSide">The vector to subtract from.</param>
            <param name="rightSide">The vector to subtract.</param>
            <returns>The result of the subtraction.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.DoNegate(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Negates vector and saves result to <paramref name="result"/>
            </summary>
            <param name="result">Target vector</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.DoMultiply(System.Single,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Multiplies a scalar to each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to multiply.</param>
            <param name="result">The vector to store the result of the multiplication.</param>
            <remarks></remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.DoDotProduct(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Computes the dot product between this vector and another vector.
            </summary>
            <param name="other">The other vector to add.</param>
            <returns>s
            The result of the addition.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.op_Multiply(MathNet.Numerics.LinearAlgebra.Single.DenseVector,System.Single)">
            <summary>
            Multiplies a vector with a scalar.
            </summary>
            <param name="leftSide">The vector to scale.</param>
            <param name="rightSide">The scalar value.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.op_Multiply(System.Single,MathNet.Numerics.LinearAlgebra.Single.DenseVector)">
            <summary>
            Multiplies a vector with a scalar.
            </summary>
            <param name="leftSide">The scalar value.</param>
            <param name="rightSide">The vector to scale.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.op_Multiply(MathNet.Numerics.LinearAlgebra.Single.DenseVector,MathNet.Numerics.LinearAlgebra.Single.DenseVector)">
            <summary>
            Computes the dot product between two <strong>Vectors</strong>.
            </summary>
            <param name="leftSide">The left row vector.</param>
            <param name="rightSide">The right column vector.</param>
            <returns>The dot product between the two vectors.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.op_Division(MathNet.Numerics.LinearAlgebra.Single.DenseVector,System.Single)">
            <summary>
            Divides a vector with a scalar.
            </summary>
            <param name="leftSide">The vector to divide.</param>
            <param name="rightSide">The scalar value.</param>
            <returns>The result of the division.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.DoModulus(System.Single,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Computes the modulus for each element of the vector for the given divisor.
            </summary>
            <param name="divisor">The divisor to use.</param>
            <param name="result">A vector to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.op_Modulus(MathNet.Numerics.LinearAlgebra.Single.DenseVector,System.Single)">
            <summary>
            Computes the modulus of each element of the vector of the given divisor.
            </summary>
            <param name="leftSide">The vector whose elements we want to compute the modulus of.</param>
            <param name="rightSide">The divisor to use,</param>
            <returns>The result of the calculation</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.AbsoluteMinimumIndex">
            <summary>
            Returns the index of the absolute minimum element.
            </summary>
            <returns>The index of absolute minimum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.AbsoluteMinimum">
            <summary>
            Returns the value of the absolute minimum element.
            </summary>
            <returns>The value of the absolute minimum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.AbsoluteMaximum">
            <summary>
            Returns the value of the absolute maximum element.
            </summary>
            <returns>The value of the absolute maximum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.AbsoluteMaximumIndex">
            <summary>
            Returns the index of the absolute maximum element.
            </summary>
            <returns>The index of absolute maximum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.MaximumIndex">
            <summary>
            Returns the index of the absolute maximum element.
            </summary>
            <returns>The index of absolute maximum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.MinimumIndex">
            <summary>
            Returns the index of the minimum element.
            </summary>
            <returns>The index of minimum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.Sum">
            <summary>
            Computes the sum of the vector's elements.
            </summary>
            <returns>The sum of the vector's elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.SumMagnitudes">
            <summary>
            Computes the sum of the absolute value of the vector's elements.
            </summary>
            <returns>The sum of the absolute value of the vector's elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.DoPointwiseMultiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Pointwise divide this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to pointwise divide this one by.</param>
            <param name="result">The vector to store the result of the pointwise division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.DoPointwiseDivide(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Pointwise divide this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to pointwise divide this one by.</param>
            <param name="result">The vector to store the result of the pointwise division.</param>
            <remarks></remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.OuterProduct(MathNet.Numerics.LinearAlgebra.Single.DenseVector,MathNet.Numerics.LinearAlgebra.Single.DenseVector)">
            <summary>
            Outer product of two vectors
            </summary>
            <param name="u">First vector</param>
            <param name="v">Second vector</param>
            <returns>Matrix M[i,j] = u[i]*v[j] </returns>
            <exception cref="T:System.ArgumentNullException">If the u vector is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the v vector is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.OuterProduct(MathNet.Numerics.LinearAlgebra.Single.DenseVector)">
            <summary>
            Outer product of this and another vector.
            </summary>
            <param name="v">The vector to operate on.</param>
            <returns>
            Matrix M[i,j] = this[i] * v[j].
            </returns>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.OuterProduct(MathNet.Numerics.LinearAlgebra.Single.DenseVector,MathNet.Numerics.LinearAlgebra.Single.DenseVector)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.Norm(System.Double)">
            <summary>
            Computes the p-Norm.
            </summary>
            <param name="p">The p value.</param>
            <returns>Scalar <c>ret = (sum(abs(this[i])^p))^(1/p)</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.Parse(System.String)">
            <summary>
            Creates a float dense vector based on a string. The string can be in the following formats (without the
            quotes): 'n', 'n,n,..', '(n,n,..)', '[n,n,...]', where n is a float.
            </summary>
            <returns>
            A float dense vector containing the values specified by the given string.
            </returns>
            <param name="value">
            The string to parse.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates a float dense vector based on a string. The string can be in the following formats (without the
            quotes): 'n', 'n,n,..', '(n,n,..)', '[n,n,...]', where n is a float.
            </summary>
            <returns>
            A float dense vector containing the values specified by the given string.
            </returns>
            <param name="value">
            the string to parse.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.TryParse(System.String,MathNet.Numerics.LinearAlgebra.Single.DenseVector@)">
            <summary>
            Converts the string representation of a real dense vector to float-precision dense vector equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing a real vector to convert.
            </param>
            <param name="result">
            The parsed value.
            </param>
            <returns>
            If the conversion succeeds, the result will contain a complex number equivalent to value.
            Otherwise the result will be <c>null</c>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.TryParse(System.String,System.IFormatProvider,MathNet.Numerics.LinearAlgebra.Single.DenseVector@)">
            <summary>
            Converts the string representation of a real dense vector to float-precision dense vector equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing a real vector to convert.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about value.
            </param>
            <param name="result">
            The parsed value.
            </param>
            <returns>
            If the conversion succeeds, the result will contain a complex number equivalent to value.
            Otherwise the result will be <c>null</c>.
            </returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.DenseVector.Values">
            <summary>
            Gets the vector's data.
            </summary>
            <value>The vector's data.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix">
            <summary>
            A matrix type for diagonal matrices.
            </summary>
            <remarks>
            Diagonal matrices can be non-square matrices but the diagonal always starts
            at element 0,0. A diagonal matrix will throw an exception if non diagonal
            entries are set. The exception to this is when the off diagonal elements are
            0.0 or NaN; these settings will cause no change to the diagonal matrix.
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix._data">
            <summary>
            Gets the matrix's data.
            </summary>
            <value>The matrix's data.</value>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.#ctor(MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage{System.Single})">
            <summary>
            Create a new diagonal matrix straight from an initialized matrix storage instance.
            The storage is used directly without copying.
            Intended for advanced scenarios where you're working directly with
            storage for performance or interop reasons.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.#ctor(System.Int32)">
            <summary>
            Create a new square diagonal matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the order is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new diagonal matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the row or column count is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.#ctor(System.Int32,System.Int32,System.Single)">
            <summary>
            Create a new diagonal matrix with the given number of rows and columns.
            All diagonal cells of the matrix will be initialized to the provided value, all non-diagonal ones to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the row or column count is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.#ctor(System.Int32,System.Int32,System.Single[])">
            <summary>
            Create a new diagonal matrix with the given number of rows and columns directly binding to a raw array.
            The array is assumed to contain the diagonal elements only and is used directly without copying.
            Very efficient, but changes to the array and the matrix will affect each other.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.OfMatrix(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Create a new diagonal matrix as a copy of the given other matrix.
            This new matrix will be independent from the other matrix.
            The matrix to copy from must be diagonal as well.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.OfArray(System.Single[0:,0:])">
            <summary>
            Create a new diagonal matrix as a copy of the given two-dimensional array.
            This new matrix will be independent from the provided array.
            The array to copy from must be diagonal as well.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.OfIndexedDiagonal(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,System.Single}})">
            <summary>
            Create a new diagonal matrix and initialize each diagonal value from the provided indexed enumerable.
            Keys must be provided at most once, zero is assumed if a key is omitted.
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.OfDiagonal(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Create a new diagonal matrix and initialize each diagonal value from the provided enumerable.
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.Create(System.Int32,System.Int32,System.Func{System.Int32,System.Single})">
            <summary>
            Create a new diagonal matrix and initialize each diagonal value using the provided init function.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.CreateRandom(System.Int32,System.Int32,MathNet.Numerics.Distributions.IContinuousDistribution)">
            <summary>
            Create a new diagonal matrix with diagonal values sampled from the provided random distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.#ctor(System.Single[0:,0:])">
            <summary>
            Create a new diagonal matrix as a copy of the given two-dimensional array.
            This new matrix will be independent from the provided array.
            The array to copy from must be diagonal as well.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.#ctor(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Create a new diagonal matrix as a copy of the given other matrix.
            This new matrix will be independent from the other matrix.
            The matrix to copy from must be diagonal as well.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.CreateMatrix(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a <c>DiagonalMatrix</c> for the given number of rows and columns.
            </summary>
            <param name="numberOfRows">The number of rows.</param>
            <param name="numberOfColumns">The number of columns.</param>
            <param name="fullyMutable">True if all fields must be mutable (e.g. not a diagonal matrix).</param>
            <returns>
            A <c>DiagonalMatrix</c> with the given dimensions.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.CreateVector(System.Int32,System.Boolean)">
            <summary>
            Creates a <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Vector`1"/> with a the given dimension.
            </summary>
            <param name="size">The size of the vector.</param>
            <param name="fullyMutable">True if all fields must be mutable.</param>
            <returns>
            A <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Vector`1"/> with the given dimension.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.Add(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="other">The matrix to add to this matrix.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.DoAdd(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="other">The matrix to add to this matrix.</param>
            <param name="result">The matrix to store the result of the addition.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.Subtract(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="other">The matrix to subtract.</param>
            <returns>The result of the subtraction.</returns>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.DoSubtract(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="other">The matrix to subtract.</param>
            <param name="result">The matrix to store the result of the subtraction.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.SetDiagonal(System.Single[])">
            <summary>
            Copies the values of the given array to the diagonal.
            </summary>
            <param name="source">The array to copy the values from. The length of the vector should be
            Min(Rows, Columns).</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the length of <paramref name="source"/> does not
            equal Min(Rows, Columns).</exception>
            <remarks>For non-square matrices, the elements of <paramref name="source"/> are copied to
            this[i,i].</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.SetDiagonal(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Copies the values of the given <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Vector`1"/> to the diagonal.
            </summary>
            <param name="source">The vector to copy the values from. The length of the vector should be
            Min(Rows, Columns).</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the length of <paramref name="source"/> does not
            equal Min(Rows, Columns).</exception>
            <remarks>For non-square matrices, the elements of <paramref name="source"/> are copied to
            this[i,i].</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.DoMultiply(System.Single,MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Multiplies each element of the matrix by a scalar and places results into the result matrix.
            </summary>
            <param name="scalar">The scalar to multiply the matrix with.</param>
            <param name="result">The matrix to store the result of the multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.Multiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Multiplies this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <strong>this.Columns != other.Rows</strong>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the this.Rows x other.Columns.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.Multiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Multiplies this matrix with another matrix and returns the result.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <exception cref="T:System.ArgumentException">If <strong>this.Columns != other.Rows</strong>.</exception>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <returns>The result of multiplication.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.Multiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Multiplies this matrix with a vector and places the results into the result matrix.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <strong>result.Count != this.RowCount</strong>.</exception>
            <exception cref="T:System.ArgumentException">If <strong>this.ColumnCount != <paramref name="rightSide"/>.Count</strong>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.LeftMultiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Left multiply a matrix with a vector ( = vector * matrix ) and place the result in the result vector.
            </summary>
            <param name="leftSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <strong>result.Count != this.ColumnCount</strong>.</exception>
            <exception cref="T:System.ArgumentException">If <strong>this.RowCount != <paramref name="leftSide"/>.Count</strong>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.Determinant">
            <summary>
            Computes the determinant of this matrix.
            </summary>
            <returns>The determinant of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.Diagonal">
            <summary>
            Returns the elements of the diagonal in a <see cref="T:MathNet.Numerics.LinearAlgebra.Single.DenseVector"/>.
            </summary>
            <returns>The elements of the diagonal.</returns>
            <remarks>For non-square matrices, the method returns Min(Rows, Columns) elements where
            i == j (i is the row index, and j is the column index).</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.TransposeAndMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Multiplies this matrix with transpose of another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <strong>this.Columns != other.Rows</strong>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the this.Rows x other.Columns.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.TransposeAndMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Multiplies this matrix with transpose of another matrix and returns the result.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <exception cref="T:System.ArgumentException">If <strong>this.Columns != other.Rows</strong>.</exception>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <returns>The result of multiplication.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.Transpose">
            <summary>
            Returns the transpose of this matrix.
            </summary>
            <returns>The transpose of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.L1Norm">
            <summary>Calculates the L1 norm.</summary>
            <returns>The L1 norm of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.L2Norm">
            <summary>Calculates the L2 norm.</summary>
            <returns>The L2 norm of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.FrobeniusNorm">
            <summary>Calculates the Frobenius norm of this matrix.</summary>
            <returns>The Frobenius norm of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.InfinityNorm">
            <summary>Calculates the infinity norm of this matrix.</summary>
            <returns>The infinity norm of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.ConditionNumber">
            <summary>Calculates the condition number of this matrix.</summary>
            <returns>The condition number of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.Inverse">
            <summary>Computes the inverse of this matrix.</summary>
            <exception cref="T:System.ArgumentException">If <see cref="T:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix"/> is not a square matrix.</exception>
            <exception cref="T:System.ArgumentException">If <see cref="T:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix"/> is singular.</exception>
            <returns>The inverse of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.LowerTriangle">
            <summary>
            Returns a new matrix containing the lower triangle of this matrix.
            </summary>
            <returns>The lower triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.LowerTriangle(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Puts the lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.StrictlyLowerTriangle">
            <summary>
            Returns a new matrix containing the lower triangle of this matrix. The new matrix
            does not contain the diagonal elements of this matrix.
            </summary>
            <returns>The lower triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.StrictlyLowerTriangle(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Puts the strictly lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.UpperTriangle">
            <summary>
            Returns a new matrix containing the upper triangle of this matrix.
            </summary>
            <returns>The upper triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.UpperTriangle(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Puts the upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.StrictlyUpperTriangle">
            <summary>
            Returns a new matrix containing the upper triangle of this matrix. The new matrix
            does not contain the diagonal elements of this matrix.
            </summary>
            <returns>The upper triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.StrictlyUpperTriangle(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Puts the strictly upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.SubMatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a matrix that contains the values from the requested sub-matrix.
            </summary>
            <param name="rowIndex">The row to start copying from.</param>
            <param name="rowCount">The number of rows to copy. Must be positive.</param>
            <param name="columnIndex">The column to start copying from.</param>
            <param name="columnCount">The number of columns to copy. Must be positive.</param>
            <returns>The requested sub-matrix.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If: <list><item><paramref name="rowIndex"/> is
            negative, or greater than or equal to the number of rows.</item>
            <item><paramref name="columnIndex"/> is negative, or greater than or equal to the number
            of columns.</item>
            <item><c>(columnIndex + columnLength) &gt;= Columns</c></item>
            <item><c>(rowIndex + rowLength) &gt;= Rows</c></item></list></exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="rowCount"/> or <paramref name="columnCount"/>
            is not positive.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.InsertColumn(System.Int32,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Creates a new  <see cref="T:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix"/> and inserts the given column at the given index.
            </summary>
            <param name="columnIndex">The index of where to insert the column.</param>
            <param name="column">The column to insert.</param>
            <returns>A new <see cref="T:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix"/> with the inserted column.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="column "/> is <see langword="null"/>. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="columnIndex"/> is &lt; zero or &gt; the number of columns.</exception>
            <exception cref="T:System.ArgumentException">If the size of <paramref name="column"/> != the number of rows.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.InsertRow(System.Int32,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Creates a new  <see cref="T:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix"/> and inserts the given row at the given index.
            </summary>
            <param name="rowIndex">The index of where to insert the row.</param>
            <param name="row">The row to insert.</param>
            <returns>A new  <see cref="T:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix"/> with the inserted column.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="row"/> is <see langword="null"/>. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="rowIndex"/> is &lt; zero or &gt; the number of rows.</exception>
            <exception cref="T:System.ArgumentException">If the size of <paramref name="row"/> != the number of columns.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.PermuteColumns(MathNet.Numerics.Permutation)">
            <summary>
            Permute the columns of a matrix according to a permutation.
            </summary>
            <param name="p">The column permutation to apply to this matrix.</param>
            <exception cref="T:System.InvalidOperationException">Always thrown</exception>
            <remarks>Permutation in diagonal matrix are senseless, because of matrix nature</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.PermuteRows(MathNet.Numerics.Permutation)">
            <summary>
            Permute the rows of a matrix according to a permutation.
            </summary>
            <param name="p">The row permutation to apply to this matrix.</param>
            <exception cref="T:System.InvalidOperationException">Always thrown</exception>
            <remarks>Permutation in diagonal matrix are senseless, because of matrix nature</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.DoModulus(System.Single,MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Computes the modulus for each element of the matrix.
            </summary>
            <param name="divisor">The divisor to use.</param>
            <param name="result">Matrix to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.Identity(System.Int32)">
            <summary>
            Initializes a square <see cref="T:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix"/> with all zero's except for ones on the diagonal.
            </summary>
            <param name="order">the size of the square matrix.</param>
            <returns>A diagonal identity matrix.</returns>
            <exception cref="T:System.ArgumentException">
            If <paramref name="order"/> is less than one.
            </exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.IsSymmetric">
            <summary>
            Gets a value indicating whether this matrix is symmetric.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.ExtensionMethods">
            <summary>
            Extension methods which return factorizations for the various matrix classes.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.ExtensionMethods.Cholesky(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Computes the Cholesky decomposition for a matrix.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <returns>The Cholesky decomposition object.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.ExtensionMethods.LU(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Computes the LU decomposition for a matrix.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <returns>The LU decomposition object.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.ExtensionMethods.QR(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Computes the QR decomposition for a matrix.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <param name="method">The type of QR factorization to perform.</param>
            <returns>The QR decomposition object.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.ExtensionMethods.GramSchmidt(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Computes the QR decomposition for a matrix using Modified Gram-Schmidt Orthogonalization.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <returns>The QR decomposition object.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.ExtensionMethods.Svd(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},System.Boolean)">
            <summary>
            Computes the SVD decomposition for a matrix.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <param name="computeVectors">Compute the singular U and VT vectors or not.</param>
            <returns>The SVD decomposition object.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.ExtensionMethods.Evd(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Computes the EVD decomposition for a matrix.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <returns>The EVD decomposition object.</returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.Cholesky">
            <summary>
            <para>A class which encapsulates the functionality of a Cholesky factorization.</para>
            <para>For a symmetric, positive definite matrix A, the Cholesky factorization
            is an lower triangular matrix L so that A = L*L'.</para>
            </summary>
            <remarks>
            The computation of the Cholesky factorization is done at construction time. If the matrix is not symmetric
            or positive definite, the constructor will throw an exception.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Factorization.Cholesky.Determinant">
            <summary>
            Gets the determinant of the matrix for which the Cholesky matrix was computed.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Factorization.Cholesky.DeterminantLn">
            <summary>
            Gets the log determinant of the matrix for which the Cholesky matrix was computed.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseGramSchmidt">
            <summary>
            <para>A class which encapsulates the functionality of the QR decomposition Modified Gram-Schmidt Orthogonalization.</para>
            <para>Any real square matrix A may be decomposed as A = QR where Q is an orthogonal mxn matrix and R is an nxn upper triangular matrix.</para>
            </summary>
            <remarks>
            The computation of the QR decomposition is done at construction time by modified Gram-Schmidt Orthogonalization.
            </remarks>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.GramSchmidt">
            <summary>
            <para>A class which encapsulates the functionality of the QR decomposition Modified Gram-Schmidt Orthogonalization.</para>
            <para>Any real square matrix A may be decomposed as A = QR where Q is an orthogonal mxn matrix and R is an nxn upper triangular matrix.</para>
            </summary>
            <remarks>
            The computation of the QR decomposition is done at construction time by modified Gram-Schmidt Orthogonalization.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Factorization.GramSchmidt.Determinant">
            <summary>
            Gets the absolute determinant value of the matrix for which the QR matrix was computed.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Factorization.GramSchmidt.IsFullRank">
            <summary>
            Gets a value indicating whether the matrix is full rank or not.
            </summary>
            <value><c>true</c> if the matrix is full rank; otherwise <c>false</c>.</value>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseGramSchmidt._provider">
            <summary>
            used for QR solve
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseGramSchmidt.#ctor(MathNet.Numerics.LinearAlgebra.Single.DenseMatrix)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseGramSchmidt"/> class. This object creates an orthogonal matrix 
            using the modified Gram-Schmidt method.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> row count is less then column count</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is rank deficient</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseGramSchmidt.Factorize(System.Single[],System.Int32,System.Int32,System.Single[])">
            <summary>
            Factorize matrix using the modified Gram-Schmidt method.
            </summary>
            <param name="q">Initial matrix. On exit is replaced by <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/> Q.</param>
            <param name="rowsQ">Number of rows in <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/> Q.</param>
            <param name="columnsQ">Number of columns in <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/> Q.</param>
            <param name="r">On exit is filled by <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/> R.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseGramSchmidt.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseGramSchmidt.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseEvd">
            <summary>
            Eigenvalues and eigenvectors of a real matrix.
            </summary>
            <remarks>
            If A is symmetric, then A = V*D*V' where the eigenvalue matrix D is
            diagonal and the eigenvector matrix V is orthogonal.
            I.e. A = V*D*V' and V*VT=I.
            If A is not symmetric, then the eigenvalue matrix D is block diagonal
            with the real eigenvalues in 1-by-1 blocks and any complex eigenvalues,
            lambda + i*mu, in 2-by-2 blocks, [lambda, mu; -mu, lambda].  The
            columns of V represent the eigenvectors in the sense that A*V = V*D,
            i.e. A.Multiply(V) equals V.Multiply(D).  The matrix V may be badly
            conditioned, or even singular, so the validity of the equation
            A = V*D*Inverse(V) depends upon V.Condition().
            </remarks>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.Evd">
            <summary>
            Eigenvalues and eigenvectors of a real matrix.
            </summary>
            <remarks>
            If A is symmetric, then A = V*D*V' where the eigenvalue matrix D is
            diagonal and the eigenvector matrix V is orthogonal.
            I.e. A = V*D*V' and V*VT=I.
            If A is not symmetric, then the eigenvalue matrix D is block diagonal
            with the real eigenvalues in 1-by-1 blocks and any complex eigenvalues,
            lambda + i*mu, in 2-by-2 blocks, [lambda, mu; -mu, lambda].  The
            columns of V represent the eigenvectors in the sense that A*V = V*D,
            i.e. A.Multiply(V) equals V.Multiply(D).  The matrix V may be badly
            conditioned, or even singular, so the validity of the equation
            A = V*D*Inverse(V) depends upon V.Condition().
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Factorization.Evd.Determinant">
            <summary>
            Gets the absolute value of determinant of the square matrix for which the EVD was computed.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Factorization.Evd.Rank">
            <summary>
            Gets the effective numerical matrix rank.
            </summary>
            <value>The number of non-negligible singular values.</value>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Factorization.Evd.IsFullRank">
            <summary>
            Gets a value indicating whether the matrix is full rank or not.
            </summary>
            <value><c>true</c> if the matrix is full rank; otherwise <c>false</c>.</value>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseEvd.#ctor(MathNet.Numerics.LinearAlgebra.Single.DenseMatrix)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseEvd"/> class. This object will compute the
            the eigenvalue decomposition when the constructor is called and cache it's decomposition.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If EVD algorithm failed to converge with matrix <paramref name="matrix"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseEvd.SymmetricTridiagonalize(System.Single[],System.Single[],System.Single[],System.Int32)">
            <summary>
            Symmetric Householder reduction to tridiagonal form.
            </summary>
            <param name="a">Data array of matrix V (eigenvectors)</param>
            <param name="d">Arrays for internal storage of real parts of eigenvalues</param>
            <param name="e">Arrays for internal storage of imaginary parts of eigenvalues</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedures tred2 by 
            Bowdler, Martin, Reinsch, and Wilkinson, Handbook for 
            Auto. Comp., Vol.ii-Linear Algebra, and the corresponding 
            Fortran subroutine in EISPACK.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseEvd.SymmetricDiagonalize(System.Single[],System.Single[],System.Single[],System.Int32)">
            <summary>
            Symmetric tridiagonal QL algorithm.
            </summary>
            <param name="a">Data array of matrix V (eigenvectors)</param>
            <param name="d">Arrays for internal storage of real parts of eigenvalues</param>
            <param name="e">Arrays for internal storage of imaginary parts of eigenvalues</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedures tql2, by
            Bowdler, Martin, Reinsch, and Wilkinson, Handbook for
            Auto. Comp., Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutine in EISPACK.</remarks>
            <exception cref="T:MathNet.Numerics.NonConvergenceException"></exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseEvd.NonsymmetricReduceToHessenberg(System.Single[],System.Single[],System.Int32)">
            <summary>
            Nonsymmetric reduction to Hessenberg form.
            </summary>
            <param name="a">Data array of matrix V (eigenvectors)</param>
            <param name="matrixH">Array for internal storage of nonsymmetric Hessenberg form.</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedures orthes and ortran,
            by Martin and Wilkinson, Handbook for Auto. Comp.,
            Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutines in EISPACK.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseEvd.NonsymmetricReduceHessenberToRealSchur(System.Single[],System.Single[],System.Single[],System.Single[],System.Int32)">
            <summary>
            Nonsymmetric reduction from Hessenberg to real Schur form.
            </summary>
            <param name="a">Data array of matrix V (eigenvectors)</param>
            <param name="matrixH">Array for internal storage of nonsymmetric Hessenberg form.</param>
            <param name="d">Arrays for internal storage of real parts of eigenvalues</param>
            <param name="e">Arrays for internal storage of imaginary parts of eigenvalues</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedure hqr2,
            by Martin and Wilkinson, Handbook for Auto. Comp.,
            Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutine in EISPACK.</remarks>
            <exception cref="T:MathNet.Numerics.NonConvergenceException"></exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseEvd.Cdiv(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Complex scalar division X/Y.
            </summary>
            <param name="xreal">Real part of X</param>
            <param name="ximag">Imaginary part of X</param>
            <param name="yreal">Real part of Y</param>
            <param name="yimag">Imaginary part of Y</param>
            <returns>Division result as a <see cref="T:System.Numerics.Complex"/> number.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseEvd.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseEvd.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A EVD factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseCholesky">
            <summary>
            <para>A class which encapsulates the functionality of a Cholesky factorization for dense matrices.</para>
            <para>For a symmetric, positive definite matrix A, the Cholesky factorization
            is an lower triangular matrix L so that A = L*L'.</para>
            </summary>
            <remarks>
            The computation of the Cholesky factorization is done at construction time. If the matrix is not symmetric
            or positive definite, the constructor will throw an exception.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseCholesky.#ctor(MathNet.Numerics.LinearAlgebra.Single.DenseMatrix)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseCholesky"/> class. This object will compute the
            Cholesky factorization when the constructor is called and cache it's factorization.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not positive definite.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseCholesky.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A Cholesky factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseCholesky.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A Cholesky factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseLU">
            <summary>
            <para>A class which encapsulates the functionality of an LU factorization.</para>
            <para>For a matrix A, the LU factorization is a pair of lower triangular matrix L and
            upper triangular matrix U so that A = L*U.</para>
            </summary>
            <remarks>
            The computation of the LU factorization is done at construction time.
            </remarks>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.LU">
            <summary>
            <para>A class which encapsulates the functionality of an LU factorization.</para>
            <para>For a matrix A, the LU factorization is a pair of lower triangular matrix L and
            upper triangular matrix U so that A = L*U.</para>
            <para>In the Math.Net implementation we also store a set of pivot elements for increased 
            numerical stability. The pivot elements encode a permutation matrix P such that P*A = L*U.</para>
            </summary>
            <remarks>
            The computation of the LU factorization is done at construction time.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Factorization.LU.Determinant">
            <summary>
            Gets the determinant of the matrix for which the LU factorization was computed.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseLU.#ctor(MathNet.Numerics.LinearAlgebra.Single.DenseMatrix)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseLU"/> class. This object will compute the
            LU factorization when the constructor is called and cache it's factorization.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseLU.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Solves a system of linear equations, <c>AX = B</c>, with A LU factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <c>B</c>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <c>X</c>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseLU.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Solves a system of linear equations, <c>Ax = b</c>, with A LU factorized.
            </summary>
            <param name="input">The right hand side vector, <c>b</c>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <c>x</c>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseLU.Inverse">
            <summary>
            Returns the inverse of this matrix. The inverse is calculated using LU decomposition.
            </summary>
            <returns>The inverse of this matrix.</returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseQR">
            <summary>
            <para>A class which encapsulates the functionality of the QR decomposition.</para>
            <para>Any real square matrix A may be decomposed as A = QR where Q is an orthogonal matrix 
            (its columns are orthogonal unit vectors meaning QTQ = I) and R is an upper triangular matrix 
            (also called right triangular matrix).</para>
            </summary>
            <remarks>
            The computation of the QR decomposition is done at construction time by Householder transformation.
            </remarks>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.QR">
            <summary>
            <para>A class which encapsulates the functionality of the QR decomposition.</para>
            <para>Any real square matrix A (m x n) may be decomposed as A = QR where Q is an orthogonal matrix
            (its columns are orthogonal unit vectors meaning QTQ = I) and R is an upper triangular matrix 
            (also called right triangular matrix).</para>
            </summary>
            <remarks>
            The computation of the QR decomposition is done at construction time by Householder transformation.
            If a <seealso cref="F:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod.Full"/> factorization is peformed, the resulting Q matrix is an m x m matrix 
            and the R matrix is an m x n matrix. If a <seealso cref="F:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod.Thin"/> factorization is performed, the 
            resulting Q matrix is an m x n matrix and the R matrix is an n x n matrix.     
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Factorization.QR.Determinant">
            <summary>
            Gets the absolute determinant value of the matrix for which the QR matrix was computed.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Factorization.QR.IsFullRank">
            <summary>
            Gets a value indicating whether the matrix is full rank or not.
            </summary>
            <value><c>true</c> if the matrix is full rank; otherwise <c>false</c>.</value>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseQR.#ctor(MathNet.Numerics.LinearAlgebra.Single.DenseMatrix,MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseQR"/> class. This object will compute the
            QR factorization when the constructor is called and cache it's factorization.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <param name="method">The QR factorization method to use.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> row count is less then column count</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseQR.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseQR.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseQR.Tau">
            <summary>
             Gets or sets Tau vector. Contains additional information on Q - used for native solver.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseSvd">
            <summary>
            <para>A class which encapsulates the functionality of the singular value decomposition (SVD) for <see cref="T:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix"/>.</para>
            <para>Suppose M is an m-by-n matrix whose entries are real numbers. 
            Then there exists a factorization of the form M = UΣVT where:
            - U is an m-by-m unitary matrix;
            - Σ is m-by-n diagonal matrix with nonnegative real numbers on the diagonal;
            - VT denotes transpose of V, an n-by-n unitary matrix; 
            Such a factorization is called a singular-value decomposition of M. A common convention is to order the diagonal 
            entries Σ(i,i) in descending order. In this case, the diagonal matrix Σ is uniquely determined 
            by M (though the matrices U and V are not). The diagonal entries of Σ are known as the singular values of M.</para>
            </summary>
            <remarks>
            The computation of the singular value decomposition is done at construction time.
            </remarks>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.Svd">
            <summary>
            <para>A class which encapsulates the functionality of the singular value decomposition (SVD).</para>
            <para>Suppose M is an m-by-n matrix whose entries are real numbers. 
            Then there exists a factorization of the form M = UΣVT where:
            - U is an m-by-m unitary matrix;
            - Σ is m-by-n diagonal matrix with nonnegative real numbers on the diagonal;
            - VT denotes transpose of V, an n-by-n unitary matrix; 
            Such a factorization is called a singular-value decomposition of M. A common convention is to order the diagonal 
            entries Σ(i,i) in descending order. In this case, the diagonal matrix Σ is uniquely determined 
            by M (though the matrices U and V are not). The diagonal entries of Σ are known as the singular values of M.</para>
            </summary>
            <remarks>
            The computation of the singular value decomposition is done at construction time.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Factorization.Svd.Rank">
            <summary>
            Gets the effective numerical matrix rank.
            </summary>
            <value>The number of non-negligible singular values.</value>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Factorization.Svd.Norm2">
            <summary>
            Gets the two norm of the <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>.
            </summary>
            <returns>The 2-norm of the <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Factorization.Svd.ConditionNumber">
            <summary>
            Gets the condition number <b>max(S) / min(S)</b>
            </summary>
            <returns>The condition number.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Factorization.Svd.Determinant">
            <summary>
            Gets the determinant of the square matrix for which the SVD was computed.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseSvd.#ctor(MathNet.Numerics.LinearAlgebra.Single.DenseMatrix,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseSvd"/> class. This object will compute the
            the singular value decomposition when the constructor is called and cache it's decomposition.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <param name="computeVectors">Compute the singular U and VT vectors or not.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If SVD algorithm failed to converge with matrix <paramref name="matrix"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseSvd.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseSvd.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserGramSchmidt">
            <summary>
            <para>A class which encapsulates the functionality of the QR decomposition Modified Gram-Schmidt Orthogonalization.</para>
            <para>Any real square matrix A may be decomposed as A = QR where Q is an orthogonal mxn matrix and R is an nxn upper triangular matrix.</para>
            </summary>
            <remarks>
            The computation of the QR decomposition is done at construction time by modified Gram-Schmidt Orthogonalization.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserGramSchmidt.#ctor(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserGramSchmidt"/> class. This object creates an orthogonal matrix 
            using the modified Gram-Schmidt method.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> row count is less then column count</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is rank deficient</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserGramSchmidt.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserGramSchmidt.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserCholesky">
            <summary>
            <para>A class which encapsulates the functionality of a Cholesky factorization for user matrices.</para>
            <para>For a symmetric, positive definite matrix A, the Cholesky factorization
            is an lower triangular matrix L so that A = L*L'.</para>
            </summary>
            <remarks>
            The computation of the Cholesky factorization is done at construction time. If the matrix is not symmetric
            or positive definite, the constructor will throw an exception.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserCholesky.#ctor(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserCholesky"/> class. This object will compute the
            Cholesky factorization when the constructor is called and cache it's factorization.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not positive definite.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserCholesky.DoCholeskyStep(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},System.Int32,System.Int32,System.Int32,System.Single[],System.Int32)">
            <summary>
            Calculate Cholesky step
            </summary>
            <param name="data">Factor matrix</param>
            <param name="rowDim">Number of rows</param>
            <param name="firstCol">Column start</param>
            <param name="colLimit">Total columns</param>
            <param name="multipliers">Multipliers calculated previously</param>
            <param name="availableCores">Number of available processors</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserCholesky.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A Cholesky factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserCholesky.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A Cholesky factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserEvd">
            <summary>
            Eigenvalues and eigenvectors of a real matrix.
            </summary>
            <remarks>
            If A is symmetric, then A = V*D*V' where the eigenvalue matrix D is
            diagonal and the eigenvector matrix V is orthogonal.
            I.e. A = V*D*V' and V*VT=I.
            If A is not symmetric, then the eigenvalue matrix D is block diagonal
            with the real eigenvalues in 1-by-1 blocks and any complex eigenvalues,
            lambda + i*mu, in 2-by-2 blocks, [lambda, mu; -mu, lambda].  The
            columns of V represent the eigenvectors in the sense that A*V = V*D,
            i.e. A.Multiply(V) equals V.Multiply(D).  The matrix V may be badly
            conditioned, or even singular, so the validity of the equation
            A = V*D*Inverse(V) depends upon V.Condition().
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserEvd.#ctor(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserEvd"/> class. This object will compute the
            the eigenvalue decomposition when the constructor is called and cache it's decomposition.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If EVD algorithm failed to converge with matrix <paramref name="matrix"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserEvd.SymmetricTridiagonalize(System.Single[],System.Single[],System.Int32)">
            <summary>
            Symmetric Householder reduction to tridiagonal form.
            </summary>
            <param name="d">Arrays for internal storage of real parts of eigenvalues</param>
            <param name="e">Arrays for internal storage of imaginary parts of eigenvalues</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedures tred2 by 
            Bowdler, Martin, Reinsch, and Wilkinson, Handbook for 
            Auto. Comp., Vol.ii-Linear Algebra, and the corresponding 
            Fortran subroutine in EISPACK.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserEvd.SymmetricDiagonalize(System.Single[],System.Single[],System.Int32)">
            <summary>
            Symmetric tridiagonal QL algorithm.
            </summary>
            <param name="d">Arrays for internal storage of real parts of eigenvalues</param>
            <param name="e">Arrays for internal storage of imaginary parts of eigenvalues</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedures tql2, by
            Bowdler, Martin, Reinsch, and Wilkinson, Handbook for
            Auto. Comp., Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutine in EISPACK.</remarks>
            <exception cref="T:MathNet.Numerics.NonConvergenceException"></exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserEvd.NonsymmetricReduceToHessenberg(System.Single[0:,0:],System.Int32)">
            <summary>
            Nonsymmetric reduction to Hessenberg form.
            </summary>
            <param name="matrixH">Array for internal storage of nonsymmetric Hessenberg form.</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedures orthes and ortran,
            by Martin and Wilkinson, Handbook for Auto. Comp.,
            Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutines in EISPACK.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserEvd.NonsymmetricReduceHessenberToRealSchur(System.Single[0:,0:],System.Single[],System.Single[],System.Int32)">
            <summary>
            Nonsymmetric reduction from Hessenberg to real Schur form.
            </summary>
            <param name="matrixH">Array for internal storage of nonsymmetric Hessenberg form.</param>
            <param name="d">Arrays for internal storage of real parts of eigenvalues</param>
            <param name="e">Arrays for internal storage of imaginary parts of eigenvalues</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedure hqr2,
            by Martin and Wilkinson, Handbook for Auto. Comp.,
            Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutine in EISPACK.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserEvd.Cdiv(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Complex scalar division X/Y.
            </summary>
            <param name="xreal">Real part of X</param>
            <param name="ximag">Imaginary part of X</param>
            <param name="yreal">Real part of Y</param>
            <param name="yimag">Imaginary part of Y</param>
            <returns>Division result as a <see cref="T:System.Numerics.Complex"/> number.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserEvd.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserEvd.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A EVD factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserLU">
            <summary>
            <para>A class which encapsulates the functionality of an LU factorization.</para>
            <para>For a matrix A, the LU factorization is a pair of lower triangular matrix L and
            upper triangular matrix U so that A = L*U.</para>
            </summary>
            <remarks>
            The computation of the LU factorization is done at construction time.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserLU.#ctor(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserLU"/> class. This object will compute the
            LU factorization when the constructor is called and cache it's factorization.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserLU.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Solves a system of linear equations, <c>AX = B</c>, with A LU factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <c>B</c>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <c>X</c>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserLU.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Solves a system of linear equations, <c>Ax = b</c>, with A LU factorized.
            </summary>
            <param name="input">The right hand side vector, <c>b</c>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <c>x</c>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserLU.Inverse">
            <summary>
            Returns the inverse of this matrix. The inverse is calculated using LU decomposition.
            </summary>
            <returns>The inverse of this matrix.</returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserQR">
            <summary>
            <para>A class which encapsulates the functionality of the QR decomposition.</para>
            <para>Any real square matrix A may be decomposed as A = QR where Q is an orthogonal matrix 
            (its columns are orthogonal unit vectors meaning QTQ = I) and R is an upper triangular matrix 
            (also called right triangular matrix).</para>
            </summary>
            <remarks>
            The computation of the QR decomposition is done at construction time by Householder transformation.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserQR.#ctor(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserQR"/> class. This object will compute the
            QR factorization when the constructor is called and cache it's factorization.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <param name="method">The QR factorization method to use.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserQR.GenerateColumn(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},System.Int32,System.Int32)">
            <summary>
            Generate column from initial matrix to work array
            </summary>
            <param name="a">Initial matrix</param>
            <param name="row">The first row</param>
            <param name="column">Column index</param>
            <returns>Generated vector</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserQR.ComputeQR(System.Single[],MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Perform calculation of Q or R
            </summary>
            <param name="u">Work array</param>
            <param name="a">Q or R matrices</param>
            <param name="rowStart">The first row</param>
            <param name="rowDim">The last row</param>
            <param name="columnStart">The first column</param>
            <param name="columnDim">The last column</param>
            <param name="availableCores">Number of available CPUs</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserQR.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserQR.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserSvd">
            <summary>
            <para>A class which encapsulates the functionality of the singular value decomposition (SVD) for <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>.</para>
            <para>Suppose M is an m-by-n matrix whose entries are real numbers. 
            Then there exists a factorization of the form M = UΣVT where:
            - U is an m-by-m unitary matrix;
            - Σ is m-by-n diagonal matrix with nonnegative real numbers on the diagonal;
            - VT denotes transpose of V, an n-by-n unitary matrix; 
            Such a factorization is called a singular-value decomposition of M. A common convention is to order the diagonal 
            entries Σ(i,i) in descending order. In this case, the diagonal matrix Σ is uniquely determined 
            by M (though the matrices U and V are not). The diagonal entries of Σ are known as the singular values of M.</para>
            </summary>
            <remarks>
            The computation of the singular value decomposition is done at construction time.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserSvd.#ctor(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserSvd"/> class. This object will compute the
            the singular value decomposition when the constructor is called and cache it's decomposition.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <param name="computeVectors">Compute the singular U and VT vectors or not.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:MathNet.Numerics.NonConvergenceException"></exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserSvd.Dsign(System.Single,System.Single)">
            <summary>
            Calculates absolute value of <paramref name="z1"/> multiplied on signum function of <paramref name="z2"/>
            </summary>
            <param name="z1">Double value z1</param>
            <param name="z2">Double value z2</param>
            <returns>Result multiplication of signum function and absolute value</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserSvd.Dswap(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},System.Int32,System.Int32,System.Int32)">
            <summary>
            Swap column  <paramref name="columnA"/>  and  <paramref name="columnB"/>
            </summary>
            <param name="a">Source matrix</param>
            <param name="rowCount">The number of rows in <paramref name="a"/></param>
            <param name="columnA">Column A index to swap</param>
            <param name="columnB">Column B index to swap</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserSvd.DscalColumn(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            Scale column <paramref name="column"/> by <paramref name="z"/> starting from row <paramref name="rowStart"/>
            </summary>
            <param name="a">Source matrix</param>
            <param name="rowCount">The number of rows in <paramref name="a"/> </param>
            <param name="column">Column to scale</param>
            <param name="rowStart">Row to scale from</param>
            <param name="z">Scale value</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserSvd.DscalVector(System.Single[],System.Int32,System.Single)">
            <summary>
            Scale vector <paramref name="a"/> by <paramref name="z"/> starting from index <paramref name="start"/>
            </summary>
            <param name="a">Source vector</param>
            <param name="start">Row to scale from</param>
            <param name="z">Scale value</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserSvd.Drotg(System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Given the Cartesian coordinates (da, db) of a point p, these fucntion return the parameters da, db, c, and s 
            associated with the Givens rotation that zeros the y-coordinate of the point.
            </summary>
            <param name="da">Provides the x-coordinate of the point p. On exit contains the parameter r associated with the Givens rotation</param>
            <param name="db">Provides the y-coordinate of the point p. On exit contains the parameter z associated with the Givens rotation</param>
            <param name="c">Contains the parameter c associated with the Givens rotation</param>
            <param name="s">Contains the parameter s associated with the Givens rotation</param>
            <remarks>This is equivalent to the DROTG LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserSvd.Dnrm2Column(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculate Norm 2 of the column <paramref name="column"/> in matrix <paramref name="a"/> starting from row <paramref name="rowStart"/>
            </summary>
            <param name="a">Source matrix</param>
            <param name="rowCount">The number of rows in <paramref name="a"/></param>
            <param name="column">Column index</param>
            <param name="rowStart">Start row index</param>
            <returns>Norm2 (Euclidean norm) of the column</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserSvd.Dnrm2Vector(System.Single[],System.Int32)">
            <summary>
            Calculate Norm 2 of the vector <paramref name="a"/> starting from index <paramref name="rowStart"/>
            </summary>
            <param name="a">Source vector</param>
            <param name="rowStart">Start index</param>
            <returns>Norm2 (Euclidean norm) of the vector</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserSvd.Ddot(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculate dot product of <paramref name="columnA"/> and <paramref name="columnB"/>
            </summary>
            <param name="a">Source matrix</param>
            <param name="rowCount">The number of rows in <paramref name="a"/></param>
            <param name="columnA">Index of column A</param>
            <param name="columnB">Index of column B</param>
            <param name="rowStart">Starting row index</param>
            <returns>Dot product value</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserSvd.Drot(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Performs rotation of points in the plane. Given two vectors x <paramref name="columnA"/> and y <paramref name="columnB"/>, 
            each vector element of these vectors is replaced as follows: x(i) = c*x(i) + s*y(i); y(i) = c*y(i) - s*x(i)
            </summary>
            <param name="a">Source matrix</param>
            <param name="rowCount">The number of rows in <paramref name="a"/></param>
            <param name="columnA">Index of column A</param>
            <param name="columnB">Index of column B</param>
            <param name="c">Scalar "c" value</param>
            <param name="s">Scalar "s" value</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserSvd.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserSvd.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterativeSolver">
            <summary>
            Defines the interface for <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterativeSolver"/> classes that solve the matrix equation Ax = b in
            an iterative manner.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterativeSolver.StopSolve">
            <summary>
            Stops the solve process. 
            </summary>
            <remarks>
            Note that it may take an indetermined amount of time for the solver to actually stop the process.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterativeSolver.SetIterator(MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator)">
            <summary>
            Sets the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator"/> that will be used to track the iterative process.
            </summary>
            <param name="iterator">The iterator.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterativeSolver.Solve(MathNet.Numerics.LinearAlgebra.Single.Matrix,MathNet.Numerics.LinearAlgebra.Single.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="vector">The solution vector, <c>b</c>.</param>
            <returns>The result vector, <c>x</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterativeSolver.Solve(MathNet.Numerics.LinearAlgebra.Single.Matrix,MathNet.Numerics.LinearAlgebra.Single.Vector,MathNet.Numerics.LinearAlgebra.Single.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution vector, <c>b</c></param>
            <param name="result">The result vector, <c>x</c></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterativeSolver.Solve(MathNet.Numerics.LinearAlgebra.Single.Matrix,MathNet.Numerics.LinearAlgebra.Single.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <returns>The result matrix, <c>X</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterativeSolver.Solve(MathNet.Numerics.LinearAlgebra.Single.Matrix,MathNet.Numerics.LinearAlgebra.Single.Matrix,MathNet.Numerics.LinearAlgebra.Single.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <param name="result">The result matrix, <c>X</c></param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterativeSolver.IterationResult">
            <summary>
            Gets the status of the iteration once the calculation is finished.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterativeSolverSetup">
            <summary>
            Defines the interface for objects that can create an iterative solver with
            specific settings. This interface is used to pass iterative solver creation 
            setup information around.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterativeSolverSetup.CreateNew">
            <summary>
            Creates a fully functional iterative solver with the default settings
            given by this setup.
            </summary>
            <returns>A new <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterativeSolver"/>.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterativeSolverSetup.SolverType">
            <summary>
            Gets the type of the solver that will be created by this setup object.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterativeSolverSetup.PreconditionerType">
            <summary>
            Gets type of preconditioner, if any, that will be created by this setup object.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterativeSolverSetup.SolutionSpeed">
            <summary>
            Gets the relative speed of the solver. 
            </summary>
            <value>Returns a value between 0 and 1, inclusive.</value>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterativeSolverSetup.Reliability">
            <summary>
            Gets the relative reliability of the solver.
            </summary>
            <value>Returns a value between 0 and 1 inclusive.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator">
            <summary>
            Defines the base interface for iterators that help control an iterative calculation.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator.Add(MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IIterationStopCriterium)">
            <summary>
            Adds an <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IIterationStopCriterium"/> to the internal collection of stop-criteria. Only a 
            single stop criterium of each type can be stored.
            </summary>
            <param name="stopCriterium">The stop criterium to add.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="stopCriterium"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="stopCriterium"/> is of the same type as an already stored criterium.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator.Remove(MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IIterationStopCriterium)">
            <summary>
            Removes the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IIterationStopCriterium"/> from the internal collection.
            </summary>
            <param name="stopCriterium">The stop criterium that must be removed.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator.Contains(MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IIterationStopCriterium)">
            <summary>
            Indicates if the specific stop criterium is stored by the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator"/>.
            </summary>
            <param name="stopCriterium">The stop criterium.</param>
            <returns><c>true</c> if the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator"/> contains the stop criterium; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator.IterationCancelled">
            <summary>
            Indicates to the iterator that the iterative process has been cancelled.
            </summary>
            <remarks>Does not reset the stop-criteria.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator.DetermineStatus(System.Int32,MathNet.Numerics.LinearAlgebra.Single.Vector,MathNet.Numerics.LinearAlgebra.Single.Vector,MathNet.Numerics.LinearAlgebra.Single.Vector)">
            <summary>
            Determines the status of the iterative calculation based on the stop criteria stored
            by the current <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator"/>.  Status is set to <c>Status</c> field of current object.
            </summary>
            <param name="iterationNumber">The number of iterations that have passed so far.</param>
            <param name="solutionVector">The vector containing the current solution values.</param>
            <param name="sourceVector">The right hand side vector.</param>
            <param name="residualVector">The vector containing the current residual vectors.</param>
            <remarks>
            The individual iterators may internally track the progress of the calculation based
            on the invocation of this method. Therefore this method should only be called if the 
            calculation has moved forwards at least one step.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator.ResetToPrecalculationState">
            <summary>
            Resets the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator"/> to the pre-calculation state.
            </summary>
            <remarks>
            Note to implementers: Invoking this method should not clear the user defined
            property values, only the state that is used to track the progress of the 
            calculation.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator.Status">
            <summary>
            Gets the current calculation status.
            </summary>
            <remarks><see langword="null"/> is not a legal value. Status should be set in <see cref="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator.DetermineStatus(System.Int32,MathNet.Numerics.LinearAlgebra.Single.Vector,MathNet.Numerics.LinearAlgebra.Single.Vector,MathNet.Numerics.LinearAlgebra.Single.Vector)"/> implementation.</remarks>.
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.BiCgStab">
            <summary>
            A Bi-Conjugate Gradient stabilized iterative matrix solver.
            </summary>
            <remarks>
            <para>
            The Bi-Conjugate Gradient Stabilized (BiCGStab) solver is an 'improvement'
            of the standard Conjugate Gradient (CG) solver. Unlike the CG solver the
            BiCGStab can be used on non-symmetric matrices. <br/>
            Note that much of the success of the solver depends on the selection of the
            proper preconditioner.
            </para>
            <para>
            The Bi-CGSTAB algorithm was taken from: <br/>
            Templates for the solution of linear systems: Building blocks
            for iterative methods
            <br/>
            Richard Barrett, Michael Berry, Tony F. Chan, James Demmel,
            June M. Donato, Jack Dongarra, Victor Eijkhout, Roldan Pozo,
            Charles Romine and Henk van der Vorst
            <br/>
            Url: <a href="http://www.netlib.org/templates/Templates.html">http://www.netlib.org/templates/Templates.html</a>
            <br/>
            Algorithm is described in Chapter 2, section 2.3.8, page 27
            </para>
            <para>
            The example code below provides an indication of the possible use of the
            solver.
            </para>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.BiCgStab.DefaultStatus">
            <summary>
            The status used if there is no status, i.e. the solver hasn't run yet and there is no
            iterator.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.BiCgStab._preconditioner">
            <summary>
            The preconditioner that will be used. Can be set to <see langword="null" />, in which case the default
            pre-conditioner will be used.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.BiCgStab._iterator">
            <summary>
            The iterative process controller.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.BiCgStab._hasBeenStopped">
            <summary>
            Indicates if the user has stopped the solver.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.BiCgStab.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.BiCgStab"/> class.
            </summary>
            <remarks>
            When using this constructor the solver will use the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator"/> with
            the standard settings and a default preconditioner.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.BiCgStab.#ctor(MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.BiCgStab"/> class.
            </summary>
            <remarks>
            <para>
            When using this constructor the solver will use a default preconditioner.
            </para>
            <para>
            The main advantages of using a user defined <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator"/> are:
            <list type="number">
            <item>It is possible to set the desired convergence limits.</item>
            <item>
            It is possible to check the reason for which the solver finished 
            the iterative procedure by calling the <see cref="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator.Status"/> property.
            </item>
            </list>
            </para>
            </remarks>
            <param name="iterator">The <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator"/> that will be used to monitor the iterative process. </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.BiCgStab.#ctor(MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.IPreConditioner)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.BiCgStab"/> class.
            </summary>
            <remarks>
            When using this constructor the solver will use the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator"/> with
            the standard settings.
            </remarks>
            <param name="preconditioner">The <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the matrix equation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.BiCgStab.#ctor(MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.IPreConditioner,MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.BiCgStab"/> class.
            </summary>
            <remarks>
            <para>
            The main advantages of using a user defined <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator"/> are:
            <list type="number">
            <item>It is possible to set the desired convergence limits.</item>
            <item>
            It is possible to check the reason for which the solver finished 
            the iterative procedure by calling the <see cref="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator.Status"/> property.
            </item>
            </list>
            </para>
            </remarks>
            <param name="preconditioner">The <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the matrix equation. </param>
            <param name="iterator">The <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator"/> that will be used to monitor the iterative process. </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.BiCgStab.SetPreconditioner(MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.IPreConditioner)">
            <summary>
            Sets the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the iterative process.
            </summary>
            <param name="preconditioner">The preconditioner.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.BiCgStab.SetIterator(MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator)">
            <summary>
            Sets the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator"/> that will be used to track the iterative process.
            </summary>
            <param name="iterator">The iterator.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.BiCgStab.StopSolve">
            <summary>
            Stops the solve process. 
            </summary>
            <remarks>
            Note that it may take an indetermined amount of time for the solver to actually stop the process.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.BiCgStab.Solve(MathNet.Numerics.LinearAlgebra.Single.Matrix,MathNet.Numerics.LinearAlgebra.Single.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Matrix"/>, <c>A</c>.</param>
            <param name="vector">The solution <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/>, <c>b</c>.</param>
            <returns>The result <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/>, <c>x</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.BiCgStab.Solve(MathNet.Numerics.LinearAlgebra.Single.Matrix,MathNet.Numerics.LinearAlgebra.Single.Vector,MathNet.Numerics.LinearAlgebra.Single.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Matrix"/>, <c>A</c>.</param>
            <param name="input">The solution <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/>, <c>b</c>.</param>
            <param name="result">The result <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/>, <c>x</c>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.BiCgStab.CalculateTrueResidual(MathNet.Numerics.LinearAlgebra.Single.Matrix,MathNet.Numerics.LinearAlgebra.Single.Vector,MathNet.Numerics.LinearAlgebra.Single.Vector,MathNet.Numerics.LinearAlgebra.Single.Vector)">
            <summary>
            Calculates the <c>true</c> residual of the matrix equation Ax = b according to: residual = b - Ax
            </summary>
            <param name="matrix">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Matrix"/> A.</param>
            <param name="residual">Residual values in <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/>.</param>
            <param name="x">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/> x.</param>
            <param name="b">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/> b.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.BiCgStab.ShouldContinue(System.Int32,MathNet.Numerics.LinearAlgebra.Single.Vector,MathNet.Numerics.LinearAlgebra.Single.Vector,MathNet.Numerics.LinearAlgebra.Single.Vector)">
            <summary>
            Determine if calculation should continue
            </summary>
            <param name="iterationNumber">Number of iterations passed</param>
            <param name="result">Result <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/>.</param>
            <param name="source">Source <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/>.</param>
            <param name="residuals">Residual <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/>.</param>
            <returns><c>true</c> if continue, otherwise <c>false</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.BiCgStab.Solve(MathNet.Numerics.LinearAlgebra.Single.Matrix,MathNet.Numerics.LinearAlgebra.Single.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Matrix"/>, <c>A</c>.</param>
            <param name="input">The solution <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Matrix"/>, <c>B</c>.</param>
            <returns>The result <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Matrix"/>, <c>X</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.BiCgStab.Solve(MathNet.Numerics.LinearAlgebra.Single.Matrix,MathNet.Numerics.LinearAlgebra.Single.Matrix,MathNet.Numerics.LinearAlgebra.Single.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Matrix"/>, <c>A</c>.</param>
            <param name="input">The solution <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Matrix"/>, <c>B</c>.</param>
            <param name="result">The result <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Matrix"/>, <c>X</c></param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.BiCgStab.IterationResult">
            <summary>
            Gets the status of the iteration once the calculation is finished.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.CompositeSolver">
            <summary>
            A composite matrix solver. The actual solver is made by a sequence of
            matrix solvers. 
            </summary>
            <remarks>
            <para>
            Solver based on:<br />
            Faster PDE-based simulations using robust composite linear solvers<br />
            S. Bhowmicka, P. Raghavan a,*, L. McInnes b, B. Norris<br />
            Future Generation Computer Systems, Vol 20, 2004, pp 373–387<br />
            </para>
            <para>
            Note that if an iterator is passed to this solver it will be used for all the sub-solvers.
            </para>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.CompositeSolver.NonRunningStatus">
            <summary>
            The default status used if the solver is not running.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.CompositeSolver.RunningStatus">
            <summary>
            The default status used if the solver is running.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.CompositeSolver.SolverSetups">
            <summary>
            The collection of iterative solver setups. Stored based on the
            ratio between the relative speed and relative accuracy.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.CompositeSolver.LoadSolverInformation">
            <summary>
            Loads all the available <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterativeSolverSetup"/> objects from the MathNet.Numerics assembly.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.CompositeSolver.LoadSolverInformation(System.Type[])">
            <summary>
            Loads the available <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterativeSolverSetup"/> objects from the MathNet.Numerics assembly.
            </summary>
            <param name="typesToExclude">The <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterativeSolver"/> types that should not be loaded.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.CompositeSolver.LoadSolverInformationFromAssembly(System.String)">
            <summary>
            Loads the available <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterativeSolverSetup"/> objects from the assembly specified by the file location.
            </summary>
            <param name="assemblyLocation">The fully qualified path to the assembly.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.CompositeSolver.LoadSolverInformationFromAssembly(System.String,System.Type[])">
            <summary>
            Loads the available <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterativeSolverSetup"/> objects from the assembly specified by the file location.
            </summary>
            <param name="assemblyLocation">The fully qualified path to the assembly.</param>
            <param name="typesToExclude">The <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterativeSolver"/> types that should not be loaded. </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.CompositeSolver.LoadSolverInformationFromAssembly(System.Reflection.AssemblyName)">
            <summary>
            Loads the available <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterativeSolverSetup"/> objects from the assembly specified by the assembly name.
            </summary>
            <param name="assemblyName">The <see cref="T:System.Reflection.AssemblyName"/> of the assembly that should be searched for setup objects. </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.CompositeSolver.LoadSolverInformationFromAssembly(System.Reflection.AssemblyName,System.Type[])">
            <summary>
            Loads the available <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterativeSolverSetup"/> objects from the assembly specified by the assembly name.
            </summary>
            <param name="assemblyName">The <see cref="T:System.Reflection.AssemblyName"/> of the assembly that should be searched for setup objects.</param>
            <param name="typesToExclude">The <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterativeSolver"/> types that should not be loaded.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.CompositeSolver.LoadSolverInformationFromAssembly(System.Type)">
            <summary>
            Loads the available <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterativeSolverSetup"/> objects from the assembly specified by the type.
            </summary>
            <param name="typeInAssembly">The type in the assembly which should be searched for setup objects.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.CompositeSolver.LoadSolverInformationFromAssembly(System.Type,System.Type[])">
            <summary>
            Loads the available <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterativeSolverSetup"/> objects from the assembly specified by the type.
            </summary>
            <param name="typeInAssembly">The type in the assembly which should be searched for setup objects.</param>
            <param name="typesToExclude">The <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterativeSolver"/> types that should not be loaded.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.CompositeSolver.LoadSolverInformationFromAssembly(System.Reflection.Assembly)">
            <summary>
            Loads the available <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterativeSolverSetup"/> objects from the specified assembly.
            </summary>
            <param name="assembly">The assembly which will be searched for setup objects.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.CompositeSolver.LoadSolverInformationFromAssembly(System.Reflection.Assembly,System.Type[])">
            <summary>
            Loads the available <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterativeSolverSetup"/> objects from the specified assembly.
            </summary>
            <param name="assembly">The assembly which will be searched for setup objects.</param>
            <param name="typesToExclude">The <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterativeSolver"/> types that should not be loaded.</param>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.CompositeSolver._solvers">
            <summary>
            The collection of solvers that will be used to 
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.CompositeSolver._status">
            <summary>
            The status of the calculation.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.CompositeSolver._iterator">
            <summary>
            The iterator that is used to control the iteration process.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.CompositeSolver._hasBeenStopped">
            <summary>
            A flag indicating if the solver has been stopped or not.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.CompositeSolver._currentSolver">
            <summary>
            The solver that is currently running. Reference is used to be able to stop the
            solver if the user cancels the solve process.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.CompositeSolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.CompositeSolver"/> class with the default iterator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.CompositeSolver.#ctor(MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.CompositeSolver"/> class with the specified iterator.
            </summary>
            <param name="iterator">The iterator that will be used to control the iteration process. </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.CompositeSolver.SetIterator(MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator)">
            <summary>
            Sets the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator"/> that will be used to track the iterative process.
            </summary>
            <param name="iterator">The iterator.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.CompositeSolver.StopSolve">
            <summary>
            Stops the solve process. 
            </summary>
            <remarks>
            Note that it may take an indetermined amount of time for the solver to actually stop the process.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.CompositeSolver.Solve(MathNet.Numerics.LinearAlgebra.Single.Matrix,MathNet.Numerics.LinearAlgebra.Single.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="vector">The solution vector, <c>b</c>.</param>
            <returns>The result vector, <c>x</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.CompositeSolver.Solve(MathNet.Numerics.LinearAlgebra.Single.Matrix,MathNet.Numerics.LinearAlgebra.Single.Vector,MathNet.Numerics.LinearAlgebra.Single.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution vector, <c>b</c></param>
            <param name="result">The result vector, <c>x</c></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.CompositeSolver.LoadSolvers">
            <summary>
            Load solvers
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.CompositeSolver.Solve(MathNet.Numerics.LinearAlgebra.Single.Matrix,MathNet.Numerics.LinearAlgebra.Single.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <returns>The result matrix, <c>X</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.CompositeSolver.Solve(MathNet.Numerics.LinearAlgebra.Single.Matrix,MathNet.Numerics.LinearAlgebra.Single.Matrix,MathNet.Numerics.LinearAlgebra.Single.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <param name="result">The result matrix, <c>X</c></param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.CompositeSolver.IterationResult">
            <summary>
            Gets the status of the iteration once the calculation is finished.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.CompositeSolver.DoubleComparer">
            <summary>
            An <c>IComparer</c> used to compare double precision floating points.
            </summary>
            NOTE: The instance of this class is used only in <see cref="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.CompositeSolver.SolverSetups"/>. If C# suppports interface inheritence
            NOTE: and methods in anonymous types, then this class should be deleted and anonymous type implemented with IComaprer support
            NOTE: in <see cref="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.CompositeSolver.SolverSetups"/> constructor
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.CompositeSolver.DoubleComparer.Compare(System.Double,System.Double)">
            <summary>
            Compares two double values based on the selected comparison method.
            </summary>
            <param name="x">The first double to compare.</param>
            <param name="y">The second double to compare.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return 
            value has the following meanings: 
            Value Meaning Less than zero This object is less than the other parameter.
            Zero This object is equal to other. 
            Greater than zero This object is greater than other. 
            </returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.GpBiCg">
            <summary>
            A Generalized Product Bi-Conjugate Gradient iterative matrix solver.
            </summary>
            <remarks>
            <para>
            The Generalized Product Bi-Conjugate Gradient (GPBiCG) solver is an 
            alternative version of the Bi-Conjugate Gradient stabilized (CG) solver.
            Unlike the CG solver the GPBiCG solver can be used on 
            non-symmetric matrices. <br/>
            Note that much of the success of the solver depends on the selection of the
            proper preconditioner.
            </para>
            <para>
            The GPBiCG algorithm was taken from: <br/>
            GPBiCG(m,l): A hybrid of BiCGSTAB and GPBiCG methods with 
            efficiency and robustness
            <br/>
            S. Fujino
            <br/>
            Applied Numerical Mathematics, Volume 41, 2002, pp 107 - 117
            <br/>
            </para>
            <para>
            The example code below provides an indication of the possible use of the
            solver.
            </para>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.GpBiCg.DefaultStatus">
            <summary>
            The status used if there is no status, i.e. the solver hasn't run yet and there is no
            iterator.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.GpBiCg._preconditioner">
            <summary>
            The preconditioner that will be used. Can be set to <c>null</c>, in which case the default
            pre-conditioner will be used.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.GpBiCg._iterator">
            <summary>
            The iterative process controller.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.GpBiCg._numberOfBiCgStabSteps">
            <summary>
            Indicates the number of <c>BiCGStab</c> steps should be taken 
            before switching.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.GpBiCg._numberOfGpbiCgSteps">
            <summary>
            Indicates the number of <c>GPBiCG</c> steps should be taken 
            before switching.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.GpBiCg._hasBeenStopped">
            <summary>
            Indicates if the user has stopped the solver.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.GpBiCg.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.GpBiCg"/> class.
            </summary>
            <remarks>
            When using this constructor the solver will use the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator"/> with
            the standard settings and a default preconditioner.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.GpBiCg.#ctor(MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.GpBiCg"/> class.
            </summary>
            <remarks>
            <para>
            When using this constructor the solver will use a default preconditioner.
            </para>
            <para>
            The main advantages of using a user defined <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator"/> are:
            <list type="number">
            <item>It is possible to set the desired convergence limits.</item>
            <item>
            It is possible to check the reason for which the solver finished 
            the iterative procedure by calling the <see cref="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator.Status"/> property.
            </item>
            </list>
            </para>
            </remarks>
            <param name="iterator">The <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator"/> that will be used to monitor the iterative process.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.GpBiCg.#ctor(MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.IPreConditioner)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.GpBiCg"/> class.
            </summary>
            <remarks>
            When using this constructor the solver will use the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator"/> with
            the standard settings.
            </remarks>
            <param name="preconditioner">The <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the matrix equation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.GpBiCg.#ctor(MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.IPreConditioner,MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.GpBiCg"/> class.
            </summary>
            <remarks>
            <para>
            The main advantages of using a user defined <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator"/> are:
            <list type="number">
            <item>It is possible to set the desired convergence limits.</item>
            <item>
            It is possible to check the reason for which the solver finished 
            the iterative procedure by calling the <see cref="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator.Status"/> property.
            </item>
            </list>
            </para>
            </remarks>
            <param name="preconditioner">The <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the matrix equation.</param>
            <param name="iterator">The <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator"/> that will be used to monitor the iterative process.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.GpBiCg.SetPreconditioner(MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.IPreConditioner)">
            <summary>
            Sets the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the iterative process.
            </summary>
            <param name="preconditioner">The preconditioner.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.GpBiCg.SetIterator(MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator)">
            <summary>
            Sets the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator"/> that will be used to track the iterative process.
            </summary>
            <param name="iterator">The iterator.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.GpBiCg.StopSolve">
            <summary>
            Stops the solve process. 
            </summary>
            <remarks>
            Note that it may take an indetermined amount of time for the solver to actually
            stop the process.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.GpBiCg.Solve(MathNet.Numerics.LinearAlgebra.Single.Matrix,MathNet.Numerics.LinearAlgebra.Single.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="vector">The solution vector, <c>b</c>.</param>
            <returns>The result vector, <c>x</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.GpBiCg.Solve(MathNet.Numerics.LinearAlgebra.Single.Matrix,MathNet.Numerics.LinearAlgebra.Single.Vector,MathNet.Numerics.LinearAlgebra.Single.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution vector, <c>b</c></param>
            <param name="result">The result vector, <c>x</c></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.GpBiCg.CalculateTrueResidual(MathNet.Numerics.LinearAlgebra.Single.Matrix,MathNet.Numerics.LinearAlgebra.Single.Vector,MathNet.Numerics.LinearAlgebra.Single.Vector,MathNet.Numerics.LinearAlgebra.Single.Vector)">
            <summary>
            Calculates the <c>true</c> residual of the matrix equation Ax = b according to: residual = b - Ax
            </summary>
            <param name="matrix">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Matrix"/> A.</param>
            <param name="residual">Residual values in <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/>.</param>
            <param name="x">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/> x.</param>
            <param name="b">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/> b.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.GpBiCg.ShouldContinue(System.Int32,MathNet.Numerics.LinearAlgebra.Single.Vector,MathNet.Numerics.LinearAlgebra.Single.Vector,MathNet.Numerics.LinearAlgebra.Single.Vector)">
            <summary>
            Determine if calculation should continue
            </summary>
            <param name="iterationNumber">Number of iterations passed</param>
            <param name="result">Result <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/>.</param>
            <param name="source">Source <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/>.</param>
            <param name="residuals">Residual <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/>.</param>
            <returns><c>true</c> if continue, otherwise <c>false</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.GpBiCg.ShouldRunBiCgStabSteps(System.Int32)">
            <summary>
            Decide if to do steps with BiCgStab
            </summary>
            <param name="iterationNumber">Number of iteration</param>
            <returns><c>true</c> if yes, otherwise <c>false</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.GpBiCg.Solve(MathNet.Numerics.LinearAlgebra.Single.Matrix,MathNet.Numerics.LinearAlgebra.Single.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <returns>The result matrix, <c>X</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.GpBiCg.Solve(MathNet.Numerics.LinearAlgebra.Single.Matrix,MathNet.Numerics.LinearAlgebra.Single.Matrix,MathNet.Numerics.LinearAlgebra.Single.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <param name="result">The result matrix, <c>X</c></param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.GpBiCg.NumberOfBiCgStabSteps">
            <summary>
            Gets or sets the number of steps taken with the <c>BiCgStab</c> algorithm
            before switching over to the <c>GPBiCG</c> algorithm.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.GpBiCg.NumberOfGpBiCgSteps">
            <summary>
            Gets or sets the number of steps taken with the <c>GPBiCG</c> algorithm
            before switching over to the <c>BiCgStab</c> algorithm.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.GpBiCg.IterationResult">
            <summary>
            Gets the status of the iteration once the calculation is finished.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.MlkBiCgStab">
            <summary>
            A Multiple-Lanczos Bi-Conjugate Gradient stabilized iterative matrix solver.
            </summary>
            <remarks>
            <para>
            The Multiple-Lanczos Bi-Conjugate Gradient stabilized (ML(k)-BiCGStab) solver is an 'improvement'
            of the standard BiCgStab solver. 
            </para>
            <para>
            The algorithm was taken from: <br/>
            ML(k)BiCGSTAB: A BiCGSTAB variant based on multiple Lanczos starting vectors
            <br/>
            Man-chung Yeung and Tony F. Chan
            <br/>
            SIAM Journal of Scientific Computing
            <br/>
            Volume 21, Number 4, pp. 1263 - 1290
            </para>
            <para>
            The example code below provides an indication of the possible use of the
            solver.
            </para>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.MlkBiCgStab.DefaultNumberOfStartingVectors">
            <summary>
            The default number of starting vectors.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.MlkBiCgStab.DefaultStatus">
            <summary>
            The status used if there is no status, i.e. the solver hasn't run yet and there is no
            iterator.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.MlkBiCgStab._preconditioner">
            <summary>
            The preconditioner that will be used. Can be set to <see langword="null" />, in which case the default
            pre-conditioner will be used.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.MlkBiCgStab._iterator">
            <summary>
            The iterative process controller.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.MlkBiCgStab._startingVectors">
            <summary>
            The collection of starting vectors which are used as the basis for the Krylov sub-space.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.MlkBiCgStab._numberOfStartingVectors">
            <summary>
            The number of starting vectors used by the algorithm
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.MlkBiCgStab._hasBeenStopped">
            <summary>
            Indicates if the user has stopped the solver.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.MlkBiCgStab.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.MlkBiCgStab"/> class.
            </summary>
            <remarks>
            When using this constructor the solver will use the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator"/> with
            the standard settings and a default preconditioner.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.MlkBiCgStab.#ctor(MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.MlkBiCgStab"/> class.
            </summary>
            <remarks>
            <para>
            When using this constructor the solver will use a default preconditioner.
            </para>
            <para>
            The main advantages of using a user defined <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator"/> are:
            <list type="number">
            <item>It is possible to set the desired convergence limits.</item>
            <item>
            It is possible to check the reason for which the solver finished 
            the iterative procedure by calling the <see cref="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator.Status"/> property.
            </item>
            </list>
            </para>
            </remarks>
            <param name="iterator">The <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator"/> that will be used to monitor the iterative process.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.MlkBiCgStab.#ctor(MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.IPreConditioner)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.MlkBiCgStab"/> class.
            </summary>
            <remarks>
            When using this constructor the solver will use the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator"/> with
            the standard settings.
            </remarks>
            <param name="preconditioner">The <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the matrix equation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.MlkBiCgStab.#ctor(MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.IPreConditioner,MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.MlkBiCgStab"/> class.
            </summary>
            <remarks>
            <para>
            The main advantages of using a user defined <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator"/> are:
            <list type="number">
            <item>It is possible to set the desired convergence limits.</item>
            <item>
            It is possible to check the reason for which the solver finished 
            the iterative procedure by calling the <see cref="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator.Status"/> property.
            </item>
            </list>
            </para>
            </remarks>
            <param name="preconditioner">The <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the matrix equation.</param>
            <param name="iterator">The <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator"/> that will be used to monitor the iterative process.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.MlkBiCgStab.ResetNumberOfStartingVectors">
            <summary>
            Resets the number of starting vectors to the default value.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.MlkBiCgStab.SetPreconditioner(MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.IPreConditioner)">
            <summary>
            Sets the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the iterative process.
            </summary>
            <param name="preconditioner">The preconditioner.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.MlkBiCgStab.SetIterator(MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator)">
            <summary>
            Sets the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator"/> that will be used to track the iterative process.
            </summary>
            <param name="iterator">The iterator.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.MlkBiCgStab.StopSolve">
            <summary>
            Stops the solve process. 
            </summary>
            <remarks>
            Note that it may take an indetermined amount of time for the solver to actually stop the process.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.MlkBiCgStab.Solve(MathNet.Numerics.LinearAlgebra.Single.Matrix,MathNet.Numerics.LinearAlgebra.Single.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="vector">The solution vector, <c>b</c>.</param>
            <returns>The result vector, <c>x</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.MlkBiCgStab.Solve(MathNet.Numerics.LinearAlgebra.Single.Matrix,MathNet.Numerics.LinearAlgebra.Single.Vector,MathNet.Numerics.LinearAlgebra.Single.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution vector, <c>b</c></param>
            <param name="result">The result vector, <c>x</c></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.MlkBiCgStab.NumberOfStartingVectorsToCreate(System.Int32,System.Int32)">
            <summary>
            Gets the number of starting vectors to create
            </summary>
            <param name="maximumNumberOfStartingVectors">Maximum number</param>
            <param name="numberOfVariables">Number of variables</param>
            <returns>Number of starting vectors to create</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.MlkBiCgStab.CreateStartingVectors(System.Int32,System.Int32)">
            <summary>
            Returns an array of starting vectors.
            </summary>
            <param name="maximumNumberOfStartingVectors">The maximum number of starting vectors that should be created.</param>
            <param name="numberOfVariables">The number of variables.</param>
            <returns>
             An array with starting vectors. The array will never be larger than the
             <paramref name="maximumNumberOfStartingVectors"/> but it may be smaller if
             the <paramref name="numberOfVariables"/> is smaller than 
             the <paramref name="maximumNumberOfStartingVectors"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.MlkBiCgStab.CreateVectorArray(System.Int32,System.Int32)">
            <summary>
            Create random vectors array
            </summary>
            <param name="arraySize">Number of vectors</param>
            <param name="vectorSize">Size of each vector</param>
            <returns>Array of random vectors</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.MlkBiCgStab.CalculateTrueResidual(MathNet.Numerics.LinearAlgebra.Single.Matrix,MathNet.Numerics.LinearAlgebra.Single.Vector,MathNet.Numerics.LinearAlgebra.Single.Vector,MathNet.Numerics.LinearAlgebra.Single.Vector)">
            <summary>
            Calculates the <c>true</c> residual of the matrix equation Ax = b according to: residual = b - Ax
            </summary>
            <param name="matrix">Source <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Matrix"/>A.</param>
            <param name="residual">Residual <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/> data.</param>
            <param name="x">x <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/> data.</param>
            <param name="b">b <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/> data.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.MlkBiCgStab.ShouldContinue(System.Int32,MathNet.Numerics.LinearAlgebra.Single.Vector,MathNet.Numerics.LinearAlgebra.Single.Vector,MathNet.Numerics.LinearAlgebra.Single.Vector)">
            <summary>
            Determine if calculation should continue
            </summary>
            <param name="iterationNumber">Number of iterations passed</param>
            <param name="result">Result <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/>.</param>
            <param name="source">Source <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/>.</param>
            <param name="residuals">Residual <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/>.</param>
            <returns><c>true</c> if continue, otherwise <c>false</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.MlkBiCgStab.Solve(MathNet.Numerics.LinearAlgebra.Single.Matrix,MathNet.Numerics.LinearAlgebra.Single.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <returns>The result matrix, <c>X</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.MlkBiCgStab.Solve(MathNet.Numerics.LinearAlgebra.Single.Matrix,MathNet.Numerics.LinearAlgebra.Single.Matrix,MathNet.Numerics.LinearAlgebra.Single.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <param name="result">The result matrix, <c>X</c></param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.MlkBiCgStab.NumberOfStartingVectors">
            <summary>
            Gets or sets the number of starting vectors.
            </summary>
            <remarks>
            Must be larger than 1 and smaller than the number of variables in the matrix that 
            for which this solver will be used.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.MlkBiCgStab.StartingVectors">
            <summary>
            Gets or sets a series of orthonormal vectors which will be used as basis for the 
            Krylov sub-space.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.MlkBiCgStab.IterationResult">
            <summary>
            Gets the status of the iteration once the calculation is finished.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.TFQMR">
            <summary>
            A Transpose Free Quasi-Minimal Residual (TFQMR) iterative matrix solver.
            </summary>
            <remarks>
            <para>
            The TFQMR algorithm was taken from: <br/>
            Iterative methods for sparse linear systems.
            <br/>
            Yousef Saad
            <br/>
            Algorithm is described in Chapter 7, section 7.4.3, page 219
            </para>
            <para>
            The example code below provides an indication of the possible use of the
            solver.
            </para>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.TFQMR.DefaultStatus">
            <summary>
            The status used if there is no status, i.e. the solver hasn't run yet and there is no
            iterator.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.TFQMR._preconditioner">
            <summary>
            The preconditioner that will be used. Can be set to <see langword="null" />, in which case the default
            pre-conditioner will be used.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.TFQMR._iterator">
            <summary>
            The iterative process controller.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.TFQMR._hasBeenStopped">
            <summary>
            Indicates if the user has stopped the solver.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.TFQMR.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.TFQMR"/> class.
            </summary>
            <remarks>
            When using this constructor the solver will use the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator"/> with
            the standard settings and a default preconditioner.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.TFQMR.#ctor(MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.TFQMR"/> class.
            </summary>
            <remarks>
            <para>
            When using this constructor the solver will use a default preconditioner.
            </para>
            <para>
            The main advantages of using a user defined <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator"/> are:
            <list type="number">
            <item>It is possible to set the desired convergence limits.</item>
            <item>
            It is possible to check the reason for which the solver finished 
            the iterative procedure by calling the <see cref="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator.Status"/> property.
            </item>
            </list>
            </para>
            </remarks>
            <param name="iterator">The <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator"/> that will be used to monitor the iterative process.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.TFQMR.#ctor(MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.IPreConditioner)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.TFQMR"/> class.
            </summary>
            <remarks>
            When using this constructor the solver will use the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator"/> with
            the standard settings.
            </remarks>
            <param name="preconditioner">The <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the matrix equation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.TFQMR.#ctor(MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.IPreConditioner,MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.TFQMR"/> class.
            </summary>
            <remarks>
            <para>
            The main advantages of using a user defined <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator"/> are:
            <list type="number">
            <item>It is possible to set the desired convergence limits.</item>
            <item>
            It is possible to check the reason for which the solver finished 
            the iterative procedure by calling the <see cref="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator.Status"/> property.
            </item>
            </list>
            </para>
            </remarks>
            <param name="preconditioner">The <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the matrix equation.</param>
            <param name="iterator">The <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator"/> that will be used to monitor the iterative process.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.TFQMR.SetPreconditioner(MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.IPreConditioner)">
            <summary>
            Sets the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the iterative process.
            </summary>
            <param name="preconditioner">The preconditioner.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.TFQMR.SetIterator(MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator)">
            <summary>
            Sets the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator"/> that will be used to track the iterative process.
            </summary>
            <param name="iterator">The iterator.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.TFQMR.StopSolve">
            <summary>
            Stops the solve process. 
            </summary>
            <remarks>
            Note that it may take an indetermined amount of time for the solver to actually stop the process.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.TFQMR.Solve(MathNet.Numerics.LinearAlgebra.Single.Matrix,MathNet.Numerics.LinearAlgebra.Single.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="vector">The solution vector, <c>b</c>.</param>
            <returns>The result vector, <c>x</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.TFQMR.Solve(MathNet.Numerics.LinearAlgebra.Single.Matrix,MathNet.Numerics.LinearAlgebra.Single.Vector,MathNet.Numerics.LinearAlgebra.Single.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution vector, <c>b</c></param>
            <param name="result">The result vector, <c>x</c></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.TFQMR.CalculateTrueResidual(MathNet.Numerics.LinearAlgebra.Single.Matrix,MathNet.Numerics.LinearAlgebra.Single.Vector,MathNet.Numerics.LinearAlgebra.Single.Vector,MathNet.Numerics.LinearAlgebra.Single.Vector)">
            <summary>
            Calculates the <c>true</c> residual of the matrix equation Ax = b according to: residual = b - Ax
            </summary>
            <param name="matrix">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Matrix"/> A.</param>
            <param name="residual">Residual values in <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/>.</param>
            <param name="x">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/> x.</param>
            <param name="b">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/> b.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.TFQMR.ShouldContinue(System.Int32,MathNet.Numerics.LinearAlgebra.Single.Vector,MathNet.Numerics.LinearAlgebra.Single.Vector,MathNet.Numerics.LinearAlgebra.Single.Vector)">
            <summary>
            Determine if calculation should continue
            </summary>
            <param name="iterationNumber">Number of iterations passed</param>
            <param name="result">Result <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/>.</param>
            <param name="source">Source <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/>.</param>
            <param name="residuals">Residual <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/>.</param>
            <returns><c>true</c> if continue, otherwise <c>false</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.TFQMR.IsEven(System.Int32)">
            <summary>
            Is <paramref name="number"/> even?
            </summary>
            <param name="number">Number to check</param>
            <returns><c>true</c> if <paramref name="number"/> even, otherwise <c>false</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.TFQMR.Solve(MathNet.Numerics.LinearAlgebra.Single.Matrix,MathNet.Numerics.LinearAlgebra.Single.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <returns>The result matrix, <c>X</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.TFQMR.Solve(MathNet.Numerics.LinearAlgebra.Single.Matrix,MathNet.Numerics.LinearAlgebra.Single.Matrix,MathNet.Numerics.LinearAlgebra.Single.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <param name="result">The result matrix, <c>X</c></param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterative.TFQMR.IterationResult">
            <summary>
            Gets the status of the iteration once the calculation is finished.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterator">
            <summary>
            An iterator that is used to check if an iterative calculation should continue or stop.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterator.DefaultStatus">
            <summary>
            The default status for the iterator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterator.CreateDefault">
            <summary>
            Creates a default iterator with all the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IIterationStopCriterium"/> objects.
            </summary>
            <returns>A new <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator"/> object.</returns>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterator._stopCriterias">
            <summary>
            The collection that holds all the stop criteria and the flag indicating if they should be added
            to the child iterators.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterator._status">
            <summary>
            The status of the iterator.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterator._wasIterationCancelled">
            <summary>
            Indicates if the iteration was cancelled.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterator"/> class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterator.#ctor(System.Collections.Generic.IEnumerable{MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IIterationStopCriterium})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterator"/> class with the specified stop criteria.
            </summary>
            <param name="stopCriteria">
            The specified stop criteria. Only one stop criterium of each type can be passed in. None
            of the stop criteria will be passed on to child iterators.
            </param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="stopCriteria"/> contains multiple stop criteria of the same type.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterator.Add(MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IIterationStopCriterium)">
            <summary>
            Adds an <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IIterationStopCriterium"/> to the internal collection of stop-criteria. Only a 
            single stop criterium of each type can be stored.
            </summary>
            <param name="stopCriterium">The stop criterium to add.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="stopCriterium"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="stopCriterium"/> is of the same type as an already 
            stored criterium.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterator.Remove(MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IIterationStopCriterium)">
            <summary>
            Removes the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IIterationStopCriterium"/> from the internal collection.
            </summary>
            <param name="stopCriterium">The stop criterium that must be removed.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterator.Contains(MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IIterationStopCriterium)">
            <summary>
            Indicates if the specific stop criterium is stored by the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator"/>.
            </summary>
            <param name="stopCriterium">The stop criterium.</param>
            <returns><c>true</c> if the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator"/> contains the stop criterium; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterator.IterationCancelled">
            <summary>
            Indicates to the iterator that the iterative process has been cancelled.
            </summary>
            <remarks>
            Does not reset the stop-criteria.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterator.DetermineStatus(System.Int32,MathNet.Numerics.LinearAlgebra.Single.Vector,MathNet.Numerics.LinearAlgebra.Single.Vector,MathNet.Numerics.LinearAlgebra.Single.Vector)">
            <summary>
            Determines the status of the iterative calculation based on the stop criteria stored
            by the current <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator"/>. Result is set into <c>Status</c> field.
            </summary>
            <param name="iterationNumber">The number of iterations that have passed so far.</param>
            <param name="solutionVector">The vector containing the current solution values.</param>
            <param name="sourceVector">The right hand side vector.</param>
            <param name="residualVector">The vector containing the current residual vectors.</param>
            <remarks>
            The individual iterators may internally track the progress of the calculation based
            on the invocation of this method. Therefore this method should only be called if the 
            calculation has moved forwards at least one step.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterator.ResetToPrecalculationState">
            <summary>
            Resets the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterator"/> to the pre-calculation state.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterator.Clone">
            <summary>
            Creates a deep clone of the current iterator.
            </summary>
            <returns>The deep clone of the current iterator.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterator.NumberOfCriteria">
            <summary>
            Gets the number of stored stop criteria.
            </summary>
            <remarks>Used for testing only.</remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterator.StoredStopCriteria">
            <summary>
            Gets an <c>IEnumerator</c> that enumerates over all the stored stop criteria.
            </summary>
            <remarks>Used for testing only.</remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.Iterator.Status">
            <summary>
            Gets the current calculation status.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.Diagonal">
            <summary>
            A diagonal preconditioner. The preconditioner uses the inverse
            of the matrix diagonal as preconditioning values.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.IPreConditioner">
            <summary>
            The base interface for preconditioner classes.
            </summary>
            <remarks>
            <para>
            Preconditioners are used by iterative solvers to improve the convergence
            speed of the solving process. Increase in convergence speed
            is related to the number of iterations necessary to get a converged solution.
            So while in general the use of a preconditioner means that the iterative 
            solver will perform fewer iterations it does not guarantee that the actual
            solution time decreases given that some preconditioners can be expensive to 
            setup and run.
            </para>
            <para>
            Note that in general changes to the matrix will invalidate the preconditioner
            if the changes occur after creating the preconditioner.
            </para>
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.IPreConditioner.Initialize(MathNet.Numerics.LinearAlgebra.Single.Matrix)">
            <summary>
            Initializes the preconditioner and loads the internal data structures.
            </summary>
            <param name="matrix">The matrix on which the preconditioner is based.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.IPreConditioner.Approximate(MathNet.Numerics.LinearAlgebra.Single.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Mx = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <returns>The left hand side vector.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.IPreConditioner.Approximate(MathNet.Numerics.LinearAlgebra.Single.Vector,MathNet.Numerics.LinearAlgebra.Single.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Mx = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <param name="lhs">The left hand side vector. Also known as the result vector.</param>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.Diagonal._inverseDiagonals">
            <summary>
            The inverse of the matrix diagonal.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.Diagonal.DiagonalEntries">
            <summary>
            Returns the decomposed matrix diagonal.
            </summary>
            <returns>The matrix diagonal.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.Diagonal.Initialize(MathNet.Numerics.LinearAlgebra.Single.Matrix)">
            <summary>
            Initializes the preconditioner and loads the internal data structures.
            </summary>
            <param name="matrix">
            The <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Matrix"/> upon which this preconditioner is based.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <see langword="null"/>. </exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.Diagonal.Approximate(MathNet.Numerics.LinearAlgebra.Single.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <returns>The left hand side vector.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.Diagonal.Approximate(MathNet.Numerics.LinearAlgebra.Single.Vector,MathNet.Numerics.LinearAlgebra.Single.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <param name="lhs">The left hand side vector. Also known as the result vector.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.Ilutp">
            <summary>
            This class performs an Incomplete LU factorization with drop tolerance
            and partial pivoting. The drop tolerance indicates which additional entries
            will be dropped from the factorized LU matrices.
            </summary>
            <remarks>
            The ILUTP-Mem algorithm was taken from: <br/>
            ILUTP_Mem: a Space-Efficient Incomplete LU Preconditioner
            <br/>
            Tzu-Yi Chen, Department of Mathematics and Computer Science, <br/>
            Pomona College, Claremont CA 91711, USA <br/>
            Published in: <br/>
            Lecture Notes in Computer Science <br/>
            Volume 3046 / 2004 <br/>
            pp. 20 - 28 <br/>
            Algorithm is described in Section 2, page 22
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.Ilutp.DefaultFillLevel">
            <summary>
            The default fill level.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.Ilutp.DefaultDropTolerance">
            <summary>
            The default drop tolerance.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.Ilutp._upper">
            <summary>
            The decomposed upper triangular matrix.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.Ilutp._lower">
            <summary>
            The decomposed lower triangular matrix.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.Ilutp._pivots">
            <summary>
            The array containing the pivot values.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.Ilutp._fillLevel">
            <summary>
            The fill level.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.Ilutp._dropTolerance">
            <summary>
            The drop tolerance.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.Ilutp._pivotTolerance">
            <summary>
            The pivot tolerance.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.Ilutp.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.Ilutp"/> class with the default settings.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.Ilutp.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.Ilutp"/> class with the specified settings.
            </summary>
            <param name="fillLevel">
            The amount of fill that is allowed in the matrix. The value is a fraction of 
            the number of non-zero entries in the original matrix. Values should be positive.
            </param>
            <param name="dropTolerance">
            The absolute drop tolerance which indicates below what absolute value an entry 
            will be dropped from the matrix. A drop tolerance of 0.0 means that no values
            will be dropped. Values should always be positive.
            </param>
            <param name="pivotTolerance">
            The pivot tolerance which indicates at what level pivoting will take place. A
            value of 0.0 means that no pivoting will take place.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.Ilutp.UpperTriangle">
            <summary>
            Returns the upper triagonal matrix that was created during the LU decomposition.
            </summary>
            <remarks>
            This method is used for debugging purposes only and should normally not be used.
            </remarks>
            <returns>A new matrix containing the upper triagonal elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.Ilutp.LowerTriangle">
            <summary>
            Returns the lower triagonal matrix that was created during the LU decomposition.
            </summary>
            <remarks>
            This method is used for debugging purposes only and should normally not be used.
            </remarks>
            <returns>A new matrix containing the lower triagonal elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.Ilutp.Pivots">
            <summary>
            Returns the pivot array. This array is not needed for normal use because
            the preconditioner will return the solution vector values in the proper order.
            </summary>
            <remarks>
            This method is used for debugging purposes only and should normally not be used.
            </remarks>
            <returns>The pivot array.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.Ilutp.Initialize(MathNet.Numerics.LinearAlgebra.Single.Matrix)">
            <summary>
            Initializes the preconditioner and loads the internal data structures.
            </summary>
            <param name="matrix">
            The <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Matrix"/> upon which this preconditioner is based. Note that the 
            method takes a general matrix type. However internally the data is stored 
            as a sparse matrix. Therefore it is not recommended to pass a dense matrix.
            </param>
            <exception cref="T:System.ArgumentNullException"> If <paramref name="matrix"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.Ilutp.PivotRow(MathNet.Numerics.LinearAlgebra.Single.Vector)">
            <summary>
            Pivot elements in the <paramref name="row"/> according to internal pivot array
            </summary>
            <param name="row">Row <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/> to pivot in</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.Ilutp.PivotMapFound(System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Int32)">
            <summary>
            Was pivoting already performed
            </summary>
            <param name="knownPivots">Pivots already done</param>
            <param name="currentItem">Current item to pivot</param>
            <returns><c>true</c> if performed, otherwise <c>false</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.Ilutp.SwapColumns(MathNet.Numerics.LinearAlgebra.Single.Matrix,System.Int32,System.Int32)">
            <summary>
            Swap columns in the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Matrix"/>
            </summary>
            <param name="matrix">Source <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Matrix"/>.</param>
            <param name="firstColumn">First column index to swap</param>
            <param name="secondColumn">Second column index to swap</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.Ilutp.FindLargestItems(System.Int32,System.Int32,System.Int32[],MathNet.Numerics.LinearAlgebra.Single.Vector)">
            <summary>
            Sort vector descending, not changing vector but placing sorted indicies to <paramref name="sortedIndices"/>
            </summary>
            <param name="lowerBound">Start sort form</param>
            <param name="upperBound">Sort till upper bound</param>
            <param name="sortedIndices">Array with sorted vector indicies</param>
            <param name="values">Source <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.Ilutp.Approximate(MathNet.Numerics.LinearAlgebra.Single.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <returns>The left hand side vector.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.Ilutp.Approximate(MathNet.Numerics.LinearAlgebra.Single.Vector,MathNet.Numerics.LinearAlgebra.Single.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <param name="lhs">The left hand side vector. Also known as the result vector.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.Ilutp.Pivot(MathNet.Numerics.LinearAlgebra.Single.Vector,MathNet.Numerics.LinearAlgebra.Single.Vector)">
            <summary>
            Pivot elements in <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/> according to internal pivot array
            </summary>
            <param name="vector">Source <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/>.</param>
            <param name="result">Result <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/> after pivoting.</param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.Ilutp.FillLevel">
            <summary>
            Gets or sets the amount of fill that is allowed in the matrix. The
            value is a fraction of the number of non-zero entries in the original
            matrix. The standard value is 200.
            </summary>
            <remarks>
            <para>
            Values should always be positive and can be higher than 1.0. A value lower
            than 1.0 means that the eventual preconditioner matrix will have fewer
            non-zero entries as the original matrix. A value higher than 1.0 means that
            the eventual preconditioner can have more non-zero values than the original 
            matrix.
            </para>
            <para>
            Note that any changes to the <b>FillLevel</b> after creating the preconditioner
            will invalidate the created preconditioner and will require a re-initialization of
            the preconditioner.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if a negative value is provided.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.Ilutp.DropTolerance">
            <summary>
            Gets or sets the absolute drop tolerance which indicates below what absolute value
            an entry will be dropped from the matrix. The standard value is 0.0001.
            </summary>
            <remarks>
            <para>
            The values should always be positive and can be larger than 1.0. A low value will
            keep more small numbers in the preconditioner matrix. A high value will remove 
            more small numbers from the preconditioner matrix.
            </para>
            <para>
            Note that any changes to the <b>DropTolerance</b> after creating the preconditioner
            will invalidate the created preconditioner and will require a re-initialization of
            the preconditioner.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if a negative value is provided.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.Ilutp.PivotTolerance">
            <summary>
            Gets or sets the pivot tolerance which indicates at what level pivoting will
            take place. The standard value is 0.0 which means pivoting will never take place.
            </summary>
            <remarks>
            <para>
            The pivot tolerance is used to calculate if pivoting is necessary. Pivoting
            will take place if any of the values in a row is bigger than the 
            diagonal value of that row divided by the pivot tolerance, i.e. pivoting
            will take place if <b>row(i,j) &gt; row(i,i) / PivotTolerance</b> for
            any <b>j</b> that is not equal to <b>i</b>.
            </para>
            <para>
            Note that any changes to the <b>PivotTolerance</b> after creating the preconditioner
            will invalidate the created preconditioner and will require a re-initialization of
            the preconditioner.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if a negative value is provided.</exception>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.IlutpElementSorter">
            <summary>
            An element sort algorithm for the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.Ilutp"/> class.
            </summary>
            <remarks>
            This sort algorithm is used to sort the columns in a sparse matrix based on
            the value of the element on the diagonal of the matrix.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.IlutpElementSorter.SortDoubleIndicesDecreasing(System.Int32,System.Int32,System.Int32[],MathNet.Numerics.LinearAlgebra.Single.Vector)">
            <summary>
            Sorts the elements of the <paramref name="values"/> vector in decreasing
            fashion. The vector itself is not affected.
            </summary>
            <param name="lowerBound">The starting index.</param>
            <param name="upperBound">The stopping index.</param>
            <param name="sortedIndices">An array that will contain the sorted indices once the algorithm finishes.</param>
            <param name="values">The <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/> that contains the values that need to be sorted.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.IlutpElementSorter.HeapSortDoublesIndices(System.Int32,System.Int32,System.Int32[],MathNet.Numerics.LinearAlgebra.Single.Vector)">
            <summary>
            Sorts the elements of the <paramref name="values"/> vector in decreasing
            fashion using heap sort algorithm. The vector itself is not affected.
            </summary>
            <param name="lowerBound">The starting index.</param>
            <param name="upperBound">The stopping index.</param>
            <param name="sortedIndices">An array that will contain the sorted indices once the algorithm finishes.</param>
            <param name="values">The <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/> that contains the values that need to be sorted.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.IlutpElementSorter.BuildDoubleIndexHeap(System.Int32,System.Int32,System.Int32[],MathNet.Numerics.LinearAlgebra.Single.Vector)">
            <summary>
            Build heap for double indicies
            </summary>
            <param name="start">Root position</param>
            <param name="count">Length of <paramref name="values"/></param>
            <param name="sortedIndices">Indicies of <paramref name="values"/></param>
            <param name="values">Target <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.IlutpElementSorter.SiftDoubleIndices(System.Int32[],MathNet.Numerics.LinearAlgebra.Single.Vector,System.Int32,System.Int32)">
            <summary>
            Sift double indicies
            </summary>
            <param name="sortedIndices">Indicies of <paramref name="values"/></param>
            <param name="values">Target <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/></param>
            <param name="begin">Root position</param>
            <param name="count">Length of <paramref name="values"/></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.IlutpElementSorter.SortIntegersDecreasing(System.Int32[])">
            <summary>
            Sorts the given integers in a decreasing fashion.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.IlutpElementSorter.HeapSortIntegers(System.Int32[],System.Int32)">
            <summary>
            Sort the given integers in a decreasing fashion using heapsort algorithm 
            </summary>
            <param name="values">Array of values to sort</param>
            <param name="count">Length of <paramref name="values"/></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.IlutpElementSorter.BuildHeap(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Build heap
            </summary>
            <param name="values">Target values array</param>
            <param name="start">Root position</param>
            <param name="count">Length of <paramref name="values"/></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.IlutpElementSorter.Sift(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Sift values
            </summary>
            <param name="values">Target value array</param>
            <param name="start">Root position</param>
            <param name="count">Length of <paramref name="values"/></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.IlutpElementSorter.Exchange(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Exchange values in array
            </summary>
            <param name="values">Target values array</param>
            <param name="first">First value to exchange</param>
            <param name="second">Second value to exchange</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.IncompleteLU">
            <summary>
            An incomplete, level 0, LU factorization preconditioner.
            </summary>
            <remarks>
            The ILU(0) algorithm was taken from: <br/>
            Iterative methods for sparse linear systems <br/>
            Yousef Saad <br/>
            Algorithm is described in Chapter 10, section 10.3.2, page 275 <br/>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.IncompleteLU._decompositionLU">
            <summary>
            The matrix holding the lower (L) and upper (U) matrices. The
            decomposition matrices are combined to reduce storage.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.IncompleteLU.UpperTriangle">
            <summary>
            Returns the upper triagonal matrix that was created during the LU decomposition.
            </summary>
            <returns>A new matrix containing the upper triagonal elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.IncompleteLU.LowerTriangle">
            <summary>
            Returns the lower triagonal matrix that was created during the LU decomposition.
            </summary>
            <returns>A new matrix containing the lower triagonal elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.IncompleteLU.Initialize(MathNet.Numerics.LinearAlgebra.Single.Matrix)">
            <summary>
            Initializes the preconditioner and loads the internal data structures.
            </summary>
            <param name="matrix">The matrix upon which the preconditioner is based. </param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.IncompleteLU.Approximate(MathNet.Numerics.LinearAlgebra.Single.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <returns>The left hand side vector.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.IncompleteLU.Approximate(MathNet.Numerics.LinearAlgebra.Single.Vector,MathNet.Numerics.LinearAlgebra.Single.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <param name="lhs">The left hand side vector. Also known as the result vector.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.UnitPreconditioner">
            <summary>
            A unit preconditioner. This preconditioner does not actually do anything
            it is only used when running an <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.IIterativeSolver"/> without
            a preconditioner.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.UnitPreconditioner._size">
            <summary>
            The coefficient matrix on which this preconditioner operates.
            Is used to check dimensions on the different vectors that are processed.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.UnitPreconditioner.Initialize(MathNet.Numerics.LinearAlgebra.Single.Matrix)">
            <summary>
            Initializes the preconditioner and loads the internal data structures.
            </summary>
            <param name="matrix">
            The matrix upon which the preconditioner is based.
            </param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <see langword="null"/>. </exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.UnitPreconditioner.Approximate(MathNet.Numerics.LinearAlgebra.Single.Vector,MathNet.Numerics.LinearAlgebra.Single.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <param name="lhs">The left hand side vector. Also known as the result vector.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rhs"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="lhs"/> is <see langword="null"/>. </exception>
            <exception cref="T:System.ArgumentException">
              <para>
                If <paramref name="rhs"/> and <paramref name="lhs"/> do not have the same size.
              </para>
              <para>
                - or -
              </para>
              <para>
                If the size of <paramref name="rhs"/> is different the number of rows of the coefficient matrix.
              </para>
            </exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.Preconditioners.UnitPreconditioner.Approximate(MathNet.Numerics.LinearAlgebra.Single.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <returns>The left hand side vector.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rhs"/> is <see langword="null"/>. </exception>
            <exception cref="T:System.ArgumentException">
            If the size of <paramref name="rhs"/> is different the number of rows of the coefficient matrix.
            </exception>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.DivergenceStopCriterium">
            <summary>
            Monitors an iterative calculation for signs of divergence.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IIterationStopCriterium">
            <summary>
            The base interface for classes that provide stop criteria for iterative calculations. 
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IIterationStopCriterium.DetermineStatus(System.Int32,MathNet.Numerics.LinearAlgebra.Single.Vector,MathNet.Numerics.LinearAlgebra.Single.Vector,MathNet.Numerics.LinearAlgebra.Single.Vector)">
            <summary>
            Determines the status of the iterative calculation based on the stop criteria stored
            by the current <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IIterationStopCriterium"/>. Status is set to <c>Status</c> field of current object.
            </summary>
            <param name="iterationNumber">The number of iterations that have passed so far.</param>
            <param name="solutionVector">The vector containing the current solution values.</param>
            <param name="sourceVector">The right hand side vector.</param>
            <param name="residualVector">The vector containing the current residual vectors.</param>
            <remarks>
            The individual stop criteria may internally track the progress of the calculation based
            on the invocation of this method. Therefore this method should only be called if the 
            calculation has moved forwards at least one step.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IIterationStopCriterium.ResetToPrecalculationState">
            <summary>
            Resets the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IIterationStopCriterium"/> to the pre-calculation state.
            </summary>
            <remarks>To implementers: Invoking this method should not clear the user defined
            property values, only the state that is used to track the progress of the 
            calculation.</remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IIterationStopCriterium.Status">
            <summary>
            Gets the current calculation status.
            </summary>
            <remarks><see langword="null"/> is not a legal value. Status should be set in <see cref="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IIterationStopCriterium.DetermineStatus(System.Int32,MathNet.Numerics.LinearAlgebra.Single.Vector,MathNet.Numerics.LinearAlgebra.Single.Vector,MathNet.Numerics.LinearAlgebra.Single.Vector)"/> implementation.</remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IIterationStopCriterium.StopLevel">
            <summary>
            Gets the <see cref="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IIterationStopCriterium.StopLevel"/> which indicates what sort of stop criterium this
            <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IIterationStopCriterium"/> monitors.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.DivergenceStopCriterium.DefaultMaximumRelativeIncrease">
            <summary>
            Default value for the maximum relative increase that the 
            residual may experience before a divergence warning is issued.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.DivergenceStopCriterium.DefaultMinimumNumberOfIterations">
            <summary>
            Default value for the minimum number of iterations over which 
            the residual must grow before a divergence warning is issued.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.DivergenceStopCriterium.DefaultLastIterationNumber">
            <summary>
            Defines the default last iteration number. Set to -1 because iterations normally
            start at 0.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.DivergenceStopCriterium.DefaultStatus">
            <summary>
            The default status.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.DivergenceStopCriterium._maximumRelativeIncrease">
            <summary>
            The maximum relative increase the residual may experience without triggering a divergence warning.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.DivergenceStopCriterium._minimumNumberOfIterations">
            <summary>
            The number of iterations over which a residual increase should be tracked before issuing a divergence warning.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.DivergenceStopCriterium._status">
            <summary>
            The status of the calculation
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.DivergenceStopCriterium._residualHistory">
            <summary>
            The array that holds the tracking information.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.DivergenceStopCriterium._lastIteration">
            <summary>
            The iteration number of the last iteration.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.DivergenceStopCriterium.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.DivergenceStopCriterium"/> class with the default maximum 
            relative increase and the default minimum number of tracking iterations.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.DivergenceStopCriterium.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.DivergenceStopCriterium"/> class with the specified maximum 
            relative increase and the default minimum number of tracking iterations.
            </summary>
            <param name="maximumRelativeIncrease">The maximum relative increase that the residual may experience before a divergence warning is issued.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.DivergenceStopCriterium.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.DivergenceStopCriterium"/> class with the default maximum 
            relative increase and the specified minimum number of tracking iterations.
            </summary>
            <param name="minimumIterations">The minimum number of iterations over which the residual must grow before a divergence warning is issued. </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.DivergenceStopCriterium.#ctor(System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.DivergenceStopCriterium"/> class with the specified maximum 
            relative increase and the specified minimum number of tracking iterations.
            </summary>
            <param name="maximumRelativeIncrease">The maximum relative increase that the residual may experience before a divergence warning is issued. </param>
            <param name="minimumIterations">The minimum number of iterations over which the residual must grow before a divergence warning is issued.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.DivergenceStopCriterium.ResetMaximumRelativeIncreaseToDefault">
            <summary>
            Returns the maximum relative increase to the default.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.DivergenceStopCriterium.ResetNumberOfIterationsToDefault">
            <summary>
            Returns the minimum number of iterations to the default.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.DivergenceStopCriterium.DetermineStatus(System.Int32,MathNet.Numerics.LinearAlgebra.Single.Vector,MathNet.Numerics.LinearAlgebra.Single.Vector,MathNet.Numerics.LinearAlgebra.Single.Vector)">
            <summary>
            Determines the status of the iterative calculation based on the stop criteria stored
            by the current <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IIterationStopCriterium"/>. Result is set into <c>Status</c> field.
            </summary>
            <param name="iterationNumber">The number of iterations that have passed so far.</param>
            <param name="solutionVector">The vector containing the current solution values.</param>
            <param name="sourceVector">The right hand side vector.</param>
            <param name="residualVector">The vector containing the current residual vectors.</param>
            <remarks>
            The individual stop criteria may internally track the progress of the calculation based
            on the invocation of this method. Therefore this method should only be called if the 
            calculation has moved forwards at least one step.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.DivergenceStopCriterium.IsDiverging">
            <summary>
            Detect if solution is diverging
            </summary>
            <returns><c>true</c> if diverging, otherwise <c>false</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.DivergenceStopCriterium.SetStatusToDiverged">
            <summary>
            Set status to <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationDiverged"/>
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.DivergenceStopCriterium.SetStatusToRunning">
            <summary>
            Set status to <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationRunning"/>
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.DivergenceStopCriterium.ResetToPrecalculationState">
            <summary>
            Resets the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IIterationStopCriterium"/> to the pre-calculation state.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.DivergenceStopCriterium.Clone">
            <summary>
            Clones the current <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.DivergenceStopCriterium"/> and its settings.
            </summary>
            <returns>A new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.DivergenceStopCriterium"/> class.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.DivergenceStopCriterium.MaximumRelativeIncrease">
            <summary>
            Gets or sets the maximum relative increase that the residual may experience before a divergence warning is issued.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <c>Maximum</c> is set to zero or below.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.DivergenceStopCriterium.MinimumNumberOfIterations">
            <summary>
            Gets or sets the minimum number of iterations over which the residual must grow before
            issuing a divergence warning.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <c>value</c> is set to less than one.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.DivergenceStopCriterium.RequiredHistoryLength">
            <summary>
            Gets required history Length
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.DivergenceStopCriterium.Status">
            <summary>
            Gets the current calculation status.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.DivergenceStopCriterium.StopLevel">
            <summary>
            Gets the <see cref="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.DivergenceStopCriterium.StopLevel"/> which indicates what sort of stop criterium this
            <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IIterationStopCriterium"/> monitors.
            </summary>
            <value>Returns <see cref="F:MathNet.Numerics.LinearAlgebra.Generic.Solvers.StopCriterium.StopLevel.Divergence"/>.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.FailureStopCriterium">
            <summary>
            Defines an <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IIterationStopCriterium"/> that monitors residuals for NaN's.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.FailureStopCriterium.DefaultLastIterationNumber">
            <summary>
            Defines the default last iteration number. Set to -1 because iterations normally
            start at 0.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.FailureStopCriterium.DefaultStatus">
            <summary>
            The default status.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.FailureStopCriterium._status">
            <summary>
            The status of the calculation
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.FailureStopCriterium._lastIteration">
            <summary>
            The iteration number of the last iteration.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.FailureStopCriterium.DetermineStatus(System.Int32,MathNet.Numerics.LinearAlgebra.Single.Vector,MathNet.Numerics.LinearAlgebra.Single.Vector,MathNet.Numerics.LinearAlgebra.Single.Vector)">
            <summary>
            Determines the status of the iterative calculation based on the stop criteria stored
            by the current <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IIterationStopCriterium"/>. Result is set into <c>Status</c> field.
            </summary>
            <param name="iterationNumber">The number of iterations that have passed so far.</param>
            <param name="solutionVector">The vector containing the current solution values.</param>
            <param name="sourceVector">The right hand side vector.</param>
            <param name="residualVector">The vector containing the current residual vectors.</param>
            <remarks>
            The individual stop criteria may internally track the progress of the calculation based
            on the invocation of this method. Therefore this method should only be called if the 
            calculation has moved forwards at least one step.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.FailureStopCriterium.SetStatusToFailed">
            <summary>
            Set status to <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationFailure"/>
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.FailureStopCriterium.SetStatusToRunning">
            <summary>
            Set status to <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationRunning"/>
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.FailureStopCriterium.ResetToPrecalculationState">
            <summary>
            Resets the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IIterationStopCriterium"/> to the pre-calculation state.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.FailureStopCriterium.Clone">
            <summary>
            Clones the current <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.FailureStopCriterium"/> and its settings.
            </summary>
            <returns>A new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.FailureStopCriterium"/> class.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.FailureStopCriterium.Status">
            <summary>
            Gets the current calculation status.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.FailureStopCriterium.StopLevel">
            <summary>
            Gets the <see cref="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.FailureStopCriterium.StopLevel"/>which indicates what sort of stop criterium this
            <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IIterationStopCriterium"/> monitors.
            </summary>
            <value>Returns <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationFailure"/>.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IterationCountStopCriterium">
            <summary>
            Defines an <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IIterationStopCriterium"/> that monitors the numbers of iteration 
            steps as stop criterium.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IterationCountStopCriterium.DefaultMaximumNumberOfIterations">
            <summary>
            The default value for the maximum number of iterations the process is allowed
            to perform.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IterationCountStopCriterium.DefaultStatus">
            <summary>
            The default status.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IterationCountStopCriterium._maximumNumberOfIterations">
            <summary>
            The maximum number of iterations the calculation is allowed to perform.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IterationCountStopCriterium._status">
            <summary>
            The status of the calculation
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IterationCountStopCriterium.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IterationCountStopCriterium"/> class with the default maximum 
            number of iterations.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IterationCountStopCriterium.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IterationCountStopCriterium"/> class with the specified maximum
            number of iterations.
            </summary>
            <param name="maximumNumberOfIterations">The maximum number of iterations the calculation is allowed to perform.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IterationCountStopCriterium.ResetMaximumNumberOfIterationsToDefault">
            <summary>
            Returns the maximum number of iterations to the default.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IterationCountStopCriterium.DetermineStatus(System.Int32,MathNet.Numerics.LinearAlgebra.Single.Vector,MathNet.Numerics.LinearAlgebra.Single.Vector,MathNet.Numerics.LinearAlgebra.Single.Vector)">
            <summary>
            Determines the status of the iterative calculation based on the stop criteria stored
            by the current <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IterationCountStopCriterium"/>. Result is set into <c>Status</c> field.
            </summary>
            <param name="iterationNumber">The number of iterations that have passed so far.</param>
            <param name="solutionVector">The vector containing the current solution values.</param>
            <param name="sourceVector">The right hand side vector.</param>
            <param name="residualVector">The vector containing the current residual vectors.</param>
            <remarks>
            The individual stop criteria may internally track the progress of the calculation based
            on the invocation of this method. Therefore this method should only be called if the 
            calculation has moved forwards at least one step.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IterationCountStopCriterium.SetStatusToFinished">
            <summary>
            Set status to <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationFailure"/>
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IterationCountStopCriterium.SetStatusToRunning">
            <summary>
            Set status to <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationRunning"/>
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IterationCountStopCriterium.ResetToPrecalculationState">
            <summary>
            Resets the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IterationCountStopCriterium"/> to the pre-calculation state.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IterationCountStopCriterium.Clone">
            <summary>
            Clones the current <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IterationCountStopCriterium"/> and its settings.
            </summary>
            <returns>A new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IterationCountStopCriterium"/> class.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IterationCountStopCriterium.MaximumNumberOfIterations">
            <summary>
            Gets or sets the maximum number of iterations the calculation is allowed to perform.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <c>Maximum</c> is set to a negative value.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IterationCountStopCriterium.Status">
            <summary>
            Gets the current calculation status.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IterationCountStopCriterium.StopLevel">
            <summary>
            Gets the <see cref="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IterationCountStopCriterium.StopLevel"/> which indicates what sort of stop criterium this
            <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IterationCountStopCriterium"/> monitors.
            </summary>
            <value>Returns <see cref="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IterationCountStopCriterium.StopLevel"/>.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.ResidualStopCriterium">
            <summary>
            Defines an <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IIterationStopCriterium"/> that monitors residuals as stop criterium.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.ResidualStopCriterium.DefaultMaximumResidual">
            <summary>
            The default value for the maximum value of the residual.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.ResidualStopCriterium.DefaultMinimumIterationsBelowMaximum">
            <summary>
            The default value for the minimum number of iterations.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.ResidualStopCriterium.DefaultLastIterationNumber">
            <summary>
            Defines the default last iteration number. Set to -1 because iterations normally start at 0.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.ResidualStopCriterium.DefaultStatus">
            <summary>
            The default status.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.ResidualStopCriterium._maximum">
            <summary>
            The maximum value for the residual below which the calculation is considered converged.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.ResidualStopCriterium._minimumIterationsBelowMaximum">
            <summary>
            The minimum number of iterations for which the residual has to be below the maximum before
            the calculation is considered converged.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.ResidualStopCriterium._status">
            <summary>
            The status of the calculation
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.ResidualStopCriterium._iterationCount">
            <summary>
            The number of iterations since the residuals got below the maximum.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.ResidualStopCriterium._lastIteration">
            <summary>
            The iteration number of the last iteration.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.ResidualStopCriterium.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.ResidualStopCriterium"/> class with the default maximum 
            residual and the default minimum number of iterations.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.ResidualStopCriterium.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.ResidualStopCriterium"/> class with the specified 
            maximum residual and the default minimum number of iterations.
            </summary>
            <param name="maximum">The maximum value for the residual below which the calculation is considered converged.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.ResidualStopCriterium.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.ResidualStopCriterium"/> class with the default maximum residual
            and specified minimum number of iterations.
            </summary>
            <param name="minimumIterationsBelowMaximum">
            The minimum number of iterations for which the residual has to be below the maximum before
            the calculation is considered converged.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.ResidualStopCriterium.#ctor(System.Single,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.ResidualStopCriterium"/> class with the specified 
            maximum residual and minimum number of iterations.
            </summary>
            <param name="maximum">
            The maximum value for the residual below which the calculation is considered converged.
            </param>
            <param name="minimumIterationsBelowMaximum">
            The minimum number of iterations for which the residual has to be below the maximum before
            the calculation is considered converged.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.ResidualStopCriterium.ResetMaximumResidualToDefault">
            <summary>
            Returns the maximum residual to the default.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.ResidualStopCriterium.ResetMinimumIterationsBelowMaximumToDefault">
            <summary>
            Returns the minimum number of iterations to the default.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.ResidualStopCriterium.DetermineStatus(System.Int32,MathNet.Numerics.LinearAlgebra.Single.Vector,MathNet.Numerics.LinearAlgebra.Single.Vector,MathNet.Numerics.LinearAlgebra.Single.Vector)">
            <summary>
            Determines the status of the iterative calculation based on the stop criteria stored
            by the current <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IIterationStopCriterium"/>. Result is set into <c>Status</c> field.
            </summary>
            <param name="iterationNumber">The number of iterations that have passed so far.</param>
            <param name="solutionVector">The vector containing the current solution values.</param>
            <param name="sourceVector">The right hand side vector.</param>
            <param name="residualVector">The vector containing the current residual vectors.</param>
            <remarks>
            The individual stop criteria may internally track the progress of the calculation based
            on the invocation of this method. Therefore this method should only be called if the 
            calculation has moved forwards at least one step.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.ResidualStopCriterium.ComputeStopCriterium(System.Single)">
            <summary>
            Calculate stop criterium
            </summary>
            <param name="solutionNorm">Solution vector norm</param>
            <returns>Criterium value</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.ResidualStopCriterium.SetStatusToDiverged">
            <summary>
            Set status to <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationDiverged"/>
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.ResidualStopCriterium.SetStatusToConverged">
            <summary>
            Set status to <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationConverged"/>
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.ResidualStopCriterium.SetStatusToRunning">
            <summary>
            Set status to <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationRunning"/>
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.ResidualStopCriterium.ResetToPrecalculationState">
            <summary>
            Resets the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IIterationStopCriterium"/> to the pre-calculation state.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.ResidualStopCriterium.Clone">
            <summary>
            Clones the current <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.ResidualStopCriterium"/> and its settings.
            </summary>
            <returns>A new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.ResidualStopCriterium"/> class.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.ResidualStopCriterium.Maximum">
            <summary>
            Gets or sets the maximum value for the residual below which the calculation is considered 
            converged.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <c>Maximum</c> is set to a negative value.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.ResidualStopCriterium.MinimumIterationsBelowMaximum">
            <summary>
            Gets or sets the minimum number of iterations for which the residual has to be
            below the maximum before the calculation is considered converged.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <c>BelowMaximumFor</c> is set to a value less than 1.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.ResidualStopCriterium.Status">
            <summary>
            Gets the current calculation status.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.ResidualStopCriterium.StopLevel">
            <summary>
            Gets the <see cref="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.ResidualStopCriterium.StopLevel"/> which indicates what sort of stop criterium this
            <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.IIterationStopCriterium"/> monitors.
            </summary>
            <value>Returns <see cref="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.StopCriterium.ResidualStopCriterium.StopLevel"/>.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix">
            <summary>
            A Matrix with sparse storage, intended for very large matrices where most of the cells are zero.
            The underlying storage scheme is 3-array compressed-sparse-row (CSR) Format.
            <a href="http://en.wikipedia.org/wiki/Sparse_matrix#Compressed_sparse_row_.28CSR_or_CRS.29">Wikipedia - CSR</a>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.#ctor(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage{System.Single})">
            <summary>
            Create a new sparse matrix straight from an initialized matrix storage instance.
            The storage is used directly without copying.
            Intended for advanced scenarios where you're working directly with
            storage for performance or interop reasons.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.#ctor(System.Int32)">
            <summary>
            Create a new square sparse matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the order is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new sparse matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the row or column count is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.OfMatrix(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Create a new sparse matrix as a copy of the given other matrix.
            This new matrix will be independent from the other matrix.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.OfArray(System.Single[0:,0:])">
            <summary>
            Create a new sparse matrix as a copy of the given two-dimensional array.
            This new matrix will be independent from the provided array.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.OfIndexed(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,System.Int32,System.Single}})">
            <summary>
            Create a new sparse matrix as a copy of the given indexed enumerable.
            Keys must be provided at most once, zero is assumed if a key is omitted.
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.OfRowMajor(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Create a new sparse matrix as a copy of the given enumerable.
            The enumerable is assumed to be in row-major order (row by row).
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the vector.
            </summary>
            <seealso href="http://en.wikipedia.org/wiki/Row-major_order"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.OfColumnMajor(System.Int32,System.Int32,System.Collections.Generic.IList{System.Single})">
            <summary>
            Create a new sparse matrix with the given number of rows and columns as a copy of the given array.
            The array is assumed to be in column-major order (column by column).
            This new matrix will be independent from the provided array.
            A new memory block will be allocated for storing the matrix.
            </summary>
            <seealso href="http://en.wikipedia.org/wiki/Row-major_order"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.OfColumns(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Single}})">
            <summary>
            Create a new sparse matrix as a copy of the given enumerable of enumerable columns.
            Each enumerable in the master enumerable specifies a column.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.OfColumnsCovariant``1(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create a new sparse matrix as a copy of the given enumerable of enumerable columns.
            Each enumerable in the master enumerable specifies a column.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.OfRows(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Single}})">
            <summary>
            Create a new sparse matrix as a copy of the given enumerable of enumerable rows.
            Each enumerable in the master enumerable specifies a row.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.OfRowsCovariant``1(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create a new sparse matrix as a copy of the given enumerable of enumerable rows.
            Each enumerable in the master enumerable specifies a row.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.Create(System.Int32,System.Int32,System.Func{System.Int32,System.Int32,System.Single})">
            <summary>
            Create a new sparse matrix and initialize each value using the provided init function.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.#ctor(System.Int32,System.Int32,System.Single)">
            <summary>
            Create a new sparse matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to the provided value.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the row or column count is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.#ctor(System.Int32,System.Int32,System.Single[])">
            <summary>
            Create a new sparse matrix with the given number of rows and columns as a copy of the given array.
            The array is assumed to be in column-major order (column by column).
            This new matrix will be independent from the provided array.
            A new memory block will be allocated for storing the matrix.
            </summary>
            <seealso href="http://en.wikipedia.org/wiki/Row-major_order"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.#ctor(System.Single[0:,0:])">
            <summary>
            Create a new sparse matrix as a copy of the given two-dimensional array.
            This new matrix will be independent from the provided array.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.#ctor(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Create a new sparse matrix as a copy of the given other matrix.
            This new matrix will be independent from the other matrix.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.CreateMatrix(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a <c>SparseMatrix</c> for the given number of rows and columns.
            </summary>
            <param name="numberOfRows">The number of rows.</param>
            <param name="numberOfColumns">The number of columns.</param>
            <param name="fullyMutable">True if all fields must be mutable (e.g. not a diagonal matrix).</param>
            <returns>
            A <c>SparseMatrix</c> with the given dimensions.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.CreateVector(System.Int32,System.Boolean)">
            <summary>
            Creates a <see cref="T:MathNet.Numerics.LinearAlgebra.Single.SparseVector"/> with a the given dimension.
            </summary>
            <param name="size">The size of the vector.</param>
            <param name="fullyMutable">True if all fields must be mutable.</param>
            <returns>
            A <see cref="T:MathNet.Numerics.LinearAlgebra.Single.SparseVector"/> with the given dimension.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.LowerTriangle">
            <summary>
            Returns a new matrix containing the lower triangle of this matrix.
            </summary>
            <returns>The lower triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.LowerTriangle(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Puts the lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.LowerTriangleImpl(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Puts the lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.UpperTriangle">
            <summary>
            Returns a new matrix containing the upper triangle of this matrix.
            </summary>
            <returns>The upper triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.UpperTriangle(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Puts the upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.UpperTriangleImpl(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Puts the upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.StrictlyLowerTriangle">
            <summary>
            Returns a new matrix containing the lower triangle of this matrix. The new matrix
            does not contain the diagonal elements of this matrix.
            </summary>
            <returns>The lower triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.StrictlyLowerTriangle(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Puts the strictly lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.StrictlyLowerTriangleImpl(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Puts the strictly lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.StrictlyUpperTriangle">
            <summary>
            Returns a new matrix containing the upper triangle of this matrix. The new matrix
            does not contain the diagonal elements of this matrix.
            </summary>
            <returns>The upper triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.StrictlyUpperTriangle(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Puts the strictly upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.StrictlyUpperTriangleImpl(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Puts the strictly upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.Transpose">
            <summary>
            Returns the transpose of this matrix.
            </summary>
            <returns>The transpose of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.FrobeniusNorm">
            <summary>Calculates the Frobenius norm of this matrix.</summary>
            <returns>The Frobenius norm of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.InfinityNorm">
            <summary>Calculates the infinity norm of this matrix.</summary>
            <returns>The infinity norm of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.Identity(System.Int32)">
            <summary>
            Initializes a square <see cref="T:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix"/> with all zero's except for ones on the diagonal.
            </summary>
            <param name="order">the size of the square matrix.</param>
            <returns>Identity <c>SparseMatrix</c></returns>
            <exception cref="T:System.ArgumentException">
            If <paramref name="order"/> is less than one.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.DoAdd(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="other">The matrix to add to this matrix.</param>
            <param name="result">The matrix to store the result of the addition.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.DoSubtract(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="other">The matrix to subtract to this matrix.</param>
            <param name="result">The matrix to store the result of subtraction.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.DoMultiply(System.Single,MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Multiplies each element of the matrix by a scalar and places results into the result matrix.
            </summary>
            <param name="scalar">The scalar to multiply the matrix with.</param>
            <param name="result">The matrix to store the result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Multiplies this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Multiplies this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.DoTransposeAndMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Multiplies this matrix with transpose of another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.DoNegate(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Negate each element of this matrix and place the results into the result matrix.
            </summary>
            <param name="result">The result of the negation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.DoPointwiseMultiply(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Pointwise multiplies this matrix with another matrix and stores the result into the result matrix.
            </summary>
            <param name="other">The matrix to pointwise multiply with this one.</param>
            <param name="result">The matrix to store the result of the pointwise multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.DoPointwiseDivide(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Pointwise divide this matrix by another matrix and stores the result into the result matrix.
            </summary>
            <param name="other">The matrix to pointwise divide this one by.</param>
            <param name="result">The matrix to store the result of the pointwise division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.DoModulus(System.Single,MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Single})">
            <summary>
            Computes the modulus for each element of the matrix.
            </summary>
            <param name="divisor">The divisor to use.</param>
            <param name="result">Matrix to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.IndexedEnumerator">
            <summary>
            Iterates throw each element in the matrix (row-wise).
            </summary>
            <returns>The value at the current iteration along with its position (row, column, value).</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.CheckIfOppositesAreEqual(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks if opposites in a range are equal.
            </summary>
            <param name="start">The start of the range.</param>
            <param name="end">The end of the range.</param>
            <param name="row">The row the row to check.</param>
            <returns>If the values are equal or not.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.op_Addition(MathNet.Numerics.LinearAlgebra.Single.SparseMatrix,MathNet.Numerics.LinearAlgebra.Single.SparseMatrix)">
            <summary>
            Adds two matrices together and returns the results.
            </summary>
            <remarks>This operator will allocate new memory for the result. It will
            choose the representation of either <paramref name="leftSide"/> or <paramref name="rightSide"/> depending on which
            is denser.</remarks>
            <param name="leftSide">The left matrix to add.</param>
            <param name="rightSide">The right matrix to add.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> don't have the same dimensions.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.op_UnaryPlus(MathNet.Numerics.LinearAlgebra.Single.SparseMatrix)">
            <summary>
            Returns a <strong>Matrix</strong> containing the same values of <paramref name="rightSide"/>.
            </summary>
            <param name="rightSide">The matrix to get the values from.</param>
            <returns>A matrix containing a the same values as <paramref name="rightSide"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.op_Subtraction(MathNet.Numerics.LinearAlgebra.Single.SparseMatrix,MathNet.Numerics.LinearAlgebra.Single.SparseMatrix)">
            <summary>
            Subtracts two matrices together and returns the results.
            </summary>
            <remarks>This operator will allocate new memory for the result. It will
            choose the representation of either <paramref name="leftSide"/> or <paramref name="rightSide"/> depending on which
            is denser.</remarks>
            <param name="leftSide">The left matrix to subtract.</param>
            <param name="rightSide">The right matrix to subtract.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> don't have the same dimensions.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.op_UnaryNegation(MathNet.Numerics.LinearAlgebra.Single.SparseMatrix)">
            <summary>
            Negates each element of the matrix.
            </summary>
            <param name="rightSide">The matrix to negate.</param>
            <returns>A matrix containing the negated values.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Single.SparseMatrix,System.Single)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.op_Multiply(System.Single,MathNet.Numerics.LinearAlgebra.Single.SparseMatrix)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Single.SparseMatrix,MathNet.Numerics.LinearAlgebra.Single.SparseMatrix)">
            <summary>
            Multiplies two matrices.
            </summary>
            <remarks>This operator will allocate new memory for the result. It will
            choose the representation of either <paramref name="leftSide"/> or <paramref name="rightSide"/> depending on which
            is denser.</remarks>
            <param name="leftSide">The left matrix to multiply.</param>
            <param name="rightSide">The right matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If the dimensions of <paramref name="leftSide"/> or <paramref name="rightSide"/> don't conform.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Single.SparseMatrix,MathNet.Numerics.LinearAlgebra.Single.SparseVector)">
            <summary>
            Multiplies a <strong>Matrix</strong> and a Vector.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The vector to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Single.SparseVector,MathNet.Numerics.LinearAlgebra.Single.SparseMatrix)">
            <summary>
            Multiplies a Vector and a <strong>Matrix</strong>.
            </summary>
            <param name="leftSide">The vector to multiply.</param>
            <param name="rightSide">The matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.op_Modulus(MathNet.Numerics.LinearAlgebra.Single.SparseMatrix,System.Single)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.NonZerosCount">
            <summary>
            Gets the number of non zero elements in the matrix.
            </summary>
            <value>The number of non zero elements.</value>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.IsSymmetric">
            <summary>
            Gets a value indicating whether this matrix is symmetric.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.SparseVector">
            <summary>
            A vector with sparse storage, intended for very large vectors where most of the cells are zero.
            </summary>
            <remarks>The sparse vector is not thread safe.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.#ctor(MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage{System.Single})">
            <summary>
            Create a new sparse vector straight from an initialized vector storage instance.
            The storage is used directly without copying.
            Intended for advanced scenarios where you're working directly with
            storage for performance or interop reasons.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.#ctor(System.Int32)">
            <summary>
            Create a new sparse vector with the given length.
            All cells of the vector will be initialized to zero.
            Zero-length vectors are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If length is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.OfVector(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Create a new sparse vector as a copy of the given other vector.
            This new vector will be independent from the other vector.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.OfEnumerable(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Create a new sparse vector as a copy of the given enumerable.
            This new vector will be independent from the enumerable.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.OfIndexedEnumerable(System.Int32,System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,System.Single}})">
            <summary>
            Create a new sparse vector as a copy of the given indexed enumerable.
            Keys must be provided at most once, zero is assumed if a key is omitted.
            This new vector will be independent from the enumerable.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.Create(System.Int32,System.Func{System.Int32,System.Single})">
            <summary>
            Create a new sparse vector and initialize each value using the provided init function.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.#ctor(System.Int32,System.Single)">
            <summary>
            Create a new sparse vector with the given length.
            All cells of the vector will be initialized with the provided value.
            Zero-length vectors are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If length is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.#ctor(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Create a new sparse vector as a copy of the given other vector.
            This new vector will be independent from the other vector.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.#ctor(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Create a new sparse vector as a copy of the given enumerable.
            This new vector will be independent from the enumerable.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.CreateMatrix(System.Int32,System.Int32)">
            <summary>
            Creates a matrix with the given dimensions using the same storage type
            as this vector.
            </summary>
            <param name="rows">
            The number of rows.
            </param>
            <param name="columns">
            The number of columns.
            </param>
            <returns>
            A matrix with the given dimensions.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.CreateVector(System.Int32)">
            <summary>
            Creates a <strong>Vector</strong> of the given size using the same storage type
            as this vector.
            </summary>
            <param name="size">
            The size of the <strong>Vector</strong> to create.
            </param>
            <returns>
            The new <c>Vector</c>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.DoAdd(System.Single,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Adds a scalar to each element of the vector and stores the result in the result vector.
            Warning, the new 'sparse vector' with a non-zero scalar added to it will be a 100% filled
            sparse vector and very inefficient. Would be better to work with a dense vector instead.
            </summary>
            <param name="scalar">
            The scalar to add.
            </param>
            <param name="result">
            The vector to store the result of the addition.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.DoAdd(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Adds another vector to this vector and stores the result into the result vector.
            </summary>
            <param name="other">
            The vector to add to this one.
            </param>
            <param name="result">
            The vector to store the result of the addition.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.DoSubtract(System.Single,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Subtracts a scalar from each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">
            The scalar to subtract.
            </param>
            <param name="result">
            The vector to store the result of the subtraction.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.DoSubtract(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Subtracts another vector to this vector and stores the result into the result vector.
            </summary>
            <param name="other">
            The vector to subtract from this one.
            </param>
            <param name="result">
            The vector to store the result of the subtraction.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.DoNegate(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Negates vector and saves result to <paramref name="result"/>
            </summary>
            <param name="result">Target vector</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.DoMultiply(System.Single,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Multiplies a scalar to each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">
            The scalar to multiply.
            </param>
            <param name="result">
            The vector to store the result of the multiplication.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.DoDotProduct(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Computes the dot product between this vector and another vector.
            </summary>
            <param name="other">
            The other vector to add.
            </param>
            <returns>s
            The result of the addition.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.DoModulus(System.Single,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Computes the modulus for each element of the vector for the given divisor.
            </summary>
            <param name="divisor">The divisor to use.</param>
            <param name="result">A vector to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.op_Addition(MathNet.Numerics.LinearAlgebra.Single.SparseVector,MathNet.Numerics.LinearAlgebra.Single.SparseVector)">
            <summary>
            Adds two <strong>Vectors</strong> together and returns the results.
            </summary>
            <param name="leftSide">One of the vectors to add.</param>
            <param name="rightSide">The other vector to add.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.op_UnaryNegation(MathNet.Numerics.LinearAlgebra.Single.SparseVector)">
            <summary>
            Returns a <strong>Vector</strong> containing the negated values of <paramref name="rightSide"/>. 
            </summary>
            <param name="rightSide">The vector to get the values from.</param>
            <returns>A vector containing the negated values as <paramref name="rightSide"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.op_Subtraction(MathNet.Numerics.LinearAlgebra.Single.SparseVector,MathNet.Numerics.LinearAlgebra.Single.SparseVector)">
            <summary>
            Subtracts two <strong>Vectors</strong> and returns the results.
            </summary>
            <param name="leftSide">The vector to subtract from.</param>
            <param name="rightSide">The vector to subtract.</param>
            <returns>The result of the subtraction.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.op_Multiply(MathNet.Numerics.LinearAlgebra.Single.SparseVector,System.Single)">
            <summary>
            Multiplies a vector with a scalar.
            </summary>
            <param name="leftSide">The vector to scale.</param>
            <param name="rightSide">The scalar value.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.op_Multiply(System.Single,MathNet.Numerics.LinearAlgebra.Single.SparseVector)">
            <summary>
            Multiplies a vector with a scalar.
            </summary>
            <param name="leftSide">The scalar value.</param>
            <param name="rightSide">The vector to scale.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.op_Multiply(MathNet.Numerics.LinearAlgebra.Single.SparseVector,MathNet.Numerics.LinearAlgebra.Single.SparseVector)">
            <summary>
            Computes the dot product between two <strong>Vectors</strong>.
            </summary>
            <param name="leftSide">The left row vector.</param>
            <param name="rightSide">The right column vector.</param>
            <returns>The dot product between the two vectors.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.op_Division(MathNet.Numerics.LinearAlgebra.Single.SparseVector,System.Single)">
            <summary>
            Divides a vector with a scalar.
            </summary>
            <param name="leftSide">The vector to divide.</param>
            <param name="rightSide">The scalar value.</param>
            <returns>The result of the division.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.op_Modulus(MathNet.Numerics.LinearAlgebra.Single.SparseVector,System.Single)">
            <summary>
            Computes the modulus of each element of the vector of the given divisor.
            </summary>
            <param name="leftSide">The vector whose elements we want to compute the modulus of.</param>
            <param name="rightSide">The divisor to use,</param>
            <returns>The result of the calculation</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.AbsoluteMinimumIndex">
            <summary>
            Returns the index of the absolute minimum element.
            </summary>
            <returns>The index of absolute minimum element.</returns>   
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.MaximumIndex">
            <summary>
            Returns the index of the absolute maximum element.
            </summary>
            <returns>The index of absolute maximum element.</returns>          
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.MinimumIndex">
            <summary>
            Returns the index of the minimum element.
            </summary>
            <returns>The index of minimum element.</returns>  
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.Sum">
            <summary>
            Computes the sum of the vector's elements.
            </summary>
            <returns>The sum of the vector's elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.SumMagnitudes">
            <summary>
            Computes the sum of the absolute value of the vector's elements.
            </summary>
            <returns>The sum of the absolute value of the vector's elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.DoPointwiseMultiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Pointwise multiplies this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to pointwise multiply with this one.</param>
            <param name="result">The vector to store the result of the pointwise multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.DoPointwiseDivide(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Single})">
            <summary>
            Pointwise multiplies this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to pointwise multiply with this one.</param>
            <param name="result">The vector to store the result of the pointwise multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.OuterProduct(MathNet.Numerics.LinearAlgebra.Single.SparseVector,MathNet.Numerics.LinearAlgebra.Single.SparseVector)">
            <summary>
            Outer product of two vectors
            </summary>
            <param name="u">First vector</param>
            <param name="v">Second vector</param>
            <returns>Matrix M[i,j] = u[i]*v[j] </returns>
            <exception cref="T:System.ArgumentNullException">If the u vector is <see langword="null"/>.</exception> 
            <exception cref="T:System.ArgumentNullException">If the v vector is <see langword="null"/>.</exception> 
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.OuterProduct(MathNet.Numerics.LinearAlgebra.Single.SparseVector)">
            <summary>
            Outer product of this and another vector.
            </summary>
            <param name="v">The vector to operate on.</param>
            <returns>
            Matrix M[i,j] = this[i] * v[j].
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.Norm(System.Double)">
            <summary>
            Computes the p-Norm.
            </summary>
            <param name="p">The p value.</param>
            <returns>Scalar <c>ret = (sum(abs(this[i])^p))^(1/p)</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.Parse(System.String)">
            <summary>
            Creates a float sparse vector based on a string. The string can be in the following formats (without the
            quotes): 'n', 'n,n,..', '(n,n,..)', '[n,n,...]', where n is a float.
            </summary>
            <returns>
            A float sparse vector containing the values specified by the given string.
            </returns>
            <param name="value">
            The string to parse.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates a float sparse vector based on a string. The string can be in the following formats (without the
            quotes): 'n', 'n,n,..', '(n,n,..)', '[n,n,...]', where n is a float.
            </summary>
            <returns>
            A float sparse vector containing the values specified by the given string.
            </returns>
            <param name="value">
            the string to parse.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.TryParse(System.String,MathNet.Numerics.LinearAlgebra.Single.SparseVector@)">
            <summary>
            Converts the string representation of a real sparse vector to float-precision sparse vector equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing a real vector to convert.
            </param>
            <param name="result">
            The parsed value.
            </param>
            <returns>
            If the conversion succeeds, the result will contain a complex number equivalent to value.
            Otherwise the result will be <c>null</c>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.TryParse(System.String,System.IFormatProvider,MathNet.Numerics.LinearAlgebra.Single.SparseVector@)">
            <summary>
            Converts the string representation of a real sparse vector to float-precision sparse vector equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing a real vector to convert.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about value.
            </param>
            <param name="result">
            The parsed value.
            </param>
            <returns>
            If the conversion succeeds, the result will contain a complex number equivalent to value.
            Otherwise the result will be <c>null</c>.
            </returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.SparseVector.NonZerosCount">
            <summary>
            Gets the number of non zero elements in the vector.
            </summary>
            <value>The number of non zero elements.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseCholesky">
            <summary>
            <para>A class which encapsulates the functionality of a Cholesky factorization for dense matrices.</para>
            <para>For a symmetric, positive definite matrix A, the Cholesky factorization
            is an lower triangular matrix L so that A = L*L'.</para>
            </summary>
            <remarks>
            The computation of the Cholesky factorization is done at construction time. If the matrix is not symmetric
            or positive definite, the constructor will throw an exception.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseCholesky.#ctor(MathNet.Numerics.LinearAlgebra.Double.DenseMatrix)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseCholesky"/> class. This object will compute the
            Cholesky factorization when the constructor is called and cache it's factorization.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not positive definite.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseCholesky.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A Cholesky factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseCholesky.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A Cholesky factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseLU">
            <summary>
            <para>A class which encapsulates the functionality of an LU factorization.</para>
            <para>For a matrix A, the LU factorization is a pair of lower triangular matrix L and
            upper triangular matrix U so that A = L*U.</para>
            </summary>
            <remarks>
            The computation of the LU factorization is done at construction time.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseLU.#ctor(MathNet.Numerics.LinearAlgebra.Double.DenseMatrix)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseLU"/> class. This object will compute the
            LU factorization when the constructor is called and cache it's factorization.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseLU.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Solves a system of linear equations, <c>AX = B</c>, with A LU factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <c>B</c>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <c>X</c>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseLU.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Solves a system of linear equations, <c>Ax = b</c>, with A LU factorized.
            </summary>
            <param name="input">The right hand side vector, <c>b</c>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <c>x</c>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseLU.Inverse">
            <summary>
            Returns the inverse of this matrix. The inverse is calculated using LU decomposition.
            </summary>
            <returns>The inverse of this matrix.</returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseQR">
            <summary>
            <para>A class which encapsulates the functionality of the QR decomposition.</para>
            <para>Any real square matrix A may be decomposed as A = QR where Q is an orthogonal matrix 
            (its columns are orthogonal unit vectors meaning QTQ = I) and R is an upper triangular matrix 
            (also called right triangular matrix).</para>
            </summary>
            <remarks>
            The computation of the QR decomposition is done at construction time by Householder transformation.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseQR.#ctor(MathNet.Numerics.LinearAlgebra.Double.DenseMatrix,MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseQR"/> class. This object will compute the
            QR factorization when the constructor is called and cache it's factorization.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <param name="method">The type of QR factorization to perform.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> row count is less then column count</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseQR.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseQR.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseQR.Tau">
            <summary>
             Gets or sets Tau vector. Contains additional information on Q - used for native solver.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseSvd">
            <summary>
            <para>A class which encapsulates the functionality of the singular value decomposition (SVD) for <see cref="T:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix"/>.</para>
            <para>Suppose M is an m-by-n matrix whose entries are real numbers. 
            Then there exists a factorization of the form M = UΣVT where:
            - U is an m-by-m unitary matrix;
            - Σ is m-by-n diagonal matrix with nonnegative real numbers on the diagonal;
            - VT denotes transpose of V, an n-by-n unitary matrix; 
            Such a factorization is called a singular-value decomposition of M. A common convention is to order the diagonal 
            entries Σ(i,i) in descending order. In this case, the diagonal matrix Σ is uniquely determined 
            by M (though the matrices U and V are not). The diagonal entries of Σ are known as the singular values of M.</para>
            </summary>
            <remarks>
            The computation of the singular value decomposition is done at construction time.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseSvd.#ctor(MathNet.Numerics.LinearAlgebra.Double.DenseMatrix,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseSvd"/> class. This object will compute the
            the singular value decomposition when the constructor is called and cache it's decomposition.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <param name="computeVectors">Compute the singular U and VT vectors or not.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If SVD algorithm failed to converge with matrix <paramref name="matrix"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseSvd.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseSvd.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserGramSchmidt">
            <summary>
            <para>A class which encapsulates the functionality of the QR decomposition Modified Gram-Schmidt Orthogonalization.</para>
            <para>Any real square matrix A may be decomposed as A = QR where Q is an orthogonal mxn matrix and R is an nxn upper triangular matrix.</para>
            </summary>
            <remarks>
            The computation of the QR decomposition is done at construction time by modified Gram-Schmidt Orthogonalization.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserGramSchmidt.#ctor(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserGramSchmidt"/> class. This object creates an orthogonal matrix 
            using the modified Gram-Schmidt method.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> row count is less then column count</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is rank deficient</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserGramSchmidt.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserGramSchmidt.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod">
            <summary>
            The type of QR factorization go perform.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod.Full">
            <summary>
            Compute the full QR factorization of a matrix.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod.Thin">
            <summary>
            Compute the thin QR factorixation of a matrix.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserCholesky">
            <summary>
            <para>A class which encapsulates the functionality of a Cholesky factorization for user matrices.</para>
            <para>For a symmetric, positive definite matrix A, the Cholesky factorization
            is an lower triangular matrix L so that A = L*L'.</para>
            </summary>
            <remarks>
            The computation of the Cholesky factorization is done at construction time. If the matrix is not symmetric
            or positive definite, the constructor will throw an exception.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserCholesky.#ctor(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserCholesky"/> class. This object will compute the
            Cholesky factorization when the constructor is called and cache it's factorization.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not positive definite.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserCholesky.DoCholeskyStep(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},System.Int32,System.Int32,System.Int32,System.Double[],System.Int32)">
            <summary>
            Calculate Cholesky step
            </summary>
            <param name="data">Factor matrix</param>
            <param name="rowDim">Number of rows</param>
            <param name="firstCol">Column start</param>
            <param name="colLimit">Total columns</param>
            <param name="multipliers">Multipliers calculated previously</param>
            <param name="availableCores">Number of available processors</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserCholesky.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A Cholesky factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserCholesky.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A Cholesky factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserLU">
            <summary>
            <para>A class which encapsulates the functionality of an LU factorization.</para>
            <para>For a matrix A, the LU factorization is a pair of lower triangular matrix L and
            upper triangular matrix U so that A = L*U.</para>
            </summary>
            <remarks>
            The computation of the LU factorization is done at construction time.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserLU.#ctor(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserLU"/> class. This object will compute the
            LU factorization when the constructor is called and cache it's factorization.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserLU.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Solves a system of linear equations, <c>AX = B</c>, with A LU factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <c>B</c>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <c>X</c>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserLU.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Solves a system of linear equations, <c>Ax = b</c>, with A LU factorized.
            </summary>
            <param name="input">The right hand side vector, <c>b</c>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <c>x</c>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserLU.Inverse">
            <summary>
            Returns the inverse of this matrix. The inverse is calculated using LU decomposition.
            </summary>
            <returns>The inverse of this matrix.</returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserQR">
            <summary>
            <para>A class which encapsulates the functionality of the QR decomposition.</para>
            <para>Any real square matrix A may be decomposed as A = QR where Q is an orthogonal matrix 
            (its columns are orthogonal unit vectors meaning QTQ = I) and R is an upper triangular matrix 
            (also called right triangular matrix).</para>
            </summary>
            <remarks>
            The computation of the QR decomposition is done at construction time by Householder transformation.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserQR.#ctor(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Factorization.QRMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserQR"/> class. This object will compute the
            QR factorization when the constructor is called and cache it's factorization.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <param name="method">The QR factorization method to use.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserQR.GenerateColumn(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},System.Int32,System.Int32)">
            <summary>
            Generate column from initial matrix to work array
            </summary>
            <param name="a">Initial matrix</param>
            <param name="row">The first row</param>
            <param name="column">Column index</param>
            <returns>Generated vector</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserQR.ComputeQR(System.Double[],MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Perform calculation of Q or R
            </summary>
            <param name="u">Work array</param>
            <param name="a">Q or R matrices</param>
            <param name="rowStart">The first row</param>
            <param name="rowDim">The last row</param>
            <param name="columnStart">The first column</param>
            <param name="columnDim">The last column</param>
            <param name="availableCores">Number of available CPUs</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserQR.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserQR.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd">
            <summary>
            <para>A class which encapsulates the functionality of the singular value decomposition (SVD) for <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>.</para>
            <para>Suppose M is an m-by-n matrix whose entries are real numbers. 
            Then there exists a factorization of the form M = UΣVT where:
            - U is an m-by-m unitary matrix;
            - Σ is m-by-n diagonal matrix with nonnegative real numbers on the diagonal;
            - VT denotes transpose of V, an n-by-n unitary matrix; 
            Such a factorization is called a singular-value decomposition of M. A common convention is to order the diagonal 
            entries Σ(i,i) in descending order. In this case, the diagonal matrix Σ is uniquely determined 
            by M (though the matrices U and V are not). The diagonal entries of Σ are known as the singular values of M.</para>
            </summary>
            <remarks>
            The computation of the singular value decomposition is done at construction time.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.#ctor(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd"/> class. This object will compute the
            the singular value decomposition when the constructor is called and cache it's decomposition.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <param name="computeVectors">Compute the singular U and VT vectors or not.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:MathNet.Numerics.NonConvergenceException"></exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.Dsign(System.Double,System.Double)">
            <summary>
            Calculates absolute value of <paramref name="z1"/> multiplied on signum function of <paramref name="z2"/>
            </summary>
            <param name="z1">Double value z1</param>
            <param name="z2">Double value z2</param>
            <returns>Result multiplication of signum function and absolute value</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.Dswap(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},System.Int32,System.Int32,System.Int32)">
            <summary>
            Swap column  <paramref name="columnA"/>  and  <paramref name="columnB"/>
            </summary>
            <param name="a">Source matrix</param>
            <param name="rowCount">The number of rows in <paramref name="a"/></param>
            <param name="columnA">Column A index to swap</param>
            <param name="columnB">Column B index to swap</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.DscalColumn(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Scale column <paramref name="column"/> by <paramref name="z"/> starting from row <paramref name="rowStart"/>
            </summary>
            <param name="a">Source matrix</param>
            <param name="rowCount">The number of rows in <paramref name="a"/> </param>
            <param name="column">Column to scale</param>
            <param name="rowStart">Row to scale from</param>
            <param name="z">Scale value</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.DscalVector(System.Double[],System.Int32,System.Double)">
            <summary>
            Scale vector <paramref name="a"/> by <paramref name="z"/> starting from index <paramref name="start"/>
            </summary>
            <param name="a">Source vector</param>
            <param name="start">Row to scale from</param>
            <param name="z">Scale value</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.Drotg(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Given the Cartesian coordinates (da, db) of a point p, these fucntion return the parameters da, db, c, and s 
            associated with the Givens rotation that zeros the y-coordinate of the point.
            </summary>
            <param name="da">Provides the x-coordinate of the point p. On exit contains the parameter r associated with the Givens rotation</param>
            <param name="db">Provides the y-coordinate of the point p. On exit contains the parameter z associated with the Givens rotation</param>
            <param name="c">Contains the parameter c associated with the Givens rotation</param>
            <param name="s">Contains the parameter s associated with the Givens rotation</param>
            <remarks>This is equivalent to the DROTG LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.Dnrm2Column(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculate Norm 2 of the column <paramref name="column"/> in matrix <paramref name="a"/> starting from row <paramref name="rowStart"/>
            </summary>
            <param name="a">Source matrix</param>
            <param name="rowCount">The number of rows in <paramref name="a"/></param>
            <param name="column">Column index</param>
            <param name="rowStart">Start row index</param>
            <returns>Norm2 (Euclidean norm) of the column</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.Dnrm2Vector(System.Double[],System.Int32)">
            <summary>
            Calculate Norm 2 of the vector <paramref name="a"/> starting from index <paramref name="rowStart"/>
            </summary>
            <param name="a">Source vector</param>
            <param name="rowStart">Start index</param>
            <returns>Norm2 (Euclidean norm) of the vector</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.Ddot(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculate dot product of <paramref name="columnA"/> and <paramref name="columnB"/>
            </summary>
            <param name="a">Source matrix</param>
            <param name="rowCount">The number of rows in <paramref name="a"/></param>
            <param name="columnA">Index of column A</param>
            <param name="columnB">Index of column B</param>
            <param name="rowStart">Starting row index</param>
            <returns>Dot product value</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.Drot(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Performs rotation of points in the plane. Given two vectors x <paramref name="columnA"/> and y <paramref name="columnB"/>, 
            each vector element of these vectors is replaced as follows: x(i) = c*x(i) + s*y(i); y(i) = c*y(i) - s*x(i)
            </summary>
            <param name="a">Source matrix</param>
            <param name="rowCount">The number of rows in <paramref name="a"/></param>
            <param name="columnA">Index of column A</param>
            <param name="columnB">Index of column B</param>
            <param name="c">Scalar "c" value</param>
            <param name="s">Scalar "s" value</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.Solve(MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Matrix{System.Double})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.Solve(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.BiCgStab">
            <summary>
            A Bi-Conjugate Gradient stabilized iterative matrix solver.
            </summary>
            <remarks>
            <para>
            The Bi-Conjugate Gradient Stabilized (BiCGStab) solver is an 'improvement'
            of the standard Conjugate Gradient (CG) solver. Unlike the CG solver the
            BiCGStab can be used on non-symmetric matrices. <br/>
            Note that much of the success of the solver depends on the selection of the
            proper preconditioner.
            </para>
            <para>
            The Bi-CGSTAB algorithm was taken from: <br/>
            Templates for the solution of linear systems: Building blocks
            for iterative methods
            <br/>
            Richard Barrett, Michael Berry, Tony F. Chan, James Demmel,
            June M. Donato, Jack Dongarra, Victor Eijkhout, Roldan Pozo,
            Charles Romine and Henk van der Vorst
            <br/>
            Url: <a href="http://www.netlib.org/templates/Templates.html">http://www.netlib.org/templates/Templates.html</a>
            <br/>
            Algorithm is described in Chapter 2, section 2.3.8, page 27
            </para>
            <para>
            The example code below provides an indication of the possible use of the
            solver.
            </para>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.BiCgStab.DefaultStatus">
            <summary>
            The status used if there is no status, i.e. the solver hasn't run yet and there is no
            iterator.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.BiCgStab._preconditioner">
            <summary>
            The preconditioner that will be used. Can be set to <see langword="null" />, in which case the default
            pre-conditioner will be used.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.BiCgStab._iterator">
            <summary>
            The iterative process controller.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.BiCgStab._hasBeenStopped">
            <summary>
            Indicates if the user has stopped the solver.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.BiCgStab.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.BiCgStab"/> class.
            </summary>
            <remarks>
            When using this constructor the solver will use the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator"/> with
            the standard settings and a default preconditioner.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.BiCgStab.#ctor(MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.BiCgStab"/> class.
            </summary>
            <remarks>
            <para>
            When using this constructor the solver will use a default preconditioner.
            </para>
            <para>
            The main advantages of using a user defined <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator"/> are:
            <list type="number">
            <item>It is possible to set the desired convergence limits.</item>
            <item>
            It is possible to check the reason for which the solver finished 
            the iterative procedure by calling the <see cref="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator.Status"/> property.
            </item>
            </list>
            </para>
            </remarks>
            <param name="iterator">The <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator"/> that will be used to monitor the iterative process. </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.BiCgStab.#ctor(MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.IPreConditioner)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.BiCgStab"/> class.
            </summary>
            <remarks>
            When using this constructor the solver will use the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator"/> with
            the standard settings.
            </remarks>
            <param name="preconditioner">The <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the matrix equation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.BiCgStab.#ctor(MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.IPreConditioner,MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.BiCgStab"/> class.
            </summary>
            <remarks>
            <para>
            The main advantages of using a user defined <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator"/> are:
            <list type="number">
            <item>It is possible to set the desired convergence limits.</item>
            <item>
            It is possible to check the reason for which the solver finished 
            the iterative procedure by calling the <see cref="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator.Status"/> property.
            </item>
            </list>
            </para>
            </remarks>
            <param name="preconditioner">The <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the matrix equation. </param>
            <param name="iterator">The <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator"/> that will be used to monitor the iterative process. </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.BiCgStab.SetPreconditioner(MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.IPreConditioner)">
            <summary>
            Sets the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the iterative process.
            </summary>
            <param name="preconditioner">The preconditioner.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.BiCgStab.SetIterator(MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator)">
            <summary>
            Sets the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator"/> that will be used to track the iterative process.
            </summary>
            <param name="iterator">The iterator.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.BiCgStab.StopSolve">
            <summary>
            Stops the solve process. 
            </summary>
            <remarks>
            It may take an indetermined amount of time for the solver to actually stop the process.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.BiCgStab.Solve(MathNet.Numerics.LinearAlgebra.Double.Matrix,MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Matrix"/>, <c>A</c>.</param>
            <param name="vector">The solution <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/>, <c>b</c>.</param>
            <returns>The result <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/>, <c>x</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.BiCgStab.Solve(MathNet.Numerics.LinearAlgebra.Double.Matrix,MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Matrix"/>, <c>A</c>.</param>
            <param name="input">The solution <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/>, <c>b</c>.</param>
            <param name="result">The result <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/>, <c>x</c>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.BiCgStab.CalculateTrueResidual(MathNet.Numerics.LinearAlgebra.Double.Matrix,MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Calculates the <c>true</c> residual of the matrix equation Ax = b according to: residual = b - Ax
            </summary>
            <param name="matrix">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Matrix"/> A.</param>
            <param name="residual">Residual values in <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/>.</param>
            <param name="x">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/> x.</param>
            <param name="b">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/> b.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.BiCgStab.ShouldContinue(System.Int32,MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Determine if calculation should continue
            </summary>
            <param name="iterationNumber">Number of iterations passed</param>
            <param name="result">Result <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/>.</param>
            <param name="source">Source <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/>.</param>
            <param name="residuals">Residual <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/>.</param>
            <returns><c>true</c> if continue, otherwise <c>false</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.BiCgStab.Solve(MathNet.Numerics.LinearAlgebra.Double.Matrix,MathNet.Numerics.LinearAlgebra.Double.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Matrix"/>, <c>A</c>.</param>
            <param name="input">The solution <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Matrix"/>, <c>B</c>.</param>
            <returns>The result <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Matrix"/>, <c>X</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.BiCgStab.Solve(MathNet.Numerics.LinearAlgebra.Double.Matrix,MathNet.Numerics.LinearAlgebra.Double.Matrix,MathNet.Numerics.LinearAlgebra.Double.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Matrix"/>, <c>A</c>.</param>
            <param name="input">The solution <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Matrix"/>, <c>B</c>.</param>
            <param name="result">The result <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Matrix"/>, <c>X</c></param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.BiCgStab.IterationResult">
            <summary>
            Gets the status of the iteration once the calculation is finished.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.CompositeSolver">
            <summary>
            A composite matrix solver. The actual solver is made by a sequence of
            matrix solvers. 
            </summary>
            <remarks>
            <para>
            Solver based on:<br />
            Faster PDE-based simulations using robust composite linear solvers<br />
            S. Bhowmicka, P. Raghavan a,*, L. McInnes b, B. Norris<br />
            Future Generation Computer Systems, Vol 20, 2004, pp 373–387<br />
            </para>
            <para>
            Note that if an iterator is passed to this solver it will be used for all the sub-solvers.
            </para>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.CompositeSolver.NonRunningStatus">
            <summary>
            The default status used if the solver is not running.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.CompositeSolver.RunningStatus">
            <summary>
            The default status used if the solver is running.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.CompositeSolver.SolverSetups">
            <summary>
            The collection of iterative solver setups. Stored based on the
            ratio between the relative speed and relative accuracy.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.CompositeSolver.LoadSolverInformation">
            <summary>
            Loads all the available <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterativeSolverSetup"/> objects from the MathNet.Numerics assembly.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.CompositeSolver.LoadSolverInformation(System.Type[])">
            <summary>
            Loads the available <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterativeSolverSetup"/> objects from the MathNet.Numerics assembly.
            </summary>
            <param name="typesToExclude">The <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterativeSolver"/> types that should not be loaded.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.CompositeSolver.LoadSolverInformationFromAssembly(System.String)">
            <summary>
            Loads the available <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterativeSolverSetup"/> objects from the assembly specified by the file location.
            </summary>
            <param name="assemblyLocation">The fully qualified path to the assembly.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.CompositeSolver.LoadSolverInformationFromAssembly(System.String,System.Type[])">
            <summary>
            Loads the available <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterativeSolverSetup"/> objects from the assembly specified by the file location.
            </summary>
            <param name="assemblyLocation">The fully qualified path to the assembly.</param>
            <param name="typesToExclude">The <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterativeSolver"/> types that should not be loaded. </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.CompositeSolver.LoadSolverInformationFromAssembly(System.Reflection.AssemblyName)">
            <summary>
            Loads the available <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterativeSolverSetup"/> objects from the assembly specified by the assembly name.
            </summary>
            <param name="assemblyName">The <see cref="T:System.Reflection.AssemblyName"/> of the assembly that should be searched for setup objects. </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.CompositeSolver.LoadSolverInformationFromAssembly(System.Reflection.AssemblyName,System.Type[])">
            <summary>
            Loads the available <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterativeSolverSetup"/> objects from the assembly specified by the assembly name.
            </summary>
            <param name="assemblyName">The <see cref="T:System.Reflection.AssemblyName"/> of the assembly that should be searched for setup objects.</param>
            <param name="typesToExclude">The <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterativeSolver"/> types that should not be loaded.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.CompositeSolver.LoadSolverInformationFromAssembly(System.Type)">
            <summary>
            Loads the available <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterativeSolverSetup"/> objects from the assembly specified by the type.
            </summary>
            <param name="typeInAssembly">The type in the assembly which should be searched for setup objects.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.CompositeSolver.LoadSolverInformationFromAssembly(System.Type,System.Type[])">
            <summary>
            Loads the available <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterativeSolverSetup"/> objects from the assembly specified by the type.
            </summary>
            <param name="typeInAssembly">The type in the assembly which should be searched for setup objects.</param>
            <param name="typesToExclude">The <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterativeSolver"/> types that should not be loaded.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.CompositeSolver.LoadSolverInformationFromAssembly(System.Reflection.Assembly)">
            <summary>
            Loads the available <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterativeSolverSetup"/> objects from the specified assembly.
            </summary>
            <param name="assembly">The assembly which will be searched for setup objects.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.CompositeSolver.LoadSolverInformationFromAssembly(System.Reflection.Assembly,System.Type[])">
            <summary>
            Loads the available <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterativeSolverSetup"/> objects from the specified assembly.
            </summary>
            <param name="assembly">The assembly which will be searched for setup objects.</param>
            <param name="typesToExclude">The <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterativeSolver"/> types that should not be loaded.</param>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.CompositeSolver._solvers">
            <summary>
            The collection of solvers that will be used to 
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.CompositeSolver._status">
            <summary>
            The status of the calculation.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.CompositeSolver._iterator">
            <summary>
            The iterator that is used to control the iteration process.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.CompositeSolver._hasBeenStopped">
            <summary>
            A flag indicating if the solver has been stopped or not.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.CompositeSolver._currentSolver">
            <summary>
            The solver that is currently running. Reference is used to be able to stop the
            solver if the user cancels the solve process.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.CompositeSolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.CompositeSolver"/> class with the default iterator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.CompositeSolver.#ctor(MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.CompositeSolver"/> class with the specified iterator.
            </summary>
            <param name="iterator">The iterator that will be used to control the iteration process. </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.CompositeSolver.SetIterator(MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator)">
            <summary>
            Sets the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator"/> that will be used to track the iterative process.
            </summary>
            <param name="iterator">The iterator.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.CompositeSolver.StopSolve">
            <summary>
            Stops the solve process. 
            </summary>
            <remarks>
            Note that it may take an indetermined amount of time for the solver to actually stop the process.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.CompositeSolver.Solve(MathNet.Numerics.LinearAlgebra.Double.Matrix,MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="vector">The solution vector, <c>b</c>.</param>
            <returns>The result vector, <c>x</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.CompositeSolver.Solve(MathNet.Numerics.LinearAlgebra.Double.Matrix,MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution vector, <c>b</c></param>
            <param name="result">The result vector, <c>x</c></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.CompositeSolver.LoadSolvers">
            <summary>
            Load solvers
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.CompositeSolver.Solve(MathNet.Numerics.LinearAlgebra.Double.Matrix,MathNet.Numerics.LinearAlgebra.Double.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <returns>The result matrix, <c>X</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.CompositeSolver.Solve(MathNet.Numerics.LinearAlgebra.Double.Matrix,MathNet.Numerics.LinearAlgebra.Double.Matrix,MathNet.Numerics.LinearAlgebra.Double.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <param name="result">The result matrix, <c>X</c></param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.CompositeSolver.IterationResult">
            <summary>
            Gets the status of the iteration once the calculation is finished.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.CompositeSolver.DoubleComparer">
            <summary>
            An <c>IComparer</c> used to compare double precision floating points.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.CompositeSolver.DoubleComparer.Compare(System.Double,System.Double)">
            <summary>
            Compares two double values based on the selected comparison method.
            </summary>
            <param name="x">The first double to compare.</param>
            <param name="y">The second double to compare.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return 
            value has the following meanings: 
            Value Meaning Less than zero This object is less than the other parameter.
            Zero This object is equal to other. 
            Greater than zero This object is greater than other. 
            </returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.GpBiCg">
            <summary>
            A Generalized Product Bi-Conjugate Gradient iterative matrix solver.
            </summary>
            <remarks>
            <para>
            The Generalized Product Bi-Conjugate Gradient (GPBiCG) solver is an 
            alternative version of the Bi-Conjugate Gradient stabilized (CG) solver.
            Unlike the CG solver the GPBiCG solver can be used on 
            non-symmetric matrices. <br/>
            Note that much of the success of the solver depends on the selection of the
            proper preconditioner.
            </para>
            <para>
            The GPBiCG algorithm was taken from: <br/>
            GPBiCG(m,l): A hybrid of BiCGSTAB and GPBiCG methods with 
            efficiency and robustness
            <br/>
            S. Fujino
            <br/>
            Applied Numerical Mathematics, Volume 41, 2002, pp 107 - 117
            <br/>
            </para>
            <para>
            The example code below provides an indication of the possible use of the
            solver.
            </para>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.GpBiCg.DefaultStatus">
            <summary>
            The status used if there is no status, i.e. the solver hasn't run yet and there is no
            iterator.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.GpBiCg._preconditioner">
            <summary>
            The preconditioner that will be used. Can be set to <c>null</c>, in which case the default
            pre-conditioner will be used.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.GpBiCg._iterator">
            <summary>
            The iterative process controller.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.GpBiCg._numberOfBiCgStabSteps">
            <summary>
            Indicates the number of <c>BiCGStab</c> steps should be taken 
            before switching.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.GpBiCg._numberOfGpbiCgSteps">
            <summary>
            Indicates the number of <c>GPBiCG</c> steps should be taken 
            before switching.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.GpBiCg._hasBeenStopped">
            <summary>
            Indicates if the user has stopped the solver.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.GpBiCg.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.GpBiCg"/> class.
            </summary>
            <remarks>
            When using this constructor the solver will use the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator"/> with
            the standard settings and a default preconditioner.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.GpBiCg.#ctor(MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.GpBiCg"/> class.
            </summary>
            <remarks>
            <para>
            When using this constructor the solver will use a default preconditioner.
            </para>
            <para>
            The main advantages of using a user defined <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator"/> are:
            <list type="number">
            <item>It is possible to set the desired convergence limits.</item>
            <item>
            It is possible to check the reason for which the solver finished 
            the iterative procedure by calling the <see cref="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator.Status"/> property.
            </item>
            </list>
            </para>
            </remarks>
            <param name="iterator">The <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator"/> that will be used to monitor the iterative process.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.GpBiCg.#ctor(MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.IPreConditioner)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.GpBiCg"/> class.
            </summary>
            <remarks>
            When using this constructor the solver will use the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator"/> with
            the standard settings.
            </remarks>
            <param name="preconditioner">The <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the matrix equation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.GpBiCg.#ctor(MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.IPreConditioner,MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.GpBiCg"/> class.
            </summary>
            <remarks>
            <para>
            The main advantages of using a user defined <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator"/> are:
            <list type="number">
            <item>It is possible to set the desired convergence limits.</item>
            <item>
            It is possible to check the reason for which the solver finished 
            the iterative procedure by calling the <see cref="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator.Status"/> property.
            </item>
            </list>
            </para>
            </remarks>
            <param name="preconditioner">The <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the matrix equation.</param>
            <param name="iterator">The <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator"/> that will be used to monitor the iterative process.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.GpBiCg.SetPreconditioner(MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.IPreConditioner)">
            <summary>
            Sets the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the iterative process.
            </summary>
            <param name="preconditioner">The preconditioner.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.GpBiCg.SetIterator(MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator)">
            <summary>
            Sets the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator"/> that will be used to track the iterative process.
            </summary>
            <param name="iterator">The iterator.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.GpBiCg.StopSolve">
            <summary>
            Stops the solve process. 
            </summary>
            <remarks>
            Note that it may take an indetermined amount of time for the solver to actually
            stop the process.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.GpBiCg.Solve(MathNet.Numerics.LinearAlgebra.Double.Matrix,MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="vector">The solution vector, <c>b</c>.</param>
            <returns>The result vector, <c>x</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.GpBiCg.Solve(MathNet.Numerics.LinearAlgebra.Double.Matrix,MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution vector, <c>b</c></param>
            <param name="result">The result vector, <c>x</c></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.GpBiCg.CalculateTrueResidual(MathNet.Numerics.LinearAlgebra.Double.Matrix,MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Calculates the true residual of the matrix equation Ax = b according to: residual = b - Ax
            </summary>
            <param name="matrix">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Matrix"/> A.</param>
            <param name="residual">Residual values in <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/>.</param>
            <param name="x">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/> x.</param>
            <param name="b">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/> b.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.GpBiCg.ShouldContinue(System.Int32,MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Determine if calculation should continue
            </summary>
            <param name="iterationNumber">Number of iterations passed</param>
            <param name="result">Result <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/>.</param>
            <param name="source">Source <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/>.</param>
            <param name="residuals">Residual <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/>.</param>
            <returns><c>true</c> if continue, otherwise <c>false</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.GpBiCg.ShouldRunBiCgStabSteps(System.Int32)">
            <summary>
            Decide if to do steps with BiCgStab
            </summary>
            <param name="iterationNumber">Number of iteration</param>
            <returns><c>true</c> if yes, otherwise <c>false</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.GpBiCg.Solve(MathNet.Numerics.LinearAlgebra.Double.Matrix,MathNet.Numerics.LinearAlgebra.Double.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <returns>The result matrix, <c>X</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.GpBiCg.Solve(MathNet.Numerics.LinearAlgebra.Double.Matrix,MathNet.Numerics.LinearAlgebra.Double.Matrix,MathNet.Numerics.LinearAlgebra.Double.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <param name="result">The result matrix, <c>X</c></param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.GpBiCg.NumberOfBiCgStabSteps">
            <summary>
            Gets or sets the number of steps taken with the <c>BiCgStab</c> algorithm
            before switching over to the <c>GPBiCG</c> algorithm.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.GpBiCg.NumberOfGpBiCgSteps">
            <summary>
            Gets or sets the number of steps taken with the <c>GPBiCG</c> algorithm
            before switching over to the <c>BiCgStab</c> algorithm.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.GpBiCg.IterationResult">
            <summary>
            Gets the status of the iteration once the calculation is finished.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.MlkBiCgStab">
            <summary>
            A Multiple-Lanczos Bi-Conjugate Gradient stabilized iterative matrix solver.
            </summary>
            <remarks>
            <para>
            The Multiple-Lanczos Bi-Conjugate Gradient stabilized (ML(k)-BiCGStab) solver is an 'improvement'
            of the standard BiCgStab solver. 
            </para>
            <para>
            The algorithm was taken from: <br/>
            ML(k)BiCGSTAB: A BiCGSTAB variant based on multiple Lanczos starting vectors
            <br/>
            Man-chung Yeung and Tony F. Chan
            <br/>
            SIAM Journal of Scientific Computing
            <br/>
            Volume 21, Number 4, pp. 1263 - 1290
            </para>
            <para>
            The example code below provides an indication of the possible use of the
            solver.
            </para>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.MlkBiCgStab.DefaultNumberOfStartingVectors">
            <summary>
            The default number of starting vectors.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.MlkBiCgStab.DefaultStatus">
            <summary>
            The status used if there is no status, i.e. the solver hasn't run yet and there is no
            iterator.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.MlkBiCgStab._preconditioner">
            <summary>
            The preconditioner that will be used. Can be set to <see langword="null" />, in which case the default
            pre-conditioner will be used.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.MlkBiCgStab._iterator">
            <summary>
            The iterative process controller.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.MlkBiCgStab._startingVectors">
            <summary>
            The collection of starting vectors which are used as the basis for the Krylov sub-space.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.MlkBiCgStab._numberOfStartingVectors">
            <summary>
            The number of starting vectors used by the algorithm
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.MlkBiCgStab._hasBeenStopped">
            <summary>
            Indicates if the user has stopped the solver.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.MlkBiCgStab.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.MlkBiCgStab"/> class.
            </summary>
            <remarks>
            When using this constructor the solver will use the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator"/> with
            the standard settings and a default preconditioner.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.MlkBiCgStab.#ctor(MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.MlkBiCgStab"/> class.
            </summary>
            <remarks>
            <para>
            When using this constructor the solver will use a default preconditioner.
            </para>
            <para>
            The main advantages of using a user defined <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator"/> are:
            <list type="number">
            <item>It is possible to set the desired convergence limits.</item>
            <item>
            It is possible to check the reason for which the solver finished 
            the iterative procedure by calling the <see cref="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator.Status"/> property.
            </item>
            </list>
            </para>
            </remarks>
            <param name="iterator">The <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator"/> that will be used to monitor the iterative process.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.MlkBiCgStab.#ctor(MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.IPreConditioner)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.MlkBiCgStab"/> class.
            </summary>
            <remarks>
            When using this constructor the solver will use the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator"/> with
            the standard settings.
            </remarks>
            <param name="preconditioner">The <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the matrix equation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.MlkBiCgStab.#ctor(MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.IPreConditioner,MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.MlkBiCgStab"/> class.
            </summary>
            <remarks>
            <para>
            The main advantages of using a user defined <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator"/> are:
            <list type="number">
            <item>It is possible to set the desired convergence limits.</item>
            <item>
            It is possible to check the reason for which the solver finished 
            the iterative procedure by calling the <see cref="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator.Status"/> property.
            </item>
            </list>
            </para>
            </remarks>
            <param name="preconditioner">The <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the matrix equation.</param>
            <param name="iterator">The <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator"/> that will be used to monitor the iterative process.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.MlkBiCgStab.ResetNumberOfStartingVectors">
            <summary>
            Resets the number of starting vectors to the default value.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.MlkBiCgStab.SetPreconditioner(MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.IPreConditioner)">
            <summary>
            Sets the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the iterative process.
            </summary>
            <param name="preconditioner">The preconditioner.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.MlkBiCgStab.SetIterator(MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator)">
            <summary>
            Sets the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator"/> that will be used to track the iterative process.
            </summary>
            <param name="iterator">The iterator.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.MlkBiCgStab.StopSolve">
            <summary>
            Stops the solve process. 
            </summary>
            <remarks>
            Note that it may take an indetermined amount of time for the solver to actually stop the process.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.MlkBiCgStab.Solve(MathNet.Numerics.LinearAlgebra.Double.Matrix,MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="vector">The solution vector, <c>b</c>.</param>
            <returns>The result vector, <c>x</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.MlkBiCgStab.Solve(MathNet.Numerics.LinearAlgebra.Double.Matrix,MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution vector, <c>b</c></param>
            <param name="result">The result vector, <c>x</c></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.MlkBiCgStab.NumberOfStartingVectorsToCreate(System.Int32,System.Int32)">
            <summary>
            Gets the number of starting vectors to create
            </summary>
            <param name="maximumNumberOfStartingVectors">Maximum number</param>
            <param name="numberOfVariables">Number of variables</param>
            <returns>Number of starting vectors to create</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.MlkBiCgStab.CreateStartingVectors(System.Int32,System.Int32)">
            <summary>
            Returns an array of starting vectors.
            </summary>
            <param name="maximumNumberOfStartingVectors">The maximum number of starting vectors that should be created.</param>
            <param name="numberOfVariables">The number of variables.</param>
            <returns>
             An array with starting vectors. The array will never be larger than the
             <paramref name="maximumNumberOfStartingVectors"/> but it may be smaller if
             the <paramref name="numberOfVariables"/> is smaller than 
             the <paramref name="maximumNumberOfStartingVectors"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.MlkBiCgStab.CreateVectorArray(System.Int32,System.Int32)">
            <summary>
            Create random vecrors array
            </summary>
            <param name="arraySize">Number of vectors</param>
            <param name="vectorSize">Size of each vector</param>
            <returns>Array of random vectors</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.MlkBiCgStab.CalculateTrueResidual(MathNet.Numerics.LinearAlgebra.Double.Matrix,MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Calculates the true residual of the matrix equation Ax = b according to: residual = b - Ax
            </summary>
            <param name="matrix">Source <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Matrix"/>A.</param>
            <param name="residual">Residual <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/> data.</param>
            <param name="x">x <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/> data.</param>
            <param name="b">b <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/> data.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.MlkBiCgStab.ShouldContinue(System.Int32,MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Determine if calculation should continue
            </summary>
            <param name="iterationNumber">Number of iterations passed</param>
            <param name="result">Result <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/>.</param>
            <param name="source">Source <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/>.</param>
            <param name="residuals">Residual <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/>.</param>
            <returns><c>true</c> if continue, otherwise <c>false</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.MlkBiCgStab.Solve(MathNet.Numerics.LinearAlgebra.Double.Matrix,MathNet.Numerics.LinearAlgebra.Double.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <returns>The result matrix, <c>X</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.MlkBiCgStab.Solve(MathNet.Numerics.LinearAlgebra.Double.Matrix,MathNet.Numerics.LinearAlgebra.Double.Matrix,MathNet.Numerics.LinearAlgebra.Double.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <param name="result">The result matrix, <c>X</c></param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.MlkBiCgStab.NumberOfStartingVectors">
            <summary>
            Gets or sets the number of starting vectors.
            </summary>
            <remarks>
            Must be larger than 1 and smaller than the number of variables in the matrix that 
            for which this solver will be used.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.MlkBiCgStab.StartingVectors">
            <summary>
            Gets or sets a series of orthonormal vectors which will be used as basis for the 
            Krylov sub-space.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.MlkBiCgStab.IterationResult">
            <summary>
            Gets the status of the iteration once the calculation is finished.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.TFQMR">
            <summary>
            A Transpose Free Quasi-Minimal Residual (TFQMR) iterative matrix solver.
            </summary>
            <remarks>
            <para>
            The TFQMR algorithm was taken from: <br/>
            Iterative methods for sparse linear systems.
            <br/>
            Yousef Saad
            <br/>
            Algorithm is described in Chapter 7, section 7.4.3, page 219
            </para>
            <para>
            The example code below provides an indication of the possible use of the
            solver.
            </para>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.TFQMR.DefaultStatus">
            <summary>
            The status used if there is no status, i.e. the solver hasn't run yet and there is no
            iterator.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.TFQMR._preconditioner">
            <summary>
            The preconditioner that will be used. Can be set to <see langword="null" />, in which case the default
            pre-conditioner will be used.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.TFQMR._iterator">
            <summary>
            The iterative process controller.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.TFQMR._hasBeenStopped">
            <summary>
            Indicates if the user has stopped the solver.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.TFQMR.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.TFQMR"/> class.
            </summary>
            <remarks>
            When using this constructor the solver will use the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator"/> with
            the standard settings and a default preconditioner.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.TFQMR.#ctor(MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.TFQMR"/> class.
            </summary>
            <remarks>
            <para>
            When using this constructor the solver will use a default preconditioner.
            </para>
            <para>
            The main advantages of using a user defined <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator"/> are:
            <list type="number">
            <item>It is possible to set the desired convergence limits.</item>
            <item>
            It is possible to check the reason for which the solver finished 
            the iterative procedure by calling the <see cref="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator.Status"/> property.
            </item>
            </list>
            </para>
            </remarks>
            <param name="iterator">The <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator"/> that will be used to monitor the iterative process.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.TFQMR.#ctor(MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.IPreConditioner)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.TFQMR"/> class.
            </summary>
            <remarks>
            When using this constructor the solver will use the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator"/> with
            the standard settings.
            </remarks>
            <param name="preconditioner">The <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the matrix equation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.TFQMR.#ctor(MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.IPreConditioner,MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.TFQMR"/> class.
            </summary>
            <remarks>
            <para>
            The main advantages of using a user defined <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator"/> are:
            <list type="number">
            <item>It is possible to set the desired convergence limits.</item>
            <item>
            It is possible to check the reason for which the solver finished 
            the iterative procedure by calling the <see cref="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator.Status"/> property.
            </item>
            </list>
            </para>
            </remarks>
            <param name="preconditioner">The <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the matrix equation.</param>
            <param name="iterator">The <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator"/> that will be used to monitor the iterative process.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.TFQMR.SetPreconditioner(MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.IPreConditioner)">
            <summary>
            Sets the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.IPreConditioner"/> that will be used to precondition the iterative process.
            </summary>
            <param name="preconditioner">The preconditioner.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.TFQMR.SetIterator(MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator)">
            <summary>
            Sets the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator"/> that will be used to track the iterative process.
            </summary>
            <param name="iterator">The iterator.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.TFQMR.StopSolve">
            <summary>
            Stops the solve process. 
            </summary>
            <remarks>
            Note that it may take an indetermined amount of time for the solver to actually stop the process.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.TFQMR.Solve(MathNet.Numerics.LinearAlgebra.Double.Matrix,MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="vector">The solution vector, <c>b</c>.</param>
            <returns>The result vector, <c>x</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.TFQMR.Solve(MathNet.Numerics.LinearAlgebra.Double.Matrix,MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution vector, <c>b</c></param>
            <param name="result">The result vector, <c>x</c></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.TFQMR.CalculateTrueResidual(MathNet.Numerics.LinearAlgebra.Double.Matrix,MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Calculates the <c>true</c> residual of the matrix equation Ax = b according to: residual = b - Ax
            </summary>
            <param name="matrix">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Matrix"/> A.</param>
            <param name="residual">Residual values in <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/>.</param>
            <param name="x">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/> x.</param>
            <param name="b">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/> b.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.TFQMR.ShouldContinue(System.Int32,MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Determine if calculation should continue
            </summary>
            <param name="iterationNumber">Number of iterations passed</param>
            <param name="result">Result <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/>.</param>
            <param name="source">Source <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/>.</param>
            <param name="residuals">Residual <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/>.</param>
            <returns><c>true</c> if continue, otherwise <c>false</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.TFQMR.IsEven(System.Int32)">
            <summary>
            Is <paramref name="number"/> even?
            </summary>
            <param name="number">Number to check</param>
            <returns><c>true</c> if <paramref name="number"/> even, otherwise <c>false</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.TFQMR.Solve(MathNet.Numerics.LinearAlgebra.Double.Matrix,MathNet.Numerics.LinearAlgebra.Double.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <returns>The result matrix, <c>X</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.TFQMR.Solve(MathNet.Numerics.LinearAlgebra.Double.Matrix,MathNet.Numerics.LinearAlgebra.Double.Matrix,MathNet.Numerics.LinearAlgebra.Double.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <param name="result">The result matrix, <c>X</c></param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterative.TFQMR.IterationResult">
            <summary>
            Gets the status of the iteration once the calculation is finished.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterator">
            <summary>
            An iterator that is used to check if an iterative calculation should continue or stop.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterator.DefaultStatus">
            <summary>
            The default status for the iterator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterator.CreateDefault">
            <summary>
            Creates a default iterator with all the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IIterationStopCriterium"/> objects.
            </summary>
            <returns>A new <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator"/> object.</returns>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterator._stopCriterias">
            <summary>
            The collection that holds all the stop criteria and the flag indicating if they should be added
            to the child iterators.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterator._status">
            <summary>
            The status of the iterator.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterator._wasIterationCancelled">
            <summary>
            Indicates if the iteration was canceled.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterator"/> class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterator.#ctor(System.Collections.Generic.IEnumerable{MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IIterationStopCriterium})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterator"/> class with the specified stop criteria.
            </summary>
            <param name="stopCriteria">
            The specified stop criteria. Only one stop criterium of each type can be passed in. None
            of the stop criteria will be passed on to child iterators.
            </param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="stopCriteria"/> contains multiple stop criteria of the same type.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterator.Add(MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IIterationStopCriterium)">
            <summary>
            Adds an <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IIterationStopCriterium"/> to the internal collection of stop-criteria. Only a 
            single stop criterium of each type can be stored.
            </summary>
            <param name="stopCriterium">The stop criterium to add.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="stopCriterium"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="stopCriterium"/> is of the same type as an already 
            stored criterium.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterator.Remove(MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IIterationStopCriterium)">
            <summary>
            Removes the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IIterationStopCriterium"/> from the internal collection.
            </summary>
            <param name="stopCriterium">The stop criterium that must be removed.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterator.Contains(MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IIterationStopCriterium)">
            <summary>
            Indicates if the specific stop criterium is stored by the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator"/>.
            </summary>
            <param name="stopCriterium">The stop criterium.</param>
            <returns><c>true</c> if the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator"/> contains the stop criterium; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterator.IterationCancelled">
            <summary>
            Indicates to the iterator that the iterative process has been cancelled.
            </summary>
            <remarks>
            Does not reset the stop-criteria.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterator.DetermineStatus(System.Int32,MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Determines the status of the iterative calculation based on the stop criteria stored
            by the current <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator"/>. Result is set into <c>Status</c> field.
            </summary>
            <param name="iterationNumber">The number of iterations that have passed so far.</param>
            <param name="solutionVector">The vector containing the current solution values.</param>
            <param name="sourceVector">The right hand side vector.</param>
            <param name="residualVector">The vector containing the current residual vectors.</param>
            <remarks>
            The individual iterators may internally track the progress of the calculation based
            on the invocation of this method. Therefore this method should only be called if the 
            calculation has moved forwards at least one step.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterator.ResetToPrecalculationState">
            <summary>
            Resets the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterator"/> to the pre-calculation state.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterator.Clone">
            <summary>
            Creates a deep clone of the current iterator.
            </summary>
            <returns>The deep clone of the current iterator.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterator.NumberOfCriteria">
            <summary>
            Gets the number of stored stop criteria.
            </summary>
            <remarks>Used for testing only.</remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterator.StoredStopCriteria">
            <summary>
            Gets an <c>IEnumerator</c> that enumerates over all the stored stop criteria.
            </summary>
            <remarks>Used for testing only.</remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.Iterator.Status">
            <summary>
            Gets the current calculation status.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.Diagonal">
            <summary>
            A diagonal preconditioner. The preconditioner uses the inverse
            of the matrix diagonal as preconditioning values.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.Diagonal._inverseDiagonals">
            <summary>
            The inverse of the matrix diagonal.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.Diagonal.DiagonalEntries">
            <summary>
            Returns the decomposed matrix diagonal.
            </summary>
            <returns>The matrix diagonal.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.Diagonal.Initialize(MathNet.Numerics.LinearAlgebra.Double.Matrix)">
            <summary>
            Initializes the preconditioner and loads the internal data structures.
            </summary>
            <param name="matrix">
            The <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Matrix"/> upon which this preconditioner is based.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <see langword="null"/>. </exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.Diagonal.Approximate(MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <returns>The left hand side vector.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.Diagonal.Approximate(MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <param name="lhs">The left hand side vector. Also known as the result vector.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.Ilutp">
            <summary>
            This class performs an Incomplete LU factorization with drop tolerance
            and partial pivoting. The drop tolerance indicates which additional entries
            will be dropped from the factorized LU matrices.
            </summary>
            <remarks>
            The ILUTP-Mem algorithm was taken from: <br/>
            ILUTP_Mem: a Space-Efficient Incomplete LU Preconditioner
            <br/>
            Tzu-Yi Chen, Department of Mathematics and Computer Science, <br/>
            Pomona College, Claremont CA 91711, USA <br/>
            Published in: <br/>
            Lecture Notes in Computer Science <br/>
            Volume 3046 / 2004 <br/>
            pp. 20 - 28 <br/>
            Algorithm is described in Section 2, page 22
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.Ilutp.DefaultFillLevel">
            <summary>
            The default fill level.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.Ilutp.DefaultDropTolerance">
            <summary>
            The default drop tolerance.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.Ilutp._upper">
            <summary>
            The decomposed upper triangular matrix.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.Ilutp._lower">
            <summary>
            The decomposed lower triangular matrix.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.Ilutp._pivots">
            <summary>
            The array containing the pivot values.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.Ilutp._fillLevel">
            <summary>
            The fill level.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.Ilutp._dropTolerance">
            <summary>
            The drop tolerance.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.Ilutp._pivotTolerance">
            <summary>
            The pivot tolerance.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.Ilutp.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.Ilutp"/> class with the default settings.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.Ilutp.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.Ilutp"/> class with the specified settings.
            </summary>
            <param name="fillLevel">
            The amount of fill that is allowed in the matrix. The value is a fraction of 
            the number of non-zero entries in the original matrix. Values should be positive.
            </param>
            <param name="dropTolerance">
            The absolute drop tolerance which indicates below what absolute value an entry 
            will be dropped from the matrix. A drop tolerance of 0.0 means that no values
            will be dropped. Values should always be positive.
            </param>
            <param name="pivotTolerance">
            The pivot tolerance which indicates at what level pivoting will take place. A
            value of 0.0 means that no pivoting will take place.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.Ilutp.UpperTriangle">
            <summary>
            Returns the upper triagonal matrix that was created during the LU decomposition.
            </summary>
            <remarks>
            This method is used for debugging purposes only and should normally not be used.
            </remarks>
            <returns>A new matrix containing the upper triagonal elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.Ilutp.LowerTriangle">
            <summary>
            Returns the lower triagonal matrix that was created during the LU decomposition.
            </summary>
            <remarks>
            This method is used for debugging purposes only and should normally not be used.
            </remarks>
            <returns>A new matrix containing the lower triagonal elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.Ilutp.Pivots">
            <summary>
            Returns the pivot array. This array is not needed for normal use because
            the preconditioner will return the solution vector values in the proper order.
            </summary>
            <remarks>
            This method is used for debugging purposes only and should normally not be used.
            </remarks>
            <returns>The pivot array.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.Ilutp.Initialize(MathNet.Numerics.LinearAlgebra.Double.Matrix)">
            <summary>
            Initializes the preconditioner and loads the internal data structures.
            </summary>
            <param name="matrix">
            The <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Matrix"/> upon which this preconditioner is based. Note that the 
            method takes a general matrix type. However internally the data is stored 
            as a sparse matrix. Therefore it is not recommended to pass a dense matrix.
            </param>
            <exception cref="T:System.ArgumentNullException"> If <paramref name="matrix"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.Ilutp.PivotRow(MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Pivot elements in the <paramref name="row"/> according to internal pivot array
            </summary>
            <param name="row">Row <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/> to pivot in</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.Ilutp.PivotMapFound(System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Int32)">
            <summary>
            Was pivoting already performed
            </summary>
            <param name="knownPivots">Pivots already done</param>
            <param name="currentItem">Current item to pivot</param>
            <returns><c>true</c> if performed, otherwise <c>false</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.Ilutp.SwapColumns(MathNet.Numerics.LinearAlgebra.Double.Matrix,System.Int32,System.Int32)">
            <summary>
            Swap columns in the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Matrix"/>
            </summary>
            <param name="matrix">Source <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Matrix"/>.</param>
            <param name="firstColumn">First column index to swap</param>
            <param name="secondColumn">Second column index to swap</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.Ilutp.FindLargestItems(System.Int32,System.Int32,System.Int32[],MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Sort vector descending, not changing vector but placing sorted indicies to <paramref name="sortedIndices"/>
            </summary>
            <param name="lowerBound">Start sort form</param>
            <param name="upperBound">Sort till upper bound</param>
            <param name="sortedIndices">Array with sorted vector indicies</param>
            <param name="values">Source <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.Ilutp.Approximate(MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <returns>The left hand side vector.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.Ilutp.Approximate(MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <param name="lhs">The left hand side vector. Also known as the result vector.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.Ilutp.Pivot(MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Pivot elements in <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/> according to internal pivot array
            </summary>
            <param name="vector">Source <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/>.</param>
            <param name="result">Result <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/> after pivoting.</param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.Ilutp.FillLevel">
            <summary>
            Gets or sets the amount of fill that is allowed in the matrix. The
            value is a fraction of the number of non-zero entries in the original
            matrix. The standard value is 200.
            </summary>
            <remarks>
            <para>
            Values should always be positive and can be higher than 1.0. A value lower
            than 1.0 means that the eventual preconditioner matrix will have fewer
            non-zero entries as the original matrix. A value higher than 1.0 means that
            the eventual preconditioner can have more non-zero values than the original 
            matrix.
            </para>
            <para>
            Note that any changes to the <b>FillLevel</b> after creating the preconditioner
            will invalidate the created preconditioner and will require a re-initialization of
            the preconditioner.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if a negative value is provided.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.Ilutp.DropTolerance">
            <summary>
            Gets or sets the absolute drop tolerance which indicates below what absolute value
            an entry will be dropped from the matrix. The standard value is 0.0001.
            </summary>
            <remarks>
            <para>
            The values should always be positive and can be larger than 1.0. A low value will
            keep more small numbers in the preconditioner matrix. A high value will remove 
            more small numbers from the preconditioner matrix.
            </para>
            <para>
            Note that any changes to the <b>DropTolerance</b> after creating the preconditioner
            will invalidate the created preconditioner and will require a re-initialization of
            the preconditioner.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if a negative value is provided.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.Ilutp.PivotTolerance">
            <summary>
            Gets or sets the pivot tolerance which indicates at what level pivoting will
            take place. The standard value is 0.0 which means pivoting will never take place.
            </summary>
            <remarks>
            <para>
            The pivot tolerance is used to calculate if pivoting is necessary. Pivoting
            will take place if any of the values in a row is bigger than the 
            diagonal value of that row divided by the pivot tolerance, i.e. pivoting
            will take place if <b>row(i,j) &gt; row(i,i) / PivotTolerance</b> for
            any <b>j</b> that is not equal to <b>i</b>.
            </para>
            <para>
            Note that any changes to the <b>PivotTolerance</b> after creating the preconditioner
            will invalidate the created preconditioner and will require a re-initialization of
            the preconditioner.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if a negative value is provided.</exception>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.IlutpElementSorter">
            <summary>
            An element sort algorithm for the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.Ilutp"/> class.
            </summary>
            <remarks>
            This sort algorithm is used to sort the columns in a sparse matrix based on
            the value of the element on the diagonal of the matrix.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.IlutpElementSorter.SortDoubleIndicesDecreasing(System.Int32,System.Int32,System.Int32[],MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Sorts the elements of the <paramref name="values"/> vector in decreasing
            fashion. The vector itself is not affected.
            </summary>
            <param name="lowerBound">The starting index.</param>
            <param name="upperBound">The stopping index.</param>
            <param name="sortedIndices">An array that will contain the sorted indices once the algorithm finishes.</param>
            <param name="values">The <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/> that contains the values that need to be sorted.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.IlutpElementSorter.HeapSortDoublesIndices(System.Int32,System.Int32,System.Int32[],MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Sorts the elements of the <paramref name="values"/> vector in decreasing
            fashion using heap sort algorithm. The vector itself is not affected.
            </summary>
            <param name="lowerBound">The starting index.</param>
            <param name="upperBound">The stopping index.</param>
            <param name="sortedIndices">An array that will contain the sorted indices once the algorithm finishes.</param>
            <param name="values">The <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/> that contains the values that need to be sorted.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.IlutpElementSorter.BuildDoubleIndexHeap(System.Int32,System.Int32,System.Int32[],MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Build heap for double indicies
            </summary>
            <param name="start">Root position</param>
            <param name="count">Length of <paramref name="values"/></param>
            <param name="sortedIndices">Indicies of <paramref name="values"/></param>
            <param name="values">Target <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.IlutpElementSorter.SiftDoubleIndices(System.Int32[],MathNet.Numerics.LinearAlgebra.Double.Vector,System.Int32,System.Int32)">
            <summary>
            Sift double indicies
            </summary>
            <param name="sortedIndices">Indicies of <paramref name="values"/></param>
            <param name="values">Target <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/></param>
            <param name="begin">Root position</param>
            <param name="count">Length of <paramref name="values"/></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.IlutpElementSorter.SortIntegersDecreasing(System.Int32[])">
            <summary>
            Sorts the given integers in a decreasing fashion.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.IlutpElementSorter.HeapSortIntegers(System.Int32[],System.Int32)">
            <summary>
            Sort the given integers in a decreasing fashion using heapsort algorithm 
            </summary>
            <param name="values">Array of values to sort</param>
            <param name="count">Length of <paramref name="values"/></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.IlutpElementSorter.BuildHeap(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Build heap
            </summary>
            <param name="values">Target values array</param>
            <param name="start">Root position</param>
            <param name="count">Length of <paramref name="values"/></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.IlutpElementSorter.Sift(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Sift values
            </summary>
            <param name="values">Target value array</param>
            <param name="start">Root position</param>
            <param name="count">Length of <paramref name="values"/></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.IlutpElementSorter.Exchange(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Exchange values in array
            </summary>
            <param name="values">Target values array</param>
            <param name="first">First value to exchange</param>
            <param name="second">Second value to exchange</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.IncompleteLU">
            <summary>
            An incomplete, level 0, LU factorization preconditioner.
            </summary>
            <remarks>
            The ILU(0) algorithm was taken from: <br/>
            Iterative methods for sparse linear systems <br/>
            Yousef Saad <br/>
            Algorithm is described in Chapter 10, section 10.3.2, page 275 <br/>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.IncompleteLU._decompositionLU">
            <summary>
            The matrix holding the lower (L) and upper (U) matrices. The
            decomposition matrices are combined to reduce storage.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.IncompleteLU.UpperTriangle">
            <summary>
            Returns the upper triagonal matrix that was created during the LU decomposition.
            </summary>
            <returns>A new matrix containing the upper triagonal elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.IncompleteLU.LowerTriangle">
            <summary>
            Returns the lower triagonal matrix that was created during the LU decomposition.
            </summary>
            <returns>A new matrix containing the lower triagonal elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.IncompleteLU.Initialize(MathNet.Numerics.LinearAlgebra.Double.Matrix)">
            <summary>
            Initializes the preconditioner and loads the internal data structures.
            </summary>
            <param name="matrix">The matrix upon which the preconditioner is based. </param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.IncompleteLU.Approximate(MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <returns>The left hand side vector.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.IncompleteLU.Approximate(MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <param name="lhs">The left hand side vector. Also known as the result vector.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.UnitPreconditioner">
            <summary>
            A unit preconditioner. This preconditioner does not actually do anything
            it is only used when running an <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.IIterativeSolver"/> without
            a preconditioner.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.UnitPreconditioner._size">
            <summary>
            The coefficient matrix on which this preconditioner operates.
            Is used to check dimensions on the different vectors that are processed.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.UnitPreconditioner.Initialize(MathNet.Numerics.LinearAlgebra.Double.Matrix)">
            <summary>
            Initializes the preconditioner and loads the internal data structures.
            </summary>
            <param name="matrix">
            The matrix upon which the preconditioner is based.
            </param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <see langword="null"/>. </exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.UnitPreconditioner.Approximate(MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <param name="lhs">The left hand side vector. Also known as the result vector.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rhs"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="lhs"/> is <see langword="null"/>. </exception>
            <exception cref="T:System.ArgumentException">
              <para>
                If <paramref name="rhs"/> and <paramref name="lhs"/> do not have the same size.
              </para>
              <para>
                - or -
              </para>
              <para>
                If the size of <paramref name="rhs"/> is different the number of rows of the coefficient matrix.
              </para>
            </exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.Preconditioners.UnitPreconditioner.Approximate(MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <returns>The left hand side vector.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rhs"/> is <see langword="null"/>. </exception>
            <exception cref="T:System.ArgumentException">
            If the size of <paramref name="rhs"/> is different the number of rows of the coefficient matrix.
            </exception>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationCancelled">
            <summary>
            Indicates that a calculation was cancelled by the user.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.ICalculationStatus">
            <summary>
            Defines the base interface for calculation status objects.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.ICalculationStatus.TerminatesCalculation">
            <summary>
            Gets a value indicating whether current status warrants stopping the calculation.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationCancelled.TerminatesCalculation">
            <summary>
            Gets a value indicating whether current status warrants stopping the calculation.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationConverged">
            <summary>
            Indicates that a calculation has converged to the desired convergence levels.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationConverged.TerminatesCalculation">
            <summary>
            Gets a value indicating whether current status warrants stopping the calculation.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationDiverged">
            <summary>
            Indicates that the calculation diverged.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationDiverged.TerminatesCalculation">
            <summary>
            Gets a value indicating whether current status warrants stopping the calculation.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationFailure">
            <summary>
            Indicates that a calculation has failed for some reason.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationFailure.TerminatesCalculation">
            <summary>
            Gets a value indicating whether current status warrants stopping the calculation.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationIndetermined">
            <summary>
            Indicates that the state of the calculation is indetermined, not started or stopped.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationIndetermined.TerminatesCalculation">
            <summary>
            Gets a value indicating whether current status warrants stopping the calculation.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationRunning">
            <summary>
            Indicates that the calculation is running and no results are yet known.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationRunning.TerminatesCalculation">
            <summary>
            Gets a value indicating whether current status warrants stopping the calculation.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationStoppedWithoutConvergence">
            <summary>
            Indicates that the calculation has been stopped due to reaching the stopping
            limits, but that convergence was not achieved.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationStoppedWithoutConvergence.TerminatesCalculation">
            <summary>
            Gets a value indicating whether current status warrants stopping the calculation.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.DivergenceStopCriterium">
            <summary>
            Monitors an iterative calculation for signs of divergence.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.DivergenceStopCriterium.DefaultMaximumRelativeIncrease">
            <summary>
            Default value for the maximum relative increase that the 
            residual may experience before a divergence warning is issued.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.DivergenceStopCriterium.DefaultMinimumNumberOfIterations">
            <summary>
            Default value for the minimum number of iterations over which 
            the residual must grow before a divergence warning is issued.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.DivergenceStopCriterium.DefaultLastIterationNumber">
            <summary>
            Defines the default last iteration number. Set to -1 because iterations normally
            start at 0.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.DivergenceStopCriterium.DefaultStatus">
            <summary>
            The default status.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.DivergenceStopCriterium._maximumRelativeIncrease">
            <summary>
            The maximum relative increase the residual may experience without triggering a divergence warning.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.DivergenceStopCriterium._minimumNumberOfIterations">
            <summary>
            The number of iterations over which a residual increase should be tracked before issuing a divergence warning.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.DivergenceStopCriterium._status">
            <summary>
            The status of the calculation
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.DivergenceStopCriterium._residualHistory">
            <summary>
            The array that holds the tracking information.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.DivergenceStopCriterium._lastIteration">
            <summary>
            The iteration number of the last iteration.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.DivergenceStopCriterium.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.DivergenceStopCriterium"/> class with the default maximum 
            relative increase and the default minimum number of tracking iterations.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.DivergenceStopCriterium.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.DivergenceStopCriterium"/> class with the specified maximum 
            relative increase and the default minimum number of tracking iterations.
            </summary>
            <param name="maximumRelativeIncrease">The maximum relative increase that the residual may experience before a divergence warning is issued.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.DivergenceStopCriterium.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.DivergenceStopCriterium"/> class with the default maximum 
            relative increase and the specified minimum number of tracking iterations.
            </summary>
            <param name="minimumIterations">The minimum number of iterations over which the residual must grow before a divergence warning is issued. </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.DivergenceStopCriterium.#ctor(System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.DivergenceStopCriterium"/> class with the specified maximum 
            relative increase and the specified minimum number of tracking iterations.
            </summary>
            <param name="maximumRelativeIncrease">The maximum relative increase that the residual may experience before a divergence warning is issued. </param>
            <param name="minimumIterations">The minimum number of iterations over which the residual must grow before a divergence warning is issued.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.DivergenceStopCriterium.ResetMaximumRelativeIncreaseToDefault">
            <summary>
            Returns the maximum relative increase to the default.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.DivergenceStopCriterium.ResetNumberOfIterationsToDefault">
            <summary>
            Returns the minimum number of iterations to the default.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.DivergenceStopCriterium.DetermineStatus(System.Int32,MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Determines the status of the iterative calculation based on the stop criteria stored
            by the current <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IIterationStopCriterium"/>. Result is set into <c>Status</c> field.
            </summary>
            <param name="iterationNumber">The number of iterations that have passed so far.</param>
            <param name="solutionVector">The vector containing the current solution values.</param>
            <param name="sourceVector">The right hand side vector.</param>
            <param name="residualVector">The vector containing the current residual vectors.</param>
            <remarks>
            The individual stop criteria may internally track the progress of the calculation based
            on the invocation of this method. Therefore this method should only be called if the 
            calculation has moved forwards at least one step.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.DivergenceStopCriterium.IsDiverging">
            <summary>
            Detect if solution is diverging
            </summary>
            <returns><c>true</c> if diverging, otherwise <c>false</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.DivergenceStopCriterium.SetStatusToDiverged">
            <summary>
            Set status to <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationDiverged"/>
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.DivergenceStopCriterium.SetStatusToRunning">
            <summary>
            Set status to <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationRunning"/>
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.DivergenceStopCriterium.ResetToPrecalculationState">
            <summary>
            Resets the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IIterationStopCriterium"/> to the pre-calculation state.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.DivergenceStopCriterium.Clone">
            <summary>
            Clones the current <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.DivergenceStopCriterium"/> and its settings.
            </summary>
            <returns>A new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.DivergenceStopCriterium"/> class.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.DivergenceStopCriterium.MaximumRelativeIncrease">
            <summary>
            Gets or sets the maximum relative increase that the residual may experience before a divergence warning is issued.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <c>Maximum</c> is set to zero or below.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.DivergenceStopCriterium.MinimumNumberOfIterations">
            <summary>
            Gets or sets the minimum number of iterations over which the residual must grow before
            issuing a divergence warning.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <c>value</c> is set to less than one.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.DivergenceStopCriterium.RequiredHistoryLength">
            <summary>
            Gets required history Length
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.DivergenceStopCriterium.Status">
            <summary>
            Gets the current calculation status.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.DivergenceStopCriterium.StopLevel">
            <summary>
            Gets the <see cref="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.DivergenceStopCriterium.StopLevel"/> which indicates what sort of stop criterium this
            <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IIterationStopCriterium"/> monitors.
            </summary>
            <value>Returns <see cref="F:MathNet.Numerics.LinearAlgebra.Generic.Solvers.StopCriterium.StopLevel.Divergence"/>.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.FailureStopCriterium">
            <summary>
            Defines an <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IIterationStopCriterium"/> that monitors residuals for NaN's.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.FailureStopCriterium.DefaultLastIterationNumber">
            <summary>
            Defines the default last iteration number. Set to -1 because iterations normally
            start at 0.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.FailureStopCriterium.DefaultStatus">
            <summary>
            The default status.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.FailureStopCriterium._status">
            <summary>
            The status of the calculation
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.FailureStopCriterium._lastIteration">
            <summary>
            The iteration number of the last iteration.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.FailureStopCriterium.DetermineStatus(System.Int32,MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Determines the status of the iterative calculation based on the stop criteria stored
            by the current <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IIterationStopCriterium"/>. Result is set into <c>Status</c> field.
            </summary>
            <param name="iterationNumber">The number of iterations that have passed so far.</param>
            <param name="solutionVector">The vector containing the current solution values.</param>
            <param name="sourceVector">The right hand side vector.</param>
            <param name="residualVector">The vector containing the current residual vectors.</param>
            <remarks>
            The individual stop criteria may internally track the progress of the calculation based
            on the invocation of this method. Therefore this method should only be called if the 
            calculation has moved forwards at least one step.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.FailureStopCriterium.SetStatusToFailed">
            <summary>
            Set status to <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationFailure"/>
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.FailureStopCriterium.SetStatusToRunning">
            <summary>
            Set status to <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationRunning"/>
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.FailureStopCriterium.ResetToPrecalculationState">
            <summary>
            Resets the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IIterationStopCriterium"/> to the pre-calculation state.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.FailureStopCriterium.Clone">
            <summary>
            Clones the current <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.FailureStopCriterium"/> and its settings.
            </summary>
            <returns>A new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.FailureStopCriterium"/> class.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.FailureStopCriterium.Status">
            <summary>
            Gets the current calculation status.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.FailureStopCriterium.StopLevel">
            <summary>
            Gets the <see cref="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.FailureStopCriterium.StopLevel"/>which indicates what sort of stop criterium this
            <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IIterationStopCriterium"/> monitors.
            </summary>
            <value>Returns <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationFailure"/>.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IterationCountStopCriterium">
            <summary>
            Defines an <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IIterationStopCriterium"/> that monitors the numbers of iteration 
            steps as stop criterium.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IterationCountStopCriterium.DefaultMaximumNumberOfIterations">
            <summary>
            The default value for the maximum number of iterations the process is allowed
            to perform.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IterationCountStopCriterium.DefaultStatus">
            <summary>
            The default status.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IterationCountStopCriterium._maximumNumberOfIterations">
            <summary>
            The maximum number of iterations the calculation is allowed to perform.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IterationCountStopCriterium._status">
            <summary>
            The status of the calculation
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IterationCountStopCriterium.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IterationCountStopCriterium"/> class with the default maximum 
            number of iterations.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IterationCountStopCriterium.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IterationCountStopCriterium"/> class with the specified maximum
            number of iterations.
            </summary>
            <param name="maximumNumberOfIterations">The maximum number of iterations the calculation is allowed to perform.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IterationCountStopCriterium.ResetMaximumNumberOfIterationsToDefault">
            <summary>
            Returns the maximum number of iterations to the default.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IterationCountStopCriterium.DetermineStatus(System.Int32,MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Determines the status of the iterative calculation based on the stop criteria stored
            by the current <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IterationCountStopCriterium"/>. Result is set into <c>Status</c> field.
            </summary>
            <param name="iterationNumber">The number of iterations that have passed so far.</param>
            <param name="solutionVector">The vector containing the current solution values.</param>
            <param name="sourceVector">The right hand side vector.</param>
            <param name="residualVector">The vector containing the current residual vectors.</param>
            <remarks>
            The individual stop criteria may internally track the progress of the calculation based
            on the invocation of this method. Therefore this method should only be called if the 
            calculation has moved forwards at least one step.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IterationCountStopCriterium.SetStatusToFinished">
            <summary>
            Set status to <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationFailure"/>
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IterationCountStopCriterium.SetStatusToRunning">
            <summary>
            Set status to <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationRunning"/>
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IterationCountStopCriterium.ResetToPrecalculationState">
            <summary>
            Resets the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IterationCountStopCriterium"/> to the pre-calculation state.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IterationCountStopCriterium.Clone">
            <summary>
            Clones the current <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IterationCountStopCriterium"/> and its settings.
            </summary>
            <returns>A new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IterationCountStopCriterium"/> class.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IterationCountStopCriterium.MaximumNumberOfIterations">
            <summary>
            Gets or sets the maximum number of iterations the calculation is allowed to perform.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <c>Maximum</c> is set to a negative value.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IterationCountStopCriterium.Status">
            <summary>
            Gets the current calculation status.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IterationCountStopCriterium.StopLevel">
            <summary>
            Gets the <see cref="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IterationCountStopCriterium.StopLevel"/> which indicates what sort of stop criterium this
            <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IterationCountStopCriterium"/> monitors.
            </summary>
            <value>Returns <see cref="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IterationCountStopCriterium.StopLevel"/>.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.ResidualStopCriterium">
            <summary>
            Defines an <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IIterationStopCriterium"/> that monitors residuals as stop criterium.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.ResidualStopCriterium.DefaultMaximumResidual">
            <summary>
            The default value for the maximum value of the residual.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.ResidualStopCriterium.DefaultMinimumIterationsBelowMaximum">
            <summary>
            The default value for the minimum number of iterations.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.ResidualStopCriterium.DefaultLastIterationNumber">
            <summary>
            Defines the default last iteration number. Set to -1 because iterations normally start at 0.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.ResidualStopCriterium.DefaultStatus">
            <summary>
            The default status.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.ResidualStopCriterium._maximum">
            <summary>
            The maximum value for the residual below which the calculation is considered converged.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.ResidualStopCriterium._minimumIterationsBelowMaximum">
            <summary>
            The minimum number of iterations for which the residual has to be below the maximum before
            the calculation is considered converged.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.ResidualStopCriterium._status">
            <summary>
            The status of the calculation
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.ResidualStopCriterium._iterationCount">
            <summary>
            The number of iterations since the residuals got below the maximum.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.ResidualStopCriterium._lastIteration">
            <summary>
            The iteration number of the last iteration.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.ResidualStopCriterium.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.ResidualStopCriterium"/> class with the default maximum 
            residual and the default minimum number of iterations.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.ResidualStopCriterium.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.ResidualStopCriterium"/> class with the specified 
            maximum residual and the default minimum number of iterations.
            </summary>
            <param name="maximum">The maximum value for the residual below which the calculation is considered converged.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.ResidualStopCriterium.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.ResidualStopCriterium"/> class with the default maximum residual
            and specified minimum number of iterations.
            </summary>
            <param name="minimumIterationsBelowMaximum">
            The minimum number of iterations for which the residual has to be below the maximum before
            the calculation is considered converged.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.ResidualStopCriterium.#ctor(System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.ResidualStopCriterium"/> class with the specified 
            maximum residual and minimum number of iterations.
            </summary>
            <param name="maximum">
            The maximum value for the residual below which the calculation is considered converged.
            </param>
            <param name="minimumIterationsBelowMaximum">
            The minimum number of iterations for which the residual has to be below the maximum before
            the calculation is considered converged.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.ResidualStopCriterium.ResetMaximumResidualToDefault">
            <summary>
            Returns the maximum residual to the default.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.ResidualStopCriterium.ResetMinimumIterationsBelowMaximumToDefault">
            <summary>
            Returns the minimum number of iterations to the default.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.ResidualStopCriterium.DetermineStatus(System.Int32,MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector,MathNet.Numerics.LinearAlgebra.Double.Vector)">
            <summary>
            Determines the status of the iterative calculation based on the stop criteria stored
            by the current <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IIterationStopCriterium"/>. Result is set into <c>Status</c> field.
            </summary>
            <param name="iterationNumber">The number of iterations that have passed so far.</param>
            <param name="solutionVector">The vector containing the current solution values.</param>
            <param name="sourceVector">The right hand side vector.</param>
            <param name="residualVector">The vector containing the current residual vectors.</param>
            <remarks>
            The individual stop criteria may internally track the progress of the calculation based
            on the invocation of this method. Therefore this method should only be called if the 
            calculation has moved forwards at least one step.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.ResidualStopCriterium.ComputeStopCriterium(System.Double)">
            <summary>
            Calculate stop criterium
            </summary>
            <param name="solutionNorm">Solution vector norm</param>
            <returns>Criterium value</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.ResidualStopCriterium.SetStatusToDiverged">
            <summary>
            Set status to <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationDiverged"/>
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.ResidualStopCriterium.SetStatusToConverged">
            <summary>
            Set status to <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationConverged"/>
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.ResidualStopCriterium.SetStatusToRunning">
            <summary>
            Set status to <see cref="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.Status.CalculationRunning"/>
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.ResidualStopCriterium.ResetToPrecalculationState">
            <summary>
            Resets the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IIterationStopCriterium"/> to the pre-calculation state.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.ResidualStopCriterium.Clone">
            <summary>
            Clones the current <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.ResidualStopCriterium"/> and its settings.
            </summary>
            <returns>A new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.ResidualStopCriterium"/> class.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.ResidualStopCriterium.Maximum">
            <summary>
            Gets or sets the maximum value for the residual below which the calculation is considered 
            converged.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <c>Maximum</c> is set to a negative value.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.ResidualStopCriterium.MinimumIterationsBelowMaximum">
            <summary>
            Gets or sets the minimum number of iterations for which the residual has to be
            below the maximum before the calculation is considered converged.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <c>BelowMaximumFor</c> is set to a value less than 1.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.ResidualStopCriterium.Status">
            <summary>
            Gets the current calculation status.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.ResidualStopCriterium.StopLevel">
            <summary>
            Gets the <see cref="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.ResidualStopCriterium.StopLevel"/> which indicates what sort of stop criterium this
            <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.IIterationStopCriterium"/> monitors.
            </summary>
            <value>Returns <see cref="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.StopCriterium.ResidualStopCriterium.StopLevel"/>.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Generic.Solvers.StopCriterium.StopLevel">
            <summary>
            Iteration stop criteria. 
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Generic.Solvers.StopCriterium.StopLevel.CalculationFailure">
            <summary>
            Monitor calculation failures in the iterative calculation.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Generic.Solvers.StopCriterium.StopLevel.Divergence">
            <summary>
            Monitor the calculation for signs of divergence.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Generic.Solvers.StopCriterium.StopLevel.StoppedWithoutConvergence">
            <summary>
            Guard the calculation against unlimited continuation
            by monitoring user specified limits, e.g. the maximum number of iterations.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Generic.Solvers.StopCriterium.StopLevel.Convergence">
            <summary>
            Monitor the calculation for convergence, usually
            based on the residuals of the calculation.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.SparseVector">
            <summary>
            A vector with sparse storage, intended for very large vectors where most of the cells are zero.
            </summary>
            <remarks>The sparse vector is not thread safe.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.#ctor(MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage{System.Double})">
            <summary>
            Create a new sparse vector straight from an initialized vector storage instance.
            The storage is used directly without copying.
            Intended for advanced scenarios where you're working directly with
            storage for performance or interop reasons.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.#ctor(System.Int32)">
            <summary>
            Create a new sparse vector with the given length.
            All cells of the vector will be initialized to zero.
            Zero-length vectors are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If length is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.OfVector(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Create a new sparse vector as a copy of the given other vector.
            This new vector will be independent from the other vector.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.OfEnumerable(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Create a new sparse vector as a copy of the given enumerable.
            This new vector will be independent from the enumerable.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.OfIndexedEnumerable(System.Int32,System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,System.Double}})">
            <summary>
            Create a new sparse vector as a copy of the given indexed enumerable.
            Keys must be provided at most once, zero is assumed if a key is omitted.
            This new vector will be independent from the enumerable.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.Create(System.Int32,System.Func{System.Int32,System.Double})">
            <summary>
            Create a new sparse vector and initialize each value using the provided init function.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.#ctor(System.Int32,System.Double)">
            <summary>
            Create a new sparse vector with the given length.
            All cells of the vector will be initialized with the provided value.
            Zero-length vectors are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If length is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.#ctor(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Create a new sparse vector as a copy of the given other vector.
            This new vector will be independent from the other vector.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Create a new sparse vector as a copy of the given enumerable.
            This new vector will be independent from the enumerable.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.CreateMatrix(System.Int32,System.Int32)">
            <summary>
            Creates a matrix with the given dimensions using the same storage type
            as this vector.
            </summary>
            <param name="rows">
            The number of rows.
            </param>
            <param name="columns">
            The number of columns.
            </param>
            <returns>
            A matrix with the given dimensions.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.CreateVector(System.Int32)">
            <summary>
            Creates a <strong>Vector</strong> of the given size using the same storage type
            as this vector.
            </summary>
            <param name="size">
            The size of the <strong>Vector</strong> to create.
            </param>
            <returns>
            The new <c>Vector</c>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.DoAdd(System.Double,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Adds a scalar to each element of the vector and stores the result in the result vector.
            Warning, the new 'sparse vector' with a non-zero scalar added to it will be a 100% filled
            sparse vector and very inefficient. Would be better to work with a dense vector instead.
            </summary>
            <param name="scalar">
            The scalar to add.
            </param>
            <param name="result">
            The vector to store the result of the addition.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.DoAdd(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Adds another vector to this vector and stores the result into the result vector.
            </summary>
            <param name="other">
            The vector to add to this one.
            </param>
            <param name="result">
            The vector to store the result of the addition.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.DoSubtract(System.Double,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Subtracts a scalar from each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">
            The scalar to subtract.
            </param>
            <param name="result">
            The vector to store the result of the subtraction.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.DoSubtract(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Subtracts another vector to this vector and stores the result into the result vector.
            </summary>
            <param name="other">
            The vector to subtract from this one.
            </param>
            <param name="result">
            The vector to store the result of the subtraction.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.DoNegate(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Negates vector and saves result to <paramref name="result"/>
            </summary>
            <param name="result">Target vector</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.DoMultiply(System.Double,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Multiplies a scalar to each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">
            The scalar to multiply.
            </param>
            <param name="result">
            The vector to store the result of the multiplication.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.DoDotProduct(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Computes the dot product between this vector and another vector.
            </summary>
            <param name="other">
            The other vector to add.
            </param>
            <returns>s
            The result of the addition.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.DoModulus(System.Double,MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Computes the modulus for each element of the vector for the given divisor.
            </summary>
            <param name="divisor">The divisor to use.</param>
            <param name="result">A vector to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.op_Addition(MathNet.Numerics.LinearAlgebra.Double.SparseVector,MathNet.Numerics.LinearAlgebra.Double.SparseVector)">
            <summary>
            Adds two <strong>Vectors</strong> together and returns the results.
            </summary>
            <param name="leftSide">One of the vectors to add.</param>
            <param name="rightSide">The other vector to add.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.op_UnaryNegation(MathNet.Numerics.LinearAlgebra.Double.SparseVector)">
            <summary>
            Returns a <strong>Vector</strong> containing the negated values of <paramref name="rightSide"/>. 
            </summary>
            <param name="rightSide">The vector to get the values from.</param>
            <returns>A vector containing the negated values as <paramref name="rightSide"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.op_Subtraction(MathNet.Numerics.LinearAlgebra.Double.SparseVector,MathNet.Numerics.LinearAlgebra.Double.SparseVector)">
            <summary>
            Subtracts two <strong>Vectors</strong> and returns the results.
            </summary>
            <param name="leftSide">The vector to subtract from.</param>
            <param name="rightSide">The vector to subtract.</param>
            <returns>The result of the subtraction.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.op_Multiply(MathNet.Numerics.LinearAlgebra.Double.SparseVector,System.Double)">
            <summary>
            Multiplies a vector with a scalar.
            </summary>
            <param name="leftSide">The vector to scale.</param>
            <param name="rightSide">The scalar value.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.op_Multiply(System.Double,MathNet.Numerics.LinearAlgebra.Double.SparseVector)">
            <summary>
            Multiplies a vector with a scalar.
            </summary>
            <param name="leftSide">The scalar value.</param>
            <param name="rightSide">The vector to scale.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.op_Multiply(MathNet.Numerics.LinearAlgebra.Double.SparseVector,MathNet.Numerics.LinearAlgebra.Double.SparseVector)">
            <summary>
            Computes the dot product between two <strong>Vectors</strong>.
            </summary>
            <param name="leftSide">The left row vector.</param>
            <param name="rightSide">The right column vector.</param>
            <returns>The dot product between the two vectors.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.op_Division(MathNet.Numerics.LinearAlgebra.Double.SparseVector,System.Double)">
            <summary>
            Divides a vector with a scalar.
            </summary>
            <param name="leftSide">The vector to divide.</param>
            <param name="rightSide">The scalar value.</param>
            <returns>The result of the division.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.op_Modulus(MathNet.Numerics.LinearAlgebra.Double.SparseVector,System.Double)">
            <summary>
            Computes the modulus of each element of the vector of the given divisor.
            </summary>
            <param name="leftSide">The vector whose elements we want to compute the modulus of.</param>
            <param name="rightSide">The divisor to use,</param>
            <returns>The result of the calculation</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.AbsoluteMinimumIndex">
            <summary>
            Returns the index of the absolute minimum element.
            </summary>
            <returns>The index of absolute minimum element.</returns>   
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.MaximumIndex">
            <summary>
            Returns the index of the absolute maximum element.
            </summary>
            <returns>The index of absolute maximum element.</returns>          
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.MinimumIndex">
            <summary>
            Returns the index of the minimum element.
            </summary>
            <returns>The index of minimum element.</returns>  
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.Sum">
            <summary>
            Computes the sum of the vector's elements.
            </summary>
            <returns>The sum of the vector's elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.SumMagnitudes">
            <summary>
            Computes the sum of the absolute value of the vector's elements.
            </summary>
            <returns>The sum of the absolute value of the vector's elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.DoPointwiseMultiply(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Pointwise multiplies this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to pointwise multiply with this one.</param>
            <param name="result">The vector to store the result of the pointwise multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.DoPointwiseDivide(MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Generic.Vector{System.Double})">
            <summary>
            Pointwise multiplies this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to pointwise multiply with this one.</param>
            <param name="result">The vector to store the result of the pointwise multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.OuterProduct(MathNet.Numerics.LinearAlgebra.Double.SparseVector,MathNet.Numerics.LinearAlgebra.Double.SparseVector)">
            <summary>
            Outer product of two vectors
            </summary>
            <param name="u">First vector</param>
            <param name="v">Second vector</param>
            <returns>Matrix M[i,j] = u[i]*v[j] </returns>
            <exception cref="T:System.ArgumentNullException">If the u vector is <see langword="null"/>.</exception> 
            <exception cref="T:System.ArgumentNullException">If the v vector is <see langword="null"/>.</exception> 
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.OuterProduct(MathNet.Numerics.LinearAlgebra.Double.SparseVector)">
            <summary>
            Outer product of this and another vector.
            </summary>
            <param name="v">The vector to operate on.</param>
            <returns>
            Matrix M[i,j] = this[i] * v[j].
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.Norm(System.Double)">
            <summary>
            Computes the p-Norm.
            </summary>
            <param name="p">The p value.</param>
            <returns>Scalar <c>ret = (sum(abs(this[i])^p))^(1/p)</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.Parse(System.String)">
            <summary>
            Creates a double sparse vector based on a string. The string can be in the following formats (without the
            quotes): 'n', 'n,n,..', '(n,n,..)', '[n,n,...]', where n is a double.
            </summary>
            <returns>
            A double sparse vector containing the values specified by the given string.
            </returns>
            <param name="value">
            The string to parse.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates a double sparse vector based on a string. The string can be in the following formats (without the
            quotes): 'n', 'n,n,..', '(n,n,..)', '[n,n,...]', where n is a double.
            </summary>
            <returns>
            A double sparse vector containing the values specified by the given string.
            </returns>
            <param name="value">
            the string to parse.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.TryParse(System.String,MathNet.Numerics.LinearAlgebra.Double.SparseVector@)">
            <summary>
            Converts the string representation of a real sparse vector to double-precision sparse vector equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing a real vector to convert.
            </param>
            <param name="result">
            The parsed value.
            </param>
            <returns>
            If the conversion succeeds, the result will contain a complex number equivalent to value.
            Otherwise the result will be <c>null</c>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.TryParse(System.String,System.IFormatProvider,MathNet.Numerics.LinearAlgebra.Double.SparseVector@)">
            <summary>
            Converts the string representation of a real sparse vector to double-precision sparse vector equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing a real vector to convert.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about value.
            </param>
            <param name="result">
            The parsed value.
            </param>
            <returns>
            If the conversion succeeds, the result will contain a complex number equivalent to value.
            Otherwise the result will be <c>null</c>.
            </returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.SparseVector.NonZerosCount">
            <summary>
            Gets the number of non zero elements in the vector.
            </summary>
            <value>The number of non zero elements.</value>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage`1.At(System.Int32,System.Int32)">
            <summary>
            Retrieves the requested element without range checking.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage`1.At(System.Int32,System.Int32,`0)">
            <summary>
            Sets the element without range checking.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage`1.RowPointers">
            <summary>
            The array containing the row indices of the existing rows. Element "j" of the array gives the index of the 
            element in the <see cref="F:MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage`1.Values"/> array that is first non-zero element in a row "j"
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage`1.ColumnIndices">
            <summary>
            An array containing the column indices of the non-zero values. Element "I" of the array 
            is the number of the column in matrix that contains the I-th value in the <see cref="F:MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage`1.Values"/> array.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage`1.Values">
            <summary>
            Array that contains the non-zero elements of matrix. Values of the non-zero elements of matrix are mapped into the values 
            array using the row-major storage mapping described in a compressed sparse row (CSR) format.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage`1.ValueCount">
            <summary>
            Gets the number of non zero elements in the matrix.
            </summary>
            <value>The number of non zero elements.</value>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage`1.At(System.Int32,System.Int32)">
            <summary>
            Retrieves the requested element without range checking.
            </summary>
            <param name="row">
            The row of the element.
            </param>
            <param name="column">
            The column of the element.
            </param>
            <returns>
            The requested element.
            </returns>
            <remarks>Not range-checked.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage`1.At(System.Int32,System.Int32,`0)">
            <summary>
            Sets the element without range checking.
            </summary>
            <param name="row"> The row of the element. </param>
            <param name="column"> The column of the element. </param>
            <param name="value"> The value to set the element to. </param>
            <remarks>WARNING: This method is not thread safe. Use "lock" with it and be sure to avoid deadlocks.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage`1.RemoveAtIndexUnchecked(System.Int32,System.Int32)">
            <summary>
            Delete value from internal storage
            </summary>
            <param name="itemIndex">Index of value in nonZeroValues array</param>
            <param name="row">Row number of matrix</param>
            <remarks>WARNING: This method is not thread safe. Use "lock" with it and be sure to avoid deadlocks</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage`1.FindItem(System.Int32,System.Int32)">
            <summary>
            Find item Index in nonZeroValues array
            </summary>
            <param name="row">Matrix row index</param>
            <param name="column">Matrix column index</param>
            <returns>Item index</returns>
            <remarks>WARNING: This method is not thread safe. Use "lock" with it and be sure to avoid deadlocks</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage`1.GrowthSize">
            <summary>
            Calculates the amount with which to grow the storage array's if they need to be
            increased in size.
            </summary>
            <returns>The amount grown.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage`1.Equals(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">
            An object to compare with this object.
            </param>
            <returns>
            <c>true</c> if the current object is equal to the <paramref name="other"/> parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage`1.At(System.Int32,System.Int32)">
            <summary>
            Retrieves the requested element without range checking.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage`1.At(System.Int32,System.Int32,`0)">
            <summary>
            Sets the element without range checking.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage`1.Equals(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">
            An object to compare with this object.
            </param>
            <returns>
            <c>true</c> if the current object is equal to the <paramref name="other"/> parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:MathNet.Numerics.Permutation">
            <summary>
            Class to represent a permutation for a subset of the natural numbers.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Permutation._indices">
            <summary>
            Entry _indices[i] represents the location to which i is permuted to.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Permutation.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the Permutation class.
            </summary>
            <param name="indices">An array which represents where each integer is permuted too: indices[i] represents that integer i
            is permuted to location indices[i].</param>
        </member>
        <member name="M:MathNet.Numerics.Permutation.Inverse">
            <summary>
            Computes the inverse of the permutation.
            </summary>
            <returns>The inverse of the permutation.</returns>
        </member>
        <member name="M:MathNet.Numerics.Permutation.FromInversions(System.Int32[])">
            <summary>
            Construct an array from a sequence of inversions.
            </summary>
            <example>
            From wikipedia: the permutation 12043 has the inversions (0,2), (1,2) and (3,4). This would be
            encoded using the array [22244].
            </example>
            <param name="inv">The set of inversions to construct the permutation from.</param>
            <returns>A permutation generated from a sequence of inversions.</returns>
        </member>
        <member name="M:MathNet.Numerics.Permutation.ToInversions">
            <summary>
            Construct a sequence of inversions from the permutation.
            </summary>
            <example>
            From wikipedia: the permutation 12043 has the inversions (0,2), (1,2) and (3,4). This would be
            encoded using the array [22244].
            </example>
            <returns>A sequence of inversions.</returns>
        </member>
        <member name="M:MathNet.Numerics.Permutation.CheckForProperPermutation(System.Int32[])">
            <summary>
            Checks whether the <paramref name="indices"/> array represents a proper permutation.
            </summary>
            <param name="indices">An array which represents where each integer is permuted too: indices[i] represents that integer i
            is permuted to location indices[i].</param>
            <returns>True if <paramref name="indices"/> represents a proper permutation, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:MathNet.Numerics.Permutation.Dimension">
            <summary>
            Gets the number of elements this permutation is over.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Permutation.Item(System.Int32)">
            <summary>
            Computes where <paramref name="idx"/> permutes too.
            </summary>
            <param name="idx">The index to permute from.</param>
            <returns>The index which is permuted to.</returns>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Beta">
            <summary>
            Implements the Beta distribution. For details about this distribution, see 
            <a href="http://en.wikipedia.org/wiki/Beta_distribution">Wikipedia - Beta distribution</a>.
            </summary>
            <remarks>
            <para>There are a few special cases for the parameterization of the Beta distribution. When both
            shape parameters are positive infinity, the Beta distribution degenerates to a point distribution
            at 0.5. When one of the shape parameters is positive infinity, the distribution degenerates to a point
            distribution at the positive infinity. When both shape parameters are 0.0, the Beta distribution 
            degenerates to a Bernoulli distribution with parameter 0.5. When one shape parameter is 0.0, the
            distribution degenerates to a point distribution at the non-zero shape parameter.</para>
            <para>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can get/set the random number generator by using the <see cref="P:MathNet.Numerics.Distributions.Beta.RandomSource"/> property.</para>
            <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Beta._shapeA">
            <summary>
            Beta shape parameter a.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Beta._shapeB">
            <summary>
            Beta shape parameter b.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Beta._random">
            <summary>
            The distribution's random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Beta.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Beta class.
            </summary>
            <param name="a">The a shape parameter of the Beta distribution.</param>
            <param name="b">The b shape parameter of the Beta distribution.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If any of the Beta parameters are negative.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Beta.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>A string representation of the Beta distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Beta.IsValidParameterSet(System.Double,System.Double)">
            <summary>
            Checks whether the parameters of the distribution are valid. 
            </summary>
            <param name="a">The a shape parameter of the Beta distribution.</param>
            <param name="b">The b shape parameter of the Beta distribution.</param>
            <returns><c>true</c> when the parameters are valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Beta.SetParameters(System.Double,System.Double)">
            <summary>
            Sets the parameters of the distribution after checking their validity.
            </summary>
            <param name="a">The a shape parameter of the Beta distribution.</param>
            <param name="b">The b shape parameter of the Beta distribution.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the parameters don't pass the <see cref="M:MathNet.Numerics.Distributions.Beta.IsValidParameterSet(System.Double,System.Double)"/> function.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Beta.Density(System.Double)">
            <summary>
            Computes the density of the Beta distribution.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Beta.DensityLn(System.Double)">
            <summary>
            Computes the log density of the Beta distribution.
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Beta.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution function of the Beta distribution.
            </summary>
            <param name="x">The location at which to compute the cumulative density.</param>
            <returns>the cumulative density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Beta.SampleUnchecked(System.Random,System.Double,System.Double)">
            <summary>
            Samples Beta distributed random variables by sampling two Gamma variables and normalizing.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="a">The A shape parameter.</param>
            <param name="b">The B shape parameter.</param>
            <returns>a random number from the Beta distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Beta.Sample">
            <summary>
            Generates a sample from the Beta distribution.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Beta.Samples">
            <summary>
            Generates a sequence of samples from the Beta distribution.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Beta.Sample(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sample from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="a">The a shape parameter of the Beta distribution.</param>
            <param name="b">The b shape parameter of the Beta distribution.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Beta.Samples(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="a">The a shape parameter of the Beta distribution.</param>
            <param name="b">The b shape parameter of the Beta distribution.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Beta.A">
            <summary>
            Gets or sets the A shape parameter of the Beta distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Beta.B">
            <summary>
            Gets or sets the B shape parameter of the Beta distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Beta.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Beta.Mean">
            <summary>
            Gets the mean of the Beta distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Beta.Variance">
            <summary>
            Gets the variance of the Beta distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Beta.StdDev">
            <summary>
            Gets the standard deviation of the Beta distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Beta.Entropy">
            <summary>
            Gets the entropy of the Beta distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Beta.Skewness">
            <summary>
            Gets the skewness of the Beta distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Beta.Mode">
            <summary>
            Gets the mode of the Beta distribution; when there are multiple answers, this routine will return 0.5.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Beta.Median">
            <summary>
            Gets the median of the Beta distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Beta.Minimum">
            <summary>
            Gets the minimum of the Beta distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Beta.Maximum">
            <summary>
            Gets the maximum of the Beta distribution.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.ContinuousUniform">
            <summary>
            The continuous uniform distribution is a distribution over real numbers. For details about this distribution, see 
            <a href="http://en.wikipedia.org/wiki/Uniform_distribution_%28continuous%29">Wikipedia - Continuous uniform distribution</a>.
            </summary>
            <remarks><para>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can get/set the random number generator by using the <see cref="P:MathNet.Numerics.Distributions.ContinuousUniform.RandomSource"/> property.</para>
            <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="F:MathNet.Numerics.Distributions.ContinuousUniform._lower">
            <summary>
            The distribution's lower bound.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.ContinuousUniform._upper">
            <summary>
            The distribution's upper bound.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.ContinuousUniform._random">
            <summary>
            The distribution's random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.#ctor">
            <summary>
            Initializes a new instance of the ContinuousUniform class with lower bound 0 and upper bound 1.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the ContinuousUniform class with given lower and upper bounds.
            </summary>
            <param name="lower">Lower bound.</param>
            <param name="upper">Upper bound; must be at least as large as <paramref name="lower"/>.</param>
            <exception cref="T:System.ArgumentException">If the upper bound is smaller than the lower bound.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.IsValidParameterSet(System.Double,System.Double)">
            <summary>
            Checks whether the parameters of the distribution are valid. 
            </summary>
            <param name="lower">Lower bound.</param>
            <param name="upper">Upper bound; must be at least as large as <paramref name="lower"/>.</param>
            <returns><c>true</c> when the parameters are valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.SetParameters(System.Double,System.Double)">
            <summary>
            Sets the parameters of the distribution after checking their validity.
            </summary>
            <param name="lower">Lower bound.</param>
            <param name="upper">Upper bound; must be at least as large as <paramref name="lower"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the parameters don't pass the <see cref="M:MathNet.Numerics.Distributions.ContinuousUniform.IsValidParameterSet(System.Double,System.Double)"/> function.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.Density(System.Double)">
            <summary>
            Computes the density of the distribution.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.DensityLn(System.Double)">
            <summary>
            Computes the log density of the distribution.
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution function of the distribution.
            </summary>
            <param name="x">The location at which to compute the cumulative density.</param>
            <returns>the cumulative density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.SampleUnchecked(System.Random,System.Double,System.Double)">
            <summary>
            Generates one sample from the <c>ContinuousUniform</c> distribution without parameter checking.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="lower">The lower bound of the uniform random variable.</param>
            <param name="upper">The upper bound of the uniform random variable.</param>
            <returns>a uniformly distributed random number.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.Sample">
            <summary>
            Generates a sample from the <c>ContinuousUniform</c> distribution.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.Samples">
            <summary>
            Generates a sequence of samples from the <c>ContinuousUniform</c> distribution.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.Sample(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sample from the <c>ContinuousUniform</c> distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="lower">The lower bound of the uniform random variable.</param>
            <param name="upper">The upper bound of the uniform random variable.</param>
            <returns>a uniformly distributed sample.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.Samples(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the <c>ContinuousUniform</c> distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="lower">The lower bound of the uniform random variable.</param>
            <param name="upper">The upper bound of the uniform random variable.</param>
            <returns>a sequence of uniformly distributed samples.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousUniform.Lower">
            <summary>
            Gets or sets the lower bound of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousUniform.Upper">
            <summary>
            Gets or sets the upper bound of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousUniform.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousUniform.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousUniform.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousUniform.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousUniform.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousUniform.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousUniform.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousUniform.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousUniform.Minimum">
            <summary>
            Gets the minimum of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousUniform.Maximum">
            <summary>
            Gets the maximum of the distribution.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.LogNormal">
            <summary>
            Implements the univariate Log-Normal distribution. For details about this distribution, see 
            <a href="http://en.wikipedia.org/wiki/Log-normal_distribution">Wikipedia - Log-Normal distribution</a>.
            </summary>
            <remarks><para>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can get/set the random number generator by using the <see cref="P:MathNet.Numerics.Distributions.LogNormal.RandomSource"/> property.</para>
            <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="F:MathNet.Numerics.Distributions.LogNormal._mu">
            <summary>
            Keeps track of the mu of the logarithm of the log-log-normal distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.LogNormal._sigma">
            <summary>
            Keeps track of the standard deviation of the logarithm of the log-log-normal distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.LogNormal._random">
            <summary>
            The distribution's random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LogNormal.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.LogNormal"/> class. 
            The distribution will be initialized with the default <seealso cref="T:System.Random"/>
            random number generator.
            </summary>
            <param name="mu">
            The mu of the logarithm of the distribution.
            </param>
            <param name="sigma">
            The standard deviation of the logarithm of the distribution.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LogNormal.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LogNormal.IsValidParameterSet(System.Double,System.Double)">
            <summary>
            Checks whether the parameters of the distribution are valid. 
            </summary>
            <param name="mu">The mu of the logarithm of the distribution.</param>
            <param name="sigma">The standard deviation of the logarithm of the distribution.</param>
            <returns><c>true</c> when the parameters are valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LogNormal.SetParameters(System.Double,System.Double)">
            <summary>
            Sets the parameters of the distribution after checking their validity.
            </summary>
            <param name="mu">The mu of the logarithm of the distribution.</param>
            <param name="sigma">The standard deviation of the logarithm of the distribution.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the parameters don't pass the <see cref="M:MathNet.Numerics.Distributions.LogNormal.IsValidParameterSet(System.Double,System.Double)"/> function.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LogNormal.Density(System.Double)">
            <summary>
            Computes the density of the log-normal distribution.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LogNormal.DensityLn(System.Double)">
            <summary>
            Computes the log density of the log-normal distribution.
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LogNormal.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution function of the log-normal distribution.
            </summary>
            <param name="x">The location at which to compute the cumulative density.</param>
            <returns>the cumulative density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LogNormal.Sample">
            <summary>
            Generates a sample from the log-normal distribution using the <i>Box-Muller</i> algorithm.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LogNormal.Samples">
            <summary>
            Generates a sequence of samples from the log-normal distribution using the <i>Box-Muller</i> algorithm.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LogNormal.Sample(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sample from the log-normal distribution using the <i>Box-Muller</i> algorithm.
            </summary>
            <param name="rng">The random number generator to use.</param>
            <param name="mu">The mu of the logarithm of the distribution.</param>
            <param name="sigma">The standard deviation of the logarithm of the distribution.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LogNormal.Samples(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the log-normal distribution using the <i>Box-Muller</i> algorithm.
            </summary>
            <param name="rng">The random number generator to use.</param>
            <param name="mu">The mu of the logarithm of the distribution.</param>
            <param name="sigma">The standard deviation of the logarithm of the distribution.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LogNormal.Mu">
            <summary>
            Gets or sets the mean of the logarithm of the log-normal.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LogNormal.Sigma">
            <summary>
            Gets or sets the standard deviation of the logarithm of the log-normal.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LogNormal.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LogNormal.Mean">
            <summary>
            Gets the mu of the log-normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LogNormal.Variance">
            <summary>
            Gets the variance of the log-normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LogNormal.StdDev">
            <summary>
            Gets the standard deviation of the log-normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LogNormal.Entropy">
            <summary>
            Gets the entropy of the log-normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LogNormal.Skewness">
            <summary>
            Gets the skewness of the log-normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LogNormal.Mode">
            <summary>
            Gets the mode of the log-normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LogNormal.Median">
            <summary>
            Gets the median of the log-normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LogNormal.Minimum">
            <summary>
            Gets the minimum of the log-normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LogNormal.Maximum">
            <summary>
            Gets the maximum of the log-normal distribution.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Weibull">
            <summary>
            Implements the Weibull distribution. For details about this distribution, see 
            <a href="http://en.wikipedia.org/wiki/Weibull_distribution">Wikipedia - Weibull distribution</a>.
            </summary>
            <remarks>
            <para>The Weibull distribution is parametrized by a shape and scale parameter.</para>
            <para>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can get/set the random number generator by using the <see cref="P:MathNet.Numerics.Distributions.Weibull.RandomSource"/> property.</para>
            <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Weibull._shape">
            <summary>
            Weibull shape parameter.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Weibull._scale">
            <summary>
            Weibull inverse scale parameter.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Weibull._scalePowShapeInv">
            <summary>
            Reusable intermediate result 1 / (<see cref="F:MathNet.Numerics.Distributions.Weibull._scale"/> ^ <see cref="F:MathNet.Numerics.Distributions.Weibull._shape"/>)
            </summary>
            <remarks>
            By caching this parameter we can get slightly better numerics precision
            in certain constellations without any additional computations.
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Weibull._random">
            <summary>
            The distribution's random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Weibull.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Weibull class.
            </summary>
            <param name="shape">The shape of the Weibull distribution.</param>
            <param name="scale">The inverse scale of the Weibull distribution.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Weibull.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Weibull.IsValidParameterSet(System.Double,System.Double)">
            <summary>
            Checks whether the parameters of the distribution are valid. 
            </summary>
            <param name="shape">The shape of the Weibull distribution.</param>
            <param name="scale">The scale of the Weibull distribution.</param>
            <returns><c>true</c> when the parameters positive valid floating point numbers, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Weibull.SetParameters(System.Double,System.Double)">
            <summary>
            Sets the parameters of the distribution after checking their validity.
            </summary>
            <param name="shape">The shape of the Weibull distribution.</param>
            <param name="scale">The inverse scale of the Weibull distribution.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the parameters don't pass the <see cref="M:MathNet.Numerics.Distributions.Weibull.IsValidParameterSet(System.Double,System.Double)"/> function.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Weibull.Density(System.Double)">
            <summary>
            Computes the density of the Weibull distribution.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Weibull.DensityLn(System.Double)">
            <summary>
            Computes the log density of the Weibull distribution.
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Weibull.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution function of the Weibull distribution.
            </summary>
            <param name="x">The location at which to compute the cumulative density.</param>
            <returns>the cumulative density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Weibull.SampleUnchecked(System.Random,System.Double,System.Double)">
            <summary>
            Generates one sample from the Weibull distribution. This method doesn't perform
            any parameter checks.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="shape">The shape of the Weibull distribution.</param>
            <param name="scale">The scale of the Weibull distribution.</param>
            <returns>A sample from a Weibull distributed random variable.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Weibull.Sample">
            <summary>
            Generates a sample from the Weibull distribution.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Weibull.Samples">
            <summary>
            Generates a sequence of samples from the Weibull distribution.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Weibull.Sample(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sample from the Weibull distribution.
            </summary>
            <param name="rng">The random number generator to use.</param>
            <param name="shape">The shape of the Weibull distribution from which to generate samples.</param>
            <param name="scale">The scale of the Weibull distribution from which to generate samples.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Weibull.Samples(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the Weibull distribution.
            </summary>
            <param name="rng">The random number generator to use.</param>
            <param name="shape">The shape of the Weibull distribution from which to generate samples.</param>
            <param name="scale">The scale of the Weibull distribution from which to generate samples.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Weibull.Shape">
            <summary>
            Gets or sets the shape of the Weibull distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Weibull.Scale">
            <summary>
            Gets or sets the scale of the Weibull distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Weibull.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Weibull.Mean">
            <summary>
            Gets the mean of the Weibull distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Weibull.Variance">
            <summary>
            Gets the variance of the Weibull distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Weibull.StdDev">
            <summary>
            Gets the standard deviation of the Weibull distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Weibull.Entropy">
            <summary>
            Gets the entropy of the Weibull distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Weibull.Skewness">
            <summary>
            Gets the skewness of the Weibull distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Weibull.Mode">
            <summary>
            Gets the mode of the Weibull distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Weibull.Median">
            <summary>
            Gets the median of the Weibull distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Weibull.Minimum">
            <summary>
            Gets the minimum of the Weibull distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Weibull.Maximum">
            <summary>
            Gets the maximum of the Weibull distribution.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Gamma">
            <summary>
            Implements the univariate Gamma distribution. For details about this distribution, see 
            <a href="http://en.wikipedia.org/wiki/Gamma_distribution">Wikipedia - Gamma distribution</a>.
            </summary>
            <remarks>
            <para>The Gamma distribution is parametrized by a shape and inverse scale parameter. When we want
            to specify a Gamma distribution which is a point distribution we set the shape parameter to be the
            location of the point distribution and the inverse scale as positive infinity. The distribution
            with shape and inverse scale both zero is undefined.</para>
            <para> Random number generation for the Gamma distribution is based on the algorithm in:
            "A Simple Method for Generating Gamma Variables" - Marsaglia &amp; Tsang
            ACM Transactions on Mathematical Software, Vol. 26, No. 3, September 2000, Pages 363–372.</para>
            <para>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can get/set the random number generator by using the <see cref="P:MathNet.Numerics.Distributions.Gamma.RandomSource"/> property.</para>
            <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Gamma._shape">
            <summary>
            Gamma shape parameter.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Gamma._invScale">
            <summary>
            Gamma inverse scale parameter.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Gamma._random">
            <summary>
            The distribution's random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Gamma class.
            </summary>
            <param name="shape">The shape of the Gamma distribution.</param>
            <param name="invScale">The inverse scale of the Gamma distribution.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.WithShapeScale(System.Double,System.Double)">
            <summary>
            Constructs a Gamma distribution from a shape and scale parameter. The distribution will
            be initialized with the default <seealso cref="T:System.Random"/> random number generator.
            </summary>
            <param name="shape">The shape of the Gamma distribution.</param>
            <param name="scale">The scale of the Gamma distribution.</param>
            <returns>a normal distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.WithShapeInvScale(System.Double,System.Double)">
            <summary>
            Constructs a Gamma distribution from a shape and inverse scale parameter. The distribution will
            be initialized with the default <seealso cref="T:System.Random"/> random number generator.
            </summary>
            <param name="shape">The shape of the Gamma distribution.</param>
            <param name="invScale">The inverse scale of the Gamma distribution.</param>
            <returns>a normal distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.IsValidParameterSet(System.Double,System.Double)">
            <summary>
            Checks whether the parameters of the distribution are valid. 
            </summary>
            <param name="shape">The shape of the Gamma distribution.</param>
            <param name="invScale">The inverse scale of the Gamma distribution.</param>
            <returns><c>true</c> when the parameters are valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.SetParameters(System.Double,System.Double)">
            <summary>
            Sets the parameters of the distribution after checking their validity.
            </summary>
            <param name="shape">The shape of the Gamma distribution.</param>
            <param name="invScale">The inverse scale of the Gamma distribution.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the parameters don't pass the <see cref="M:MathNet.Numerics.Distributions.Gamma.IsValidParameterSet(System.Double,System.Double)"/> function.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.Density(System.Double)">
            <summary>
            Computes the density of the Gamma distribution.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.DensityLn(System.Double)">
            <summary>
            Computes the log density of the Gamma distribution.
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution function of the Gamma distribution.
            </summary>
            <param name="x">The location at which to compute the cumulative density.</param>
            <returns>the cumulative density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.SampleUnchecked(System.Random,System.Double,System.Double)">
            <summary>
            <para>Sampling implementation based on:
            "A Simple Method for Generating Gamma Variables" - Marsaglia &amp; Tsang
            ACM Transactions on Mathematical Software, Vol. 26, No. 3, September 2000, Pages 363–372.</para>
            <para>This method performs no parameter checks.</para>
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="shape">The shape of the Gamma distribution.</param>
            <param name="invScale">The inverse scale of the Gamma distribution.</param>
            <returns>A sample from a Gamma distributed random variable.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.Sample">
            <summary>
            Generates a sample from the Gamma distribution.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.Samples">
            <summary>
            Generates a sequence of samples from the Gamma distribution.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.Sample(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sample from the Gamma distribution.
            </summary>
            <param name="rng">The random number generator to use.</param>
            <param name="shape">The shape of the Gamma distribution from which to generate samples.</param>
            <param name="invScale">The inverse scale of the Gamma distribution from which to generate samples.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.Samples(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the Gamma distribution.
            </summary>
            <param name="rng">The random number generator to use.</param>
            <param name="shape">The shape of the Gamma distribution from which to generate samples.</param>
            <param name="invScale">The inverse scale of the Gamma distribution from which to generate samples.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Gamma.Shape">
            <summary>
            Gets or sets the shape of the Gamma distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Gamma.Scale">
            <summary>
            Gets or sets the scale of the Gamma distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Gamma.InvScale">
            <summary>
            Gets or sets the inverse scale of the Gamma distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Gamma.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Gamma.Mean">
            <summary>
            Gets the mean of the Gamma distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Gamma.Variance">
            <summary>
            Gets the variance of the Gamma distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Gamma.StdDev">
            <summary>
            Gets the standard deviation of the Gamma distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Gamma.Entropy">
            <summary>
            Gets the entropy of the Gamma distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Gamma.Skewness">
            <summary>
            Gets the skewness of the Gamma distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Gamma.Mode">
            <summary>
            Gets the mode of the Gamma distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Gamma.Median">
            <summary>
            Gets the median of the Gamma distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Gamma.Minimum">
            <summary>
            Gets the minimum of the Gamma distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Gamma.Maximum">
            <summary>
            Gets the maximum of the Gamma distribution.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Normal">
            <summary>
            Implements the univariate Normal (or Gaussian) distribution. For details about this distribution, see 
            <a href="http://en.wikipedia.org/wiki/Normal_distribution">Wikipedia - Normal distribution</a>.
            </summary>
            <remarks><para>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can get/set the random number generator by using the <see cref="P:MathNet.Numerics.Distributions.Normal.RandomSource"/> property.</para>
            <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Normal._mean">
            <summary>
            Keeps track of the mean of the normal distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Normal._stdDev">
            <summary>
            Keeps track of the standard deviation of the normal distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Normal._random">
            <summary>
            The distribution's random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.#ctor">
            <summary>
            Initializes a new instance of the Normal class. This is a normal distribution with mean 0.0
            and standard deviation 1.0. The distribution will
            be initialized with the default <seealso cref="T:System.Random"/> random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Normal class with a particular mean and standard deviation. The distribution will
            be initialized with the default <seealso cref="T:System.Random"/> random number generator.
            </summary>
            <param name="mean">The mean of the normal distribution.</param>
            <param name="stddev">The standard deviation of the normal distribution.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.WithMeanStdDev(System.Double,System.Double)">
            <summary>
            Constructs a normal distribution from a mean and standard deviation. The distribution will
            be initialized with the default <seealso cref="T:System.Random"/> random number generator.
            </summary>
            <param name="mean">The mean of the normal distribution.</param>
            <param name="stddev">The standard deviation of the normal distribution.</param>
            <returns>a normal distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.WithMeanVariance(System.Double,System.Double)">
            <summary>
            Constructs a normal distribution from a mean and variance. The distribution will
            be initialized with the default <seealso cref="T:System.Random"/> random number generator.
            </summary>
            <param name="mean">The mean of the normal distribution.</param>
            <param name="var">The variance of the normal distribution.</param>
            <returns>a normal distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.WithMeanPrecision(System.Double,System.Double)">
            <summary>
            Constructs a normal distribution from a mean and precision. The distribution will
            be initialized with the default <seealso cref="T:System.Random"/> random number generator.
            </summary>
            <param name="mean">The mean of the normal distribution.</param>
            <param name="precision">The precision of the normal distribution.</param>
            <returns>a normal distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.IsValidParameterSet(System.Double,System.Double)">
            <summary>
            Checks whether the parameters of the distribution are valid. 
            </summary>
            <param name="mean">The mean of the normal distribution.</param>
            <param name="stddev">The standard deviation of the normal distribution.</param>
            <returns><c>true</c> when the parameters are valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.SetParameters(System.Double,System.Double)">
            <summary>
            Sets the parameters of the distribution after checking their validity.
            </summary>
            <param name="mean">The mean of the normal distribution.</param>
            <param name="stddev">The standard deviation of the normal distribution.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the parameters don't pass the <see cref="M:MathNet.Numerics.Distributions.Normal.IsValidParameterSet(System.Double,System.Double)"/> function.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.Density(System.Double,System.Double,System.Double)">
            <summary>
            Computes the density of the normal distribution.
            </summary>
            <param name="mean">The mean of the normal distribution.</param>
            <param name="sdev">The standard deviation of the normal distribution.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.DensityLn(System.Double,System.Double,System.Double)">
            <summary>
            Computes the log density of the normal distribution.
            </summary>
            <param name="mean">The mean of the normal distribution.</param>
            <param name="sdev">The standard deviation of the normal distribution.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.Density(System.Double)">
            <summary>
            Computes the density of the normal distribution.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.DensityLn(System.Double)">
            <summary>
            Computes the log density of the normal distribution.
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.CumulativeDistribution(System.Double,System.Double,System.Double)">
            <summary>
            Computes the cumulative distribution function of the normal distribution.
            </summary>
            <param name="mean">The mean of the normal distribution.</param>
            <param name="sdev">The standard deviation of the normal distribution.</param>
            <param name="x">The location at which to compute the cumulative density.</param>
            <returns>the cumulative density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution function of the normal distribution.
            </summary>
            <param name="x">The location at which to compute the cumulative density.</param>
            <returns>the cumulative density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.InverseCumulativeDistribution(System.Double)">
            <summary>
            Computes the inverse cumulative distribution function of the normal distribution.
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density.</param>
            <returns>the inverse cumulative density at <paramref name="p"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.SampleUncheckedBoxMuller(System.Random)">
            <summary>
            Samples a pair of standard normal distributed random variables using the <i>Box-Muller</i> algorithm.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <returns>a pair of random numbers from the standard normal distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.SampleUnchecked(System.Random,System.Double,System.Double)">
            <summary>
            Samples the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="mean">The mean of the normal distribution from which to generate samples.</param>
            <param name="stddev">The standard deviation of the normal distribution from which to generate samples.</param>
            <returns>a random number from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.Sample">
            <summary>
            Generates a sample from the normal distribution using the <i>Box-Muller</i> algorithm.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.Samples">
            <summary>
            Generates a sequence of samples from the normal distribution using the <i>Box-Muller</i> algorithm.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.Sample(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sample from the normal distribution using the <i>Box-Muller</i> algorithm.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="mean">The mean of the normal distribution from which to generate samples.</param>
            <param name="stddev">The standard deviation of the normal distribution from which to generate samples.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.Samples(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the normal distribution using the <i>Box-Muller</i> algorithm.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="mean">The mean of the normal distribution from which to generate samples.</param>
            <param name="stddev">The standard deviation of the normal distribution from which to generate samples.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Normal.Precision">
            <summary>
            Gets or sets the precision of the normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Normal.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Normal.Mean">
            <summary>
            Gets or sets the mean of the normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Normal.Variance">
            <summary>
            Gets or sets the variance of the normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Normal.StdDev">
            <summary>
            Gets or sets the standard deviation of the normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Normal.Entropy">
            <summary>
            Gets the entropy of the normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Normal.Skewness">
            <summary>
            Gets the skewness of the normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Normal.Mode">
            <summary>
            Gets the mode of the normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Normal.Median">
            <summary>
            Gets the median of the normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Normal.Minimum">
            <summary>
            Gets the minimum of the normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Normal.Maximum">
            <summary>
            Gets the maximum of the normal distribution.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Bernoulli">
            <summary>
            The Bernoulli distribution is a distribution over bits. The parameter
            p specifies the probability that a 1 is generated.
            <a href="http://en.wikipedia.org/wiki/Bernoulli_distribution">Wikipedia - Bernoulli distribution</a>.
            </summary>
            <remarks><para>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can set the random number generator by using the <see cref="P:MathNet.Numerics.Distributions.Bernoulli.RandomSource"/> property.</para>
            <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Bernoulli._p">
            <summary>
            The probability of generating a one.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Bernoulli._random">
            <summary>
            The distribution's random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Bernoulli.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the Bernoulli class.
            </summary>
            <param name="p">The probability of generating one.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the Bernoulli parameter is not in the range [0,1].</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Bernoulli.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Bernoulli.IsValidParameterSet(System.Double)">
            <summary>
            Checks whether the parameters of the distribution are valid. 
            </summary>
            <param name="p">The probability of generating a one.</param>
            <returns><c>true</c> when the parameters are valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Bernoulli.SetParameters(System.Double)">
            <summary>
            Sets the parameters of the distribution after checking their validity.
            </summary>
            <param name="p">The probability of generating a one.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the parameters don't pass the <see cref="M:MathNet.Numerics.Distributions.Bernoulli.IsValidParameterSet(System.Double)"/> function.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Bernoulli.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution function of the Bernoulli distribution.
            </summary>
            <param name="x">The location at which to compute the cumulative density.</param>
            <returns>the cumulative density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Bernoulli.Probability(System.Int32)">
            <summary>
            Computes values of the probability mass function.
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <returns>the probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Bernoulli.ProbabilityLn(System.Int32)">
            <summary>
            Computes values of the log probability mass function.
            </summary>
            <param name="k">The location in the domain where we want to evaluate the log probability mass function.</param>
            <returns>the log probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Bernoulli.SampleUnchecked(System.Random,System.Double)">
            <summary>
            Generates one sample from the Bernoulli distribution.
            </summary>
            <param name="rnd">The random source to use.</param>
            <param name="p">The probability of generating a one.</param>
            <returns>A random sample from the Bernoulli distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Bernoulli.Sample">
            <summary>
            Samples a Bernoulli distributed random variable.
            </summary>
            <returns>A sample from the Bernoulli distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Bernoulli.Samples">
            <summary>
            Samples an array of Bernoulli distributed random variables.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Bernoulli.Sample(System.Random,System.Double)">
            <summary>
            Samples a Bernoulli distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="p">The probability of generating a 1.</param>
            <returns>A sample from the Bernoulli distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Bernoulli.Samples(System.Random,System.Double)">
            <summary>
            Samples a sequence of Bernoulli distributed random variables.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="p">The probability of generating a 1.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Bernoulli.P">
            <summary>
            Gets or sets the probability of generating a one.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Bernoulli.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Bernoulli.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Bernoulli.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Bernoulli.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Bernoulli.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Bernoulli.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Bernoulli.Minimum">
            <summary>
            Gets the smallest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Bernoulli.Maximum">
            <summary>
            Gets the largest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Bernoulli.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Bernoulli.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Binomial">
            <summary>
            Implements the binomial distribution. For details about this distribution, see 
            <a href="http://en.wikipedia.org/wiki/Binomial_distribution">Wikipedia - Binomial distribution</a>.
            </summary>
            <remarks><para>The distribution is parameterized by a probability (between 0.0 and 1.0).</para>
            <para>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can set the random number generator by using the <see cref="P:MathNet.Numerics.Distributions.Binomial.RandomSource"/> property.</para>
            <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Binomial._p">
            <summary>
            Stores the normalized binomial probability.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Binomial._n">
            <summary>
            The number of trials.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Binomial._random">
            <summary>
            The distribution's random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Binomial.#ctor(System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the Binomial class.
            </summary>
            <param name="p">The success probability of a trial.</param>
            <param name="n">The number of trials.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="p"/> is not in the interval [0.0,1.0].</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="n"/> is negative.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Binomial.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Binomial.IsValidParameterSet(System.Double,System.Int32)">
            <summary>
            Checks whether the parameters of the distribution are valid. 
            </summary>
            <param name="p">The success probability of a trial.</param>
            <param name="n">The number of trials.</param>
            <returns><c>false</c> <paramref name="p"/> is not in the interval [0.0,1.0] or <paramref name="n"/> is negative, <c>true</c> otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Binomial.SetParameters(System.Double,System.Int32)">
            <summary>
            Sets the parameters of the distribution after checking their validity.
            </summary>
            <param name="p">The success probability of a trial.</param>
            <param name="n">The number of trials.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="p"/> is not in the interval [0.0,1.0].</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="n"/> is negative.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Binomial.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution function of the Binomial distribution.
            </summary>
            <param name="x">The location at which to compute the cumulative density.</param>
            <returns>the cumulative density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Binomial.Probability(System.Int32)">
            <summary>
            Computes values of the probability mass function.
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <returns>the probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Binomial.ProbabilityLn(System.Int32)">
            <summary>
            Computes values of the log probability mass function.
            </summary>
            <param name="k">The location in the domain where we want to evaluate the log probability mass function.</param>
            <returns>the log probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Binomial.SampleUnchecked(System.Random,System.Double,System.Int32)">
            <summary>
            Generates a sample from the Binomial distribution without doing parameter checking.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="p">The success probability of a trial; must be in the interval [0.0, 1.0].</param>
            <param name="n">The number of trials; must be positive.</param>
            <returns>The number of successful trials.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Binomial.Sample">
            <summary>
            Samples a Binomially distributed random variable.
            </summary>
            <returns>The number of successes in N trials.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Binomial.Samples">
            <summary>
            Samples an array of Binomially distributed random variables.
            </summary>
            <returns>a sequence of successes in N trials.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Binomial.Sample(System.Random,System.Double,System.Int32)">
            <summary>
            Samples a binomially distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="p">The success probability of a trial; must be in the interval [0.0, 1.0].</param>
            <param name="n">The number of trials; must be positive.</param>
            <returns>The number of successes in <paramref name="n"/> trials.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Binomial.Samples(System.Random,System.Double,System.Int32)">
            <summary>
            Samples a sequence of binomially distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="p">The success probability of a trial; must be in the interval [0.0, 1.0].</param>
            <param name="n">The number of trials; must be positive.</param>
            <returns>a sequence of successes in <paramref name="n"/> trials.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Binomial.P">
            <summary>
            Gets or sets the success probability.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Binomial.N">
            <summary>
            Gets or sets the number of trials.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Binomial.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Binomial.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Binomial.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Binomial.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Binomial.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Binomial.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Binomial.Minimum">
            <summary>
            Gets the smallest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Binomial.Maximum">
            <summary>
            Gets the largest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Binomial.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Binomial.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Categorical">
            <summary>
            Implements the categorical distribution. For details about this distribution, see 
            <a href="http://en.wikipedia.org/wiki/Categorical_distribution">Wikipedia - Categorical distribution</a>. This
            distribution is sometimes called the Discrete distribution.
            </summary>
            <remarks><para>The distribution is parameterized by a vector of ratios: in other words, the parameter
            does not have to be normalized and sum to 1. The reason is that some vectors can't be exactly normalized
            to sum to 1 in floating point representation.</para>
            <para>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can set the random number generator by using the <see cref="P:MathNet.Numerics.Distributions.Categorical.RandomSource"/> property.</para>
            <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of the Categorical class.
            </summary>
            <param name="probabilityMass">An array of nonnegative ratios: this array does not need to be normalized 
            as this is often impossible using floating point arithmetic.</param>
            <exception cref="T:System.ArgumentException">If any of the probabilities are negative or do not sum to one.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.#ctor(MathNet.Numerics.Statistics.Histogram)">
            <summary>
            Initializes a new instance of the Categorical class from a <paramref name="histogram"/>. The distribution 
            will not be automatically updated when the histogram changes. The categorical distribution will have
            one value for each bucket and a probability for that value proportional to the bucket count.
            </summary>
            <param name="histogram">The histogram from which to create the categorical variable.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.IsValidProbabilityMass(System.Double[])">
            <summary>
            Checks whether the parameters of the distribution are valid. 
            </summary>
            <param name="p">An array of nonnegative ratios: this array does not need to be normalized as this is often impossible using floating point arithmetic.</param>
            <returns>If any of the probabilities are negative returns <c>false</c>, or if the sum of parameters is 0.0; otherwise <c>true</c></returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.IsValidCumulativeDistribution(System.Double[])">
            <summary>
            Checks whether the parameters of the distribution are valid. 
            </summary>
            <param name="cdf">An array of nonnegative ratios: this array does not need to be normalized as this is often impossible using floating point arithmetic.</param>
            <returns>If any of the probabilities are negative returns <c>false</c>, or if the sum of parameters is 0.0; otherwise <c>true</c></returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.SetParameters(System.Double[])">
            <summary>
            Sets the parameters of the distribution after checking their validity.
            </summary>
            <param name="p">An array of nonnegative ratios: this array does not need to be normalized 
            as this is often impossible using floating point arithmetic.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the parameters don't pass the <see cref="M:MathNet.Numerics.Distributions.Categorical.IsValidProbabilityMass(System.Double[])"/> function.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution function of the Binomial distribution.
            </summary>
            <param name="x">The location at which to compute the cumulative density.</param>
            <returns>the cumulative density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.Probability(System.Int32)">
            <summary>
            Computes values of the probability mass function.
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <returns>the probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.ProbabilityLn(System.Int32)">
            <summary>
            Computes values of the log probability mass function.
            </summary>
            <param name="k">The location in the domain where we want to evaluate the log probability mass function.</param>
            <returns>the log probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.ProbabilityMassToCumulativeDistribution(System.Double[])">
            <summary>
            Computes the cumulative distribution function. This method performs no parameter checking.
            If the probability mass was normalized, the resulting cumulative distribution is normalized as well (up to numerical errors).
            </summary>
            <param name="pmfUnnormalized">An array of nonnegative ratios: this array does not need to be normalized 
            as this is often impossible using floating point arithmetic.</param>
            <returns>An array representing the unnormalized cumulative distribution function.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.SampleUnchecked(System.Random,System.Double[])">
            <summary>
            Returns one trials from the categorical distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="cdfUnnormalized">The (unnormalized) cumulative distribution of the probability distribution.</param>
            <returns>One sample from the categorical distribution implied by <paramref name="cdfUnnormalized"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.Sample">
            <summary>
            Samples a Binomially distributed random variable.
            </summary>
            <returns>The number of successful trials.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.Samples">
            <summary>
            Samples an array of Bernoulli distributed random variables.
            </summary>
            <returns>a sequence of successful trial counts.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.Sample(System.Random,System.Double[])">
            <summary>
            Samples one categorical distributed random variable; also known as the Discrete distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="pmfUnnormalized">An array of nonnegative ratios: this array does not need to be normalized 
            as this is often impossible using floating point arithmetic.</param>
            <returns>One random integer between 0 and the size of the categorical (exclusive).</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.SampleWithCumulativeDistribution(System.Random,System.Double[])">
            <summary>
            Samples one categorical distributed random variable; also known as the Discrete distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="cdfUnnormalized">An array of the cumulative distribution. Not assumed to be normalized.</param>
            <returns>One random integer between 0 and the size of the categorical (exclusive).</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.SampleWithProbabilityMass(System.Random,System.Double[])">
            <summary>
            Samples one categorical distributed random variable; also known as the Discrete distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="pmfUnnormalized">An array of nonnegative ratios. Not assumed to be normalized.</param>
            <returns>One random integer between 0 and the size of the categorical (exclusive).</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.Samples(System.Random,System.Double[])">
            <summary>
            Samples a categorically distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="p">An array of nonnegative ratios: this array does not need to be normalized 
            as this is often impossible using floating point arithmetic.</param>
            <returns>random integers between 0 and the size of the categorical (exclusive).</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.SamplesWithCumulativeDistribution(System.Random,System.Double[])">
            <summary>
            Samples a categorically distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="cdfUnnormalized">An array of the cumulative distribution. Not assumed to be normalized.</param>
            <returns>random integers between 0 and the size of the categorical (exclusive).</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.SamplesWithProbabilityMass(System.Random,System.Double[])">
            <summary>
            Samples a categorically distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="pmfUnnormalized">An array of nonnegative ratios. Not assumed to be normalized.</param>
            <returns>random integers between 0 and the size of the categorical (exclusive).</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.InverseCumulativeDistribution(System.Double[],System.Double)">
            <summary>
            Returns the inverse of the distribution function for the categorical distribution
            specified by the given normalized CDF, for the given probability.
            </summary>
            <param name="cdfUnnormalized">An array corresponding to a CDF for a categorical distribution. Not assumed to be normalized.</param>
            <param name="probability">A real number between 0 and 1.</param>
            <returns>An integer between 0 and the size of the categorical (exclusive),
            that corresponds to the inverse CDF for the given probability.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Categorical.P">
            <summary>
            Gets or sets the normalized probability vector of the multinomial.
            </summary>
            <remarks>Sometimes the normalized probability vector cannot be represented
            exactly in a floating point representation.</remarks>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Categorical.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Categorical.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Categorical.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Categorical.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Categorical.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Categorical.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
            <remarks>Throws a <see cref="T:System.NotSupportedException"/>.</remarks>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Categorical.Minimum">
            <summary>
            Gets the smallest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Categorical.Maximum">
            <summary>
            Gets the largest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Categorical.Mode">
            <summary>
            Gets he mode of the distribution.
            </summary>
            <remarks>Throws a <see cref="T:System.NotSupportedException"/>.</remarks>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Categorical.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.DiscreteUniform">
            <summary>
            The discrete uniform distribution is a distribution over integers. The distribution
            is parameterized by a lower and upper bound (both inclusive).
            <a href="http://en.wikipedia.org/wiki/Uniform_distribution_%28discrete%29">Wikipedia - Discrete uniform distribution</a>.
            </summary>
            <remarks><para>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can set the random number generator by using the <see cref="P:MathNet.Numerics.Distributions.DiscreteUniform.RandomSource"/> property.</para>
            <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="F:MathNet.Numerics.Distributions.DiscreteUniform._lower">
            <summary>
            The distribution's lower bound.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.DiscreteUniform._upper">
            <summary>
            The distribution's upper bound.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.DiscreteUniform._random">
            <summary>
            The distribution's random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniform.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the DiscreteUniform class.
            </summary>
            <param name="lower">Lower bound.</param>
            <param name="upper">Upper bound; must be at least as large as <paramref name="lower"/>.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniform.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniform.IsValidParameterSet(System.Int32,System.Int32)">
            <summary>
            Checks whether the parameters of the distribution are valid. 
            </summary>
            <param name="lower">Lower bound.</param>
            <param name="upper">Upper bound; must be at least as large as <paramref name="lower"/>.</param>
            <returns><c>true</c> when the parameters are valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniform.SetParameters(System.Int32,System.Int32)">
            <summary>
            Sets the parameters of the distribution after checking their validity.
            </summary>
            <param name="lower">Lower bound.</param>
            <param name="upper">Upper bound; must be at least as large as <paramref name="lower"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the parameters don't pass the <see cref="M:MathNet.Numerics.Distributions.DiscreteUniform.IsValidParameterSet(System.Int32,System.Int32)"/> function.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniform.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution function of the Bernoulli distribution.
            </summary>
            <param name="x">The location at which to compute the cumulative density.</param>
            <returns>the cumulative density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniform.Probability(System.Int32)">
            <summary>
            Computes values of the probability mass function.
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <returns>
            the probability mass at location <paramref name="k"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniform.ProbabilityLn(System.Int32)">
            <summary>
            Computes the probability of a specific value.
            </summary>
            <param name="k">The location in the domain where we want to evaluate the log probability mass function.</param>
            <returns>
            the log probability mass at location <paramref name="k"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniform.SampleUnchecked(System.Random,System.Int32,System.Int32)">
            <summary>
            Generates one sample from the discrete uniform distribution. This method does not do any parameter checking.
            </summary>
            <param name="rnd">The random source to use.</param>
            <param name="lower">The lower bound of the uniform random variable.</param>
            <param name="upper">The upper bound of the uniform random variable.</param>
            <returns>A random sample from the discrete uniform distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniform.Sample">
            <summary>
            Draws a random sample from the distribution.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniform.Samples">
            <summary>
            Samples an array of uniformly distributed random variables.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniform.Sample(System.Random,System.Int32,System.Int32)">
            <summary>
            Samples a uniformly distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="lower">The lower bound of the uniform random variable.</param>
            <param name="upper">The upper bound of the uniform random variable.</param>
            <returns>A sample from the discrete uniform distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniform.Samples(System.Random,System.Int32,System.Int32)">
            <summary>
            Samples a sequence of uniformly distributed random variables.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="lower">The lower bound of the uniform random variable.</param>
            <param name="upper">The upper bound of the uniform random variable.</param>
            <returns>a sequence of samples from the discrete uniform distribution.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteUniform.LowerBound">
            <summary>
            Gets or sets the lower bound of the probability distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteUniform.UpperBound">
            <summary>
            Gets or sets the upper bound of the probability distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteUniform.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteUniform.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteUniform.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteUniform.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteUniform.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteUniform.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteUniform.Minimum">
            <summary>
            Gets the smallest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteUniform.Maximum">
            <summary>
            Gets the largest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteUniform.Mode">
            <summary>
            Gets the mode of the distribution; since every element in the domain has the same probability this method returns the middle one.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteUniform.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Dirichlet">
            <summary>
            Implements the multivariate Dirichlet distribution. For details about this distribution, see 
            <a href="http://en.wikipedia.org/wiki/Dirichlet_distribution">Wikipedia - Dirichlet distribution</a>.
            </summary>
            <remarks><para>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can get/set the random number generator by using the <see cref="P:MathNet.Numerics.Distributions.Dirichlet.RandomSource"/> property.</para>
            <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Dirichlet._alpha">
            <summary>
            The Dirichlet distribution parameters.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Dirichlet._random">
            <summary>
            The distribution's random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Dirichlet.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of the Dirichlet class. The distribution will
            be initialized with the default <seealso cref="T:System.Random"/> random number generator.
            </summary>
            <param name="alpha">An array with the Dirichlet parameters.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Dirichlet.#ctor(System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.Dirichlet"/> class. 
            <seealso cref="T:System.Random"/>
            random number generator.
            </summary>
            <param name="alpha">
            The value of each parameter of the Dirichlet distribution.
            </param>
            <param name="k">
            The dimension of the Dirichlet distribution.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Dirichlet.IsValidParameterSet(System.Double[])">
            <summary>
            Checks whether the parameters of the distribution are valid: no
            parameter can be less than zero and at least one parameter should be
            larger than zero.
            </summary>
            <param name="alpha">The parameters of the Dirichlet distribution.
            </param>
            <returns><c>true</c> when the parameters are valid, <c>false</c>
            otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Dirichlet.SetParameters(System.Double[])">
            <summary>
            Sets the parameters of the distribution after checking their validity.
            </summary>
            <param name="alpha">The parameters of the Dirichlet distribution.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the parameters don't pass the <see cref="M:MathNet.Numerics.Distributions.Dirichlet.IsValidParameterSet(System.Double[])"/> function.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Dirichlet.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Dirichlet.Density(System.Double[])">
            <summary>
            Computes the density of the distribution.
            </summary>
            <param name="x">The locations at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <remarks>The Dirichlet distribution requires that the sum of the components of x equals 1. 
            You can also leave out the last <paramref name="x"/> component, and it will be computed from the others. </remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Dirichlet.DensityLn(System.Double[])">
            <summary>
            Computes the log density of the distribution.
            </summary>
            <param name="x">The locations at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Dirichlet.Sample">
            <summary>
            Samples a Dirichlet distributed random vector.
            </summary>
            <returns>A sample from this distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Dirichlet.Sample(System.Random,System.Double[])">
            <summary>
            Samples a Dirichlet distributed random vector.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="alpha">The Dirichlet distribution parameter.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Dirichlet.Dimension">
            <summary>
            Gets the dimension of the Dirichlet distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Dirichlet.Alpha">
            <summary>
            Gets or sets the parameters of the Dirichlet distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Dirichlet.AlphaSum">
            <summary>
            Gets the sum of the Dirichlet parameters.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Dirichlet.Mean">
            <summary>
            Gets the mean of the Dirichlet distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Dirichlet.Variance">
            <summary>
            Gets the variance of the Dirichlet distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Dirichlet.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Dirichlet.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Multinomial">
            <summary>
            Implements the multinomial distribution. For details about this distribution, see 
            <a href="http://en.wikipedia.org/wiki/Multinomial_distribution">Wikipedia - Multinomial distribution</a>.
            </summary>
            <remarks><para>The distribution is parameterized by a vector of ratios: in other words, the parameter
            does not have to be normalized and sum to 1. The reason is that some vectors can't be exactly normalized
            to sum to 1 in floating point representation.</para>
            <para>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can set the random number generator by using the <see cref="P:MathNet.Numerics.Distributions.Multinomial.RandomSource"/> property.</para>
            <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Multinomial._p">
            <summary>
            Stores the normalized multinomial probabilities.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Multinomial._n">
            <summary>
            The number of trials.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Multinomial._random">
            <summary>
            The distribution's random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Multinomial.#ctor(System.Double[],System.Int32)">
            <summary>
            Initializes a new instance of the Multinomial class.
            </summary>
            <param name="p">An array of nonnegative ratios: this array does not need to be normalized 
            as this is often impossible using floating point arithmetic.</param>
            <param name="n">The number of trials.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If any of the probabilities are negative or do not sum to one.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="n"/> is negative.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Multinomial.#ctor(MathNet.Numerics.Statistics.Histogram,System.Int32)">
            <summary>
            Initializes a new instance of the Multinomial class from histogram <paramref name="h"/>. The distribution will
            not be automatically updated when the histogram changes.
            </summary>
            <param name="h">Histogram instance</param>
            <param name="n">The number of trials.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If any of the probabilities are negative or do not sum to one.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="n"/> is negative.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Multinomial.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Multinomial.IsValidParameterSet(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Checks whether the parameters of the distribution are valid. 
            </summary>
            <param name="p">An array of nonnegative ratios: this array does not need to be normalized 
            as this is often impossible using floating point arithmetic.</param>
            <param name="n">The number of trials.</param>
            <returns>If any of the probabilities are negative returns <c>false</c>, 
            if the sum of parameters is 0.0, or if the number of trials is negative; otherwise <c>true</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Multinomial.SetParameters(System.Double[],System.Int32)">
            <summary>
            Sets the parameters of the distribution after checking their validity.
            </summary>
            <param name="p">An array of nonnegative ratios: this array does not need to be normalized 
            as this is often impossible using floating point arithmetic.</param>
            <param name="n">The number of trials.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the parameters don't pass the <see cref="M:MathNet.Numerics.Distributions.Multinomial.IsValidParameterSet(System.Collections.Generic.IEnumerable{System.Double},System.Int32)"/> function.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Multinomial.Probability(System.Int32[])">
            <summary>
            Computes values of the probability mass function.
            </summary>
            <param name="x">Non-negative integers x1, ..., xk</param>
            <returns>The probability mass at location <paramref name="x"/>.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="x"/> is null.</exception>
            <exception cref="T:System.ArgumentException">When length of <paramref name="x"/> is not equal to event probabilities count.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Multinomial.ProbabilityLn(System.Int32[])">
            <summary>
            Computes values of the log probability mass function.
            </summary>
            <param name="x">Non-negative integers x1, ..., xk</param>
            <returns>The log probability mass at location <paramref name="x"/>.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="x"/> is null.</exception>
            <exception cref="T:System.ArgumentException">When length of <paramref name="x"/> is not equal to event probabilities count.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Multinomial.Sample">
            <summary>
            Samples one multinomial distributed random variable.
            </summary>
            <returns>the counts for each of the different possible values.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Multinomial.Samples">
            <summary>
            Samples a sequence multinomially distributed random variables.
            </summary>
            <returns>a sequence of counts for each of the different possible values.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Multinomial.Sample(System.Random,System.Double[],System.Int32)">
            <summary>
            Samples one multinomial distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="p">An array of nonnegative ratios: this array does not need to be normalized 
            as this is often impossible using floating point arithmetic.</param>
            <param name="n">The number of trials.</param>
            <returns>the counts for each of the different possible values.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Multinomial.Samples(System.Random,System.Double[],System.Int32)">
            <summary>
            Samples a multinomially distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="p">An array of nonnegative ratios: this array does not need to be normalized 
            as this is often impossible using floating point arithmetic.</param>
            <param name="n">The number of variables needed.</param>
            <returns>a sequence of counts for each of the different possible values.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Multinomial.P">
            <summary>
            Gets or sets the proportion of ratios.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Multinomial.N">
            <summary>
            Gets or sets the number of trials.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Multinomial.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Multinomial.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Multinomial.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Multinomial.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteHartleyTransform">
            <summary>
            Fast (FHT) Implementation of the Discrete Hartley Transform (DHT).
            </summary>
            <summary>
            Fast (FHT) Implementation of the Discrete Hartley Transform (DHT).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteHartleyTransform.Naive(System.Double[])">
            <summary>
            Naive generic DHT, useful e.g. to verify faster algorithms.
            </summary>
            <param name="samples">Time-space sample vector.</param>
            <returns>Corresponding frequency-space vector.</returns>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteHartleyTransform.NaiveForward(System.Double[],MathNet.Numerics.IntegralTransforms.HartleyOptions)">
            <summary>
            Naive forward DHT, useful e.g. to verify faster algorithms.
            </summary>
            <param name="timeSpace">Time-space sample vector.</param>
            <param name="options">Hartley Transform Convention Options.</param>
            <returns>Corresponding frequency-space vector.</returns>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteHartleyTransform.NaiveInverse(System.Double[],MathNet.Numerics.IntegralTransforms.HartleyOptions)">
            <summary>
            Naive inverse DHT, useful e.g. to verify faster algorithms.
            </summary>
            <param name="frequencySpace">Frequency-space sample vector.</param>
            <param name="options">Hartley Transform Convention Options.</param>
            <returns>Corresponding time-space vector.</returns>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteHartleyTransform.ForwardScaleByOptions(MathNet.Numerics.IntegralTransforms.HartleyOptions,System.Double[])">
            <summary>
            Rescale FFT-the resulting vector according to the provided convention options.
            </summary>
            <param name="options">Fourier Transform Convention Options.</param>
            <param name="samples">Sample Vector.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteHartleyTransform.InverseScaleByOptions(MathNet.Numerics.IntegralTransforms.HartleyOptions,System.Double[])">
            <summary>
            Rescale the iFFT-resulting vector according to the provided convention options.
            </summary>
            <param name="options">Fourier Transform Convention Options.</param>
            <param name="samples">Sample Vector.</param>
        </member>
        <member name="T:MathNet.Numerics.IntegralTransforms.HartleyOptions">
            <summary>
            Hartley Transform Convention
            </summary>
        </member>
        <member name="F:MathNet.Numerics.IntegralTransforms.HartleyOptions.AsymmetricScaling">
            <summary>
            Only scale by 1/N in the inverse direction; No scaling in forward direction.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.IntegralTransforms.HartleyOptions.NoScaling">
            <summary>
            Don't scale at all (neither on forward nor on inverse transformation).
            </summary>
        </member>
        <member name="F:MathNet.Numerics.IntegralTransforms.HartleyOptions.Default">
            <summary>
            Universal; Symmetric scaling.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.GlobalizationHelper">
            <summary>
            Globalized String Handling Helpers
            </summary>
        </member>
        <member name="M:MathNet.Numerics.GlobalizationHelper.GetCultureInfo(System.IFormatProvider)">
            <summary>
            Tries to get a <see cref="T:System.Globalization.CultureInfo"/> from the format provider,
            returning the current culture if it fails.
            </summary>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific
            formatting information.
            </param>
            <returns>A <see cref="T:System.Globalization.CultureInfo"/> instance.</returns>
        </member>
        <member name="M:MathNet.Numerics.GlobalizationHelper.GetNumberFormatInfo(System.IFormatProvider)">
            <summary>
            Tries to get a <see cref="T:System.Globalization.NumberFormatInfo"/> from the format
            provider, returning the current culture if it fails.
            </summary>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific
            formatting information.
            </param>
            <returns>A <see cref="T:System.Globalization.NumberFormatInfo"/> instance.</returns>
        </member>
        <member name="M:MathNet.Numerics.GlobalizationHelper.GetTextInfo(System.IFormatProvider)">
            <summary>
            Tries to get a <see cref="T:System.Globalization.TextInfo"/> from the format provider, returning the current culture if it fails.
            </summary>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific
            formatting information.
            </param>
            <returns>A <see cref="T:System.Globalization.TextInfo"/> instance.</returns>
        </member>
        <member name="M:MathNet.Numerics.GlobalizationHelper.Tokenize(System.Collections.Generic.LinkedListNode{System.String},System.String[],System.Int32)">
            <summary>
            Globalized Parsing: Tokenize a node by splitting it into several nodes.
            </summary>
            <param name="node">Node that contains the trimmed string to be tokenized.</param>
            <param name="keywords">List of keywords to tokenize by.</param>
            <param name="skip">keywords to skip looking for (because they've already been handled).</param>
        </member>
        <member name="M:MathNet.Numerics.GlobalizationHelper.ParseDouble(System.Collections.Generic.LinkedListNode{System.String}@,System.Globalization.CultureInfo)">
            <summary>
            Globalized Parsing: Parse a double number
            </summary>
            <param name="token">First token of the number.</param>
            <param name="culture">Culture Info.</param>
            <returns>The parsed double number using the given culture information.</returns>
            <exception cref="T:System.FormatException"/>
        </member>
        <member name="M:MathNet.Numerics.GlobalizationHelper.ParseSingle(System.Collections.Generic.LinkedListNode{System.String}@,System.Globalization.CultureInfo)">
            <summary>
            Globalized Parsing: Parse a float number
            </summary>
            <param name="token">First token of the number.</param>
            <param name="culture">Culture Info.</param>
            <returns>The parsed float number using the given culture information.</returns>
            <exception cref="T:System.FormatException"/>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.Algorithms.EquidistantPolynomialInterpolation">
            <summary>
            Barycentric Polynomial Interpolation where the given sample points are equidistant.
            </summary>
            <remarks>
            This algorithm neither supports differentiation nor integration.
            </remarks>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.IInterpolation">
            <summary>
            Interpolation within the range of a discrete set of known data points.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.IInterpolation.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.IInterpolation.Differentiate(System.Double)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated first derivative at point t.</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.IInterpolation.Differentiate(System.Double,System.Double@,System.Double@)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <param name="interpolatedValue">Interpolated value x(t)</param>
            <param name="secondDerivative">Interpolated second derivative at point t.</param>
            <returns>Interpolated first derivative at point t.</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Differentiate(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.IInterpolation.Integrate(System.Double)">
            <summary>
            Integrate up to point t.
            </summary>
            <param name="t">Right bound of the integration interval [a,t].</param>
            <returns>Interpolated definite integral over the interval [a,t].</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsIntegration"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation">
            <summary>
            Gets a value indicating whether the algorithm supports differentiation (interpolated derivative).
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Differentiate(System.Double)"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsIntegration">
            <summary>
            Gets a value indicating whether the algorithm supports integration (interpolated quadrature).
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Integrate(System.Double)"/>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.Algorithms.EquidistantPolynomialInterpolation._barycentric">
            <summary>
            Internal Barycentric Interpolation
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.EquidistantPolynomialInterpolation.#ctor">
            <summary>
            Initializes a new instance of the EquidistantPolynomialInterpolation class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.EquidistantPolynomialInterpolation.#ctor(System.Double,System.Double,System.Collections.Generic.IList{System.Double})">
            <summary>
            Initializes a new instance of the EquidistantPolynomialInterpolation class.
            </summary>
            <param name="leftBound">Left bound of the sample point interval.</param>
            <param name="rightBound">Right bound of the sample point interval.</param>
            <param name="sampleValues">Sample Values x(t) where t is equidistant over [a,b], i.e. x[i] = x(a+(b-a)*i/(n-1))</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.EquidistantPolynomialInterpolation.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initializes a new instance of the EquidistantPolynomialInterpolation class.
            </summary>
            <param name="samplePoints">Equidistant Sample Points t = a+(b-a)*i/(n-1)</param>
            <param name="sampleValues">Sample Values x(t) where t are equidistant over [a,b], i.e. x[i] = x(a+(b-a)*i/(n-1))</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.EquidistantPolynomialInterpolation.Initialize(System.Double,System.Double,System.Collections.Generic.IList{System.Double})">
            <summary>
            Initialize the interpolation method with the given sampls in the interval [leftBound,rightBound].
            </summary>
            <param name="leftBound">Left bound of the sample point interval.</param>
            <param name="rightBound">Right bound of the sample point interval.</param>
            <param name="sampleValues">Sample Values x(t) where t are equidistant over [a,b], i.e. x[i] = x(a+(b-a)*i/(n-1))</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.EquidistantPolynomialInterpolation.Initialize(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initialize the interpolation method with the given sample set (no sorting assumed).
            </summary>
            <param name="samplePoints">Equidistant Sample Points t = a+(b-a)*i/(n-1)</param>
            <param name="sampleValues">Sample Values x(t) where t are equidistant over [a,b], i.e. x[i] = x(a+(b-a)*i/(n-1))</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.EquidistantPolynomialInterpolation.EvaluateBarycentricWeights(System.Int32)">
            <summary>
            Evaluate the barycentric weights as used
            internally by this interpolation algorithm.
            </summary>
            <param name="sampleCount">Count of Sample Values x(t).</param>
            <returns>Barycentric Weight Vector</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.EquidistantPolynomialInterpolation.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.EquidistantPolynomialInterpolation.MathNet#Numerics#Interpolation#IInterpolation#Differentiate(System.Double)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated first derivative at point t.</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.EquidistantPolynomialInterpolation.MathNet#Numerics#Interpolation#IInterpolation#Differentiate(System.Double,System.Double@,System.Double@)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <param name="interpolatedValue">Interpolated value x(t)</param>
            <param name="secondDerivative">Interpolated second derivative at point t.</param>
            <returns>Interpolated first derivative at point t.</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Differentiate(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.EquidistantPolynomialInterpolation.MathNet#Numerics#Interpolation#IInterpolation#Integrate(System.Double)">
            <summary>
            Integrate up to point t.
            </summary>
            <param name="t">Right bound of the integration interval [a,t].</param>
            <returns>Interpolated definite integral over the interval [a,t].</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsIntegration"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.EquidistantPolynomialInterpolation.MathNet#Numerics#Interpolation#IInterpolation#SupportsDifferentiation">
            <summary>
            Gets a value indicating whether the algorithm supports differentiation (interpolated derivative).
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Differentiate(System.Double)"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.EquidistantPolynomialInterpolation.MathNet#Numerics#Interpolation#IInterpolation#SupportsIntegration">
            <summary>
            Gets a value indicating whether the algorithm supports integration (interpolated quadrature).
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Integrate(System.Double)"/>
        </member>
        <member name="T:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteFourierTransform">
            <summary>
            Complex Fast (FFT) Implementation of the Discrete Fourier Transform (DFT).
            </summary>
            <summary>
            Complex Fast (FFT) Implementation of the Discrete Fourier Transform (DFT).
            </summary>
            <summary>
            Complex Fast (FFT) Implementation of the Discrete Fourier Transform (DFT).
            </summary>
            <summary>
            Complex Fast (FFT) Implementation of the Discrete Fourier Transform (DFT).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteFourierTransform.SignByOptions(MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Extract the exponent sign to be used in forward transforms according to the
            provided convention options.
            </summary>
            <param name="options">Fourier Transform Convention Options.</param>
            <returns>Fourier series exponent sign.</returns>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteFourierTransform.ForwardScaleByOptions(MathNet.Numerics.IntegralTransforms.FourierOptions,System.Numerics.Complex[])">
            <summary>
            Rescale FFT-the resulting vector according to the provided convention options.
            </summary>
            <param name="options">Fourier Transform Convention Options.</param>
            <param name="samples">Sample Vector.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteFourierTransform.InverseScaleByOptions(MathNet.Numerics.IntegralTransforms.FourierOptions,System.Numerics.Complex[])">
            <summary>
            Rescale the iFFT-resulting vector according to the provided convention options.
            </summary>
            <param name="options">Fourier Transform Convention Options.</param>
            <param name="samples">Sample Vector.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteFourierTransform.BluesteinSequence(System.Int32)">
            <summary>
            Generate the bluestein sequence for the provided problem size.
            </summary>
            <param name="n">Number of samples.</param>
            <returns>Bluestein sequence exp(I*Pi*k^2/N)</returns>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteFourierTransform.BluesteinConvolutionParallel(System.Numerics.Complex[])">
            <summary>
            Convolution with the bluestein sequence (Parallel Version).
            </summary>
            <param name="samples">Sample Vector.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteFourierTransform.SwapRealImaginary(System.Numerics.Complex[])">
            <summary>
            Swap the real and imaginary parts of each sample.
            </summary>
            <param name="samples">Sample Vector.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteFourierTransform.Bluestein(System.Numerics.Complex[],System.Int32)">
            <summary>
            Bluestein generic FFT for arbitrary sized sample vectors.
            </summary>
            <param name="samples">Time-space sample vector.</param>
            <param name="exponentSign">Fourier series exponent sign.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteFourierTransform.BluesteinForward(System.Numerics.Complex[],MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Bluestein forward FFT for arbitrary sized sample vectors.
            </summary>
            <param name="samples">Sample vector, where the FFT is evaluated in place.</param>
            <param name="options">Fourier Transform Convention Options.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteFourierTransform.BluesteinInverse(System.Numerics.Complex[],MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Bluestein inverse FFT for arbitrary sized sample vectors.
            </summary>
            <param name="samples">Sample vector, where the FFT is evaluated in place.</param>
            <param name="options">Fourier Transform Convention Options.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteFourierTransform.Naive(System.Numerics.Complex[],System.Int32)">
            <summary>
            Naive generic DFT, useful e.g. to verify faster algorithms.
            </summary>
            <param name="samples">Time-space sample vector.</param>
            <param name="exponentSign">Fourier series exponent sign.</param>
            <returns>Corresponding frequency-space vector.</returns>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteFourierTransform.NaiveForward(System.Numerics.Complex[],MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Naive forward DFT, useful e.g. to verify faster algorithms.
            </summary>
            <param name="timeSpace">Time-space sample vector.</param>
            <param name="options">Fourier Transform Convention Options.</param>
            <returns>Corresponding frequency-space vector.</returns>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteFourierTransform.NaiveInverse(System.Numerics.Complex[],MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Naive inverse DFT, useful e.g. to verify faster algorithms.
            </summary>
            <param name="frequencySpace">Frequency-space sample vector.</param>
            <param name="options">Fourier Transform Convention Options.</param>
            <returns>Corresponding time-space vector.</returns>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteFourierTransform.Radix2Reorder``1(``0[])">
            <summary>
            Radix-2 Reorder Helper Method
            </summary>
            <typeparam name="T">Sample type</typeparam>
            <param name="samples">Sample vector</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteFourierTransform.Radix2Step(System.Numerics.Complex[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Radix-2 Step Helper Method
            </summary>
            <param name="samples">Sample vector.</param>
            <param name="exponentSign">Fourier series exponent sign.</param>
            <param name="levelSize">Level Group Size.</param>
            <param name="k">Index inside of the level.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteFourierTransform.Radix2(System.Numerics.Complex[],System.Int32)">
            <summary>
            Radix-2 generic FFT for power-of-two sized sample vectors.
            </summary>
            <param name="samples">Sample vector, where the FFT is evaluated in place.</param>
            <param name="exponentSign">Fourier series exponent sign.</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteFourierTransform.Radix2Parallel(System.Numerics.Complex[],System.Int32)">
            <summary>
            Radix-2 generic FFT for power-of-two sample vectors (Parallel Version).
            </summary>
            <param name="samples">Sample vector, where the FFT is evaluated in place.</param>
            <param name="exponentSign">Fourier series exponent sign.</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteFourierTransform.Radix2Forward(System.Numerics.Complex[],MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Radix-2 forward FFT for power-of-two sized sample vectors.
            </summary>
            <param name="samples">Sample vector, where the FFT is evaluated in place.</param>
            <param name="options">Fourier Transform Convention Options.</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Algorithms.DiscreteFourierTransform.Radix2Inverse(System.Numerics.Complex[],MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Radix-2 inverse FFT for power-of-two sized sample vectors.
            </summary>
            <param name="samples">Sample vector, where the FFT is evaluated in place.</param>
            <param name="options">Fourier Transform Convention Options.</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="T:MathNet.Numerics.IntegralTransforms.Transform">
            <summary>
            Integral Transforms (including FFT).
            </summary>
        </member>
        <member name="F:MathNet.Numerics.IntegralTransforms.Transform._dft">
            <summary>
            Shared internal DET algorithm.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Transform.FourierForward(System.Numerics.Complex[])">
            <summary>
            Applies the forward Fast Fourier Transform (FFT) to arbitrary-length sample vectors.
            </summary>
            <param name="samples">Sample vector, where the FFT is evaluated in place.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Transform.FourierForward(System.Numerics.Complex[],MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Applies the forward Fast Fourier Transform (FFT) to arbitrary-length sample vectors.
            </summary>
            <param name="samples">Sample vector, where the FFT is evaluated in place.</param>
            <param name="options">Fourier Transform Convention Options.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Transform.FourierInverse(System.Numerics.Complex[])">
            <summary>
            Applies the inverse Fast Fourier Transform (iFFT) to arbitrary-length sample vectors.
            </summary>
            <param name="samples">Sample vector, where the FFT is evaluated in place.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Transform.FourierInverse(System.Numerics.Complex[],MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Applies the inverse Fast Fourier Transform (iFFT) to arbitrary-length sample vectors.
            </summary>
            <param name="samples">Sample vector, where the FFT is evaluated in place.</param>
            <param name="options">Fourier Transform Convention Options.</param>
        </member>
        <member name="T:MathNet.Numerics.IntegralTransforms.FourierOptions">
            <summary>
            Fourier Transform Convention
            </summary>
        </member>
        <member name="F:MathNet.Numerics.IntegralTransforms.FourierOptions.InverseExponent">
            <summary>
            Inverse integrand exponent (forward: positive sign; inverse: negative sign).
            </summary>
        </member>
        <member name="F:MathNet.Numerics.IntegralTransforms.FourierOptions.AsymmetricScaling">
            <summary>
            Only scale by 1/N in the inverse direction; No scaling in forward direction.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.IntegralTransforms.FourierOptions.NoScaling">
            <summary>
            Don't scale at all (neither on forward nor on inverse transformation).
            </summary>
        </member>
        <member name="F:MathNet.Numerics.IntegralTransforms.FourierOptions.Default">
            <summary>
            Universal; Symmetric scaling and common exponent (used in Maple).
            </summary>
        </member>
        <member name="F:MathNet.Numerics.IntegralTransforms.FourierOptions.Matlab">
            <summary>
            Only scale by 1/N in the inverse direction; No scaling in forward direction (used in Matlab). [= AsymmetricScaling]
            </summary>
        </member>
        <member name="F:MathNet.Numerics.IntegralTransforms.FourierOptions.NumericalRecipes">
            <summary>
            Inverse integrand exponent; No scaling at all (used in all Numerical Recipes based implementations). [= InverseExponent | NoScaling]
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Integration.Algorithms.DoubleExponentialTransformation">
            <summary>
            Analytic integration algorithm for smooth functions with no discontinuities
            or derivative discontinuities and no poles inside the interval.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Integration.Algorithms.DoubleExponentialTransformation.NumberOfMaximumLevels">
            <summary>
            Maximum number of iterations, until the asked
            maximum error is (likely to be) satisfied.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Integration.Algorithms.DoubleExponentialTransformation.PrecomputedAbscissas">
            <summary>
            Precomputed abscissa vector per level.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Integration.Algorithms.DoubleExponentialTransformation.PrecomputedWeights">
            <summary>
            Precomputed weight vector per level.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Integration.Algorithms.DoubleExponentialTransformation._levelAbcissas">
            <summary>
            Abscissa vector per level provider.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Integration.Algorithms.DoubleExponentialTransformation._levelWeights">
            <summary>
            Weight vector per level provider.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Integration.Algorithms.DoubleExponentialTransformation.Integrate(System.Func{System.Double,System.Double},System.Double,System.Double,System.Double)">
            <summary>
            Approximate the integral by the double exponential transformation
            </summary>
            <param name="f">The analytic smooth function to integrate.</param>
            <param name="intervalBegin">Where the interval starts, inclusive and finite.</param>
            <param name="intervalEnd">Where the interval stops, inclusive and finite.</param>
            <param name="targetRelativeError">The expected relative accuracy of the approximation.</param>
            <returns>Approximation of the finite integral in the given interval.</returns>
        </member>
        <member name="M:MathNet.Numerics.Integration.Algorithms.DoubleExponentialTransformation.ProvideLevelAbcissas">
            <summary>
            Abscissa vector per level provider.
            </summary>
            <returns>Level Enumerator.</returns>
        </member>
        <member name="M:MathNet.Numerics.Integration.Algorithms.DoubleExponentialTransformation.ProvideLevelWeights">
            <summary>
            Weight vector per level provider.
            </summary>
            <returns>Level Enumerator.</returns>
        </member>
        <member name="M:MathNet.Numerics.Integration.Algorithms.DoubleExponentialTransformation.EvaluateAbcissas(System.Int32)">
            <summary>
            Compute the abscissa vector for a single level.
            </summary>
            <param name="level">The level to evaluate the abscissa vector for.</param>
            <returns>Abscissa Vector.</returns>
        </member>
        <member name="M:MathNet.Numerics.Integration.Algorithms.DoubleExponentialTransformation.EvaluateWeights(System.Int32)">
            <summary>
            Compute the weight vector for a single level.
            </summary>
            <param name="level">The level to evaluate the weight vector for.</param>
            <returns>Weight Vector.</returns>
        </member>
        <member name="T:MathNet.Numerics.Integration.Algorithms.SimpsonRule">
            <summary>
            Approximation algorithm for definite integrals by Simpson's rule.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Integration.Algorithms.SimpsonRule.IntegrateThreePoint(System.Func{System.Double,System.Double},System.Double,System.Double)">
            <summary>
            Direct 3-point approximation of the definite integral in the provided interval by Simpson's rule.
            </summary>
            <param name="f">The analytic smooth function to integrate.</param>
            <param name="intervalBegin">Where the interval starts, inclusive and finite.</param>
            <param name="intervalEnd">Where the interval stops, inclusive and finite.</param>
            <returns>Approximation of the finite integral in the given interval.</returns>
        </member>
        <member name="M:MathNet.Numerics.Integration.Algorithms.SimpsonRule.IntegrateComposite(System.Func{System.Double,System.Double},System.Double,System.Double,System.Int32)">
            <summary>
            Composite N-point approximation of the definite integral in the provided interval by Simpson's rule.
            </summary>
            <param name="f">The analytic smooth function to integrate.</param>
            <param name="intervalBegin">Where the interval starts, inclusive and finite.</param>
            <param name="intervalEnd">Where the interval stops, inclusive and finite.</param>
            <param name="numberOfPartitions">Even number of composite subdivision partitions.</param>
            <returns>Approximation of the finite integral in the given interval.</returns>
        </member>
        <member name="T:MathNet.Numerics.Integration.Algorithms.NewtonCotesTrapeziumRule">
            <summary>
            Approximation algorithm for definite integrals by the Trapezium rule of the Newton-Cotes family.
            </summary>
            <remarks>
            <a href="http://en.wikipedia.org/wiki/Trapezium_rule">Wikipedia - Trapezium Rule</a>
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Integration.Algorithms.NewtonCotesTrapeziumRule.IntegrateTwoPoint(System.Func{System.Double,System.Double},System.Double,System.Double)">
            <summary>
            Direct 2-point approximation of the definite integral in the provided interval by the trapezium rule.
            </summary>
            <param name="f">The analytic smooth function to integrate.</param>
            <param name="intervalBegin">Where the interval starts, inclusive and finite.</param>
            <param name="intervalEnd">Where the interval stops, inclusive and finite.</param>
            <returns>Approximation of the finite integral in the given interval.</returns>
        </member>
        <member name="M:MathNet.Numerics.Integration.Algorithms.NewtonCotesTrapeziumRule.IntegrateComposite(System.Func{System.Double,System.Double},System.Double,System.Double,System.Int32)">
            <summary>
            Composite N-point approximation of the definite integral in the provided interval by the trapezium rule.
            </summary>
            <param name="f">The analytic smooth function to integrate.</param>
            <param name="intervalBegin">Where the interval starts, inclusive and finite.</param>
            <param name="intervalEnd">Where the interval stops, inclusive and finite.</param>
            <param name="numberOfPartitions">Number of composite subdivision partitions.</param>
            <returns>Approximation of the finite integral in the given interval.</returns>
        </member>
        <member name="M:MathNet.Numerics.Integration.Algorithms.NewtonCotesTrapeziumRule.IntegrateAdaptive(System.Func{System.Double,System.Double},System.Double,System.Double,System.Double)">
            <summary>
            Adaptive approximation of the definite integral in the provided interval by the trapezium rule.
            </summary>
            <param name="f">The analytic smooth function to integrate.</param>
            <param name="intervalBegin">Where the interval starts, inclusive and finite.</param>
            <param name="intervalEnd">Where the interval stops, inclusive and finite.</param>
            <param name="targetError">The expected accuracy of the approximation.</param>
            <returns>Approximation of the finite integral in the given interval.</returns>
        </member>
        <member name="M:MathNet.Numerics.Integration.Algorithms.NewtonCotesTrapeziumRule.IntegrateAdaptiveTransformedOdd(System.Func{System.Double,System.Double},System.Double,System.Double,System.Collections.Generic.IEnumerable{System.Double[]},System.Collections.Generic.IEnumerable{System.Double[]},System.Double,System.Double)">
            <summary>
            Adaptive approximation of the definite integral by the trapezium rule.
            </summary>
            <param name="f">The analytic smooth function to integrate.</param>
            <param name="intervalBegin">Where the interval starts, inclusive and finite.</param>
            <param name="intervalEnd">Where the interval stops, inclusive and finite.</param>
            <param name="levelAbscissas">Abscissa vector per level provider.</param>
            <param name="levelWeights">Weight vector per level provider.</param>
            <param name="levelOneStep">First Level Step</param>
            <param name="targetRelativeError">The expected relative accuracy of the approximation.</param>
            <returns>Approximation of the finite integral in the given interval.</returns>
        </member>
        <member name="T:MathNet.Numerics.Integration.Integrate">
            <summary>
            Numeric Integration (Quadrature).
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Integration.Integrate.Det">
            <summary>
            Shared internal DET algorithm.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Integration.Integrate.OnClosedInterval(System.Func{System.Double,System.Double},System.Double,System.Double,System.Double)">
            <summary>
            Approximation of the definite integral of an analytic smooth function on a closed interval.
            </summary>
            <param name="f">The analytic smooth function to integrate.</param>
            <param name="intervalBegin">Where the interval starts, inclusive and finite.</param>
            <param name="intervalEnd">Where the interval stops, inclusive and finite.</param>
            <param name="targetAbsoluteError">The expected relative accuracy of the approximation.</param>
            <returns>Approximation of the finite integral in the given interval.</returns>
        </member>
        <member name="M:MathNet.Numerics.Integration.Integrate.OnClosedInterval(System.Func{System.Double,System.Double},System.Double,System.Double)">
            <summary>
            Approximation of the definite integral of an analytic smooth function on a closed interval.
            </summary>
            <param name="f">The analytic smooth function to integrate.</param>
            <param name="intervalBegin">Where the interval starts, inclusive and finite.</param>
            <param name="intervalEnd">Where the interval stops, inclusive and finite.</param>
            <returns>Approximation of the finite integral in the given interval.</returns>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation">
            <summary>
            Akima Spline Interpolation Algorithm.
            </summary>
            <remarks>
            This algorithm supports both differentiation and integration.
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation._spline">
            <summary>
            Internal Spline Interpolation
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation.#ctor">
            <summary>
            Initializes a new instance of the AkimaSplineInterpolation class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initializes a new instance of the AkimaSplineInterpolation class.
            </summary>
            <param name="samplePoints">Sample Points t, sorted ascending.</param>
            <param name="sampleValues">Sample Values x(t)</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation.Initialize(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initialize the interpolation method with the given spline coefficients (sorted by the sample points t).
            </summary>
            <param name="samplePoints">Sample Points t, sorted ascending.</param>
            <param name="sampleValues">Sample Values x(t)</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation.EvaluateSplineDerivatives(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Evaluate the spline derivatives as used
            internally by this interpolation algorithm.
            </summary>
            <param name="samplePoints">Sample Points t, sorted ascending.</param>
            <param name="sampleValues">Sample Values x(t)</param>
            <returns>Spline Derivative Vector</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation.EvaluateSplineCoefficients(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Evaluate the spline coefficients as used
            internally by this interpolation algorithm.
            </summary>
            <param name="samplePoints">Sample Points t, sorted ascending.</param>
            <param name="sampleValues">Sample Values x(t)</param>
            <returns>Spline Coefficient Vector</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation.DifferentiateThreePoint(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Three-Point Differentiation Helper.
            </summary>
            <param name="samplePoints">Sample Points t.</param>
            <param name="sampleValues">Sample Values x(t).</param>
            <param name="indexT">Index of the point of the differentiation.</param>
            <param name="index0">Index of the first sample.</param>
            <param name="index1">Index of the second sample.</param>
            <param name="index2">Index of the third sample.</param>
            <returns>The derivative approximation.</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation.Differentiate(System.Double)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated first derivative at point t.</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation.Differentiate(System.Double,System.Double@,System.Double@)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <param name="interpolatedValue">Interpolated value x(t)</param>
            <param name="secondDerivative">Interpolated second derivative at point t.</param>
            <returns>Interpolated first derivative at point t.</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation.Differentiate(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation.Integrate(System.Double)">
            <summary>
            Integrate up to point t.
            </summary>
            <param name="t">Right bound of the integration interval [a,t].</param>
            <returns>Interpolated definite integral over the interval [a,t].</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsIntegration"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation.MathNet#Numerics#Interpolation#IInterpolation#SupportsDifferentiation">
            <summary>
            Gets a value indicating whether the algorithm supports differentiation (interpolated derivative).
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation.Differentiate(System.Double)"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation.MathNet#Numerics#Interpolation#IInterpolation#SupportsIntegration">
            <summary>
            Gets a value indicating whether the algorithm supports integration (interpolated quadrature).
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation.Integrate(System.Double)"/>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.Algorithms.BarycentricInterpolation">
            <summary>
            Barycentric Interpolation Algorithm.
            </summary>
            <remarks>
            This algorithm neither supports differentiation nor integration.
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.Algorithms.BarycentricInterpolation._points">
            <summary>
            Sample Points t.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.Algorithms.BarycentricInterpolation._values">
            <summary>
            Sample Values x(t).
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.Algorithms.BarycentricInterpolation._weights">
            <summary>
            Barycentric Weights w(t).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.BarycentricInterpolation.#ctor">
            <summary>
            Initializes a new instance of the BarycentricInterpolation class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.BarycentricInterpolation.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initializes a new instance of the BarycentricInterpolation class.
            </summary>
            <param name="samplePoints">Sample Points t (no sorting assumed)</param>
            <param name="sampleValues">Sample Values x(t)</param>
            <param name="barycentricWeights">Barycentric weights w(t)</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.BarycentricInterpolation.Initialize(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initialize the interpolation method with the given sample set (no sorting assumed).
            </summary>
            <param name="samplePoints">Sample Points t</param>
            <param name="sampleValues">Sample Values x(t)</param>
            <param name="barycentricWeights">Barycentric weights w(t)</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.BarycentricInterpolation.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.BarycentricInterpolation.MathNet#Numerics#Interpolation#IInterpolation#Differentiate(System.Double)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated first derivative at point t.</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.BarycentricInterpolation.MathNet#Numerics#Interpolation#IInterpolation#Differentiate(System.Double,System.Double@,System.Double@)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <param name="interpolatedValue">Interpolated value x(t)</param>
            <param name="secondDerivative">Interpolated second derivative at point t.</param>
            <returns>Interpolated first derivative at point t.</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Differentiate(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.BarycentricInterpolation.MathNet#Numerics#Interpolation#IInterpolation#Integrate(System.Double)">
            <summary>
            Integrate up to point t.
            </summary>
            <param name="t">Right bound of the integration interval [a,t].</param>
            <returns>Interpolated definite integral over the interval [a,t].</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsIntegration"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.BarycentricInterpolation.MathNet#Numerics#Interpolation#IInterpolation#SupportsDifferentiation">
            <summary>
            Gets a value indicating whether the algorithm supports differentiation (interpolated derivative).
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Differentiate(System.Double)"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.BarycentricInterpolation.MathNet#Numerics#Interpolation#IInterpolation#SupportsIntegration">
            <summary>
            Gets a value indicating whether the algorithm supports integration (interpolated quadrature).
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Integrate(System.Double)"/>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.Algorithms.BulirschStoerRationalInterpolation">
            <summary>
            Rational Interpolation (with poles) using Roland Bulirsch and Josef Stoer's Algorithm.
            </summary>
            <remarks>
            <para>
            This algorithm supports neither differentiation nor integration.
            </para>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.Algorithms.BulirschStoerRationalInterpolation._points">
            <summary>
            Sample Points t.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.Algorithms.BulirschStoerRationalInterpolation._values">
            <summary>
            Spline Values x(t).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.BulirschStoerRationalInterpolation.#ctor">
            <summary>
            Initializes a new instance of the BulirschStoerRationalInterpolation class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.BulirschStoerRationalInterpolation.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initializes a new instance of the BulirschStoerRationalInterpolation class.
            </summary>
            <param name="samplePoints">Sample Points t</param>
            <param name="sampleValues">Sample Values x(t)</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.BulirschStoerRationalInterpolation.Initialize(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initialize the interpolation method with the given sample pairs.
            </summary>
            <param name="samplePoints">Sample Points t</param>
            <param name="sampleValues">Sample Values x(t)</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.BulirschStoerRationalInterpolation.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.BulirschStoerRationalInterpolation.MathNet#Numerics#Interpolation#IInterpolation#Differentiate(System.Double)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated first derivative at point t.</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.BulirschStoerRationalInterpolation.MathNet#Numerics#Interpolation#IInterpolation#Differentiate(System.Double,System.Double@,System.Double@)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <param name="interpolatedValue">Interpolated value x(t)</param>
            <param name="secondDerivative">Interpolated second derivative at point t.</param>
            <returns>Interpolated first derivative at point t.</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Differentiate(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.BulirschStoerRationalInterpolation.MathNet#Numerics#Interpolation#IInterpolation#Integrate(System.Double)">
            <summary>
            Integrate up to point t.
            </summary>
            <param name="t">Right bound of the integration interval [a,t].</param>
            <returns>Interpolated definite integral over the interval [a,t].</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsIntegration"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.BulirschStoerRationalInterpolation.MathNet#Numerics#Interpolation#IInterpolation#SupportsDifferentiation">
            <summary>
            Gets a value indicating whether the algorithm supports differentiation (interpolated derivative).
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Differentiate(System.Double)"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.BulirschStoerRationalInterpolation.MathNet#Numerics#Interpolation#IInterpolation#SupportsIntegration">
            <summary>
            Gets a value indicating whether the algorithm supports integration (interpolated quadrature).
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Integrate(System.Double)"/>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation">
            <summary>
            Cubic Spline Interpolation Algorithm with continuous first and second derivatives.
            </summary>
            <remarks>
            This algorithm supports both differentiation and integration.
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation._spline">
            <summary>
            Internal Spline Interpolation
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.#ctor">
            <summary>
            Initializes a new instance of the CubicSplineInterpolation class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initializes a new instance of the CubicSplineInterpolation class.
            </summary>
            <param name="samplePoints">Sample Points t, sorted ascending.</param>
            <param name="sampleValues">Sample Values x(t)</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},MathNet.Numerics.Interpolation.SplineBoundaryCondition,System.Double,MathNet.Numerics.Interpolation.SplineBoundaryCondition,System.Double)">
            <summary>
            Initializes a new instance of the CubicSplineInterpolation class.
            </summary>
            <param name="samplePoints">Sample Points t, sorted ascending.</param>
            <param name="sampleValues">Sample Values x(t)</param>
            <param name="leftBoundaryCondition">Condition of the left boundary.</param>
            <param name="leftBoundary">Left boundary value. Ignored in the parabolic case.</param>
            <param name="rightBoundaryCondition">Condition of the right boundary.</param>
            <param name="rightBoundary">Right boundary value. Ignored in the parabolic case.</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.Initialize(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initialize the interpolation method with the given spline coefficients (sorted by the sample points t).
            </summary>
            <param name="samplePoints">Sample Points t, sorted ascending.</param>
            <param name="sampleValues">Sample Values x(t)</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.Initialize(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},MathNet.Numerics.Interpolation.SplineBoundaryCondition,System.Double,MathNet.Numerics.Interpolation.SplineBoundaryCondition,System.Double)">
            <summary>
            Initialize the interpolation method with the given spline coefficients (sorted by the sample points t).
            </summary>
            <param name="samplePoints">Sample Points t, sorted ascending.</param>
            <param name="sampleValues">Sample Values x(t)</param>
            <param name="leftBoundaryCondition">Condition of the left boundary.</param>
            <param name="leftBoundary">Left boundary value. Ignored in the parabolic case.</param>
            <param name="rightBoundaryCondition">Condition of the right boundary.</param>
            <param name="rightBoundary">Right boundary value. Ignored in the parabolic case.</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.EvaluateSplineDerivatives(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},MathNet.Numerics.Interpolation.SplineBoundaryCondition,System.Double,MathNet.Numerics.Interpolation.SplineBoundaryCondition,System.Double)">
            <summary>
            Evaluate the spline derivatives as used
            internally by this interpolation algorithm.
            </summary>
            <param name="samplePoints">Sample Points t, sorted ascending.</param>
            <param name="sampleValues">Sample Values x(t)</param>
            <param name="leftBoundaryCondition">Condition of the left boundary.</param>
            <param name="leftBoundary">Left boundary value. Ignored in the parabolic case.</param>
            <param name="rightBoundaryCondition">Condition of the right boundary.</param>
            <param name="rightBoundary">Right boundary value. Ignored in the parabolic case.</param>
            <returns>Spline Derivative Vector</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.EvaluateSplineCoefficients(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},MathNet.Numerics.Interpolation.SplineBoundaryCondition,System.Double,MathNet.Numerics.Interpolation.SplineBoundaryCondition,System.Double)">
            <summary>
            Evaluate the spline coefficients as used
            internally by this interpolation algorithm.
            </summary>
            <param name="samplePoints">Sample Points t, sorted ascending.</param>
            <param name="sampleValues">Sample Values x(t)</param>
            <param name="leftBoundaryCondition">Condition of the left boundary.</param>
            <param name="leftBoundary">Left boundary value. Ignored in the parabolic case.</param>
            <param name="rightBoundaryCondition">Condition of the right boundary.</param>
            <param name="rightBoundary">Right boundary value. Ignored in the parabolic case.</param>
            <returns>Spline Coefficient Vector</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.SolveTridiagonal(System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
            Tridiagonal Solve Helper.
            </summary>
            <param name="a">The a-vector[n].</param>
            <param name="b">The b-vector[n], will be modified by this function.</param>
            <param name="c">The c-vector[n].</param>
            <param name="d">The d-vector[n], will be modified by this function.</param>
            <returns>The x-vector[n]</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.Differentiate(System.Double)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated first derivative at point t.</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.Differentiate(System.Double,System.Double@,System.Double@)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <param name="interpolatedValue">Interpolated value x(t)</param>
            <param name="secondDerivative">Interpolated second derivative at point t.</param>
            <returns>Interpolated first derivative at point t.</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.Differentiate(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.Integrate(System.Double)">
            <summary>
            Integrate up to point t.
            </summary>
            <param name="t">Right bound of the integration interval [a,t].</param>
            <returns>Interpolated definite integral over the interval [a,t].</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsIntegration"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.MathNet#Numerics#Interpolation#IInterpolation#SupportsDifferentiation">
            <summary>
            Gets a value indicating whether the algorithm supports differentiation (interpolated derivative).
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.Differentiate(System.Double)"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.MathNet#Numerics#Interpolation#IInterpolation#SupportsIntegration">
            <summary>
            Gets a value indicating whether the algorithm supports integration (interpolated quadrature).
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.Integrate(System.Double)"/>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation">
            <summary>
            Cubic Hermite Spline Interpolation Algorithm.
            </summary>
            <remarks>
            This algorithm supports both differentiation and integration.
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation._spline">
            <summary>
            Internal Spline Interpolation
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation.#ctor">
            <summary>
            Initializes a new instance of the CubicHermiteSplineInterpolation class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initializes a new instance of the CubicHermiteSplineInterpolation class.
            </summary>
            <param name="samplePoints">Sample Points t, sorted ascending.</param>
            <param name="sampleValues">Sample Values x(t)</param>
            <param name="sampleDerivatives">Sample Derivatives x'(t)</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation.Initialize(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initialize the interpolation method with the given spline coefficients (sorted by the sample points t).
            </summary>
            <param name="samplePoints">Sample Points t, sorted ascending.</param>
            <param name="sampleValues">Sample Values x(t)</param>
            <param name="sampleDerivatives">Sample Derivatives x'(t)</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation.EvaluateSplineCoefficients(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Evaluate the spline coefficients as used
            internally by this interpolation algorithm.
            </summary>
            <param name="samplePoints">Sample Points t, sorted ascending.</param>
            <param name="sampleValues">Sample Values x(t)</param>
            <param name="sampleDerivatives">Sample Derivatives x'(t)</param>
            <returns>Spline Coefficient Vector</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation.Differentiate(System.Double)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated first derivative at point t.</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation.Differentiate(System.Double,System.Double@,System.Double@)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <param name="interpolatedValue">Interpolated value x(t)</param>
            <param name="secondDerivative">Interpolated second derivative at point t.</param>
            <returns>Interpolated first derivative at point t.</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation.Differentiate(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation.Integrate(System.Double)">
            <summary>
            Integrate up to point t.
            </summary>
            <param name="t">Right bound of the integration interval [a,t].</param>
            <returns>Interpolated definite integral over the interval [a,t].</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsIntegration"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation.MathNet#Numerics#Interpolation#IInterpolation#SupportsDifferentiation">
            <summary>
            Gets a value indicating whether the algorithm supports differentiation (interpolated derivative).
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation.Differentiate(System.Double)"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation.MathNet#Numerics#Interpolation#IInterpolation#SupportsIntegration">
            <summary>
            Gets a value indicating whether the algorithm supports integration (interpolated quadrature).
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation.Integrate(System.Double)"/>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.Algorithms.FloaterHormannRationalInterpolation">
            <summary>
            Barycentric Rational Interpolation without poles, using Mike Floater and Kai Hormann's Algorithm.
            </summary>
            <remarks>
            This algorithm neither supports differentiation nor integration.
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.Algorithms.FloaterHormannRationalInterpolation._barycentric">
            <summary>
            Internal Barycentric Interpolation
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.FloaterHormannRationalInterpolation.#ctor">
            <summary>
            Initializes a new instance of the FloaterHormannRationalInterpolation class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.FloaterHormannRationalInterpolation.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initializes a new instance of the FloaterHormannRationalInterpolation class.
            </summary>
            <param name="samplePoints">Sample Points t</param>
            <param name="sampleValues">Sample Values x(t)</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.FloaterHormannRationalInterpolation.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Initializes a new instance of the FloaterHormannRationalInterpolation class.
            </summary>
            <param name="samplePoints">Sample Points t</param>
            <param name="sampleValues">Sample Values x(t)</param>
            <param name="order">
            Order of the interpolation scheme, 0 &lt;= order &lt;= N.
            In most cases a value between 3 and 8 gives good results.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.FloaterHormannRationalInterpolation.Initialize(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initialize the interpolation method with the given sample set.
            </summary>
            <remarks>
            The interpolation scheme order will be set to 3.
            </remarks>
            <param name="samplePoints">Sample Points t (no sorting assumed)</param>
            <param name="sampleValues">Sample Values x(t)</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.FloaterHormannRationalInterpolation.Initialize(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Initialize the interpolation method with the given sample set (no sorting assumed).
            </summary>
            <param name="samplePoints">Sample Points t</param>
            <param name="sampleValues">Sample Values x(t)</param>
            <param name="order">
            Order of the interpolation scheme, 0 &lt;= order &lt;= N.
            In most cases a value between 3 and 8 gives good results.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.FloaterHormannRationalInterpolation.EvaluateBarycentricWeights(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Evaluate the barycentric weights as used
            internally by this interpolation algorithm.
            </summary>
            <param name="samplePoints">Sample Points t</param>
            <param name="sampleValues">Sample Values x(t)</param>
            <param name="order">
            Order of the interpolation scheme, 0 &lt;= order &lt;= N.
            In most cases a value between 3 and 8 gives good results.
            </param>
            <returns>Barycentric Weight Vector</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.FloaterHormannRationalInterpolation.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.FloaterHormannRationalInterpolation.MathNet#Numerics#Interpolation#IInterpolation#Differentiate(System.Double)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated first derivative at point t.</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.FloaterHormannRationalInterpolation.MathNet#Numerics#Interpolation#IInterpolation#Differentiate(System.Double,System.Double@,System.Double@)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <param name="interpolatedValue">Interpolated value x(t)</param>
            <param name="secondDerivative">Interpolated second derivative at point t.</param>
            <returns>Interpolated first derivative at point t.</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Differentiate(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.FloaterHormannRationalInterpolation.MathNet#Numerics#Interpolation#IInterpolation#Integrate(System.Double)">
            <summary>
            Integrate up to point t.
            </summary>
            <param name="t">Right bound of the integration interval [a,t].</param>
            <returns>Interpolated definite integral over the interval [a,t].</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsIntegration"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.FloaterHormannRationalInterpolation.MathNet#Numerics#Interpolation#IInterpolation#SupportsDifferentiation">
            <summary>
            Gets a value indicating whether the algorithm supports differentiation (interpolated derivative).
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Differentiate(System.Double)"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.FloaterHormannRationalInterpolation.MathNet#Numerics#Interpolation#IInterpolation#SupportsIntegration">
            <summary>
            Gets a value indicating whether the algorithm supports integration (interpolated quadrature).
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Integrate(System.Double)"/>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.Algorithms.LinearSplineInterpolation">
            <summary>
            Linear Spline Interpolation Algorithm.
            </summary>
            <remarks>
            This algorithm supports both differentiation and integration.
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.Algorithms.LinearSplineInterpolation._spline">
            <summary>
            Internal Spline Interpolation
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.LinearSplineInterpolation.#ctor">
            <summary>
            Initializes a new instance of the LinearSplineInterpolation class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.LinearSplineInterpolation.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initializes a new instance of the LinearSplineInterpolation class.
            </summary>
            <param name="samplePoints">Sample Points t, sorted ascending.</param>
            <param name="sampleValues">Sample Values x(t)</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.LinearSplineInterpolation.Initialize(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initialize the interpolation method with the given spline coefficients (sorted by the sample points t).
            </summary>
            <param name="samplePoints">Sample Points t, sorted ascending.</param>
            <param name="sampleValues">Sample Values x(t)</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.LinearSplineInterpolation.EvaluateSplineCoefficients(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Evaluate the spline coefficients as used
            internally by this interpolation algorithm.
            </summary>
            <param name="samplePoints">Sample Points t, sorted ascending.</param>
            <param name="sampleValues">Sample Values x(t)</param>
            <returns>Spline Coefficient Vector</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.LinearSplineInterpolation.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.LinearSplineInterpolation.Differentiate(System.Double)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated first derivative at point t.</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.LinearSplineInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.LinearSplineInterpolation.Differentiate(System.Double,System.Double@,System.Double@)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <param name="interpolatedValue">Interpolated value x(t)</param>
            <param name="secondDerivative">Interpolated second derivative at point t.</param>
            <returns>Interpolated first derivative at point t.</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.LinearSplineInterpolation.Differentiate(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.LinearSplineInterpolation.Integrate(System.Double)">
            <summary>
            Integrate up to point t.
            </summary>
            <param name="t">Right bound of the integration interval [a,t].</param>
            <returns>Interpolated definite integral over the interval [a,t].</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsIntegration"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.LinearSplineInterpolation.MathNet#Numerics#Interpolation#IInterpolation#SupportsDifferentiation">
            <summary>
            Gets a value indicating whether the algorithm supports differentiation (interpolated derivative).
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.LinearSplineInterpolation.Differentiate(System.Double)"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.LinearSplineInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.LinearSplineInterpolation.MathNet#Numerics#Interpolation#IInterpolation#SupportsIntegration">
            <summary>
            Gets a value indicating whether the algorithm supports integration (interpolated quadrature).
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.LinearSplineInterpolation.Integrate(System.Double)"/>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.Algorithms.NevillePolynomialInterpolation">
            <summary>
            Lagrange Polynomial Interpolation using Neville's Algorithm.
            </summary>
            <remarks>
            <para>
            This algorithm supports differentiation, but doesn't support integration.
            </para>
            <para>
            When working with equidistant or Chebyshev sample points it is
            recommended to use the barycentric algorithms specialized for
            these cases instead of this arbitrary Neville algorithm.
            </para>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.Algorithms.NevillePolynomialInterpolation._points">
            <summary>
            Sample Points t.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.Algorithms.NevillePolynomialInterpolation._values">
            <summary>
            Spline Values x(t).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.NevillePolynomialInterpolation.#ctor">
            <summary>
            Initializes a new instance of the NevillePolynomialInterpolation class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.NevillePolynomialInterpolation.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initializes a new instance of the NevillePolynomialInterpolation class.
            </summary>
            <param name="samplePoints">Sample Points t</param>
            <param name="sampleValues">Sample Values x(t)</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.NevillePolynomialInterpolation.Initialize(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initialize the interpolation method with the given sample pairs.
            </summary>
            <param name="samplePoints">Sample Points t</param>
            <param name="sampleValues">Sample Values x(t)</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.NevillePolynomialInterpolation.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.NevillePolynomialInterpolation.Differentiate(System.Double)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated first derivative at point t.</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.NevillePolynomialInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.NevillePolynomialInterpolation.Differentiate(System.Double,System.Double@,System.Double@)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <param name="interpolatedValue">Interpolated value x(t)</param>
            <param name="secondDerivative">Interpolated second derivative at point t.</param>
            <returns>Interpolated first derivative at point t.</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.NevillePolynomialInterpolation.Differentiate(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.NevillePolynomialInterpolation.MathNet#Numerics#Interpolation#IInterpolation#Integrate(System.Double)">
            <summary>
            Integrate up to point t.
            </summary>
            <param name="t">Right bound of the integration interval [a,t].</param>
            <returns>Interpolated definite integral over the interval [a,t].</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsIntegration"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.NevillePolynomialInterpolation.MathNet#Numerics#Interpolation#IInterpolation#SupportsDifferentiation">
            <summary>
            Gets a value indicating whether the algorithm supports differentiation (interpolated derivative).
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.NevillePolynomialInterpolation.Differentiate(System.Double)"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.NevillePolynomialInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.NevillePolynomialInterpolation.MathNet#Numerics#Interpolation#IInterpolation#SupportsIntegration">
            <summary>
            Gets a value indicating whether the algorithm supports integration (interpolated quadrature).
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolation.Integrate(System.Double)"/>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation">
            <summary>
            Third-Degree Spline Interpolation Algorithm.
            </summary>
            <remarks>
            This algorithm supports both differentiation and integration.
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation._points">
            <summary>
            Sample Points t.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation._coefficients">
            <summary>
            Spline Coefficients c(t).
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation._sampleCount">
            <summary>
            Number of samples.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation.#ctor">
            <summary>
            Initializes a new instance of the SplineInterpolation class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initializes a new instance of the SplineInterpolation class.
            </summary>
            <param name="samplePoints">Sample Points t (length: N), sorted ascending.</param>
            <param name="splineCoefficients">Spline Coefficients (length: 4*(N-1)).</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation.Initialize(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initialize the interpolation method with the given spline coefficients (sorted by the sample points t).
            </summary>
            <param name="samplePoints">Sample Points t (length: N), sorted ascending.</param>
            <param name="splineCoefficients">Spline Coefficients (length: 4*(N-1)).</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation.Differentiate(System.Double)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated first derivative at point t.</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation.Differentiate(System.Double,System.Double@,System.Double@)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <param name="interpolatedValue">Interpolated value x(t)</param>
            <param name="secondDerivative">Interpolated second derivative at point t.</param>
            <returns>Interpolated first derivative at point t.</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation.Differentiate(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation.Integrate(System.Double)">
            <summary>
            Integrate up to point t.
            </summary>
            <param name="t">Right bound of the integration interval [a,t].</param>
            <returns>Interpolated definite integral over the interval [a,t].</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsIntegration"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation.IndexOfClosestPointLeftOf(System.Double)">
            <summary>
            Find the index of the greatest sample point smaller than t.
            </summary>
            <param name="t">The value to look for.</param>
            <returns>The sample point index.</returns>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation.MathNet#Numerics#Interpolation#IInterpolation#SupportsDifferentiation">
            <summary>
            Gets a value indicating whether the algorithm supports differentiation (interpolated derivative).
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation.Differentiate(System.Double)"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation.MathNet#Numerics#Interpolation#IInterpolation#SupportsIntegration">
            <summary>
            Gets a value indicating whether the algorithm supports integration (interpolated quadrature).
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation.Integrate(System.Double)"/>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.Interpolate">
            <summary>
            Interpolation Factory.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Interpolate.Common(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Creates an interpolation based on arbitrary points.
            </summary>
            <param name="points">The sample points t. Supports both lists and arrays.</param>
            <param name="values">The sample point values x(t). Supports both lists and arrays.</param>
            <returns>
            An interpolation scheme optimized for the given sample points and values,
            which can then be used to compute interpolations and extrapolations
            on arbitrary points.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Interpolate.LinearBetweenPoints(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Create a linear spline interpolation based on arbitrary points (sorted ascending).
            </summary>
            <param name="points">The sample points t, sorted ascending. Supports both lists and arrays.</param>
            <param name="values">The sample point values x(t). Supports both lists and arrays.</param>
            <returns>
            An interpolation scheme optimized for the given sample points and values,
            which can then be used to compute interpolations and extrapolations
            on arbitrary points.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Interpolate.RationalWithoutPoles(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Create a floater hormann rational pole-free interpolation based on arbitrary points.
            </summary>
            <param name="points">The sample points t. Supports both lists and arrays.</param>
            <param name="values">The sample point values x(t). Supports both lists and arrays.</param>
            <returns>
            An interpolation scheme optimized for the given sample points and values,
            which can then be used to compute interpolations and extrapolations
            on arbitrary points.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Interpolate.RationalWithPoles(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Create a burlish stoer rational interpolation based on arbitrary points.
            </summary>
            <param name="points">The sample points t. Supports both lists and arrays.</param>
            <param name="values">The sample point values x(t). Supports both lists and arrays.</param>
            <returns>
            An interpolation scheme optimized for the given sample points and values,
            which can then be used to compute interpolations and extrapolations
            on arbitrary points.
            </returns>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.SplineBoundaryCondition">
            <summary>
            Left and right boundary conditions.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.SplineBoundaryCondition.Natural">
            <summary>
            Natural Boundary (Zero second derivative).
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.SplineBoundaryCondition.ParabolicallyTerminated">
            <summary>
            Parabolically Terminated boundary.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.SplineBoundaryCondition.FirstDerivative">
            <summary>
            Fixed first derivative at the boundary.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.SplineBoundaryCondition.SecondDerivative">
            <summary>
            Fixed second derivative at the boundary.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.NumberTheory.IntegerTheory">
            <summary>
            Number theory utility functions for integers.
            </summary>
            <summary>
            Number theory utility functions for integers.
            </summary>
            <summary>
            Number theory utility functions for integers.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.NumberTheory.IntegerTheory.GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
            Returns the greatest common divisor (<c>gcd</c>) of two big integers.
            </summary>
            <param name="a">First Integer: a.</param>
            <param name="b">Second Integer: b.</param>
            <returns>Greatest common divisor <c>gcd</c>(a,b)</returns>
        </member>
        <member name="M:MathNet.Numerics.NumberTheory.IntegerTheory.GreatestCommonDivisor(System.Collections.Generic.IList{System.Numerics.BigInteger})">
            <summary>
            Returns the greatest common divisor (<c>gcd</c>) of a set of big integers.
            </summary>
            <param name="integers">List of Integers.</param>
            <returns>Greatest common divisor <c>gcd</c>(list of integers)</returns>
        </member>
        <member name="M:MathNet.Numerics.NumberTheory.IntegerTheory.GreatestCommonDivisor(System.Numerics.BigInteger[])">
            <summary>
            Returns the greatest common divisor (<c>gcd</c>) of a set of big integers.
            </summary>
            <param name="integers">List of Integers.</param>
            <returns>Greatest common divisor <c>gcd</c>(list of integers)</returns>
        </member>
        <member name="M:MathNet.Numerics.NumberTheory.IntegerTheory.ExtendedGreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@,System.Numerics.BigInteger@)">
            <summary>
            Computes the extended greatest common divisor, such that a*x + b*y = <c>gcd</c>(a,b).
            </summary>
            <param name="a">First Integer: a.</param>
            <param name="b">Second Integer: b.</param>
            <param name="x">Resulting x, such that a*x + b*y = <c>gcd</c>(a,b).</param>
            <param name="y">Resulting y, such that a*x + b*y = <c>gcd</c>(a,b)</param>
            <returns>Greatest common divisor <c>gcd</c>(a,b)</returns>
            <example>
            <code>
            long x,y,d;
            d = Fn.GreatestCommonDivisor(45,18,out x, out y);
            -> d == 9 &amp;&amp; x == 1 &amp;&amp; y == -2
            </code>
            The <c>gcd</c> of 45 and 18 is 9: 18 = 2*9, 45 = 5*9. 9 = 1*45 -2*18, therefore x=1 and y=-2.
            </example>
        </member>
        <member name="M:MathNet.Numerics.NumberTheory.IntegerTheory.LeastCommonMultiple(System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
            Returns the least common multiple (<c>lcm</c>) of two big integers.
            </summary>
            <param name="a">First Integer: a.</param>
            <param name="b">Second Integer: b.</param>
            <returns>Least common multiple <c>lcm</c>(a,b)</returns>
        </member>
        <member name="M:MathNet.Numerics.NumberTheory.IntegerTheory.LeastCommonMultiple(System.Collections.Generic.IList{System.Numerics.BigInteger})">
            <summary>
            Returns the least common multiple (<c>lcm</c>) of a set of big integers.
            </summary>
            <param name="integers">List of Integers.</param>
            <returns>Least common multiple <c>lcm</c>(list of integers)</returns>
        </member>
        <member name="M:MathNet.Numerics.NumberTheory.IntegerTheory.LeastCommonMultiple(System.Numerics.BigInteger[])">
            <summary>
            Returns the least common multiple (<c>lcm</c>) of a set of big integers.
            </summary>
            <param name="integers">List of Integers.</param>
            <returns>Least common multiple <c>lcm</c>(list of integers)</returns>
        </member>
        <member name="M:MathNet.Numerics.NumberTheory.IntegerTheory.IsEven(System.Int32)">
            <summary>
            Find out whether the provided 32 bit integer is an even number.
            </summary>
            <param name="number">The number to very whether it's even.</param>
            <returns>True if and only if it is an even number.</returns>
        </member>
        <member name="M:MathNet.Numerics.NumberTheory.IntegerTheory.IsEven(System.Int64)">
            <summary>
            Find out whether the provided 64 bit integer is an even number.
            </summary>
            <param name="number">The number to very whether it's even.</param>
            <returns>True if and only if it is an even number.</returns>
        </member>
        <member name="M:MathNet.Numerics.NumberTheory.IntegerTheory.IsOdd(System.Int32)">
            <summary>
            Find out whether the provided 32 bit integer is an odd number.
            </summary>
            <param name="number">The number to very whether it's odd.</param>
            <returns>True if and only if it is an odd number.</returns>
        </member>
        <member name="M:MathNet.Numerics.NumberTheory.IntegerTheory.IsOdd(System.Int64)">
            <summary>
            Find out whether the provided 64 bit integer is an odd number.
            </summary>
            <param name="number">The number to very whether it's odd.</param>
            <returns>True if and only if it is an odd number.</returns>
        </member>
        <member name="M:MathNet.Numerics.NumberTheory.IntegerTheory.IsPowerOfTwo(System.Int32)">
            <summary>
            Find out whether the provided 32 bit integer is a perfect power of two.
            </summary>
            <param name="number">The number to very whether it's a power of two.</param>
            <returns>True if and only if it is a power of two.</returns>
        </member>
        <member name="M:MathNet.Numerics.NumberTheory.IntegerTheory.IsPowerOfTwo(System.Int64)">
            <summary>
            Find out whether the provided 64 bit integer is a perfect power of two.
            </summary>
            <param name="number">The number to very whether it's a power of two.</param>
            <returns>True if and only if it is a power of two.</returns>
        </member>
        <member name="M:MathNet.Numerics.NumberTheory.IntegerTheory.CeilingToPowerOfTwo(System.Int32)">
            <summary>
            Find the closest perfect power of two that is larger or equal to the provided
            32 bit integer.
            </summary>
            <param name="number">The number of which to find the closest upper power of two.</param>
            <returns>A power of two.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:MathNet.Numerics.NumberTheory.IntegerTheory.CeilingToPowerOfTwo(System.Int64)">
            <summary>
            Find the closest perfect power of two that is larger or equal to the provided
            64 bit integer.
            </summary>
            <param name="number">The number of which to find the closest upper power of two.</param>
            <returns>A power of two.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:MathNet.Numerics.NumberTheory.IntegerTheory.PowerOfTwo(System.Int32)">
            <summary>
            Raises 2 to the provided integer exponent (0 &lt;= exponent &lt; 31).
            </summary>
            <param name="exponent">The exponent to raise 2 up to.</param>
            <returns>2 ^ exponent.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:MathNet.Numerics.NumberTheory.IntegerTheory.PowerOfTwo(System.Int64)">
            <summary>
            Raises 2 to the provided integer exponent (0 &lt;= exponent &lt; 63).
            </summary>
            <param name="exponent">The exponent to raise 2 up to.</param>
            <returns>2 ^ exponent.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:MathNet.Numerics.NumberTheory.IntegerTheory.IsPerfectSquare(System.Int32)">
            <summary>
            Find out whether the provided 32 bit integer is a perfect square, i.e. a square of an integer.
            </summary>
            <param name="number">The number to very whether it's a perfect square.</param>
            <returns>True if and only if it is a perfect square.</returns>
        </member>
        <member name="M:MathNet.Numerics.NumberTheory.IntegerTheory.IsPerfectSquare(System.Int64)">
            <summary>
            Find out whether the provided 64 bit integer is a perfect square, i.e. a square of an integer.
            </summary>
            <param name="number">The number to very whether it's a perfect square.</param>
            <returns>True if and only if it is a perfect square.</returns>
        </member>
        <member name="M:MathNet.Numerics.NumberTheory.IntegerTheory.GreatestCommonDivisor(System.Int64,System.Int64)">
            <summary>
            Returns the greatest common divisor (<c>gcd</c>) of two integers using Euclid's algorithm.
            </summary>
            <param name="a">First Integer: a.</param>
            <param name="b">Second Integer: b.</param>
            <returns>Greatest common divisor <c>gcd</c>(a,b)</returns>
        </member>
        <member name="M:MathNet.Numerics.NumberTheory.IntegerTheory.GreatestCommonDivisor(System.Collections.Generic.IList{System.Int64})">
            <summary>
            Returns the greatest common divisor (<c>gcd</c>) of a set of integers using Euclid's
            algorithm.
            </summary>
            <param name="integers">List of Integers.</param>
            <returns>Greatest common divisor <c>gcd</c>(list of integers)</returns>
        </member>
        <member name="M:MathNet.Numerics.NumberTheory.IntegerTheory.GreatestCommonDivisor(System.Int64[])">
            <summary>
            Returns the greatest common divisor (<c>gcd</c>) of a set of integers using Euclid's algorithm.
            </summary>
            <param name="integers">List of Integers.</param>
            <returns>Greatest common divisor <c>gcd</c>(list of integers)</returns>
        </member>
        <member name="M:MathNet.Numerics.NumberTheory.IntegerTheory.ExtendedGreatestCommonDivisor(System.Int64,System.Int64,System.Int64@,System.Int64@)">
            <summary>
            Computes the extended greatest common divisor, such that a*x + b*y = <c>gcd</c>(a,b).
            </summary>
            <param name="a">First Integer: a.</param>
            <param name="b">Second Integer: b.</param>
            <param name="x">Resulting x, such that a*x + b*y = <c>gcd</c>(a,b).</param>
            <param name="y">Resulting y, such that a*x + b*y = <c>gcd</c>(a,b)</param>
            <returns>Greatest common divisor <c>gcd</c>(a,b)</returns>
            <example>
            <code>
            long x,y,d;
            d = Fn.GreatestCommonDivisor(45,18,out x, out y);
            -> d == 9 &amp;&amp; x == 1 &amp;&amp; y == -2
            </code>
            The <c>gcd</c> of 45 and 18 is 9: 18 = 2*9, 45 = 5*9. 9 = 1*45 -2*18, therefore x=1 and y=-2.
            </example>
        </member>
        <member name="M:MathNet.Numerics.NumberTheory.IntegerTheory.LeastCommonMultiple(System.Int64,System.Int64)">
            <summary>
            Returns the least common multiple (<c>lcm</c>) of two integers using Euclid's algorithm.
            </summary>
            <param name="a">First Integer: a.</param>
            <param name="b">Second Integer: b.</param>
            <returns>Least common multiple <c>lcm</c>(a,b)</returns>
        </member>
        <member name="M:MathNet.Numerics.NumberTheory.IntegerTheory.LeastCommonMultiple(System.Collections.Generic.IList{System.Int64})">
            <summary>
            Returns the least common multiple (<c>lcm</c>) of a set of integers using Euclid's algorithm.
            </summary>
            <param name="integers">List of Integers.</param>
            <returns>Least common multiple <c>lcm</c>(list of integers)</returns>
        </member>
        <member name="M:MathNet.Numerics.NumberTheory.IntegerTheory.LeastCommonMultiple(System.Int64[])">
            <summary>
            Returns the least common multiple (<c>lcm</c>) of a set of integers using Euclid's algorithm.
            </summary>
            <param name="integers">List of Integers.</param>
            <returns>Least common multiple <c>lcm</c>(list of integers)</returns>
        </member>
        <member name="T:MathNet.Numerics.Precision">
            <summary>
            Utilities for working with floating point numbers.
            </summary>
            <remarks>
            <para>
            Useful links:
            <list type="bullet">
            <item>
            http://docs.sun.com/source/806-3568/ncg_goldberg.html#689 - What every computer scientist should know about floating-point arithmetic
            </item>
            <item>
            http://en.wikipedia.org/wiki/Machine_epsilon - Gives the definition of machine epsilon
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.Precision.BinaryBaseNumber">
            <summary>
            The base number for binary values
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Precision.DoublePrecision">
            <summary>
            The number of binary digits used to represent the binary number for a double precision floating
            point value. i.e. there are this many digits used to represent the
            actual number, where in a number as: 0.134556 * 10^5 the digits are 0.134556 and the exponent is 5.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Precision.SinglePrecision">
            <summary>
            The number of binary digits used to represent the binary number for a single precision floating
            point value. i.e. there are this many digits used to represent the
            actual number, where in a number as: 0.134556 * 10^5 the digits are 0.134556 and the exponent is 5.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Precision._doubleMachinePrecision">
            <summary>
            The maximum relative precision of a double
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Precision._singleMachinePrecision">
            <summary>
            The maximum relative precision of a single
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Precision._numberOfDecimalPlacesForDoubles">
            <summary>
            The number of significant figures that a double-precision floating point has.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Precision._numberOfDecimalPlacesForFloats">
            <summary>
            The number of significant figures that a single-precision floating point has.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Precision._defaultDoubleRelativeAccuracy">
            <summary>Value representing 10 * 2^(-52)</summary>
        </member>
        <member name="F:MathNet.Numerics.Precision._defaultSingleRelativeAccuracy">
            <summary>Value representing 10 * 2^(-52)</summary>
        </member>
        <member name="M:MathNet.Numerics.Precision.#cctor">
            <summary>
            Initializes static members of the Precision class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Precision.Magnitude(System.Double)">
            <summary>
            Returns the magnitude of the number.
            </summary>
            <param name="value">The value.</param>
            <returns>The magnitude of the number.</returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.Magnitude(System.Single)">
            <summary>
            Returns the magnitude of the number.
            </summary>
            <param name="value">The value.</param>
            <returns>The magnitude of the number.</returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.GetMagnitudeScaledValue(System.Double)">
            <summary>
            Returns the number divided by it's magnitude, effectively returning a number between -10 and 10.
            </summary>
            <param name="value">The value.</param>
            <returns>The value of the number.</returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.GetLongFromDouble(System.Double)">
            <summary>
            Gets the equivalent <c>long</c> value for the given <c>double</c> value.
            </summary>
            <param name="value">The <c>double</c> value which should be turned into a <c>long</c> value.</param>
            <returns>
            The resulting <c>long</c> value.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.GetDirectionalLongFromDouble(System.Double)">
            <summary>
            Returns a 'directional' long value. This is a long value which acts the same as a double,
            e.g. a negative double value will return a negative double value starting at 0 and going
            more negative as the double value gets more negative.
            </summary>
            <param name="value">The input double value.</param>
            <returns>A long value which is roughly the equivalent of the double value.</returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.GetDirectionalIntFromFloat(System.Single)">
            <summary>
            Returns a 'directional' int value. This is a int value which acts the same as a float,
            e.g. a negative float value will return a negative int value starting at 0 and going
            more negative as the float value gets more negative.
            </summary>
            <param name="value">The input float value.</param>
            <returns>An int value which is roughly the equivalent of the double value.</returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.Increment(System.Double)">
            <summary>
            Increments a floating point number to the next bigger number representable by the data type.
            </summary>
            <param name="value">The value which needs to be incremented.</param>
            <remarks>
            The incrementation step length depends on the provided value.
            Increment(double.MaxValue) will return positive infinity.
            </remarks>
            <returns>The next larger floating point value.</returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.Increment(System.Double,System.Int32)">
            <summary>
            Increments a floating point number to the next bigger number representable by the data type.
            </summary>
            <param name="value">The value which needs to be incremented.</param>
            <param name="count">How many times the number should be incremented.</param>
            <remarks>
            The incrementation step length depends on the provided value.
            Increment(double.MaxValue) will return positive infinity.
            </remarks>
            <returns>The next larger floating point value.</returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.Decrement(System.Double)">
            <summary>
            Decrements a floating point number to the next smaller number representable by the data type.
            </summary>
            <param name="value">The value which should be decremented.</param>
            <remarks>
            The decrementation step length depends on the provided value.
            Decrement(double.MinValue) will return negative infinity.
            </remarks>
            <returns>The next smaller floating point value.</returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.Decrement(System.Double,System.Int32)">
            <summary>
            Decrements a floating point number to the next smaller number representable by the data type.
            </summary>
            <param name="value">The value which should be decremented.</param>
            <param name="count">How many times the number should be decremented.</param>
            <remarks>
            The decrementation step length depends on the provided value.
            Decrement(double.MinValue) will return negative infinity.
            </remarks>
            <returns>The next smaller floating point value.</returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.CoerceZero(System.Double,System.Int32)">
            <summary>
            Forces small numbers near zero to zero, according to the specified absolute accuracy.
            </summary>
            <param name="a">The real number to coerce to zero, if it is almost zero.</param>
            <param name="maxNumbersBetween">The maximum count of numbers between the zero and the number <paramref name="a"/>.</param>
            <returns>
                Zero if |<paramref name="a"/>| is fewer than <paramref name="maxNumbersBetween"/> numbers from zero, <paramref name="a"/> otherwise.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.CoerceZero(System.Double,System.Int64)">
            <summary>
            Forces small numbers near zero to zero, according to the specified absolute accuracy.
            </summary>
            <param name="a">The real number to coerce to zero, if it is almost zero.</param>
            <param name="maxNumbersBetween">The maximum count of numbers between the zero and the number <paramref name="a"/>.</param>
            <returns>
                Zero if |<paramref name="a"/>| is fewer than <paramref name="maxNumbersBetween"/> numbers from zero, <paramref name="a"/> otherwise.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="maxNumbersBetween"/> is smaller than zero.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Precision.CoerceZero(System.Double,System.Double)">
            <summary>
            Forces small numbers near zero to zero, according to the specified absolute accuracy.
            </summary>
            <param name="a">The real number to coerce to zero, if it is almost zero.</param>
            <param name="maximumAbsoluteError">The absolute threshold for <paramref name="a"/> to consider it as zero.</param>
            <returns>Zero if |<paramref name="a"/>| is smaller than <paramref name="maximumAbsoluteError"/>, <paramref name="a"/> otherwise.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="maximumAbsoluteError"/> is smaller than zero.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Precision.CoerceZero(System.Double)">
            <summary>
            Forces small numbers near zero to zero.
            </summary>
            <param name="a">The real number to coerce to zero, if it is almost zero.</param>
            <returns>Zero if |<paramref name="a"/>| is smaller than 2^(-53) = 1.11e-16, <paramref name="a"/> otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.RangeOfMatchingFloatingPointNumbers(System.Double,System.Int64,System.Double@,System.Double@)">
            <summary>
            Determines the range of floating point numbers that will match the specified value with the given tolerance.
            </summary>
            <param name="value">The value.</param>
            <param name="maxNumbersBetween">The <c>ulps</c> difference.</param>
            <param name="bottomRangeEnd">The bottom range end.</param>
            <param name="topRangeEnd">The top range end.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="maxNumbersBetween"/> is smaller than zero.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Precision.MaximumMatchingFloatingPointNumber(System.Double,System.Int64)">
            <summary>
            Returns the floating point number that will match the value with the tolerance on the maximum size (i.e. the result is
            always bigger than the value)
            </summary>
            <param name="value">The value.</param>
            <param name="maxNumbersBetween">The <c>ulps</c> difference.</param>
            <returns>The maximum floating point number which is <paramref name="maxNumbersBetween"/> larger than the given <paramref name="value"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.MinimumMatchingFloatingPointNumber(System.Double,System.Int64)">
            <summary>
            Returns the floating point number that will match the value with the tolerance on the minimum size (i.e. the result is
            always smaller than the value)
            </summary>
            <param name="value">The value.</param>
            <param name="maxNumbersBetween">The <c>ulps</c> difference.</param>
            <returns>The minimum floating point number which is <paramref name="maxNumbersBetween"/> smaller than the given <paramref name="value"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.RangeOfMatchingNumbers(System.Double,System.Double,System.Int64@,System.Int64@)">
            <summary>
            Determines the range of <c>ulps</c> that will match the specified value with the given tolerance.
            </summary>
            <param name="value">The value.</param>
            <param name="relativeDifference">The relative difference.</param>
            <param name="bottomRangeEnd">The number of ULPS between the <c>value</c> and the <c>value - relativeDifference</c>.</param>
            <param name="topRangeEnd">The number of ULPS between the <c>value</c> and the <c>value + relativeDifference</c>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="relativeDifference"/> is smaller than zero.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="value"/> is <c>double.PositiveInfinity</c> or <c>double.NegativeInfinity</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="value"/> is <c>double.NaN</c>.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Precision.NumbersBetween(System.Double,System.Double)">
            <summary>
            Evaluates the count of numbers between two double numbers
            </summary>
            <param name="a">The first parameter.</param>
            <param name="b">The second parameter.</param>
            <remarks>The second number is included in the number, thus two equal numbers evaluate to zero and two neighbor numbers evaluate to one. Therefore, what is returned is actually the count of numbers between plus 1.</remarks>
            <returns>The number of floating point values between <paramref name="a"/> and <paramref name="b"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="a"/> is <c>double.PositiveInfinity</c> or <c>double.NegativeInfinity</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="a"/> is <c>double.NaN</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="b"/> is <c>double.PositiveInfinity</c> or <c>double.NegativeInfinity</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="b"/> is <c>double.NaN</c>.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Precision.AlmostEqual(System.Double,System.Double)">
            <summary>
            Checks whether two real numbers are almost equal.
            </summary>
            <param name="a">The first number</param>
            <param name="b">The second number</param>
            <returns>true if the two values differ by no more than 10 * 2^(-52); false otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.AlmostEqual(System.Single,System.Single)">
            <summary>
            Checks whether two real numbers are almost equal.
            </summary>
            <param name="a">The first number</param>
            <param name="b">The second number</param>
            <returns>true if the two values differ by no more than 10 * 2^(-52); false otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.AlmostEqual(System.Numerics.Complex,System.Numerics.Complex)">
            <summary>
            Checks whether two Compex numbers are almost equal.
            </summary>
            <param name="a">The first number</param>
            <param name="b">The second number</param>
            <returns>true if the two values differ by no more than 10 * 2^(-52); false otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.AlmostEqual(MathNet.Numerics.Complex32,MathNet.Numerics.Complex32)">
            <summary>
            Checks whether two Compex numbers are almost equal.
            </summary>
            <param name="a">The first number</param>
            <param name="b">The second number</param>
            <returns>true if the two values differ by no more than 10 * 2^(-52); false otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.AlmostEqual``1(``0,``0)">
            <summary>
            Checks whether two structures with precision support are almost equal. 
            </summary>
            <typeparam name="T">The type of the structures. Must implement <see cref="T:MathNet.Numerics.IPrecisionSupport`1"/>.</typeparam>
            <param name="a">The first structure</param>
            <param name="b">The second structure</param>
            <returns>true if the two values differ by no more than 10 * 2^(-52); false otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.AlmostEqualWithError(System.Numerics.Complex,System.Numerics.Complex,System.Double)">
            <summary>
            Compares two complex and determines if they are equal within
            the specified maximum error.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="maximumError">The accuracy required for being almost equal.</param>
            <returns>
            <see langword="true" /> if both complex are almost equal up to the
            specified maximum error, <see langword="false" /> otherwise.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.AlmostEqualWithError(System.Single,System.Single,System.Double)">
            <summary>
            Compares two complex and determines if they are equal within
            the specified maximum error.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="maximumError">The accuracy required for being almost equal.</param>
            <returns>
            <see langword="true" /> if both complex are almost equal up to the
            specified maximum error, <see langword="false" /> otherwise.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.AlmostEqualWithError(System.Double,System.Double,System.Double)">
            <summary>
            Compares two doubles and determines if they are equal within
            the specified maximum error.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="maximumError">The accuracy required for being almost equal.</param>
            <returns>
            <see langword="true" /> if both doubles are almost equal up to the
            specified maximum error, <see langword="false" /> otherwise.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.AlmostEqualListWithError(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Double)">
            <summary>
            Compares two lists of doubles and determines if they are equal within the
            specified maximum error.
            </summary>
            <param name="a">The first value list.</param>
            <param name="b">The second value list.</param>
            <param name="maximumError">
            The accuracy required for being almost equal.
            </param>
            <returns>
            <see langword="true" /> if both doubles are almost equal up to the specified
            maximum error, <see langword="false" /> otherwise.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.AlmostEqualListWithError(System.Collections.Generic.IList{System.Numerics.Complex},System.Collections.Generic.IList{System.Numerics.Complex},System.Double)">
            <summary>
            Compares two lists of doubles and determines if they are equal within the
            specified maximum error.
            </summary>
            <param name="a">The first value list.</param>
            <param name="b">The second value list.</param>
            <param name="maximumError">
            The accuracy required for being almost equal.
            </param>
            <returns>
            <see langword="true" /> if both doubles are almost equal up to the specified
            maximum error, <see langword="false" /> otherwise.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.AlmostEqualWithError``1(``0,``0,System.Double)">
            <summary>
            Compares two structure with precision support and determines if they are equal
            within the specified maximum relative error.
            </summary>
            <typeparam name="T">
            The type of the structures. Must implement <see cref="T:MathNet.Numerics.IPrecisionSupport`1"/>.
            </typeparam>
            <param name="a">The first structure.</param>
            <param name="b">The second structure.</param>
            <param name="maximumError">
            The accuracy required for being almost equal.
            </param>
            <returns>
            <see langword="true"/> if both doubles are almost equal up to the specified
            maximum relative error, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.AlmostEqualListWithError``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Double)">
            <summary>
            Compares two lists of structures with precision support and determines if they
            are equal within the specified maximum error.
            </summary>
            <typeparam name="T">
            The type of the structures. Must implement <see cref="T:MathNet.Numerics.IPrecisionSupport`1"/>.
            </typeparam>
            <param name="a">The first structure list.</param>
            <param name="b">The second structure list.</param>
            <param name="maximumError">
            The accuracy required for being almost equal.
            </param>
            <returns>
            <see langword="true"/> if both doubles are almost equal up to the specified
            maximum error, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.AlmostEqualWithError(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Compares two doubles and determines if they are equal within the specified
            maximum error.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="diff">
            The difference of the two values (according to some norm).
            </param>
            <param name="maximumError">
            The accuracy required for being almost equal.
            </param>
            <returns>
            <see langword="true" /> if both doubles are almost equal up to the specified
            maximum error, <see langword="false" /> otherwise.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.AlmostEqualWithAbsoluteError(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Compares two doubles and determines if they are equal within the specified
            maximum absolute error.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="diff">
            The difference of the two values (according to some norm).
            </param>
            <param name="maximumAbsoluteError">
            The absolute accuracy required for being almost equal.
            </param>
            <returns>
            <see langword="true" /> if both doubles are almost equal up to the specified
            maximum absolute error, <see langword="false" /> otherwise.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.AlmostEqualWithRelativeError(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Compares two doubles and determines if they are equal within the specified
            maximum relative error.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="diff">The difference of the two values (according to some norm).
            </param>
            <param name="maximumRelativeError">The relative accuracy required for being
            almost equal.</param>
            <returns>
            <see langword="true" /> if both doubles are almost equal up to the specified
            maximum relative error, <see langword="false" /> otherwise.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.AlmostEqualInDecimalPlaces(System.Double,System.Double,System.Int32)">
            <summary>
            Compares two doubles and determines if they are equal to within the specified number of decimal places or not. If the numbers
            are very close to zero an absolute difference is compared, otherwise the relative difference is compared.
            </summary>
            <remarks>
            <para>
            The values are equal if the difference between the two numbers is smaller than 10^(-numberOfDecimalPlaces). We divide by 
            two so that we have half the range on each side of the numbers, e.g. if <paramref name="decimalPlaces"/> == 2, then 0.01 will equal between 
            0.005 and 0.015, but not 0.02 and not 0.00
            </para>
            </remarks>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="decimalPlaces">The number of decimal places.</param>
            <returns><see langword="true"/> if both doubles are equal to each other within the specified number of decimal places; otherwise <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="decimalPlaces"/> is smaller than zero.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Precision.AlmostEqualInDecimalPlaces(System.Single,System.Single,System.Int32)">
            <summary>
            Compares two floats and determines if they are equal to within the specified number of decimal places or not. If the numbers
            are very close to zero an absolute difference is compared, otherwise the relative difference is compared.
            </summary>
            <remarks>
            <para>
            The values are equal if the difference between the two numbers is smaller than 10^(-numberOfDecimalPlaces). We divide by 
            two so that we have half the range on each side of the numbers, e.g. if <paramref name="decimalPlaces"/> == 2, then 0.01 will equal between 
            0.005 and 0.015, but not 0.02 and not 0.00
            </para>
            </remarks>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="decimalPlaces">The number of decimal places.</param>
            <returns><see langword="true"/> if both doubles are equal to each other within the specified number of decimal places; otherwise <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="decimalPlaces"/> is smaller than zero.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Precision.AlmostEqualWithRelativeDecimalPlaces(System.Double,System.Double,System.Int32)">
            <summary>
            Compares two doubles and determines if they are equal to within the specified number of decimal places or not. 
            </summary>
            <remarks>
            <para>
            The values are equal if the difference between the two numbers is smaller than 10^(-numberOfDecimalPlaces). We divide by 
            two so that we have half the range on each side of the numbers, e.g. if <paramref name="decimalPlaces"/> == 2, then 0.01 will equal between 
            0.005 and 0.015, but not 0.02 and not 0.00
            </para>
            </remarks>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="decimalPlaces">The number of decimal places.</param>
            <returns><see langword="true" /> if both doubles are equal to each other within the specified number of decimal places; otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.AlmostEqualWithRelativeDecimalPlaces(System.Single,System.Single,System.Int32)">
            <summary>
            Compares two floats and determines if they are equal to within the specified number of decimal places or not. 
            </summary>
            <remarks>
            <para>
            The values are equal if the difference between the two numbers is smaller than 10^(-numberOfDecimalPlaces). We divide by 
            two so that we have half the range on each side of the numbers, e.g. if <paramref name="decimalPlaces"/> == 2, then 0.01 will equal between 
            0.005 and 0.015, but not 0.02 and not 0.00
            </para>
            </remarks>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="decimalPlaces">The number of decimal places.</param>
            <returns><see langword="true" /> if both floats are equal to each other within the specified number of decimal places; otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.AlmostEqualWithAbsoluteDecimalPlaces(System.Double,System.Double,System.Int32)">
            <summary>
            Compares two doubles and determines if they are equal to within the specified number of decimal places or not, using the 
            number of decimal places as an absolute measure.
            </summary>
            <remarks>
            <para>
            The values are equal if the difference between the two numbers is smaller than 10^(-numberOfDecimalPlaces). We divide by 
            two so that we have half the range on each side of the numbers, e.g. if <paramref name="decimalPlaces"/> == 2, then 0.01 will equal between 
            0.005 and 0.015, but not 0.02 and not 0.00
            </para>
            </remarks>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="decimalPlaces">The number of decimal places.</param>
            <returns><see langword="true" /> if both doubles are equal to each other within the specified number of decimal places; otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.AlmostEqualWithAbsoluteDecimalPlaces(System.Single,System.Single,System.Int32)">
            <summary>
            Compares two floats and determines if they are equal to within the specified number of decimal places or not, using the 
            number of decimal places as an absolute measure.
            </summary>
            <remarks>
            <para>
            The values are equal if the difference between the two numbers is smaller than 10^(-numberOfDecimalPlaces). We divide by 
            two so that we have half the range on each side of the numbers, e.g. if <paramref name="decimalPlaces"/> == 2, then 0.01 will equal between 
            0.005 and 0.015, but not 0.02 and not 0.00
            </para>
            </remarks>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="decimalPlaces">The number of decimal places.</param>
            <returns><see langword="true" /> if both floats are equal to each other within the specified number of decimal places; otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.AlmostEqual(System.Double,System.Double,System.Int64)">
            <summary>
            Compares two doubles and determines if they are equal to within the tolerance or not. Equality comparison is based on the binary representation.
            </summary>
            <remarks>
            <para>
            Determines the 'number' of floating point numbers between two values (i.e. the number of discrete steps 
            between the two numbers) and then checks if that is within the specified tolerance. So if a tolerance 
            of 1 is passed then the result will be true only if the two numbers have the same binary representation 
            OR if they are two adjacent numbers that only differ by one step.
            </para>
            <para>
            The comparison method used is explained in http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm . The article
            at http://www.extremeoptimization.com/resources/Articles/FPDotNetConceptsAndFormats.aspx explains how to transform the C code to 
            .NET enabled code without using pointers and unsafe code.
            </para>
            </remarks>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="maxNumbersBetween">The maximum number of floating point values between the two values. Must be 1 or larger.</param>
            <returns><see langword="true"/> if both doubles are equal to each other within the specified tolerance; otherwise <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="maxNumbersBetween"/> is smaller than one.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Precision.AlmostEqual(System.Single,System.Single,System.Int32)">
            <summary>
            Compares two floats and determines if they are equal to within the tolerance or not. Equality comparison is based on the binary representation.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="maxNumbersBetween">The maximum number of floating point values between the two values. Must be 1 or larger.</param>
            <returns><see langword="true"/> if both floats are equal to each other within the specified tolerance; otherwise <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="maxNumbersBetween"/> is smaller than one.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Precision.IsLarger(System.Double,System.Double,System.Int64)">
            <summary>
            Compares two doubles and determines if the <c>first</c> value is larger than the <c>second</c>
            value to within the tolerance or not. Equality comparison is based on the binary representation.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="maxNumbersBetween">The maximum number of floating point values for which the two values are considered equal. Must be 1 or larger.</param>
            <returns><c>true</c> if the first value is larger than the second value; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.IsLargerWithDecimalPlaces(System.Double,System.Double,System.Int32)">
            <summary>
            Compares two doubles and determines if the <c>first</c> value is larger than the <c>second</c>
            value to within the specified number of decimal places or not.
            </summary>
            <remarks>
            <para>
            The values are equal if the difference between the two numbers is smaller than 10^(-numberOfDecimalPlaces). We divide by 
            two so that we have half the range on each side of the numbers, e.g. if <paramref name="decimalPlaces"/> == 2, then 0.01 will equal between 
            0.005 and 0.015, but not 0.02 and not 0.00
            </para>
            </remarks>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="decimalPlaces">The number of decimal places.</param>
            <returns><c>true</c> if the first value is larger than the second value; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.IsSmaller(System.Double,System.Double,System.Int64)">
            <summary>
            Compares two doubles and determines if the <c>first</c> value is smaller than the <c>second</c>
            value to within the tolerance or not. Equality comparison is based on the binary representation.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="maxNumbersBetween">The maximum number of floating point values for which the two values are considered equal. Must be 1 or larger.</param>
            <returns><c>true</c> if the first value is smaller than the second value; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.IsSmaller(System.Single,System.Single,System.Int64)">
            <summary>
            Compares two floats and determines if the <c>first</c> value is smaller than the <c>second</c>
            value to within the tolerance or not. Equality comparison is based on the binary representation.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="maxNumbersBetween">The maximum number of floating point values for which the two values are considered equal. Must be 1 or larger.</param>
            <returns><c>true</c> if the first value is smaller than the second value; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.IsSmallerWithDecimalPlaces(System.Double,System.Double,System.Int32)">
            <summary>
            Compares two doubles and determines if the <c>first</c> value is smaller than the <c>second</c>
            value to within the specified number of decimal places or not.
            </summary>
            <remarks>
            <para>
            The values are equal if the difference between the two numbers is smaller than 10^(-numberOfDecimalPlaces). We divide by 
            two so that we have half the range on each side of th<paramref name="decimalPlaces"/>g. if <paramref name="decimalPlaces"/> == 2, then 0.01 will equal between 
            0.005 and 0.015, but not 0.02 and not 0.00
            </para>
            </remarks>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="decimalPlaces">The number of decimal places.</param>
            <returns><c>true</c> if the first value is smaller than the second value; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.IsSmallerWithDecimalPlaces(System.Single,System.Single,System.Int32)">
            <summary>
             Compares two floats and determines if the <c>first</c> value is smaller than the <c>second</c>
             value to within the specified number of decimal places or not.
             </summary>
             <remarks>
             <para>
             The values are equal if the difference between the two numbers is smaller than 10^(-numberOfDecimalPlaces). We divide by 
             two so that we have half the range on each side of th<paramref name="decimalPlaces"/>g. if <paramref name="decimalPlaces"/> == 2, then 0.01 will equal between 
             0.005 and 0.015, but not 0.02 and not 0.00
             </para>
             </remarks>
             <param name="a">The first value.</param>
             <param name="b">The second value.</param>
             <param name="decimalPlaces">The number of decimal places.</param>
             <returns><c>true</c> if the first value is smaller than the second value; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.CompareTo(System.Double,System.Double,System.Int64)">
            <summary>
            Compares two doubles and determines which double is bigger.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="maxNumbersBetween">The maximum error in terms of Units in Last Place (<c>ulps</c>), i.e. the maximum number of decimals that may be different. Must be 1 or larger.</param>
            <returns>
            <list type="table">
                <listheader>
                    <term>Return value</term>
                    <description>Meaning</description>
                </listheader>
                <item>
                    <term>-1</term>
                    <description><paramref name="a"/> is smaller than <paramref name="b"/> by more than the <paramref name="maxNumbersBetween"/> tolerance.</description>
                </item>
                <item>
                    <term>0</term>
                    <description><paramref name="a"/> is equal to <paramref name="b"/> within the <paramref name="maxNumbersBetween"/> tolerance.</description>
                </item>
                <item>
                    <term>1</term>
                    <description><paramref name="a"/> is bigger than <paramref name="b"/> by more than the <paramref name="maxNumbersBetween"/> tolerance.</description>
                </item>
            </list>
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.CompareToInDecimalPlaces(System.Double,System.Double,System.Int32)">
            <summary>
            Compares two doubles and determines which double is bigger.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="decimalPlaces">The number of decimal places on which the values must be compared. Must be 1 or larger.</param>
            <returns>
            <list type="table">
                <listheader>
                    <term>Return value</term>
                    <description>Meaning</description>
                </listheader>
                <item>
                    <term>-1</term>
                    <description><paramref name="a"/> is smaller than <paramref name="b"/> by more than a magnitude equal to <paramref name="decimalPlaces"/>.</description>
                </item>
                <item>
                    <term>0</term>
                    <description><paramref name="a"/> is equal to <paramref name="b"/> within a magnitude equal to <paramref name="decimalPlaces"/>.</description>
                </item>
                <item>
                    <term>1</term>
                    <description><paramref name="a"/> is bigger than <paramref name="b"/> by more than a magnitude equal to <paramref name="decimalPlaces"/>.</description>
                </item>
            </list>
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Precision.EpsilonOf(System.Double)">
            <summary>
            Evaluates the minimum distance to the next distinguishable number near the argument value.
            </summary>
            <param name="value">The value used to determine the minimum distance.</param>
            <returns>
            Relative Epsilon (positive double or NaN).
            </returns>
            <remarks>Evaluates the <b>negative</b> epsilon. The more common positive epsilon is equal to two times this negative epsilon.</remarks>
            <seealso cref="M:MathNet.Numerics.Precision.PositiveEpsilonOf(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Precision.PositiveEpsilonOf(System.Double)">
            <summary>
            Evaluates the minimum distance to the next distinguishable number near the argument value.
            </summary>
            <param name="value">The value used to determine the minimum distance.</param>
            <returns>Relative Epsilon (positive double or NaN)</returns>
            <remarks>Evaluates the <b>positive</b> epsilon. See also <see cref="M:MathNet.Numerics.Precision.EpsilonOf(System.Double)"/></remarks>
            <seealso cref="M:MathNet.Numerics.Precision.EpsilonOf(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Precision.FloatToInt32Bits(System.Single)">
            <summary>
            Converts a float valut to a bit array stored in an int.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The bit array.</returns>
        </member>
        <member name="P:MathNet.Numerics.Precision.DoubleMachinePrecision">
            <summary>
            Gets the maximum relative precision of a double.
            </summary>
            <value>The maximum relative precision of a double.</value>
        </member>
        <member name="P:MathNet.Numerics.Precision.SingleMachinePrecision">
            <summary>
            Gets the maximum relative precision of a single.
            </summary>
            <value>The maximum relative precision of a single.</value>
        </member>
        <member name="P:MathNet.Numerics.Precision.NumberOfDecimalPlacesForFloats">
            <summary>
            Gets the number of decimal places for floats.
            </summary>
            <value>The number of decimal places for floats.</value>
        </member>
        <member name="P:MathNet.Numerics.Precision.NumberOfDecimalPlacesForDoubles">
            <summary>
            Gets the number of decimal places for doubles.
            </summary>
            <value>The number of decimal places for doubles.</value>
        </member>
        <member name="T:MathNet.Numerics.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.AccuracyNotReached">
            <summary>
              Looks up a localized string similar to The accuracy couldn&apos;t be reached with the specified number of iterations..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentArraysSameLength">
            <summary>
              Looks up a localized string similar to The array arguments must have the same length..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentArrayWrongLength">
            <summary>
              Looks up a localized string similar to The given array is the wrong length. Should be {0}..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentBetween0And1">
            <summary>
              Looks up a localized string similar to The argument must be between 0 and 1..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentCannotBeBetweenOneAndNegativeOne">
            <summary>
              Looks up a localized string similar to Value cannot be in the range -1 &lt; x &lt; 1..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentEven">
            <summary>
              Looks up a localized string similar to Value must be even..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentHistogramContainsNot">
            <summary>
              Looks up a localized string similar to The histogram does not contains the value..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentInIntervalXYInclusive">
            <summary>
              Looks up a localized string similar to Value is expected to be between {0} and {1} (including {0} and {1})..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentItemNull">
            <summary>
              Looks up a localized string similar to At least one item of {0} is a null reference (Nothing in Visual Basic)..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentLessThanOne">
            <summary>
              Looks up a localized string similar to Value must be greater than or equal to one..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentLowerBoundLargerThanUpperBound">
            <summary>
              Looks up a localized string similar to han the given upper bound..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentMatrixDimensions">
            <summary>
              Looks up a localized string similar to Matrix dimensions must agree..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentMatrixDimensions1">
            <summary>
              Looks up a localized string similar to Matrix dimensions must agree: {0}..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentMatrixDimensions2">
            <summary>
              Looks up a localized string similar to Matrix dimensions must agree: op1 is {0}, op2 is {1}..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentMatrixDimensions3">
            <summary>
              Looks up a localized string similar to Matrix dimensions must agree: op1 is {0}, op2 is {1}, op3 is {2}..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentMatrixDoesNotExist">
            <summary>
              Looks up a localized string similar to The requested matrix does not exist..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentMatrixIndexOutOfRange">
            <summary>
              Looks up a localized string similar to The matrix indices must not be out of range of the given matrix..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentMatrixNotRankDeficient">
            <summary>
              Looks up a localized string similar to Matrix must not be rank deficient..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentMatrixNotSingular">
            <summary>
              Looks up a localized string similar to Matrix must not be singular..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentMatrixPositiveDefinite">
            <summary>
              Looks up a localized string similar to Matrix must be positive definite..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentMatrixSameColumnDimension">
            <summary>
              Looks up a localized string similar to Matrix column dimensions must agree..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentMatrixSameRowDimension">
            <summary>
              Looks up a localized string similar to Matrix row dimensions must agree..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentMatrixSingleColumn">
            <summary>
              Looks up a localized string similar to Matrix must have exactly one column..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentMatrixSingleColumnRow">
            <summary>
              Looks up a localized string similar to Matrix must have exactly one column and row, thus have only one cell..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentMatrixSingleRow">
            <summary>
              Looks up a localized string similar to Matrix must have exactly one row..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentMatrixSquare">
            <summary>
              Looks up a localized string similar to Matrix must be square..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentMatrixSymmetric">
            <summary>
              Looks up a localized string similar to Matrix must be symmetric..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentMatrixSymmetricPositiveDefinite">
            <summary>
              Looks up a localized string similar to Matrix must be symmetric positive definite..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentMinValueGreaterThanMaxValue">
            <summary>
              Looks up a localized string similar to In the specified range, the minimum is greater than maximum..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentMustBePositive">
            <summary>
              Looks up a localized string similar to Value must be positive..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentNotInfinityNaN">
            <summary>
              Looks up a localized string similar to Value must neither be infinite nor NaN..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentNotNegative">
            <summary>
              Looks up a localized string similar to Value must not be negative (zero is ok)..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentNull">
            <summary>
              Looks up a localized string similar to {0} is a null reference (Nothing in Visual Basic)..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentOdd">
            <summary>
              Looks up a localized string similar to Value must be odd..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentOutOfRangeGreater">
            <summary>
              Looks up a localized string similar to {0} must be greater than {1}..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentOutOfRangeGreaterEqual">
            <summary>
              Looks up a localized string similar to {0} must be greater than or equal to {1}..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentParameterSetInvalid">
            <summary>
              Looks up a localized string similar to The chosen parameter set is invalid (probably some value is out of range)..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentParseComplexNumber">
            <summary>
              Looks up a localized string similar to The given expression does not represent a complex number..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentPositive">
            <summary>
              Looks up a localized string similar to Value must be positive (and not zero)..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentPowerOfTwo">
            <summary>
              Looks up a localized string similar to Size must be a Power of Two..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentPowerOfTwoEveryDimension">
            <summary>
              Looks up a localized string similar to Size must be a Power of Two in every dimension..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentRangeLessEqual">
            <summary>
              Looks up a localized string similar to The range between {0} and {1} must be less than or equal to {2}..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentReferenceDifferent">
            <summary>
              Looks up a localized string similar to Arguments must be different objects..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentSingleDimensionArray">
            <summary>
              Looks up a localized string similar to Array must have exactly one dimension (and not be null)..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentTooLarge">
            <summary>
              Looks up a localized string similar to Value is too large..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentTooLargeForIterationLimit">
            <summary>
              Looks up a localized string similar to Value is too large for the current iteration limit..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentTypeMismatch">
            <summary>
              Looks up a localized string similar to Type mismatch..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentVectorLengthsMultipleOf">
            <summary>
              Looks up a localized string similar to Array length must be a multiple of {0}..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentVectorsSameLength">
            <summary>
              Looks up a localized string similar to All vectors must have the same dimensionality..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentVectorThreeDimensional">
            <summary>
              Looks up a localized string similar to The vector must have 3 dimensions..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArrayTooSmall">
            <summary>
              Looks up a localized string similar to The given array is too small. It must be at least {0} long..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.BigEndianNotSupported">
            <summary>
              Looks up a localized string similar to Big endian files are not supported..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.CollectionEmpty">
            <summary>
              Looks up a localized string similar to The supplied collection is empty..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ComplexMatricesNotSupported">
            <summary>
              Looks up a localized string similar to Complex matrices are not supported..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ConvergenceFailed">
            <summary>
              Looks up a localized string similar to An algorithm failed to converge..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.FeaturePlannedButNotImplementedYet">
            <summary>
              Looks up a localized string similar to This feature is not implemented yet (but is planned)..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.FileDoesNotExist">
            <summary>
              Looks up a localized string similar to The given file doesn&apos;t exist..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.Interpolation_Initialize_SamplePointsNotStrictlyAscendingOrder">
            <summary>
              Looks up a localized string similar to Sample points should be sorted in strictly ascending order.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.Interpolation_Initialize_SamplePointsNotUnique">
            <summary>
              Looks up a localized string similar to All sample points should be unique..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.InvalidDistributionParameters">
            <summary>
              Looks up a localized string similar to Invalid parameterization for the distribution..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.InvalidLeftBoundaryCondition">
            <summary>
              Looks up a localized string similar to Invalid Left Boundary Condition..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.InvalidOperationAccumulatorEmpty">
            <summary>
              Looks up a localized string similar to The operation could not be performed because the accumulator is empty..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.InvalidOperationHistogramEmpty">
            <summary>
              Looks up a localized string similar to The operation could not be performed because the histogram is empty..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.InvalidOperationHistogramNotEnoughPoints">
            <summary>
              Looks up a localized string similar to Not enough points in the distribution..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.InvalidOperationNoSamplesProvided">
            <summary>
              Looks up a localized string similar to No Samples Provided. Preparation Required..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.InvalidRightBoundaryCondition">
            <summary>
              Looks up a localized string similar to Invalid Right Boundary Condition..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.MatlabDateHeaderFormat">
            <summary>
              Looks up a localized string similar to ddd MMM dd HH:mm:ss yyyy.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.MatrixColumnsMustBePositive">
            <summary>
              Looks up a localized string similar to The number of columns of a matrix must be positive..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.MatrixRowsMustBePositive">
            <summary>
              Looks up a localized string similar to The number of rows of a matrix must be positive..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.MatrixRowsOrColumnsMustBePositive">
            <summary>
              Looks up a localized string similar to The number of rows or columns of a matrix must be positive..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.MoreThan2D">
            <summary>
              Looks up a localized string similar to Only 1 and 2 dimensional arrays are supported..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.MustContainAtLeast">
            <summary>
              Looks up a localized string similar to Data must contain at least {0} values..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.NameCannotContainASpace">
            <summary>
              Looks up a localized string similar to Name cannot contain a space. name:  {0}.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.NotSupportedType">
            <summary>
              Looks up a localized string similar to {0} is not a supported type..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.PartialOrderException">
            <summary>
              Looks up a localized string similar to The two arguments can&apos;t be compared (maybe they are part of a partial ordering?).
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.PermutationAsIntArrayInvalid">
            <summary>
              Looks up a localized string similar to The integer array does not represent a valid permutation..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ProposalDistributionNoUpperBound">
            <summary>
              Looks up a localized string similar to The sampler&apos;s proposal distribution is not upper bounding the target density..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.RootFindingFailed">
            <summary>
              Looks up a localized string similar to The algorithm has failed, exceeded the number of iterations allowed or there is no root within the provided bounds..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.RootFindingFailedRecommendRobustNewtonRaphson">
            <summary>
              Looks up a localized string similar to The algorithm has failed, exceeded the number of iterations allowed or there is no root within the provided bounds. Consider to use RobustNewtonRaphson instead..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.RootMustBeBracketedByBounds">
            <summary>
              Looks up a localized string similar to The lower and upper bounds must bracket a single root..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.RootNotFound">
            <summary>
              Looks up a localized string similar to The algorithm ended without root in the range..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.RowsLessThanColumns">
            <summary>
              Looks up a localized string similar to The number of rows must greater than or equal to the number of columns..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.SingularVectorsNotComputed">
            <summary>
              Looks up a localized string similar to The singular vectors were not computed..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.SpecialCasePlannedButNotImplementedYet">
            <summary>
              Looks up a localized string similar to This special case is not supported yet (but is planned)..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.StopCriteriumDuplicate">
            <summary>
              Looks up a localized string similar to The given stop criterium already exist in the collection..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.StopCriteriumMissing">
            <summary>
              Looks up a localized string similar to There is no stop criterium in the collection..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.StringNullOrEmpty">
            <summary>
              Looks up a localized string similar to String parameter cannot be empty or null..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.TooManyElements">
            <summary>
              Looks up a localized string similar to We only support sparse matrix with less than int.MaxValue elements..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.UndefinedMoment">
            <summary>
              Looks up a localized string similar to The moment of the distribution is undefined..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.UserDefinedProviderNotSpecified">
            <summary>
              Looks up a localized string similar to A user defined provider has not been specified..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.WorkArrayTooSmall">
            <summary>
              Looks up a localized string similar to The given work array is too small. Check work[0] for the corret size..
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Random.AbstractRandomNumberGenerator">
            <summary>
            Abstract class for random number generators. This class introduces a layer between <see cref="T:System.Random"/>
            and the Math.Net Numerics random number generators to provide thread safety.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Random.AbstractRandomNumberGenerator._sampleMethod">
            <summary>
            The method that actually generates samples.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Random.AbstractRandomNumberGenerator._lock">
            <summary>
            The object that will be locked for thread safety.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Random.AbstractRandomNumberGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.AbstractRandomNumberGenerator"/> class using
            the value of <see cref="P:MathNet.Numerics.Control.ThreadSafeRandomNumberGenerators"/> to set whether
            the instance is thread safe or not.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Random.AbstractRandomNumberGenerator.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.AbstractRandomNumberGenerator"/> class.
            </summary>
            <param name="threadSafe">if set to <c>true</c> , the class is thread safe.</param>
            <remarks>Thread safe instances are two and half times slower than non-thread
            safe classes.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Random.AbstractRandomNumberGenerator.NextDouble(System.Int32)">
            <summary>
            Returns an array of uniformly distributed random doubles in the interval [0.0,1.0].
            </summary>
            <param name="n">The size of the array.</param>
            <returns>
            An array of uniformly distributed random doubles in the interval [0.0,1.0].
            </returns>
            <exception cref="T:System.ArgumentException">if n is not greater than 0.</exception>
        </member>
        <member name="M:MathNet.Numerics.Random.AbstractRandomNumberGenerator.Next">
            <summary>
            Returns a nonnegative random number.
            </summary>
            <returns>
            A 32-bit signed integer greater than or equal to zero and less than <see cref="F:System.Int32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Random.AbstractRandomNumberGenerator.Next(System.Int32)">
            <summary>
            Returns a random number less then a specified maximum.
            </summary>
            <param name="maxValue">The exclusive upper bound of the random number returned.</param>
            <returns>A 32-bit signed integer less than <paramref name="maxValue"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maxValue"/> is negative. </exception>
        </member>
        <member name="M:MathNet.Numerics.Random.AbstractRandomNumberGenerator.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random number within a specified range.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The exclusive upper bound of the random number returned. <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.</param>
            <returns>
            A 32-bit signed integer greater than or equal to <paramref name="minValue"/> and less than <paramref name="maxValue"/>; that is, the range of return values includes <paramref name="minValue"/> but not <paramref name="maxValue"/>. If <paramref name="minValue"/> equals <paramref name="maxValue"/>, <paramref name="minValue"/> is returned.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="minValue"/> is greater than <paramref name="maxValue"/>. </exception>
        </member>
        <member name="M:MathNet.Numerics.Random.AbstractRandomNumberGenerator.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers.
            </summary>
            <param name="buffer">An array of bytes to contain random numbers.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null. </exception>
        </member>
        <member name="M:MathNet.Numerics.Random.AbstractRandomNumberGenerator.Sample">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>A double-precision floating point number greater than or equal to 0.0, and less than 1.0.</returns>
        </member>
        <member name="M:MathNet.Numerics.Random.AbstractRandomNumberGenerator.ThreadSafeSample">
            <summary>
            Thread safe version of <seealso cref="M:MathNet.Numerics.Random.AbstractRandomNumberGenerator.DoSample"/> which returns a random number between 0.0 and 1.0.
            </summary>
            <returns>A double-precision floating point number greater than or equal to 0.0, and less than 1.0</returns>
        </member>
        <member name="M:MathNet.Numerics.Random.AbstractRandomNumberGenerator.DoSample">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0.
            </returns>
        </member>
        <member name="T:MathNet.Numerics.Random.AbstractRandomNumberGenerator.SampleMethod">
            <summary>
            A delegate type that represents a method that generates random numbers.
            </summary>
            <returns>Randomly distributed numbers.</returns>
        </member>
        <member name="T:MathNet.Numerics.Random.Mcg31m1">
            <summary>
            Multiplicative congruential generator using a modulus of 2^31-1 and a multiplier of 1132489760.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Random.Mcg31m1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.Mcg31m1"/> class using
            the current time as the seed.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Random.Mcg31m1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.Mcg31m1"/> class using
            the current time as the seed.
            </summary>
            <param name="threadSafe">if set to <c>true</c> , the class is thread safe.</param>
        </member>
        <member name="M:MathNet.Numerics.Random.Mcg31m1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.Mcg31m1"/> class.
            </summary>
            <param name="seed">The seed value.</param>
            <remarks>If the seed value is zero, it is set to one. Uses the
            value of <see cref="P:MathNet.Numerics.Control.ThreadSafeRandomNumberGenerators"/> to
            set whether the instance is thread safe.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Random.Mcg31m1.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.Mcg31m1"/> class.
            </summary>
            <param name="seed">The seed value.</param>
            <param name="threadSafe">if set to <c>true</c>, the class is thread safe.</param>
        </member>
        <member name="M:MathNet.Numerics.Random.Mcg31m1.DoSample">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0.
            </returns>
        </member>
        <member name="T:MathNet.Numerics.Random.Mcg59">
            <summary>
            Multiplicative congruential generator using a modulus of 2^59 and a multiplier of 13^13.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Random.Mcg59.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.Mcg59"/> class using
            the current time as the seed.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Random.Mcg59.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.Mcg59"/> class using
            the current time as the seed.
            </summary>
            <param name="threadSafe">if set to <c>true</c> , the class is thread safe.</param>
        </member>
        <member name="M:MathNet.Numerics.Random.Mcg59.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.Mcg59"/> class.
            </summary>
            <param name="seed">The seed value.</param>
            <remarks>If the seed value is zero, it is set to one. Uses the
            value of <see cref="P:MathNet.Numerics.Control.ThreadSafeRandomNumberGenerators"/> to
            set whether the instance is thread safe.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Random.Mcg59.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.Mcg59"/> class.
            </summary>
            <param name="seed">The seed value.</param>
            <remarks>The seed is set to 1, if the zero is used as the seed.</remarks>
            <param name="threadSafe">if set to <c>true</c> , the class is thread safe.</param>
        </member>
        <member name="M:MathNet.Numerics.Random.Mcg59.DoSample">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0.
            </returns>
        </member>
        <member name="T:MathNet.Numerics.Random.MersenneTwister">
            <summary>
            Random number generator using Mersenne Twister 19937 algorithm.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Random.MersenneTwister._lower_mask">
            <summary>
            Mersenne twister constant.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Random.MersenneTwister._m">
            <summary>
            Mersenne twister constant.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Random.MersenneTwister._matrix_a">
            <summary>
            Mersenne twister constant.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Random.MersenneTwister._n">
            <summary>
            Mersenne twister constant.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Random.MersenneTwister._reciprocal">
            <summary>
            Mersenne twister constant.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Random.MersenneTwister._upper_mask">
            <summary>
            Mersenne twister constant.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Random.MersenneTwister._mag01">
            <summary>
            Mersenne twister constant.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Random.MersenneTwister._mt">
            <summary>
            Mersenne twister constant.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Random.MersenneTwister.mti">
            <summary>
            Mersenne twister constant.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Random.MersenneTwister.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.MersenneTwister"/> class using
            the current time as the seed.
            </summary>
            <remarks>If the seed value is zero, it is set to one. Uses the
            value of <see cref="P:MathNet.Numerics.Control.ThreadSafeRandomNumberGenerators"/> to
            set whether the instance is thread safe.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Random.MersenneTwister.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.MersenneTwister"/> class using
            the current time as the seed.
            </summary>
            <param name="threadSafe">if set to <c>true</c> , the class is thread safe.</param>
        </member>
        <member name="M:MathNet.Numerics.Random.MersenneTwister.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.MersenneTwister"/> class.
            </summary>
            <param name="seed">The seed value.</param>
            <remarks>Uses the value of <see cref="P:MathNet.Numerics.Control.ThreadSafeRandomNumberGenerators"/> to
            set whether the instance is thread safe.</remarks>        
        </member>
        <member name="M:MathNet.Numerics.Random.MersenneTwister.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.MersenneTwister"/> class.
            </summary>
            <param name="seed">The seed value.</param>
            <param name="threadSafe">if set to <c>true</c>, the class is thread safe.</param>
        </member>
        <member name="M:MathNet.Numerics.Random.MersenneTwister.DoSample">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Random.MersenneTwister.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Random.Mrg32k3a">
             <summary>
             A 32-bit combined multiple recursive generator with 2 components of order 3.
             </summary>
            <remarks>Based off of P. L'Ecuyer, "Combined Multiple Recursive Random Number Generators," Operations Research, 44, 5 (1996), 816--822. </remarks>
        </member>
        <member name="M:MathNet.Numerics.Random.Mrg32k3a.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.Mcg31m1"/> class using
            the current time as the seed.
            </summary>
            <remarks>If the seed value is zero, it is set to one. Uses the
            value of <see cref="P:MathNet.Numerics.Control.ThreadSafeRandomNumberGenerators"/> to
            set whether the instance is thread safe.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Random.Mrg32k3a.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.Mcg31m1"/> class using
            the current time as the seed.
            </summary>
            <param name="threadSafe">if set to <c>true</c> , the class is thread safe.</param>
        </member>
        <member name="M:MathNet.Numerics.Random.Mrg32k3a.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.Mrg32k3a"/> class.
            </summary>
            <param name="seed">The seed value.</param>
            <remarks>If the seed value is zero, it is set to one. Uses the
            value of <see cref="P:MathNet.Numerics.Control.ThreadSafeRandomNumberGenerators"/> to
            set whether the instance is thread safe.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Random.Mrg32k3a.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.Mrg32k3a"/> class.
            </summary>
            <param name="seed">The seed value.</param>
            <param name="threadSafe">if set to <c>true</c>, the class is thread safe.</param>
        </member>
        <member name="M:MathNet.Numerics.Random.Mrg32k3a.DoSample">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0.
            </returns>
        </member>
        <member name="T:MathNet.Numerics.Random.Palf">
            <summary>
            Represents a Parallel Additive Lagged Fibonacci pseudo-random number generator.
            </summary>
            <remarks>
            The <see cref="T:MathNet.Numerics.Random.Palf"/> type bases upon the implementation in the 
            <a href="http://www.boost.org/libs/random/index.html">Boost Random Number Library</a>.
            It uses the modulus 2<sup>32</sup> and by default the "lags" 418 and 1279. Some popular pairs are presented on 
            <a href="http://en.wikipedia.org/wiki/Lagged_Fibonacci_generator">Wikipedia - Lagged Fibonacci generator</a>.
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.Random.Palf.DefaultShortLag">
            <summary>
            Default value for the ShortLag
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Random.Palf.DefaultLongLag">
            <summary>
            Default value for the LongLag
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Random.Palf.IntToDoubleMultiplier">
            <summary>
            The multiplier to compute a double-precision floating point number [0, 1)
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Random.Palf.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.Palf"/> class using
            the current time as the seed.
            </summary>
            <remarks>If the seed value is zero, it is set to one. Uses the
            value of <see cref="P:MathNet.Numerics.Control.ThreadSafeRandomNumberGenerators"/> to
            set whether the instance is thread safe.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Random.Palf.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.Palf"/> class using
            the current time as the seed.
            </summary>
            <param name="threadSafe">if set to <c>true</c> , the class is thread safe.</param>
        </member>
        <member name="M:MathNet.Numerics.Random.Palf.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.Palf"/> class.
            </summary>
            <param name="seed">The seed value.</param>
            <remarks>If the seed value is zero, it is set to one. Uses the
            value of <see cref="P:MathNet.Numerics.Control.ThreadSafeRandomNumberGenerators"/> to
            set whether the instance is thread safe.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Random.Palf.#ctor(System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.Palf"/> class.
            </summary>
            <param name="seed">The seed value.</param>
            <param name="threadSafe">if set to <c>true</c>, the class is thread safe.</param>
            <param name="shortLag">The ShortLag value</param>
            <param name="longLag">TheLongLag value</param>
        </member>
        <member name="F:MathNet.Numerics.Random.Palf._x">
            <summary>
            Stores an array of <see cref="P:MathNet.Numerics.Random.Palf.LongLag"/> random numbers
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Random.Palf._i">
            <summary>
            Stores an index for the random number array element that will be accessed next.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Random.Palf.Fill">
            <summary>
            Fills the array <see cref="F:MathNet.Numerics.Random.Palf._x"/> with <see cref="P:MathNet.Numerics.Random.Palf.LongLag"/> new unsigned random numbers.
            </summary>
            <remarks>
            Generated random numbers are 32-bit unsigned integers greater than or equal to 0
            and less than or equal to <see cref="F:System.Int32.MaxValue"/>.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Random.Palf.DoSample">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0.
            </returns>
        </member>
        <member name="P:MathNet.Numerics.Random.Palf.ShortLag">
            <summary>
            Gets the short lag of the Lagged Fibonacci pseudo-random number generator.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Random.Palf.LongLag">
            <summary>
            Gets the long lag of the Lagged Fibonacci pseudo-random number generator.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Random.SystemCryptoRandomNumberGenerator">
            <summary>
            A random number generator based on the <see cref="T:System.Security.Cryptography.RandomNumberGenerator"/> class in the .NET library.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Random.SystemCryptoRandomNumberGenerator.#ctor">
            <summary>
            Construct a new random number generator with a random seed.
            </summary>
            <remarks>Uses <see cref="T:System.Security.Cryptography.RNGCryptoServiceProvider"/> and uses the value of 
            <see cref="P:MathNet.Numerics.Control.ThreadSafeRandomNumberGenerators"/> to set whether the instance is thread safe.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Random.SystemCryptoRandomNumberGenerator.#ctor(System.Security.Cryptography.RandomNumberGenerator)">
            <summary>
            Construct a new random number generator with random seed.
            </summary>
            <param name="rng">The <see cref="T:System.Security.Cryptography.RandomNumberGenerator"/> to use.</param>
            <remarks>Uses the value of  <see cref="P:MathNet.Numerics.Control.ThreadSafeRandomNumberGenerators"/> to set whether the instance is thread safe.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Random.SystemCryptoRandomNumberGenerator.#ctor(System.Boolean)">
            <summary>
            Construct a new random number generator with random seed.
            </summary>
            <remarks>Uses <see cref="T:System.Security.Cryptography.RNGCryptoServiceProvider"/></remarks>
            <param name="threadSafe">if set to <c>true</c> , the class is thread safe.</param>
        </member>
        <member name="M:MathNet.Numerics.Random.SystemCryptoRandomNumberGenerator.#ctor(System.Security.Cryptography.RandomNumberGenerator,System.Boolean)">
            <summary>
            Construct a new random number generator with random seed.
            </summary>
            <param name="rng">The <see cref="T:System.Security.Cryptography.RandomNumberGenerator"/> to use.</param>
            <param name="threadSafe">if set to <c>true</c> , the class is thread safe.</param>
        </member>
        <member name="M:MathNet.Numerics.Random.SystemCryptoRandomNumberGenerator.DoSample">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0.
            </returns>
        </member>
        <member name="T:MathNet.Numerics.Random.SystemRandomExtensions">
            <summary>
            This class implements extension methods for the System.Random class. The extension methods generate
            pseudo-random distributed numbers for types other than double and int32.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Random.SystemRandomExtensions.NextInt64(System.Random)">
            <summary>
            Returns a nonnegative random number less than <see cref="F:System.Int64.MaxValue"/>.
            </summary>
            <param name="rnd">
            The random object to extend.
            </param>
            <returns>
            A 64-bit signed integer greater than or equal to 0, and less than <see cref="F:System.Int64.MaxValue"/>; that is, 
            the range of return values includes 0 but not <see cref="F:System.Int64.MaxValue"/>.
            </returns>
            <seealso cref="M:MathNet.Numerics.Random.SystemRandomExtensions.NextFullRangeInt64(System.Random)"/>
        </member>
        <member name="M:MathNet.Numerics.Random.SystemRandomExtensions.NextFullRangeInt32(System.Random)">
            <summary>
            Returns a random number of the full Int32 range.
            </summary>
            <param name="rnd">
            The random object to extend.
            </param>
            <returns>
            A 32-bit signed integer of the full range, including 0, negative numbers,
            <see cref="F:System.Int32.MaxValue"/> and <see cref="F:System.Int32.MinValue"/>.
            </returns>
            <seealso cref="M:System.Random.Next"/>
        </member>
        <member name="M:MathNet.Numerics.Random.SystemRandomExtensions.NextFullRangeInt64(System.Random)">
            <summary>
            Returns a random number of the full Int64 range.
            </summary>
            <param name="rnd">
            The random object to extend.
            </param>
            <returns>
            A 64-bit signed integer of the full range, including 0, negative numbers,
            <see cref="F:System.Int64.MaxValue"/> and <see cref="F:System.Int64.MinValue"/>.
            </returns>
            <seealso cref="M:MathNet.Numerics.Random.SystemRandomExtensions.NextInt64(System.Random)"/>
        </member>
        <member name="M:MathNet.Numerics.Random.SystemRandomExtensions.NextDecimal(System.Random)">
            <summary>
            Returns a nonnegative decimal floating point random number less than 1.0.
            </summary>
            <param name="rnd">
            The random object to extend.
            </param>
            <returns>
            A decimal floating point number greater than or equal to 0.0, and less than 1.0; that is, 
            the range of return values includes 0.0 but not 1.0.
            </returns>
        </member>
        <member name="T:MathNet.Numerics.Random.WH1982">
             <summary>
             Wichmann-Hill’s 1982 combined multiplicative congruential generator. 
             </summary>
             <remarks>See: Wichmann, B. A. &amp; Hill, I. D. (1982), "Algorithm AS 183:
             An efficient and portable pseudo-random number generator". Applied Statistics 31 (1982) 188-190
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Random.WH1982.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.WH1982"/> class using
            the current time as the seed.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Random.WH1982.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.WH1982"/> class using
            the current time as the seed.
            </summary>
            <param name="threadSafe">if set to <c>true</c> , the class is thread safe.</param>
        </member>
        <member name="M:MathNet.Numerics.Random.WH1982.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.WH1982"/> class.
            </summary>
            <param name="seed">The seed value.</param>
            <remarks>If the seed value is zero, it is set to one. Uses the
            value of <see cref="P:MathNet.Numerics.Control.ThreadSafeRandomNumberGenerators"/> to
            set whether the instance is thread safe.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Random.WH1982.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.WH1982"/> class.
            </summary>
            <param name="seed">The seed value.</param>
            <remarks>The seed is set to 1, if the zero is used as the seed.</remarks>
            <param name="threadSafe">if set to <c>true</c> , the class is thread safe.</param>
        </member>
        <member name="M:MathNet.Numerics.Random.WH1982.DoSample">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0.
            </returns>
        </member>
        <member name="T:MathNet.Numerics.Random.WH2006">
            <summary>
            Wichmann-Hill’s 2006 combined multiplicative congruential generator. 
            </summary>
            <remarks>See: Wichmann, B. A. &amp; Hill, I. D. (2006), "Generating good pseudo-random numbers".
            Computational Statistics &amp; Data Analysis 51:3 (2006) 1614-1622
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Random.WH2006.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.WH2006"/> class using
            the current time as the seed.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Random.WH2006.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.WH2006"/> class using
            the current time as the seed.
            </summary>
            <param name="threadSafe">if set to <c>true</c> , the class is thread safe.</param>
        </member>
        <member name="M:MathNet.Numerics.Random.WH2006.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.WH2006"/> class.
            </summary>
            <param name="seed">The seed value.</param>
            <remarks>If the seed value is zero, it is set to one. Uses the
            value of <see cref="P:MathNet.Numerics.Control.ThreadSafeRandomNumberGenerators"/> to
            set whether the instance is thread safe.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Random.WH2006.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.WH2006"/> class.
            </summary>
            <param name="seed">The seed value.</param>
            <remarks>The seed is set to 1, if the zero is used as the seed.</remarks>
            <param name="threadSafe">if set to <c>true</c> , the class is thread safe.</param>
        </member>
        <member name="M:MathNet.Numerics.Random.WH2006.DoSample">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0.
            </returns>
        </member>
        <member name="T:MathNet.Numerics.Random.Xorshift">
            <summary>
            Implements a multiply-with-carry Xorshift pseudo random number generator (RNG) specified in Marsaglia, George. (2003). Xorshift RNGs.
            <code>Xn = a * Xn−3 + c mod 2^32</code>
            http://www.jstatsoft.org/v08/i14/paper
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Random.Xorshift.YSeed">
            <summary>
            The default value for X1.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Random.Xorshift.ZSeed">
            <summary>
            The default value for X2.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Random.Xorshift.ASeed">
            <summary>
            The default value for the multiplier.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Random.Xorshift.CSeed">
            <summary>
            The default value for the carry over.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Random.Xorshift.UlongToDoubleMultiplier">
            <summary>
            The multiplier to compute a double-precision floating point number [0, 1)
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Random.Xorshift.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.Xorshift"/> class using
            the current time as the seed.
            </summary>
            <remarks>If the seed value is zero, it is set to one. Uses the
            value of <see cref="P:MathNet.Numerics.Control.ThreadSafeRandomNumberGenerators"/> to
            set whether the instance is thread safe.
            Uses the default values of:
            <list>
            <item>a = 916905990</item>
            <item>c = 13579</item>
            <item>X1 = 77465321</item>
            <item>X2 = 362436069</item>
            </list></remarks>
        </member>
        <member name="M:MathNet.Numerics.Random.Xorshift.#ctor(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.Xorshift"/> class using
            the current time as the seed.
            </summary>
            <param name="a">The multiply value</param>
            <param name="c">The initial carry value.</param>
            <param name="x1">The initial value if X1.</param>
            <param name="x2">The initial value if X2.</param>
            <remarks>If the seed value is zero, it is set to one. Uses the
            value of <see cref="P:MathNet.Numerics.Control.ThreadSafeRandomNumberGenerators"/> to
            set whether the instance is thread safe.
            Note: <paramref name="c"/> must be less than <paramref name="a"/>.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Random.Xorshift.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.Xorshift"/> class using
            the current time as the seed.
            </summary>
            <param name="threadSafe">if set to <c>true</c> , the class is thread safe.</param>
            <remarks>
            Uses the default values of:
            <list>
            <item>a = 916905990</item>
            <item>c = 13579</item>
            <item>X1 = 77465321</item>
            <item>X2 = 362436069</item>
            </list></remarks>
        </member>
        <member name="M:MathNet.Numerics.Random.Xorshift.#ctor(System.Boolean,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.Xorshift"/> class using
            the current time as the seed.
            </summary>
            <param name="threadSafe">if set to <c>true</c> , the class is thread safe.</param>
            <param name="a">The multiply value</param>
            <param name="c">The initial carry value.</param>
            <param name="x1">The initial value if X1.</param>
            <param name="x2">The initial value if X2.</param>
            <remarks><paramref name="c"/> must be less than <paramref name="a"/>.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Random.Xorshift.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.Xorshift"/> class.
            </summary>
            <param name="seed">The seed value.</param>
            <remarks>If the seed value is zero, it is set to one. Uses the
            value of <see cref="P:MathNet.Numerics.Control.ThreadSafeRandomNumberGenerators"/> to
            set whether the instance is thread safe.
            Uses the default values of:
            <list>
            <item>a = 916905990</item>
            <item>c = 13579</item>
            <item>X1 = 77465321</item>
            <item>X2 = 362436069</item>
            </list></remarks>
        </member>
        <member name="M:MathNet.Numerics.Random.Xorshift.#ctor(System.Int32,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.Xorshift"/> class.
            </summary>
            <param name="seed">The seed value.</param>
            <remarks>If the seed value is zero, it is set to one. Uses the
            value of <see cref="P:MathNet.Numerics.Control.ThreadSafeRandomNumberGenerators"/> to
            set whether the instance is thread safe.</remarks>
            <param name="a">The multiply value</param>
            <param name="c">The initial carry value.</param>
            <param name="x1">The initial value if X1.</param>
            <param name="x2">The initial value if X2.</param>
            <remarks><paramref name="c"/> must be less than <paramref name="a"/>.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Random.Xorshift.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.Xorshift"/> class.
            </summary>
            <param name="seed">The seed value.</param>
            <param name="threadSafe">if set to <c>true</c>, the class is thread safe.</param>
            <remarks>
            Uses the default values of:
            <list>
            <item>a = 916905990</item>
            <item>c = 13579</item>
            <item>X1 = 77465321</item>
            <item>X2 = 362436069</item>
            </list></remarks>
        </member>
        <member name="M:MathNet.Numerics.Random.Xorshift.#ctor(System.Int32,System.Boolean,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Random.Xorshift"/> class.
            </summary>
            <param name="seed">The seed value.</param>
            <param name="threadSafe">if set to <c>true</c>, the class is thread safe.</param>
            <param name="a">The multiply value</param>
            <param name="c">The initial carry value.</param>
            <param name="x1">The initial value if X1.</param>
            <param name="x2">The initial value if X2.</param>
            <remarks><paramref name="c"/> must be less than <paramref name="a"/>.</remarks>
        </member>
        <member name="F:MathNet.Numerics.Random.Xorshift._x">
            <summary>
            Seed or last but three unsigned random number. 
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Random.Xorshift._y">
            <summary>
            Last but two unsigned random number. 
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Random.Xorshift._z">
            <summary>
            Last but one unsigned random number. 
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Random.Xorshift._c">
            <summary>
            The value of the carry over. 
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Random.Xorshift._a">
            <summary>
            The multiplier.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Random.Xorshift.DoSample">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0.
            </returns>
        </member>
        <member name="T:MathNet.Numerics.Signals.SignalGenerator">
            <summary>
            Generic Function Sampling and Quantization Provider
            </summary>
            <summary>
            Generic Function Sampling and Quantization Provider
            </summary>
            <summary>
            Generic Function Sampling and Quantization Provider
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Signals.SignalGenerator.Random``1(System.Func{System.Double,``0},MathNet.Numerics.Distributions.IContinuousDistribution,System.Int32)">
            <summary>
            Samples a function randomly with the provided distribution.
            </summary>
            <param name="function">The real-domain function to sample.</param>
            <param name="distribution">Random distribution of the real domain sample points.</param>
            <param name="sampleCount">The number of samples to generate.</param>
            <typeparam name="T">The value type of the function to sample.</typeparam>
            <returns>The generated sample vector.</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:MathNet.Numerics.Signals.SignalGenerator.Random``1(System.Func{System.Double,``0},MathNet.Numerics.Distributions.IContinuousDistribution,System.Int32,System.Double[]@)">
            <summary>
            Samples a function randomly with the provided distribution.
            </summary>
            <param name="function">The real-domain function to sample.</param>
            <param name="distribution">Random distribution of the real domain sample points.</param>
            <param name="sampleCount">The number of samples to generate.</param>
            <param name="samplePoints">The real domain points where the samples are taken at.</param>
            <typeparam name="T">The value type of the function to sample.</typeparam>
            <returns>The generated sample vector.</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:MathNet.Numerics.Signals.SignalGenerator.Random``1(System.Func{System.Double,System.Double,``0},MathNet.Numerics.Distributions.IContinuousDistribution,System.Int32)">
            <summary>
            Samples a two-domain function randomly with the provided distribution.
            </summary>
            <param name="function">The real-domain function to sample.</param>
            <param name="distribution">Random distribution of the real domain sample points.</param>
            <param name="sampleCount">The number of samples to generate.</param>
            <typeparam name="T">The value type of the function to sample.</typeparam>
            <returns>The generated sample vector.</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:MathNet.Numerics.Signals.SignalGenerator.ChebyshevNodesFirstKind``1(System.Func{System.Double,``0},System.Double,System.Double,System.Int32)">
            <summary>
            Samples a function at the roots of the Chebyshev polynomial of the first kind.
            </summary>
            <param name="function">The real-domain function to sample.</param>
            <param name="intervalBegin">The real domain interval begin where to start sampling.</param>
            <param name="intervalEnd">The real domain interval end where to stop sampling.</param>
            <param name="sampleCount">The number of samples to generate.</param>
            <typeparam name="T">The value type of the function to sample.</typeparam>
            <returns>Vector of the function sampled in [a,b] at (b+a)/2+(b-1)/2*cos(pi*(2i-1)/(2n))</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:MathNet.Numerics.Signals.SignalGenerator.ChebyshevNodesSecondKind``1(System.Func{System.Double,``0},System.Double,System.Double,System.Int32)">
            <summary>
            Samples a function at the roots of the Chebyshev polynomial of the second kind.
            </summary>
            <param name="function">The real-domain function to sample.</param>
            <param name="intervalBegin">The real domain interval begin where to start sampling.</param>
            <param name="intervalEnd">The real domain interval end where to stop sampling.</param>
            <param name="sampleCount">The number of samples to generate.</param>
            <typeparam name="T">The value type of the function to sample.</typeparam>
            <returns>Vector of the function sampled in [a,b] at (b+a)/2+(b-1)/2*cos(pi*i/(n-1))</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:MathNet.Numerics.Signals.SignalGenerator.EquidistantInterval``1(System.Func{System.Double,``0},System.Double,System.Double,System.Int32)">
            <summary>
            Samples a function equidistant within the provided interval.
            </summary>
            <param name="function">The real-domain function to sample.</param>
            <param name="intervalBegin">The real domain interval begin where to start sampling.</param>
            <param name="intervalEnd">The real domain interval end where to stop sampling.</param>
            <param name="sampleCount">The number of samples to generate.</param>
            <typeparam name="T">The value type of the function to sample.</typeparam>
            <returns>The generated sample vector.</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:MathNet.Numerics.Signals.SignalGenerator.EquidistantInterval``1(System.Func{System.Double,``0},System.Double,System.Double,System.Int32,System.Double[]@)">
            <summary>
            Samples a function equidistant within the provided interval.
            </summary>
            <param name="function">The real-domain function to sample.</param>
            <param name="intervalBegin">The real domain interval begin where to start sampling.</param>
            <param name="intervalEnd">The real domain interval end where to stop sampling.</param>
            <param name="sampleCount">The number of samples to generate.</param>
            <param name="samplePoints">The real domain points where the samples are taken at.</param>
            <typeparam name="T">The value type of the function to sample.</typeparam>
            <returns>The generated sample vector.</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:MathNet.Numerics.Signals.SignalGenerator.EquidistantPeriodic``1(System.Func{System.Double,``0},System.Double,System.Double,System.Int32)">
            <summary>
            Samples a periodic function equidistant within one period, but omits the last sample such that the sequence
            can be concatenated together.
            </summary>
            <param name="function">The real-domain function to sample.</param>
            <param name="periodLength">The real domain full period length.</param>
            <param name="periodOffset">The real domain offset where to start the sampling period.</param>
            <param name="sampleCount">The number of samples to generate.</param>
            <typeparam name="T">The value type of the function to sample.</typeparam>
            <returns>The generated sample vector.</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:MathNet.Numerics.Signals.SignalGenerator.EquidistantPeriodic``1(System.Func{System.Double,``0},System.Double,System.Double,System.Int32,System.Double[]@)">
            <summary>
            Samples a periodic function equidistant within one period, but omits the last sample such that the sequence
            can be concatenated together.
            </summary>
            <param name="function">The real-domain function to sample.</param>
            <param name="periodLength">The real domain full period length.</param>
            <param name="periodOffset">The real domain offset where to start the sampling period.</param>
            <param name="sampleCount">The number of samples to generate.</param>
            <param name="samplePoints">The real domain points where the samples are taken at.</param>
            <typeparam name="T">The value type of the function to sample.</typeparam>
            <returns>The generated sample vector.</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:MathNet.Numerics.Signals.SignalGenerator.EquidistantStartingAt``1(System.Func{System.Double,``0},System.Double,System.Double,System.Int32)">
            <summary>
            Samples a function equidistant starting from the provided location with a fixed step length.
            </summary>
            <param name="function">The real-domain function to sample.</param>
            <param name="start">The real domain location offset where to start sampling.</param>
            <param name="step">The real domain step length between the equidistant samples.</param>
            <param name="sampleCount">The number of samples to generate.</param>
            <typeparam name="T">The value type of the function to sample.</typeparam>
            <returns>The generated sample vector.</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:MathNet.Numerics.Signals.SignalGenerator.EquidistantStartingAt``1(System.Func{System.Double,``0},System.Double,System.Double,System.Int32,System.Double[]@)">
            <summary>
            Samples a function equidistant starting from the provided location with a fixed step length.
            </summary>
            <param name="function">The real-domain function to sample.</param>
            <param name="start">The real domain location offset where to start sampling.</param>
            <param name="step">The real domain step length between the equidistant samples.</param>
            <param name="sampleCount">The number of samples to generate.</param>
            <param name="samplePoints">The real domain points where the samples are taken at.</param>
            <typeparam name="T">The value type of the function to sample.</typeparam>
            <returns>The generated sample vector.</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:MathNet.Numerics.Signals.SignalGenerator.EquidistantContinuous``1(System.Func{System.Double,``0},System.Double,System.Double)">
            <summary>
            Samples a function equidistant continuously starting from the provided location with a fixed step length.
            </summary>
            <param name="function">The real-domain function to sample.</param>
            <param name="start">The real domain location offset where to start sampling.</param>
            <param name="step">The real domain step length between the equidistant samples.</param>
            <typeparam name="T">The value type of the function to sample.</typeparam>
            <returns>The generated sample enumerator.</returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:MathNet.Numerics.Signals.SignalGenerator.EquidistantToFunction``1(System.Func{System.Double,``0},System.Double,System.Double)">
            <summary>
            Samples a function equidistant with the provided start and step length to an integer-domain function
            </summary>
            <param name="function">The real-domain function to sample.</param>
            <param name="start">The real domain location where to start sampling.</param>
            <param name="step">The real domain step length between the equidistant samples.</param>
            <typeparam name="T">The value type of the function to sample.</typeparam>
            <returns>The generated samples integer-domain function.</returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="T:MathNet.Numerics.Sorting">
            <summary>
            Sorting algorithms for single, tuple and triple lists.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Sorting.Sort``1(System.Collections.Generic.IList{``0})">
            <summary>
            Sort a list of keys, in place using the quick sort algorithm.
            </summary>
            <typeparam name="T">The type of elements stored in the list.</typeparam>
            <param name="keys">List to sort.</param>
        </member>
        <member name="M:MathNet.Numerics.Sorting.Sort``2(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1})">
            <summary>
            Sort a list of keys and items with respect to the keys, in place using the quick sort algorithm.
            </summary>
            <typeparam name="TKey">The type of elements stored in the key list.</typeparam>
            <typeparam name="TItem">The type of elements stored in the item list.</typeparam>
            <param name="keys">List to sort.</param>
            <param name="items">List to permute the same way as the key list.</param>
        </member>
        <member name="M:MathNet.Numerics.Sorting.Sort``3(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2})">
            <summary>
            Sort a list of keys, items1 and items2 with respect to the keys, in place using the quick sort algorithm.
            </summary>
            <typeparam name="TKey">The type of elements stored in the key list.</typeparam>
            <typeparam name="TItem1">The type of elements stored in the first item list.</typeparam>
            <typeparam name="TItem2">The type of elements stored in the second item list.</typeparam>
            <param name="keys">List to sort.</param>
            <param name="items1">First list to permute the same way as the key list.</param>
            <param name="items2">Second list to permute the same way as the key list.</param>
        </member>
        <member name="M:MathNet.Numerics.Sorting.Sort``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Sort a range of a list of keys, in place using the quick sort algorithm.
            </summary>
            <typeparam name="T">The type of elements in the key list.</typeparam>
            <param name="keys">List to sort.</param>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <param name="count">The length of the range to sort.</param>
        </member>
        <member name="M:MathNet.Numerics.Sorting.Sort``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sort a list of keys, in place using the quick sort algorithm using the quick sort algorithm.
            </summary>
            <typeparam name="T">The type of elements in the key list.</typeparam>
            <param name="keys">List to sort.</param>
            <param name="comparer">Comparison, defining the sort order.</param>
        </member>
        <member name="M:MathNet.Numerics.Sorting.Sort``2(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sort a list of keys and items with respect to the keys, in place using the quick sort algorithm.
            </summary>
            <typeparam name="TKey">The type of elements in the key list.</typeparam>
            <typeparam name="TItem">The type of elements in the item list.</typeparam>
            <param name="keys">List to sort.</param>
            <param name="items">List to permute the same way as the key list.</param>
            <param name="comparer">Comparison, defining the sort order.</param>
        </member>
        <member name="M:MathNet.Numerics.Sorting.Sort``3(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sort a list of keys, items1 and items2 with respect to the keys, in place using the quick sort algorithm.
            </summary>
            <typeparam name="TKey">The type of elements in the key list.</typeparam>
            <typeparam name="TItem1">The type of elements in the first item list.</typeparam>
            <typeparam name="TItem2">The type of elements in the second item list.</typeparam>
            <param name="keys">List to sort.</param>
            <param name="items1">First list to permute the same way as the key list.</param>
            <param name="items2">Second list to permute the same way as the key list.</param>
            <param name="comparer">Comparison, defining the sort order.</param>
        </member>
        <member name="M:MathNet.Numerics.Sorting.Sort``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary>
            Sort a range of a list of keys, in place using the quick sort algorithm.
            </summary>
            <typeparam name="T">The type of element in the list.</typeparam>
            <param name="keys">List to sort.</param>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <param name="count">The length of the range to sort.</param>
            <param name="comparer">Comparison, defining the sort order.</param>
        </member>
        <member name="M:MathNet.Numerics.Sorting.QuickSort``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0},System.Int32,System.Int32)">
            <summary>
            Recursive implementation for an in place quick sort on a list.
            </summary>
            <typeparam name="T">The type of the list on which the quick sort is performed.</typeparam>
            <param name="keys">The list which is sorted using quick sort.</param>
            <param name="comparer">The method with which to compare two elements of the quick sort.</param>
            <param name="left">The left boundary of the quick sort.</param>
            <param name="right">The right boundary of the quick sort.</param>
        </member>
        <member name="M:MathNet.Numerics.Sorting.QuickSort``2(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1},System.Collections.Generic.IComparer{``0},System.Int32,System.Int32)">
            <summary>
            Recursive implementation for an in place quick sort on a list while reordering one other list accordingly.
            </summary>
            <typeparam name="T">The type of the list on which the quick sort is performed.</typeparam>
            <typeparam name="TItems">The type of the list which is automatically reordered accordingly.</typeparam>
            <param name="keys">The list which is sorted using quick sort.</param>
            <param name="items">The list which is automatically reordered accordingly.</param>
            <param name="comparer">The method with which to compare two elements of the quick sort.</param>
            <param name="left">The left boundary of the quick sort.</param>
            <param name="right">The right boundary of the quick sort.</param>
        </member>
        <member name="M:MathNet.Numerics.Sorting.QuickSort``3(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2},System.Collections.Generic.IComparer{``0},System.Int32,System.Int32)">
            <summary>
            Recursive implementation for an in place quick sort on one list while reordering two other lists accordingly.
            </summary>
            <typeparam name="T">The type of the list on which the quick sort is performed.</typeparam>
            <typeparam name="TItems1">The type of the first list which is automatically reordered accordingly.</typeparam>
            <typeparam name="TItems2">The type of the second list which is automatically reordered accordingly.</typeparam>
            <param name="keys">The list which is sorted using quick sort.</param>
            <param name="items1">The first list which is automatically reordered accordingly.</param>
            <param name="items2">The second list which is automatically reordered accordingly.</param>
            <param name="comparer">The method with which to compare two elements of the quick sort.</param>
            <param name="left">The left boundary of the quick sort.</param>
            <param name="right">The right boundary of the quick sort.</param>
        </member>
        <member name="M:MathNet.Numerics.Sorting.Swap``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Performs an in place swap of two elements in a list.
            </summary>
            <typeparam name="T">The type of elements stored in the list.</typeparam>
            <param name="keys">The list in which the elements are stored.</param>
            <param name="a">The index of the first element of the swap.</param>
            <param name="b">The index of the second element of the swap.</param>
        </member>
        <member name="T:MathNet.Numerics.Statistics.Correlation">
            <summary>
            A class with correlation measures between two datasets.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Correlation.Pearson(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Computes the Pearson product-moment correlation coefficient.
            </summary>
            <param name="dataA">Sample data A.</param>
            <param name="dataB">Sample data B.</param>
            <returns>The Pearson product-moment correlation coefficient.</returns>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Correlation.Spearman(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Computes the Spearman Ranked Correlation Coefficient.
            </summary>
            <param name="dataA">Sample data series A.</param>
            <param name="dataB">Sample data series B.</param>
            <returns>The Spearman Ranked Correlation Coefficient.</returns>
        </member>
        <member name="T:MathNet.Numerics.Statistics.DescriptiveStatistics">
            <summary>
            Computes the basic statistics of data set. The class meets the
            NIST standard of accuracy for mean, variance, and standard deviation
            (the only statistics they provide exact values for) and exceeds them 
            in increased accuracy mode.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.DescriptiveStatistics.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Statistics.DescriptiveStatistics"/> class.
            </summary>
            <param name="data">The sample data.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.DescriptiveStatistics.#ctor(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Statistics.DescriptiveStatistics"/> class.
            </summary>
            <param name="data">The sample data.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.DescriptiveStatistics.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Statistics.DescriptiveStatistics"/> class. 
            </summary>
            <param name="data">The sample data.</param>
            <param name="increasedAccuracy">
            If set to <c>true</c>, increased accuracy mode used.
            Increased accuracy mode uses <see cref="T:System.Decimal"/> types for internal calculations.
            </param>
            <remarks>
            Don't use increased accuracy for data sets containing large values (in absolute value).
            This may cause the calculations to overflow.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Statistics.DescriptiveStatistics.#ctor(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Statistics.DescriptiveStatistics"/> class. 
            </summary>
            <param name="data">The sample data.</param>
            <param name="increasedAccuracy">
            If set to <c>true</c>, increased accuracy mode used.
            Increased accuracy mode uses <see cref="T:System.Decimal"/> types for internal calculations.
            </param>
            <remarks>
            Don't use increased accuracy for data sets containing large values (in absolute value).
            This may cause the calculations to overflow.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Statistics.DescriptiveStatistics.Compute(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Computes descriptive statistics from a stream of data values.
            </summary>
            <param name="data">A sequence of datapoints.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.DescriptiveStatistics.Compute(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Computes descriptive statistics from a stream of nullable data values.
            </summary>
            <param name="data">A sequence of datapoints.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.DescriptiveStatistics.ComputeHA(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Computes descriptive statistics from a stream of data values using high accuracy.
            </summary>
            <param name="data">A sequence of datapoints.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.DescriptiveStatistics.ComputeHA(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Computes descriptive statistics from a stream of nullable data values using high accuracy.
            </summary>
            <param name="data">A sequence of datapoints.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.DescriptiveStatistics.SetStatistics(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Internal use. Method use for setting the statistics.
            </summary>
            <param name="mean">For setting Mean.</param>
            <param name="variance">For setting Variance.</param>
            <param name="skewness">For setting Skewness.</param>
            <param name="kurtosis">For setting Kurtosis.</param>
            <param name="minimum">For setting Minimum.</param>
            <param name="maximum">For setting Maximum.</param>
            <param name="n">For setting Count.</param>
        </member>
        <member name="P:MathNet.Numerics.Statistics.DescriptiveStatistics.Count">
            <summary>
            Gets the size of the sample.
            </summary>
            <value>The size of the sample.</value>
        </member>
        <member name="P:MathNet.Numerics.Statistics.DescriptiveStatistics.Mean">
            <summary>
            Gets the sample mean.
            </summary>
            <value>The sample mean.</value>
        </member>
        <member name="P:MathNet.Numerics.Statistics.DescriptiveStatistics.Variance">
            <summary>
            Gets the unbiased population variance estimator (on a dataset of size N will use an N-1 normalizer).
            </summary>
            <value>The sample variance.</value>
        </member>
        <member name="P:MathNet.Numerics.Statistics.DescriptiveStatistics.StandardDeviation">
            <summary>
            Gets the unbiased population standard deviation (on a dataset of size N will use an N-1 normalizer).
            </summary>
            <value>The sample standard deviation.</value>
        </member>
        <member name="P:MathNet.Numerics.Statistics.DescriptiveStatistics.Skewness">
            <summary>
            Gets the sample skewness.
            </summary>
            <value>The sample skewness.</value>
            <remarks>Returns zero if <see cref="P:MathNet.Numerics.Statistics.DescriptiveStatistics.Count"/> is less than three. </remarks>
        </member>
        <member name="P:MathNet.Numerics.Statistics.DescriptiveStatistics.Median">
            <summary>
            Gets the sample median.
            </summary>
            <value>The sample median.</value>
        </member>
        <member name="P:MathNet.Numerics.Statistics.DescriptiveStatistics.Kurtosis">
            <summary>
            Gets the sample kurtosis.
            </summary>
            <value>The sample kurtosis.</value>
            <remarks>Returns zero if <see cref="P:MathNet.Numerics.Statistics.DescriptiveStatistics.Count"/> is less than four. </remarks>
        </member>
        <member name="P:MathNet.Numerics.Statistics.DescriptiveStatistics.Maximum">
            <summary>
            Gets the maximum sample value.
            </summary>
            <value>The maximum sample value.</value>
        </member>
        <member name="P:MathNet.Numerics.Statistics.DescriptiveStatistics.Minimum">
            <summary>
            Gets the minimum sample value.
            </summary>
            <value>The minimum sample value.</value>
        </member>
        <member name="T:MathNet.Numerics.Statistics.Bucket">
            <summary>
            A <see cref="T:MathNet.Numerics.Statistics.Histogram"/> consists of a series of <see cref="T:MathNet.Numerics.Statistics.Bucket"/>s, 
            each representing a region limited by a lower bound (exclusive) and an upper bound (inclusive).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Bucket.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Bucket class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Bucket.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Bucket class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Bucket.Clone">
            <summary>
            Creates a copy of the Bucket with the lowerbound, upperbound and counts exactly equal.
            </summary>
            <returns>A cloned Bucket object.</returns>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Bucket.Contains(System.Double)">
            <summary>
            This method check whether a point is contained within this bucket.
            </summary>
            <param name="x">The point to check.</param>
            <returns>0 if the point falls within the bucket boundaries; -1 if the point is
            smaller than the bucket, +1 if the point is larger than the bucket.</returns>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Bucket.CompareTo(MathNet.Numerics.Statistics.Bucket)">
            <summary>
            Comparison of two disjoint buckets. The buckets cannot be overlapping.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Bucket.Equals(System.Object)">
            <summary>
            Checks whether two Buckets are equal; this method tolerates a difference in lowerbound, upperbound
            and count given by <seealso cref="M:MathNet.Numerics.Precision.AlmostEqual(System.Double,System.Double)"/>. 
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Bucket.GetHashCode">
            <summary>
            Provides a hash code for this bucket.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Bucket.ToString">
            <summary>
            Formats a human-readable string for this bucket.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Bucket.LowerBound">
            <summary>
            Lower Bound of the Bucket.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Bucket.UpperBound">
            <summary>
            Upper Bound of the Bucket.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Bucket.Count">
            <summary>
            The number of datapoints in the bucket.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Bucket.Width">
            <summary>
            Width of the Bucket.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Bucket.DefaultPointComparer">
            <summary>
            Default comparer.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Statistics.Bucket.PointComparer">
            <summary>
            This <c>IComparer</c> performs comparisons between a point and a bucket.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Bucket.PointComparer.Compare(MathNet.Numerics.Statistics.Bucket,MathNet.Numerics.Statistics.Bucket)">
            <summary>
            Compares a point and a bucket. The point will be encapsulated in a bucket with width 0.
            </summary>
            <param name="bkt1">The first bucket to compare.</param>
            <param name="bkt2">The second bucket to compare.</param>
            <returns>-1 when the point is less than this bucket, 0 when it is in this bucket and 1 otherwise.</returns>
        </member>
        <member name="T:MathNet.Numerics.Statistics.Histogram">
            <summary>
            A class which computes histograms of data.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Histogram._buckets">
            <summary>
            Contains all the <c>Bucket</c>s of the <c>Histogram</c>.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Histogram._areBucketsSorted">
            <summary>
            Indicates whether the elements of <c>buckets</c> are currently sorted.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Histogram.#ctor">
            <summary>
            Initializes a new instance of the Histogram class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Histogram.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Constructs a Histogram with a specific number of equally sized buckets. The upper and lower bound of the histogram
            will be set to the smallest and largest datapoint.
            </summary>
            <param name="data">The datasequence to build a histogram on.</param>
            <param name="nbuckets">The number of buckets to use.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Histogram.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Int32,System.Double,System.Double)">
            <summary>
            Constructs a Histogram with a specific number of equally sized buckets.
            </summary>
            <param name="data">The datasequence to build a histogram on.</param>
            <param name="nbuckets">The number of buckets to use.</param>
            <param name="lower">The histogram lower bound.</param>
            <param name="upper">The histogram upper bound.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Histogram.AddData(System.Double)">
            <summary>
            Add one data point to the histogram. If the datapoint falls outside the range of the histogram,
            the lowerbound or upperbound will automatically adapt.
            </summary>
            <param name="d">The datapoint which we want to add.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Histogram.AddData(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Add a sequence of data point to the histogram. If the datapoint falls outside the range of the histogram,
            the lowerbound or upperbound will automatically adapt.
            </summary>
            <param name="data">The sequence of datapoints which we want to add.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Histogram.AddBucket(MathNet.Numerics.Statistics.Bucket)">
            <summary>
            Adds a <c>Bucket</c> to the <c>Histogram</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Histogram.LazySort">
            <summary>
            Sort the buckets if needed.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Histogram.GetBucketOf(System.Double)">
            <summary>
            Returns the <c>Bucket</c> that contains the value <c>v</c>. 
            </summary>
            <param name="v">The point to search the bucket for.</param>
            <returns>A copy of the bucket containing point <paramref name="v"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Histogram.GetBucketIndexOf(System.Double)">
            <summary>
            Returns the index in the <c>Histogram</c> of the <c>Bucket</c>
            that contains the value <c>v</c>.
            </summary>
            <param name="v">The point to search the bucket index for.</param>
            <returns>The index of the bucket containing the point.</returns>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Histogram.ToString">
            <summary>
            Prints the buckets contained in the <see cref="T:MathNet.Numerics.Statistics.Histogram"/>.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Histogram.LowerBound">
            <summary>
            Returns the lower bound of the histogram.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Histogram.UpperBound">
            <summary>
            Returns the upper bound of the histogram.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Histogram.Item(System.Int32)">
            <summary>
            Gets the <c>n</c>'th bucket.
            </summary>
            <param name="n">The index of the bucket to be returned.</param>
            <returns>A copy of the <c>n</c>'th bucket.</returns>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Histogram.BucketCount">
            <summary>
            Gets the number of buckets.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Histogram.DataCount">
            <summary>
            Gets the total number of datapoints in the histogram.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Statistics.Mcmc.HybridMC">
            <summary>
            A hybrid Monte Carlo sampler for multivariate distributions.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Statistics.Mcmc.HybridMCGeneric`1">
            <summary>
            The Hybrid (also called Hamiltonian) Monte Carlo produces samples from distribition P using a set
            of Hamiltonian equations to guide the sampling process. It uses the negative of the log density as
            a potential energy, and a randomly generated momentum to set up a Hamiltonian system, which is then used
            to sample the distribution. This can result in a faster convergence than the random walk Metropolis sampler
            (<seealso cref="T:MathNet.Numerics.Statistics.Mcmc.MetropolisSampler`1"/>).
            </summary>
            <typeparam name="T">The type of samples this sampler produces.</typeparam>
        </member>
        <member name="T:MathNet.Numerics.Statistics.Mcmc.McmcSampler`1">
            <summary>
            The interface which every sampler must implement.
            </summary>
            <typeparam name="T">The type of samples this sampler produces.</typeparam>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Mcmc.McmcSampler`1._randomNumberGenerator">
            <summary>
            The random number generator for this class.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Mcmc.McmcSampler`1.Accepts">
            <summary>
            Keeps track of the number of accepted samples.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Mcmc.McmcSampler`1.Samples">
            <summary>
            Keeps track of the number of calls to the proposal sampler.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.McmcSampler`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Statistics.Mcmc.McmcSampler`1"/> class.
            </summary>
            <remarks>Thread safe instances are two and half times slower than non-thread
            safe classes.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.McmcSampler`1.Sample">
            <summary>
            Returns one sample.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.McmcSampler`1.Sample(System.Int32)">
            <summary>
            Returns a number of samples.
            </summary>
            <param name="n">The number of samples we want.</param>
            <returns>An array of samples.</returns>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Mcmc.McmcSampler`1.RandomSource">
            <summary>
            Gets or sets the random number generator.
            </summary>
            <exception cref="T:System.ArgumentNullException">When the random number generator is null.</exception>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Mcmc.McmcSampler`1.AcceptanceRate">
            <summary>
            Gets the acceptance rate of the sampler.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Mcmc.HybridMCGeneric`1._energy">
            <summary>
            Evaluates the energy function of the target distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Mcmc.HybridMCGeneric`1.Current">
            <summary>
            The current location of the sampler.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Mcmc.HybridMCGeneric`1._burnInterval">
            <summary>
            The number of burn iterations between two samples.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Mcmc.HybridMCGeneric`1._stepSize">
            <summary>
            The size of each step in the Hamiltonian equation.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Mcmc.HybridMCGeneric`1._frogLeapSteps">
            <summary>
            The number of iterations in the Hamiltonian equation.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Mcmc.HybridMCGeneric`1._diff">
            <summary>
            The algorithm used for differentiation.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.HybridMCGeneric`1.#ctor(`0,MathNet.Numerics.Statistics.Mcmc.DensityLn{`0},System.Int32,System.Double,System.Int32,System.Random,MathNet.Numerics.Statistics.Mcmc.HybridMCGeneric{`0}.DiffMethod)">
            <summary>
            Constructs a new Hybrid Monte Carlo sampler.
            </summary>
            <param name="x0">The initial sample.</param>
            <param name="pdfLnP">The log density of the distribution we want to sample from.</param>
            <param name="frogLeapSteps">Number frogleap simulation steps.</param>
            <param name="stepSize">Size of the frogleap simulation steps.</param>
            <param name="burnInterval">The number of iterations in between returning samples.</param>
            <param name="randomSource">Random number generator used for sampling the momentum.</param>
            <param name="diff">The method used for differentiation.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the number of burnInterval iteration is negative.</exception>
            <exception cref="T:System.ArgumentNullException">When either x0, pdfLnP or diff is null.</exception>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.HybridMCGeneric`1.Sample">
            <summary>
            Returns a sample from the distribution P.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.HybridMCGeneric`1.Burn(System.Int32)">
            <summary>
            This method runs the sampler for a number of iterations without returning a sample
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.HybridMCGeneric`1.Update(System.Double@,`0@,`0,`0,System.Double,System.Double)">
            <summary>
            Method used to update the sample location. Used in the end of the loop.
            </summary>
            <param name="e">The old energy.</param>
            <param name="gradient">The old gradient/derivative of the energy.</param>
            <param name="mNew">The new sample.</param>
            <param name="gNew">The new gradient/derivative of the energy.</param>
            <param name="enew">The new energy.</param>
            <param name="dh">The difference between the old Hamiltonian and new Hamiltonian. Use to determine
            if an update should take place. </param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.HybridMCGeneric`1.Create">
            <summary>
            Use for creating temporary objects in the Burn method.
            </summary>
            <returns>An object of type T.</returns>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.HybridMCGeneric`1.Copy(`0)">
            <summary>
            Use for copying objects in the Burn method.
            </summary>
            <param name="source">The source of copying.</param>
            <returns>A copy of the source object.</returns>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.HybridMCGeneric`1.DoProduct(`0,`0)">
            <summary>
            Method for doing dot product.
            </summary>
            <param name="first">First vector/scalar in the product.</param>
            <param name="second">Second vector/scalar in the product.</param>
            <returns></returns>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.HybridMCGeneric`1.DoAdd(`0@,System.Double,`0)">
            <summary>
            Method for adding, multiply the second vector/scalar by factor and then
            add it to the first vector/scalar.
            </summary>
            <param name="first">First vector/scalar.</param>
            <param name="factor">Scalar factor multiplying by the second vector/scalar.</param>
            <param name="second">Second vector/scalar.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.HybridMCGeneric`1.DoSubtract(`0@,System.Double,`0)">
            <summary>
            Multiplying the second vector/scalar by factor and then subtract it from
            the first vector/scalar.
            </summary>
            <param name="first">First vector/scalar.</param>
            <param name="factor">Scalar factor to be multiplied to the second vector/scalar.</param>
            <param name="second">Second vector/scalar.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.HybridMCGeneric`1.RandomizeMomentum(`0@)">
            <summary>
            Method for sampling a random momentum.
            </summary>
            <param name="p">Momentum to be randomized.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.HybridMCGeneric`1.HamiltonianEquations(`0@,`0@,`0@)">
            <summary>
            The Hamiltonian equations that is used to produce the new sample.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.HybridMCGeneric`1.Hamiltonian(`0,System.Double)">
            <summary>
            Method to compute the Hamiltonian used in the method.
            </summary>
            <param name="momentum">The momentum.</param>
            <param name="e">The energy.</param>
            <returns>Hamiltonian=E+p.p/2</returns>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.HybridMCGeneric`1.SetNonNegative(System.Int32)">
            <summary>
            Method to check and set a quantity to a non-negative value.
            </summary>
            <param name="value">Proposed value to be checked.</param>
            <returns>Returns value if it is greater than or equal to zero.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Throws when value is negative.</exception>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.HybridMCGeneric`1.SetPositive(System.Int32)">
            <summary>
            Method to check and set a quantity to a non-negative value.
            </summary>
            <param name="value">Proposed value to be checked.</param>
            <returns>Returns value if it is greater than to zero.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Throws when value is negative or zero.</exception>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.HybridMCGeneric`1.SetPositive(System.Double)">
            <summary>
            Method to check and set a quantity to a non-negative value.
            </summary>
            <param name="value">Proposed value to be checked.</param>
            <returns>Returns value if it is greater than zero.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Throws when value is negative or zero.</exception>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Mcmc.HybridMCGeneric`1.BurnInterval">
            <summary>
            Gets or sets the number of iterations in between returning samples.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">When burn interval is negative.</exception>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Mcmc.HybridMCGeneric`1.FrogLeapSteps">
            <summary>
            Gets or sets the number of iterations in the Hamiltonian equation.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">When frogleap steps is negative or zero.</exception>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Mcmc.HybridMCGeneric`1.StepSize">
            <summary>
            Gets or sets the size of each step in the Hamiltonian equation.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">When step size is negative or zero.</exception>
        </member>
        <member name="T:MathNet.Numerics.Statistics.Mcmc.HybridMCGeneric`1.DiffMethod">
            <summary>
            The delegate type that defines a derivative evaluated at a certain point.
            </summary>
            <param name="f">Function to be differentiated.</param>
            <param name="x">Value where the derivative is computed.</param>
            <returns></returns>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Mcmc.HybridMC._length">
            <summary>
            Number of parameters in the density function.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Mcmc.HybridMC._pDistribution">
            <summary>
            Distribution to sample momentum from.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Mcmc.HybridMC._mpSdv">
            <summary>
            Standard deviations used in the sampling of different components of the
            momentum.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.HybridMC.#ctor(System.Double[],MathNet.Numerics.Statistics.Mcmc.DensityLn{System.Double[]},System.Int32,System.Double)">
            <summary>
            Constructs a new Hybrid Monte Carlo sampler for a multivariate probability distribution.
            The burn interval will be set to 0.
            The components of the momentum will be sampled from a normal distribution with standard deviation
            1 using the default <see cref="T:System.Random"/> random
            number generator. A three point estimation will be used for differentiation.
            </summary>
            <param name="x0">The initial sample.</param>
            <param name="pdfLnP">The log density of the distribution we want to sample from.</param>
            <param name="frogLeapSteps">Number frogleap simulation steps.</param>
            <param name="stepSize">Size of the frogleap simulation steps.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.HybridMC.#ctor(System.Double[],MathNet.Numerics.Statistics.Mcmc.DensityLn{System.Double[]},System.Int32,System.Double,System.Int32)">
            <summary>
            Constructs a new Hybrid Monte Carlo sampler for a multivariate probability distribution.
            The components of the momentum will be sampled from a normal distribution with standard deviation
            1 using the default <see cref="T:System.Random"/> random
            number generator. A three point estimation will be used for differentiation.
            This constructor will set the burn interval.
            </summary>
            <param name="x0">The initial sample.</param>
            <param name="pdfLnP">The log density of the distribution we want to sample from.</param>
            <param name="frogLeapSteps">Number frogleap simulation steps.</param>
            <param name="stepSize">Size of the frogleap simulation steps.</param>
            <param name="burnInterval">The number of iterations in between returning samples.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the number of burnInterval iteration is negative.</exception>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.HybridMC.#ctor(System.Double[],MathNet.Numerics.Statistics.Mcmc.DensityLn{System.Double[]},System.Int32,System.Double,System.Int32,System.Double[])">
            <summary>
            Constructs a new Hybrid Monte Carlo sampler for a multivariate probability distribution.
            The components of the momentum will be sampled from a normal distribution with standard deviation
            specified by pSdv using the default <see cref="T:System.Random"/> random
            number generator. A three point estimation will be used for differentiation.
            This constructor will set the burn interval.
            </summary>
            <param name="x0">The initial sample.</param>
            <param name="pdfLnP">The log density of the distribution we want to sample from.</param>
            <param name="frogLeapSteps">Number frogleap simulation steps.</param>
            <param name="stepSize">Size of the frogleap simulation steps.</param>
            <param name="burnInterval">The number of iterations in between returning samples.</param>
            <param name="pSdv">The standard deviations of the normal distributions that are used to sample
            the components of the momentum.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the number of burnInterval iteration is negative.</exception>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.HybridMC.#ctor(System.Double[],MathNet.Numerics.Statistics.Mcmc.DensityLn{System.Double[]},System.Int32,System.Double,System.Int32,System.Double[],System.Random)">
            <summary>
            Constructs a new Hybrid Monte Carlo sampler for a multivariate probability distribution.
            The components of the momentum will be sampled from a normal distribution with standard deviation
            specified by pSdv using the a random number generator provided by the user.
            A three point estimation will be used for differentiation.
            This constructor will set the burn interval.
            </summary>
            <param name="x0">The initial sample.</param>
            <param name="pdfLnP">The log density of the distribution we want to sample from.</param>
            <param name="frogLeapSteps">Number frogleap simulation steps.</param>
            <param name="stepSize">Size of the frogleap simulation steps.</param>
            <param name="burnInterval">The number of iterations in between returning samples.</param>
            <param name="pSdv">The standard deviations of the normal distributions that are used to sample
            the components of the momentum.</param>
            <param name="randomSource">Random number generator used for sampling the momentum.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the number of burnInterval iteration is negative.</exception>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.HybridMC.#ctor(System.Double[],MathNet.Numerics.Statistics.Mcmc.DensityLn{System.Double[]},System.Int32,System.Double,System.Int32,System.Double[],System.Random,MathNet.Numerics.Statistics.Mcmc.HybridMCGeneric{System.Double[]}.DiffMethod)">
            <summary>
            Constructs a new Hybrid Monte Carlo sampler for a multivariate probability distribution.
            The components of the momentum will be sampled from a normal distribution with standard deviations
            given by pSdv. This constructor will set the burn interval, the method used for
            numerical differentiation and the random number generator.
            </summary>
            <param name="x0">The initial sample.</param>
            <param name="pdfLnP">The log density of the distribution we want to sample from.</param>
            <param name="frogLeapSteps">Number frogleap simulation steps.</param>
            <param name="stepSize">Size of the frogleap simulation steps.</param>
            <param name="burnInterval">The number of iterations in between returning samples.</param>
            <param name="pSdv">The standard deviations of the normal distributions that are used to sample
            the components of the momentum.</param>
            <param name="randomSource">Random number generator used for sampling the momentum.</param>
            <param name="diff">The method used for numerical differentiation.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the number of burnInterval iteration is negative.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When the length of pSdv is not the same as x0.</exception>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.HybridMC.Initialize(System.Double[])">
            <summary>
            Initialize parameters.
            </summary>
            <param name="x0">The current location of the sampler.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.HybridMC.CheckVariance(System.Double[])">
            <summary>
            Checking that the location and the momentum are of the same dimension and that each component is positive.
            </summary>
            <param name="pSdv">The standard deviations used for sampling the momentum.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the length of pSdv is not the same as Length or if any
            component is negative.</exception>
            <exception cref="T:System.ArgumentNullException">When pSdv is null.</exception>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.HybridMC.Copy(System.Double[])">
            <summary>
            Use for copying objects in the Burn method.
            </summary>
            <param name="source">The source of copying.</param>
            <returns>A copy of the source object.</returns>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.HybridMC.Create">
            <summary>
            Use for creating temporary objects in the Burn method.
            </summary>
            <returns>An object of type T.</returns>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.HybridMC.DoAdd(System.Double[]@,System.Double,System.Double[])">
            <inheritdoc/>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.HybridMC.DoSubtract(System.Double[]@,System.Double,System.Double[])">
            <inheritdoc/>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.HybridMC.DoProduct(System.Double[],System.Double[])">
            <inheritdoc/>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.HybridMC.RandomizeMomentum(System.Double[]@)">
            <summary>
            Samples the momentum from a normal distribution.
            </summary>
            <param name="p">The momentum to be randomized.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.HybridMC.Grad(MathNet.Numerics.Statistics.Mcmc.DensityLn{System.Double[]},System.Double[])">
            <summary>
            The default method used for computing the gradient. Uses a simple three point estimation.
            </summary>
            <param name="function">Function which the gradient is to be evaluated.</param>
            <param name="x">The location where the gradient is to be evaluated.</param>
            <returns>The gradient of the function at the point x.</returns>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Mcmc.HybridMC.MomentumStdDev">
            <summary>
            Gets or sets the standard deviations used in the sampling of different components of the
            momentum.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">When the length of pSdv is not the same as Length.</exception>
        </member>
        <member name="T:MathNet.Numerics.Statistics.Mcmc.Diagnostics.MCMCDiagnostics">
            <summary>
            Provides utilities to analysis the convergence of a set of samples from
            a <seealso cref="T:MathNet.Numerics.Statistics.Mcmc.McmcSampler`1"/>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.Diagnostics.MCMCDiagnostics.ACF``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Double})">
            <summary>
            Computes the auto correlations of a series evaluated by a function f.
            </summary>
            <param name="series">The series for computing the auto correlation.</param>
            <param name="lag">The lag in the series</param>
            <param name="f">The function used to evaluate the series.</param>
            <returns>The auto correlation.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Throws if lag is zero or if lag is
            greater than or equal to the length of Series.</exception>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.Diagnostics.MCMCDiagnostics.EffectiveSize``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Computes the effective size of the sample when evaluated by a function f.
            </summary>
            <param name="series">The samples.</param>
            <param name="f">The function use for evaluating the series.</param>
            <returns>The effective size when auto correlation is taken into account.</returns>
        </member>
        <member name="T:MathNet.Numerics.Statistics.Mcmc.GlobalProposalSampler`1">
            <summary>
            A method which samples datapoints from a proposal distribution. The implementation of this sampler
            is stateless: no variables are saved between two calls to Sample. This proposal is different from
            <seealso cref="T:MathNet.Numerics.Statistics.Mcmc.LocalProposalSampler`1"/> in that it doesn't take any parameters; it samples random
            variables from the whole domain.
            </summary>
            <typeparam name="T">The type of the datapoints.</typeparam>
            <returns>A sample from the proposal distribution.</returns>
        </member>
        <member name="T:MathNet.Numerics.Statistics.Mcmc.LocalProposalSampler`1">
            <summary>
            A method which samples datapoints from a proposal distribution given an initial sample. The implementation
            of this sampler is stateless: no variables are saved between two calls to Sample. This proposal is different from
            <seealso cref="T:MathNet.Numerics.Statistics.Mcmc.GlobalProposalSampler`1"/> in that it samples locally around an initial point. In other words, it
            makes a small local move rather than producing a global sample from the proposal.
            </summary>
            <typeparam name="T">The type of the datapoints.</typeparam>
            <param name="init">The initial sample.</param>
            <returns>A sample from the proposal distribution.</returns>
        </member>
        <member name="T:MathNet.Numerics.Statistics.Mcmc.Density`1">
            <summary>
            A function which evaluates a density.
            </summary>
            <typeparam name="T">The type of data the distribution is over.</typeparam>
            <param name="sample">The sample we want to evaluate the density for.</param>
        </member>
        <member name="T:MathNet.Numerics.Statistics.Mcmc.DensityLn`1">
            <summary>
            A function which evaluates a log density.
            </summary>
            <typeparam name="T">The type of data the distribution is over.</typeparam>
            <param name="sample">The sample we want to evaluate the log density for.</param>
        </member>
        <member name="T:MathNet.Numerics.Statistics.Mcmc.TransitionKernelLn`1">
            <summary>
            A function which evaluates the log of a transition kernel probability.
            </summary>
            <typeparam name="T">The type for the space over which this transition kernel is defined.</typeparam>
            <param name="to">The new state in the transition.</param>
            <param name="from">The previous state in the transition.</param>
            <returns>The log probability of the transition.</returns>
        </member>
        <member name="T:MathNet.Numerics.Statistics.Mcmc.MetropolisHastingsSampler`1">
             <summary>
             Metropolis-Hastings sampling produces samples from distribition P by sampling from a proposal distribution Q
             and accepting/rejecting based on the density of P. Metropolis-Hastings sampling doesn't require that the
             proposal distribution Q is symmetric in comparison to <seealso cref="T:MathNet.Numerics.Statistics.Mcmc.MetropolisSampler`1"/>. It does need to
             be able to evaluate the proposal sampler's log density though. All densities are required to be in log space.
            
             The Metropolis-Hastings sampler is a stateful sampler. It keeps track of where it currently is in the domain
             of the distribution P.
             </summary>
             <typeparam name="T">The type of samples this sampler produces.</typeparam>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Mcmc.MetropolisHastingsSampler`1._pdfLnP">
            <summary>
            Evaluates the log density function of the target distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Mcmc.MetropolisHastingsSampler`1._krnlQ">
            <summary>
            Evaluates the log transition probability for the proposal distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Mcmc.MetropolisHastingsSampler`1._proposal">
            <summary>
            A function which samples from a proposal distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Mcmc.MetropolisHastingsSampler`1._current">
            <summary>
            The current location of the sampler.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Mcmc.MetropolisHastingsSampler`1._currentDensityLn">
            <summary>
            The log density at the current location.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Mcmc.MetropolisHastingsSampler`1._burnInterval">
            <summary>
            The number of burn iterations between two samples.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.MetropolisHastingsSampler`1.#ctor(`0,MathNet.Numerics.Statistics.Mcmc.DensityLn{`0},MathNet.Numerics.Statistics.Mcmc.TransitionKernelLn{`0},MathNet.Numerics.Statistics.Mcmc.LocalProposalSampler{`0})">
            <summary>
            Constructs a new Metropolis-Hastings sampler using the default <see cref="T:System.Random"/> random
            number generator. The burn interval will be set to 0.
            </summary>
            <param name="x0">The initial sample.</param>
            <param name="pdfLnP">The log density of the distribution we want to sample from.</param>
            <param name="krnlQ">The log transition probability for the proposal distribution.</param>
            <param name="proposal">A method that samples from the proposal distribution.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.MetropolisHastingsSampler`1.#ctor(`0,MathNet.Numerics.Statistics.Mcmc.DensityLn{`0},MathNet.Numerics.Statistics.Mcmc.TransitionKernelLn{`0},MathNet.Numerics.Statistics.Mcmc.LocalProposalSampler{`0},System.Int32)">
            <summary>
            Constructs a new Metropolis-Hastings sampler using the default <see cref="T:System.Random"/> random number generator. This
            constructor will set the burn interval.
            </summary>
            <param name="x0">The initial sample.</param>
            <param name="pdfLnP">The log density of the distribution we want to sample from.</param>
            <param name="krnlQ">The log transition probability for the proposal distribution.</param>
            <param name="proposal">A method that samples from the proposal distribution.</param>
            <param name="burnInterval">The number of iterations in between returning samples.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the number of burnInterval iteration is negative.</exception>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.MetropolisHastingsSampler`1.Burn(System.Int32)">
            <summary>
            This method runs the sampler for a number of iterations without returning a sample
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.MetropolisHastingsSampler`1.Sample">
            <summary>
            Returns a sample from the distribution P.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Mcmc.MetropolisHastingsSampler`1.BurnInterval">
            <summary>
            Gets or sets the number of iterations in between returning samples.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">When burn interval is negative.</exception>
        </member>
        <member name="T:MathNet.Numerics.Statistics.Mcmc.MetropolisSampler`1">
             <summary>
             Metropolis sampling produces samples from distribition P by sampling from a proposal distribution Q
             and accepting/rejecting based on the density of P. Metropolis sampling requires that the proposal
             distribution Q is symmetric. All densities are required to be in log space.
            
             The Metropolis sampler is a stateful sampler. It keeps track of where it currently is in the domain
             of the distribution P.
             </summary>
             <typeparam name="T">The type of samples this sampler produces.</typeparam>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Mcmc.MetropolisSampler`1._pdfLnP">
            <summary>
            Evaluates the log density function of the sampling distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Mcmc.MetropolisSampler`1._proposal">
            <summary>
            A function which samples from a proposal distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Mcmc.MetropolisSampler`1._current">
            <summary>
            The current location of the sampler.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Mcmc.MetropolisSampler`1._currentDensityLn">
            <summary>
            The log density at the current location.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Mcmc.MetropolisSampler`1._burnInterval">
            <summary>
            The number of burn iterations between two samples.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.MetropolisSampler`1.#ctor(`0,MathNet.Numerics.Statistics.Mcmc.DensityLn{`0},MathNet.Numerics.Statistics.Mcmc.LocalProposalSampler{`0})">
            <summary>
            Constructs a new Metropolis sampler using the default <see cref="T:System.Random"/> random
            number generator. The burnInterval interval will be set to 0.
            </summary>
            <param name="x0">The initial sample.</param>
            <param name="pdfLnP">The log density of the distribution we want to sample from.</param>
            <param name="proposal">A method that samples from the symmetric proposal distribution.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.MetropolisSampler`1.#ctor(`0,MathNet.Numerics.Statistics.Mcmc.DensityLn{`0},MathNet.Numerics.Statistics.Mcmc.LocalProposalSampler{`0},System.Int32)">
            <summary>
            Constructs a new Metropolis sampler using the default <see cref="T:System.Random"/> random number generator.
            </summary>
            <param name="x0">The initial sample.</param>
            <param name="pdfLnP">The log density of the distribution we want to sample from.</param>
            <param name="proposal">A method that samples from the symmetric proposal distribution.</param>
            <param name="burnInterval">The number of iterations in between returning samples.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the number of burnInterval iteration is negative.</exception>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.MetropolisSampler`1.Burn(System.Int32)">
            <summary>
            This method runs the sampler for a number of iterations without returning a sample
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.MetropolisSampler`1.Sample">
            <summary>
            Returns a sample from the distribution P.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Mcmc.MetropolisSampler`1.BurnInterval">
            <summary>
            Gets or sets the number of iterations in between returning samples.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">When burn interval is negative.</exception>
        </member>
        <member name="T:MathNet.Numerics.Statistics.Mcmc.RejectionSampler`1">
            <summary>
            Rejection sampling produces samples from distribition P by sampling from a proposal distribution Q
            and accepting/rejecting based on the density of P and Q. The density of P and Q don't need to
            to be normalized, but we do need that for each x, P(x) &lt; Q(x).
            </summary>
            <typeparam name="T">The type of samples this sampler produces.</typeparam>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Mcmc.RejectionSampler`1._pdfP">
            <summary>
            Evaluates the density function of the sampling distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Mcmc.RejectionSampler`1._pdfQ">
            <summary>
            Evaluates the density function of the proposal distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Mcmc.RejectionSampler`1._proposal">
            <summary>
            A function which samples from a proposal distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.RejectionSampler`1.#ctor(MathNet.Numerics.Statistics.Mcmc.Density{`0},MathNet.Numerics.Statistics.Mcmc.Density{`0},MathNet.Numerics.Statistics.Mcmc.GlobalProposalSampler{`0})">
            <summary>
            Constructs a new rejection sampler using the default <see cref="T:System.Random"/> random number generator.
            </summary>
            <param name="pdfP">The density of the distribution we want to sample from.</param>
            <param name="pdfQ">The density of the proposal distribution.</param>
            <param name="proposal">A method that samples from the proposal distribution.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.RejectionSampler`1.Sample">
            <summary>
            Returns a sample from the distribution P.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">When the algorithms detects that the proposal
            distribution doesn't upper bound the target distribution.</exception>
        </member>
        <member name="T:MathNet.Numerics.Statistics.Mcmc.UnivariateHybridMC">
            <summary>
            A hybrid Monte Carlo sampler for univariate distributions.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Mcmc.UnivariateHybridMC._distribution">
            <summary>
            Distribution to sample momentum from.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Mcmc.UnivariateHybridMC._sdv">
            <summary>
            Standard deviations used in the sampling of the
            momentum.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.UnivariateHybridMC.#ctor(System.Double,MathNet.Numerics.Statistics.Mcmc.DensityLn{System.Double},System.Int32,System.Double)">
            <summary>
            Constructs a new Hybrid Monte Carlo sampler for a univariate probability distribution.
            The burn interval will be set to 0.
            The momentum will be sampled from a normal distribution with standard deviation
            1 using the default <see cref="T:System.Random"/> random
            number generator. A three point estimation will be used for differentiation.
            </summary>
            <param name="x0">The initial sample.</param>
            <param name="pdfLnP">The log density of the distribution we want to sample from.</param>
            <param name="frogLeapSteps">Number frogleap simulation steps.</param>
            <param name="stepSize">Size of the frogleap simulation steps.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.UnivariateHybridMC.#ctor(System.Double,MathNet.Numerics.Statistics.Mcmc.DensityLn{System.Double},System.Int32,System.Double,System.Int32)">
            <summary>
            Constructs a new Hybrid Monte Carlo sampler for a univariate probability distribution.
            The momentum will be sampled from a normal distribution with standard deviation
            1 using the default <see cref="T:System.Random"/> random
            number generator. A three point estimation will be used for differentiation.
            This constructor will set the burn interval.
            </summary>
            <param name="x0">The initial sample.</param>
            <param name="pdfLnP">The log density of the distribution we want to sample from.</param>
            <param name="frogLeapSteps">Number frogleap simulation steps.</param>
            <param name="stepSize">Size of the frogleap simulation steps.</param>
            <param name="burnInterval">The number of iterations in between returning samples.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the number of burnInterval iteration is negative.</exception>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.UnivariateHybridMC.#ctor(System.Double,MathNet.Numerics.Statistics.Mcmc.DensityLn{System.Double},System.Int32,System.Double,System.Int32,System.Double)">
            <summary>
            Constructs a new Hybrid Monte Carlo sampler for a univariate probability distribution.
            The momentum will be sampled from a normal distribution with standard deviation
            specified by pSdv using the default <see cref="T:System.Random"/> random
            number generator. A three point estimation will be used for differentiation.
            This constructor will set the burn interval.
            </summary>
            <param name="x0">The initial sample.</param>
            <param name="pdfLnP">The log density of the distribution we want to sample from.</param>
            <param name="frogLeapSteps">Number frogleap simulation steps.</param>
            <param name="stepSize">Size of the frogleap simulation steps.</param>
            <param name="burnInterval">The number of iterations in between returning samples.</param>
            <param name="pSdv">The standard deviation of the normal distribution that is used to sample
            the momentum.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the number of burnInterval iteration is negative.</exception>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.UnivariateHybridMC.#ctor(System.Double,MathNet.Numerics.Statistics.Mcmc.DensityLn{System.Double},System.Int32,System.Double,System.Int32,System.Double,System.Random)">
            <summary>
            Constructs a new Hybrid Monte Carlo sampler for a univariate probability distribution.
            The momentum will be sampled from a normal distribution with standard deviation
            specified by pSdv using a random
            number generator provided by the user. A three point estimation will be used for differentiation.
            This constructor will set the burn interval.
            </summary>
            <param name="x0">The initial sample.</param>
            <param name="pdfLnP">The log density of the distribution we want to sample from.</param>
            <param name="frogLeapSteps">Number frogleap simulation steps.</param>
            <param name="stepSize">Size of the frogleap simulation steps.</param>
            <param name="burnInterval">The number of iterations in between returning samples.</param>
            <param name="pSdv">The standard deviation of the normal distribution that is used to sample
            the momentum.</param>
            <param name="randomSource">Random number generator used to sample the momentum.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the number of burnInterval iteration is negative.</exception>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.UnivariateHybridMC.#ctor(System.Double,MathNet.Numerics.Statistics.Mcmc.DensityLn{System.Double},System.Int32,System.Double,System.Int32,System.Double,System.Random,MathNet.Numerics.Statistics.Mcmc.HybridMCGeneric{System.Double}.DiffMethod)">
            <summary>
            Constructs a new Hybrid Monte Carlo sampler for a multivariate probability distribution.
            The momentum will be sampled from a normal distribution with standard deviation
            given by pSdv using a random
            number generator provided by the user.  This constructor will set both the burn interval and the method used for
            numerical differentiation.
            </summary>
            <param name="x0">The initial sample.</param>
            <param name="pdfLnP">The log density of the distribution we want to sample from.</param>
            <param name="frogLeapSteps">Number frogleap simulation steps.</param>
            <param name="stepSize">Size of the frogleap simulation steps.</param>
            <param name="burnInterval">The number of iterations in between returning samples.</param>
            <param name="pSdv">The standard deviation of the normal distribution that is used to sample
            the momentum.</param>
            <param name="diff">The method used for numerical differentiation.</param>
            <param name="randomSource">Random number generator used for sampling the momentum.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the number of burnInterval iteration is negative.</exception>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.UnivariateHybridMC.Copy(System.Double)">
            <summary>
            Use for copying objects in the Burn method.
            </summary>
            <param name="source">The source of copying.</param>
            <returns>A copy of the source object.</returns>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.UnivariateHybridMC.Create">
            <summary>
            Use for creating temporary objects in the Burn method.
            </summary>
            <returns>An object of type T.</returns>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.UnivariateHybridMC.DoAdd(System.Double@,System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.UnivariateHybridMC.DoProduct(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.UnivariateHybridMC.DoSubtract(System.Double@,System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.UnivariateHybridMC.RandomizeMomentum(System.Double@)">
            <summary>
            Samples the momentum from a normal distribution.
            </summary>
            <param name="p">The momentum to be randomized.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.UnivariateHybridMC.Grad(MathNet.Numerics.Statistics.Mcmc.DensityLn{System.Double},System.Double)">
            <summary>
            The default method used for computing the derivative. Uses a simple three point estimation.
            </summary>
            <param name="function">Function for which the derivative is to be evaluated.</param>
            <param name="x">The location where the derivative is to be evaluated.</param>
            <returns>The derivative of the function at the point x.</returns>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Mcmc.UnivariateHybridMC.MomentumStdDev">
            <summary>
            Gets or sets the standard deviation used in the sampling of the
            momentum.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">When standard deviation is negative.</exception>
        </member>
        <member name="T:MathNet.Numerics.Statistics.PercentileMethod">
            <summary>
            Methods to calculate the percentiles.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Statistics.PercentileMethod.Nist">
            <summary>
            Using the method recommened my NIST,
            http://www.itl.nist.gov/div898/handbook/prc/section2/prc252.htm
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Statistics.PercentileMethod.Nearest">
            <summary>
            Using the nearest rank, http://en.wikipedia.org/wiki/Percentile#Nearest_Rank
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Statistics.PercentileMethod.Excel">
            <summary>
            Using the same method as Excel does, 
            http://www.itl.nist.gov/div898/handbook/prc/section2/prc252.htm
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Statistics.PercentileMethod.Interpolation">
            <summary>
            Use linear interpolation between the two nearest ranks,
            http://en.wikipedia.org/wiki/Percentile#Linear_Interpolation_Between_Closest_Ranks
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Statistics.Percentile">
            <summary>
            Class to calculate percentiles.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Percentile._data">
            <summary>
            Holds the data.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Percentile.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Statistics.Percentile"/> class.
            </summary>
            <param name="data">The data to calculate the percentiles of.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Percentile.Compute(System.Double)">
            <summary>
            Computes the percentile.
            </summary>
            <param name="percentile">The percentile, must be between 0.0 and 1.0 (inclusive).</param>
            <returns>the requested percentile.</returns>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Percentile.Compute(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Computes the percentiles for the given list.
            </summary>
            <param name="percentiles">The percentiles, must be between 0.0 and 1.0 (inclusive)</param>
            <returns>the values that correspond to the given percentiles.</returns>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Percentile.Method">
            <summary>
            Gets or sets the method used to calculate the percentiles.
            </summary>
            <value>The calculation method.</value>
            <remarks>defaults to <see cref="F:MathNet.Numerics.Statistics.PercentileMethod.Nist"/>.</remarks>
        </member>
        <member name="T:MathNet.Numerics.Statistics.Statistics">
            <summary>
            Extension methods to return basic statistics on set of data.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.Minimum(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the minimum value in the sample data.
            Returns NaN if data is empty or if any entry is NaN.
            </summary>
            <param name="data">The sample data.</param>
            <returns>The minimum value in the sample data.</returns>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.Minimum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Returns the minimum value in the sample data.
            Returns NaN if data is empty or if any entry is NaN.
            Null-entries are ignored.
            </summary>
            <param name="data">The sample data.</param>
            <returns>The minimum value in the sample data.</returns>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.Maximum(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the maximum value in the sample data.
            Returns NaN if data is empty or if any entry is NaN.
            </summary>
            <param name="data">The sample data.</param>
            <returns>The maximum value in the sample data.</returns>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.Maximum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Returns the maximum value in the sample data.
            Returns NaN if data is empty or if any entry is NaN.
            Null-entries are ignored.
            </summary>
            <param name="data">The sample data.</param>
            <returns>The maximum value in the sample data.</returns>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.Mean(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Estimates the sample mean.
            Returns NaN if data is empty or if any entry is NaN.
            </summary>
            <param name="data">The data to calculate the mean of.</param>
            <returns>The mean of the sample.</returns>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.Mean(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Estimates the sample mean.
            Returns NaN if data is empty or if any entry is NaN.
            Null-entries are ignored.
            </summary>
            <param name="data">The data to calculate the mean of.</param>
            <returns>The mean of the sample.</returns>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.Variance(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Estimates the unbiased population variance from the provided samples.
            On a dataset of size N will use an N-1 normalizer (Bessel's correction).
            Returns NaN if data has less than two entries or if any entry is NaN.
            </summary>
            <param name="samples">A subset of samples, sampled from the full population.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.Variance(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Estimates the unbiased population variance from the provided samples.
            On a dataset of size N will use an N-1 normalizer (Bessel's correction).
            Returns NaN if data has less than two entries or if any entry is NaN.
            Null-entries are ignored.
            </summary>
            <param name="samples">A subset of samples, sampled from the full population.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.PopulationVariance(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Evaluates the population variance from the provided full population.
            On a dataset of size N will use an N normalizer and would thus be biased if applied to a subset.
            Returns NaN if data is empty or if any entry is NaN.
            </summary>
            <param name="population">The full population data.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.PopulationVariance(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Evaluates the population variance from the provided full population.
            On a dataset of size N will use an N normalize and would thus be biased if applied to a subsetr.
            Returns NaN if data is empty or if any entry is NaN.
            Null-entries are ignored.
            </summary>
            <param name="population">The full population data.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.StandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Estimates the unbiased population standard deviation from the provided samples.
            On a dataset of size N will use an N-1 normalizer (Bessel's correction).
            Returns NaN if data has less than two entries or if any entry is NaN.
            </summary>
            <param name="samples">A subset of samples, sampled from the full population.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Estimates the unbiased population standard deviation from the provided samples.
            On a dataset of size N will use an N-1 normalizer (Bessel's correction).
            Returns NaN if data has less than two entries or if any entry is NaN.
            Null-entries are ignored.
            </summary>
            <param name="samples">A subset of samples, sampled from the full population.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.PopulationStandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Evaluates the population standard deviation from the provided full population.
            On a dataset of size N will use an N normalizer and would thus be biased if applied to a subset.
            Returns NaN if data is empty or if any entry is NaN.
            </summary>
            <param name="population">The full population data.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.PopulationStandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Evaluates the population standard deviation from the provided full population.
            On a dataset of size N will use an N normalizer and would thus be biased if applied to a subset.
            Returns NaN if data is empty or if any entry is NaN.
            Null-entries are ignored.
            </summary>
            <param name="population">The full population data.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.Covariance(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Estimates the unbiased population covariance from the provided samples.
            On a dataset of size N will use an N-1 normalizer (Bessel's correction).
            Returns NaN if data has less than two entries or if any entry is NaN.
            </summary>
            <param name="samples1">A subset of samples, sampled from the full population.</param>
            <param name="samples2">A subset of samples, sampled from the full population.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.Covariance(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Estimates the unbiased population covariance from the provided samples.
            On a dataset of size N will use an N-1 normalizer (Bessel's correction).
            Returns NaN if data has less than two entries or if any entry is NaN.
            Null-entries are ignored.
            </summary>
            <param name="samples1">A subset of samples, sampled from the full population.</param>
            <param name="samples2">A subset of samples, sampled from the full population.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.PopulationCovariance(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Evaluates the population covariance from the provided full populations.
            On a dataset of size N will use an N normalizer and would thus be biased if applied to a subset.
            Returns NaN if data is empty or if any entry is NaN.
            </summary>
            <param name="population1">The full population data.</param>
            <param name="population2">The full population data.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.PopulationCovariance(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Evaluates the population covariance from the provided full populations.
            On a dataset of size N will use an N normalize and would thus be biased if applied to a subsetr.
            Returns NaN if data is empty or if any entry is NaN.
            Null-entries are ignored.
            </summary>
            <param name="population1">The full population data.</param>
            <param name="population2">The full population data.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.Median(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Estimates the sample median from the provided samples (R8).
            </summary>
            <param name="data">The data sample sequence.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.Median(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Estimates the sample median from the provided samples (R8).
            </summary>
            <param name="data">The data sample sequence.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.Quantile(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
            Estimates the tau-th quantile from the provided samples.
            The tau-th quantile is the data value where the cumulative distribution
            function crosses tau.
            Approximately median-unbiased regardless of the sample distribution (R8).
            </summary>
            <param name="data">The data sample sequence.</param>
            <param name="tau">Quantile selector, between 0.0 and 1.0 (inclusive).</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.Quantile(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.Double)">
            <summary>
            Estimates the tau-th quantile from the provided samples.
            The tau-th quantile is the data value where the cumulative distribution
            function crosses tau.
            Approximately median-unbiased regardless of the sample distribution (R8).
            </summary>
            <param name="data">The data sample sequence.</param>
            <param name="tau">Quantile selector, between 0.0 and 1.0 (inclusive).</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.QuantileFunc(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Estimates the tau-th quantile from the provided samples.
            The tau-th quantile is the data value where the cumulative distribution
            function crosses tau.
            Approximately median-unbiased regardless of the sample distribution (R8).
            </summary>
            <param name="data">The data sample sequence.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.QuantileFunc(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Estimates the tau-th quantile from the provided samples.
            The tau-th quantile is the data value where the cumulative distribution
            function crosses tau.
            Approximately median-unbiased regardless of the sample distribution (R8).
            </summary>
            <param name="data">The data sample sequence.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.InverseCDF(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
            Estimates the empirical inverse CDF at tau from the provided samples.
            </summary>
            <param name="data">The data sample sequence.</param>
            <param name="tau">Quantile selector, between 0.0 and 1.0 (inclusive).</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.InverseCDF(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.Double)">
            <summary>
            Estimates the empirical inverse CDF at tau from the provided samples.
            </summary>
            <param name="data">The data sample sequence.</param>
            <param name="tau">Quantile selector, between 0.0 and 1.0 (inclusive).</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.InverseCDFFunc(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Estimates the empirical inverse CDF at tau from the provided samples.
            </summary>
            <param name="data">The data sample sequence.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.InverseCDFFunc(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Estimates the empirical inverse CDF at tau from the provided samples.
            </summary>
            <param name="data">The data sample sequence.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.QuantileCustom(System.Collections.Generic.IEnumerable{System.Double},System.Double,MathNet.Numerics.Statistics.QuantileDefinition)">
            <summary>
            stimates the tau-th quantile from the provided samples.
            The tau-th quantile is the data value where the cumulative distribution
            function crosses tau. The quantile definition can be specificed to be compatible
            with an existing system.
            </summary>
            <param name="data">The data sample sequence.</param>
            <param name="tau">Quantile selector, between 0.0 and 1.0 (inclusive).</param>
            <param name="definition">Quantile definition, to choose what product/definition it should be consistent with</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.QuantileCustom(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.Double,MathNet.Numerics.Statistics.QuantileDefinition)">
            <summary>
            stimates the tau-th quantile from the provided samples.
            The tau-th quantile is the data value where the cumulative distribution
            function crosses tau. The quantile definition can be specificed to be compatible
            with an existing system.
            </summary>
            <param name="data">The data sample sequence.</param>
            <param name="tau">Quantile selector, between 0.0 and 1.0 (inclusive).</param>
            <param name="definition">Quantile definition, to choose what product/definition it should be consistent with</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.QuantileCustomFunc(System.Collections.Generic.IEnumerable{System.Double},MathNet.Numerics.Statistics.QuantileDefinition)">
            <summary>
            stimates the tau-th quantile from the provided samples.
            The tau-th quantile is the data value where the cumulative distribution
            function crosses tau. The quantile definition can be specificed to be compatible
            with an existing system.
            </summary>
            <param name="data">The data sample sequence.</param>
            <param name="definition">Quantile definition, to choose what product/definition it should be consistent with</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.QuantileCustomFunc(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},MathNet.Numerics.Statistics.QuantileDefinition)">
            <summary>
            stimates the tau-th quantile from the provided samples.
            The tau-th quantile is the data value where the cumulative distribution
            function crosses tau. The quantile definition can be specificed to be compatible
            with an existing system.
            </summary>
            <param name="data">The data sample sequence.</param>
            <param name="definition">Quantile definition, to choose what product/definition it should be consistent with</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.Percentile(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Estimates the p-Percentile value from the provided samples.
            If a non-integer Percentile is needed, use Quantile instead.
            Approximately median-unbiased regardless of the sample distribution (R8).
            </summary>
            <param name="data">The data sample sequence.</param>
            <param name="p">Percentile selector, between 0 and 100 (inclusive).</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.Percentile(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.Int32)">
            <summary>
            Estimates the p-Percentile value from the provided samples.
            If a non-integer Percentile is needed, use Quantile instead.
            Approximately median-unbiased regardless of the sample distribution (R8).
            </summary>
            <param name="data">The data sample sequence.</param>
            <param name="p">Percentile selector, between 0 and 100 (inclusive).</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.PercentileFunc(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Estimates the p-Percentile value from the provided samples.
            If a non-integer Percentile is needed, use Quantile instead.
            Approximately median-unbiased regardless of the sample distribution (R8).
            </summary>
            <param name="data">The data sample sequence.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.PercentileFunc(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Estimates the p-Percentile value from the provided samples.
            If a non-integer Percentile is needed, use Quantile instead.
            Approximately median-unbiased regardless of the sample distribution (R8).
            </summary>
            <param name="data">The data sample sequence.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.LowerQuartile(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Estimates the first quartile value from the provided samples.
            Approximately median-unbiased regardless of the sample distribution (R8).
            </summary>
            <param name="data">The data sample sequence.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.LowerQuartile(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Estimates the first quartile value from the provided samples.
            Approximately median-unbiased regardless of the sample distribution (R8).
            </summary>
            <param name="data">The data sample sequence.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.UpperQuartile(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Estimates the third quartile value from the provided samples.
            Approximately median-unbiased regardless of the sample distribution (R8).
            </summary>
            <param name="data">The data sample sequence.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.UpperQuartile(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Estimates the third quartile value from the provided samples.
            Approximately median-unbiased regardless of the sample distribution (R8).
            </summary>
            <param name="data">The data sample sequence.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.InterquartileRange(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Estimates the inter-quartile range from the provided samples.
            Approximately median-unbiased regardless of the sample distribution (R8).
            </summary>
            <param name="data">The data sample sequence.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.InterquartileRange(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Estimates the inter-quartile range from the provided samples.
            Approximately median-unbiased regardless of the sample distribution (R8).
            </summary>
            <param name="data">The data sample sequence.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.FiveNumberSummary(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Estimates {min, lower-quantile, median, upper-quantile, max} from the provided samples.
            Approximately median-unbiased regardless of the sample distribution (R8).
            </summary>
            <param name="data">The data sample sequence.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.FiveNumberSummary(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Estimates {min, lower-quantile, median, upper-quantile, max} from the provided samples.
            Approximately median-unbiased regardless of the sample distribution (R8).
            </summary>
            <param name="data">The data sample sequence.</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.OrderStatistic(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Returns the order statistic (order 1..N) from the provided samples.
            </summary>
            <param name="data">The data sample sequence.</param>
            <param name="order">One-based order of the statistic, must be between 1 and N (inclusive).</param>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Statistics.OrderStatisticFunc(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the order statistic (order 1..N) from the provided samples.
            </summary>
            <param name="data">The data sample sequence.</param>
        </member>
        <member name="T:MathNet.Numerics.Statistics.Mcmc.UnivariateSliceSampler">
             <summary>
             Slice sampling produces samples from distribition P by uniformly sampling from under the pdf of P using
             a technique described in "Slice Sampling", R. Neal, 2003. All densities are required to be in log space.
            
             The slice sampler is a stateful sampler. It keeps track of where it currently is in the domain
             of the distribution P.
             </summary>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Mcmc.UnivariateSliceSampler._pdfLnP">
            <summary>
            Evaluates the log density function of the target distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Mcmc.UnivariateSliceSampler._current">
            <summary>
            The current location of the sampler.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Mcmc.UnivariateSliceSampler._currentDensityLn">
            <summary>
            The log density at the current location.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Mcmc.UnivariateSliceSampler._burnInterval">
            <summary>
            The number of burn iterations between two samples.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Mcmc.UnivariateSliceSampler._scale">
            <summary>
            The scale of the slice sampler.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.UnivariateSliceSampler.#ctor(System.Double,MathNet.Numerics.Statistics.Mcmc.DensityLn{System.Double},System.Double)">
            <summary>
            Constructs a new Slice sampler using the default <see cref="T:System.Random"/> random
            number generator. The burn interval will be set to 0.
            </summary>
            <param name="x0">The initial sample.</param>
            <param name="pdfLnP">The density of the distribution we want to sample from.</param>
            <param name="scale">The scale factor of the slice sampler.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the scale of the slice sampler is not positive.</exception>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.UnivariateSliceSampler.#ctor(System.Double,MathNet.Numerics.Statistics.Mcmc.DensityLn{System.Double},System.Int32,System.Double)">
            <summary>
            Constructs a new slice sampler using the default <see cref="T:System.Random"/> random number generator. It
            will set the number of burnInterval iterations and run a burnInterval phase.
            </summary>
            <param name="x0">The initial sample.</param>
            <param name="pdfLnP">The density of the distribution we want to sample from.</param>
            <param name="burnInterval">The number of iterations in between returning samples.</param>
            <param name="scale">The scale factor of the slice sampler.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the number of burnInterval iteration is negative.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When the scale of the slice sampler is not positive.</exception>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.UnivariateSliceSampler.Burn(System.Int32)">
            <summary>
            This method runs the sampler for a number of iterations without returning a sample
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Mcmc.UnivariateSliceSampler.Sample">
            <summary>
            Returns a sample from the distribution P.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Mcmc.UnivariateSliceSampler.BurnInterval">
            <summary>
            Gets or sets the number of iterations in between returning samples.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">When burn interval is negative.</exception>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Mcmc.UnivariateSliceSampler.Scale">
            <summary>
            Gets or sets the scale of the slice sampler.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Threading.CommonParallel">
            <summary>
            Used to simplify parallel code, particularly between the .NET 4.0 and Silverlight Code.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Threading.CommonParallel.For(System.Int32,System.Int32,System.Action{System.Int32})">
            <summary>
            Executes a for loop in which iterations may run in parallel.
            </summary>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="body">The body to be invoked for each iteration.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="body"/> argument is <c>null</c>.</exception>
            <exception cref="T:System.AggregateException">At least one invocation of the body threw an exception.</exception>
        </member>
        <member name="M:MathNet.Numerics.Threading.CommonParallel.For(System.Int32,System.Int32,System.Action{System.Int32,System.Int32})">
            <summary>
            Executes a for loop in which iterations may run in parallel.
            </summary>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="body">The body to be invoked for each iteration range.</param>
        </member>
        <member name="M:MathNet.Numerics.Threading.CommonParallel.For(System.Int32,System.Int32,System.Int32,System.Action{System.Int32,System.Int32})">
            <summary>
            Executes a for loop in which iterations may run in parallel.
            </summary>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="body">The body to be invoked for each iteration range.</param>
        </member>
        <member name="M:MathNet.Numerics.Threading.CommonParallel.For``1(``0[],System.Action{System.Int32,``0})">
            <summary>
            Executes a for loop in which iterations may run in parallel.
            </summary>
            <param name="array">The array to iterate over.</param>
            <param name="body">The body to be invoked for each iteration.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="body"/> argument is <c>null</c>.</exception>
            <exception cref="T:System.AggregateException">At least one invocation of the body threw an exception.</exception>
        </member>
        <member name="M:MathNet.Numerics.Threading.CommonParallel.Invoke(System.Action[])">
            <summary>
            Executes each of the provided actions inside a discrete, asynchronous task. 
            </summary>
            <param name="actions">An array of actions to execute.</param>
            <exception cref="T:System.ArgumentException">The actions array contains a <c>null</c> element.</exception>
            <exception cref="T:System.AggregateException">At least one invocation of the actions threw an exception.</exception>
        </member>
        <member name="M:MathNet.Numerics.Threading.CommonParallel.Aggregate``1(System.Int32,System.Int32,System.Func{System.Int32,``0},System.Func{``0[],``0})">
            <summary>
            Selects an item (such as Max or Min).
            </summary>
            <param name="fromInclusive">Starting index of the loop.</param>
            <param name="toExclusive">Ending index of the loop</param>
            <param name="select">The function to select items over a subset.</param>
            <param name="reduce">The function to select the item of selection from the subsets.</param>
            <returns>The selected value.</returns>
        </member>
        <member name="M:MathNet.Numerics.Threading.CommonParallel.Aggregate``2(``0[],System.Func{System.Int32,``0,``1},System.Func{``1[],``1})">
            <summary>
            Selects an item (such as Max or Min).
            </summary>
            <param name="array">The array to iterate over.</param>
            <param name="select">The function to select items over a subset.</param>
            <param name="reduce">The function to select the item of selection from the subsets.</param>
            <returns>The selected value.</returns>
        </member>
        <member name="M:MathNet.Numerics.Threading.CommonParallel.Aggregate``1(System.Int32,System.Int32,System.Func{System.Int32,``0},System.Func{``0,``0,``0},``0)">
            <summary>
            Selects an item (such as Max or Min).
            </summary>
            <param name="fromInclusive">Starting index of the loop.</param>
            <param name="toExclusive">Ending index of the loop</param>
            <param name="select">The function to select items over a subset.</param>
            <param name="reducePair">The function to select the item of selection from the subsets.</param>
            <param name="reduceDefault">Default result of the reduce function on an empty set.</param>
            <returns>The selected value.</returns>
        </member>
        <member name="M:MathNet.Numerics.Threading.CommonParallel.Aggregate``2(``0[],System.Func{System.Int32,``0,``1},System.Func{``1,``1,``1},``1)">
            <summary>
            Selects an item (such as Max or Min).
            </summary>
            <param name="array">The array to iterate over.</param>
            <param name="select">The function to select items over a subset.</param>
            <param name="reducePair">The function to select the item of selection from the subsets.</param>
            <param name="reduceDefault">Default result of the reduce function on an empty set.</param>
            <returns>The selected value.</returns>
        </member>
        <member name="T:MathNet.Numerics.Trig">
            <summary>
            Double-precision trigonometry toolkit.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Trig.DegreeToGradConstant">
            <summary>
            Constant to convert a degree to grad.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Cosecant(System.Double)">
            <summary>
            Trigonometric Cosecant of an angle in radian.
            </summary>
            <param name="radian">
            The angle in radian.
            </param>
            <returns>
            Cosecant of an angle in radian.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.Cosecant(System.Numerics.Complex)">
            <summary>
            Trigonometric Cosecant of a <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The cosecant of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.Cosine(System.Double)">
            <summary>
            Trigonometric Cosine of an angle in radian.
            </summary>
            <param name="radian">
            The angle in radian.
            </param>
            <returns>
            The cosine of an angle in radian.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.Cosine(System.Numerics.Complex)">
            <summary>
            Trigonometric Cosine of a <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The cosine of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.Cotangent(System.Double)">
            <summary>
            Trigonometric Cotangent of an angle in radian.
            </summary>
            <param name="radian">
            The angle in radian.
            </param>
            <returns>
            The cotangent of an angle in radian.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.Cotangent(System.Numerics.Complex)">
            <summary>
            Trigonometric Cotangent of a <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The cotangent of the complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.DegreeToGrad(System.Double)">
            <summary>
            Converts a degree (360-periodic) angle to a grad (400-periodic) angle.
            </summary>
            <param name="degree">
            The degree to convert.
            </param>
            <returns>
            The converted grad angle.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.DegreeToRadian(System.Double)">
            <summary>
            Converts a degree (360-periodic) angle to a radian (2*Pi-periodic) angle.
            </summary>
            <param name="degree">
            The degree to convert.
            </param>
            <returns>
            The converted radian angle.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.GradToDegree(System.Double)">
            <summary>
            Converts a grad (400-periodic) angle to a degree (360-periodic) angle.
            </summary>
            <param name="grad">
            The grad to convert.
            </param>
            <returns>
            The converted degree.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.GradToRadian(System.Double)">
            <summary>
            Converts a grad (400-periodic) angle to a radian (2*Pi-periodic) angle.
            </summary>
            <param name="grad">
            The grad to convert.
            </param>
            <returns>
            The converted radian.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.HyperbolicCosecant(System.Double)">
            <summary>
            Trigonometric Hyperbolic Cosecant
            </summary>
            <param name="radian">
            The angle in radian.
            </param>
            <returns>
            The hyperbolic cosecant of the radian angle.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.HyperbolicCosecant(System.Numerics.Complex)">
            <summary>
            Trigonometric Hyperbolic Cosecant of a <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The hyperbolic cosecant of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.HyperbolicCosine(System.Double)">
            <summary>
            Trigonometric Hyperbolic Cosine
            </summary>
            <param name="radian">
            The angle in radian.
            </param>
            <returns>
            The hyperbolic Cosine of the radian angle.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.HyperbolicCosine(System.Numerics.Complex)">
            <summary>
            Trigonometric Hyperbolic Cosine of a <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The hyperbolic cosine of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.HyperbolicCotangent(System.Double)">
            <summary>
            Trigonometric Hyperbolic Cotangent
            </summary>
            <param name="radian">
            The angle in radian angle.
            </param>
            <returns>
            The hyperbolic cotangent of the radian angle.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.HyperbolicCotangent(System.Numerics.Complex)">
            <summary>
            Trigonometric Hyperbolic Cotangent of a <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The hyperbolic cotangent of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.HyperbolicSecant(System.Double)">
            <summary>
            Trigonometric Hyperbolic Secant
            </summary>
            <param name="radian">
            The angle in radian angle.
            </param>
            <returns>
            The hyperbolic secant of the radian angle.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.HyperbolicSecant(System.Numerics.Complex)">
            <summary>
            Trigonometric Hyperbolic Secant of a <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The hyperbolic secant of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.HyperbolicSine(System.Double)">
            <summary>
            Trigonometric Hyperbolic Sine
            </summary>
            <param name="radian">
            The angle in radian angle.
            </param>
            <returns>
            The hyperbolic sine of the radian angle.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.HyperbolicSine(System.Numerics.Complex)">
            <summary>
            Trigonometric Hyperbolic Sine of a <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The hyperbolic sine of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.HyperbolicTangent(System.Double)">
            <summary>
            Trigonometric Hyperbolic Tangent in radian
            </summary>
            <param name="radian">
            The angle in radian angle.
            </param>
            <returns>
            The hyperbolic tangent of the radian angle.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.HyperbolicTangent(System.Numerics.Complex)">
            <summary>
            Trigonometric Hyperbolic Tangent of a <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The hyperbolic tangent of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseCosecant(System.Double)">
            <summary>
            Trigonometric Arc Cosecant in radian
            </summary>
            <param name="radian">
            The angle in radian angle.
            </param>
            <returns>
            The inverse cosecant of the radian angle.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if -1 &lt; <paramref name="radian"/> &lt; 1.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseCosecant(System.Numerics.Complex)">
            <summary>
            Trigonometric Arc Cosecant of this <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The arc cosecant of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseCosine(System.Double)">
            <summary>
            Trigonometric Arc Cosine in radian
            </summary>
            <param name="radian">
            The angle in radian angle.
            </param>
            <returns>
            The inverse cosine of the radian angle.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if 1 &lt; <paramref name="radian"/>  or  <paramref name="radian"/> &lt; -1.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseCosine(System.Numerics.Complex)">
            <summary>
            Trigonometric Arc Cosine of this <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The arc cosine of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseCotangent(System.Double)">
            <summary>
            Trigonometric Arc Cotangent in radian
            </summary>
            <param name="radian">
            The angle in radian angle.
            </param>
            <returns>
            The inverse cotangent of the radian angle.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseCotangent(System.Numerics.Complex)">
            <summary>
            Trigonometric Arc Cotangent of this <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The arc cotangent of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseHyperbolicCosecant(System.Double)">
            <summary>
            Trigonometric Hyperbolic Arc Cosecant
            </summary>
            <param name="radian">
            The angle in radian angle.
            </param>
            <returns>
            The inverse hyperbolic cosecant of the radian angle.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseHyperbolicCosecant(System.Numerics.Complex)">
            <summary>
            Trigonometric Hyperbolic Arc Cosecant of this <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The hyperbolic arc cosecant of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseHyperbolicCosine(System.Double)">
            <summary>
            Trigonometric Hyperbolic Area Cosine
            </summary>
            <param name="radian">
            The angle in radian angle.
            </param>
            <returns>
            The inverse hyperbolic cosine of the radian angle.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseHyperbolicCosine(System.Numerics.Complex)">
            <summary>
            Trigonometric Hyperbolic Arc Cosine of this <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The hyperbolic arc cosine of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseHyperbolicCotangent(System.Double)">
            <summary>
            Trigonometric Hyperbolic Arc Cotangent
            </summary>
            <param name="radian">
            The angle in radian angle.
            </param>
            <returns>
            The inverse hyperbolic cotangent of the radian angle.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseHyperbolicCotangent(System.Numerics.Complex)">
            <summary>
            Trigonometric Hyperbolic Arc Cotangent of this <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The hyperbolic arc cotangent of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseHyperbolicSecant(System.Double)">
            <summary>
            Trigonometric Hyperbolic Area Secant
            </summary>
            <param name="radian">
            The angle in radian angle.
            </param>
            <returns>
            The inverse hyperbolic secant of the radian angle.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseHyperbolicSecant(System.Numerics.Complex)">
            <summary>
            Trigonometric Hyperbolic Arc Secant of this <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The hyperbolic arc secant of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseHyperbolicSine(System.Double)">
            <summary>
            Trigonometric Hyperbolic Area Sine
            </summary>
            <param name="radian">
            The angle in radian angle.
            </param>
            <returns>
            The inverse hyperbolic sine of the radian angle.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseHyperbolicSine(System.Numerics.Complex)">
            <summary>
            Trigonometric Hyperbolic Arc Sine of this <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The hyperbolic arc sine of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseHyperbolicTangent(System.Double)">
            <summary>
            Trigonometric Hyperbolic Area Tangent
            </summary>
            <param name="radian">
            The angle in radian angle.
            </param>
            <returns>
            The inverse hyperbolic tangent of the radian angle.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseHyperbolicTangent(System.Numerics.Complex)">
            <summary>
            Trigonometric Hyperbolic Arc Tangent of this <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The hyperbolic arc tangent of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseSecant(System.Double)">
            <summary>
            Trigonometric Arc Secant in radian
            </summary>
            <param name="radian">
            The angle in radian angle.
            </param>
            <returns>
            The inverse secant of the radian angle.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseSecant(System.Numerics.Complex)">
            <summary>
            Trigonometric Arc Secant of this <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The arc secant of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseSine(System.Double)">
            <summary>
            Trigonometric Arc Sine in radian
            </summary>
            <param name="radian">
            The angle in radian angle.
            </param>
            <returns>
            The inverse sine of the radian angle.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseSine(System.Numerics.Complex)">
            <summary>
            Trigonometric Arc Sine of this <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The arc sine of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseTangent(System.Double)">
            <summary>
            Trigonometric Arc Tangent  in radian
            </summary>
            <param name="radian">
            The angle in radian angle.
            </param>
            <returns>
            The inverse tangent of the radian angle.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseTangent(System.Numerics.Complex)">
            <summary>
            Trigonometric Arc Tangent of this <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The arc tangent of a complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.RadianToDegree(System.Double)">
            <summary>
            Converts a radian (2*Pi-periodic) angle to a degree (360-periodic) angle.
            </summary>
            <param name="radian">
            The radian to convert.
            </param>
            <returns>
            The converted degree.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.RadianToGrad(System.Double)">
            <summary>
            Converts a radian (2*Pi-periodic) angle to a grad (400-periodic) angle.
            </summary>
            <param name="radian">
            The radian to convert.
            </param>
            <returns>
            The converted grad.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.Secant(System.Double)">
            <summary>
            Trigonometric Secant of an angle in radian
            </summary>
            <param name="radian">
            The angle in radian.
            </param>
            <returns>
            The secant of the radian angle.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.Secant(System.Numerics.Complex)">
            <summary>
            Trigonometric Secant of a <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The secant of the complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.Sine(System.Double)">
            <summary>
            Trigonometric Sine of an angle in radian
            </summary>
            <param name="radian">
            The angle in radian.
            </param>
            <returns>
            The sine of the radian angle.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.Sine(System.Numerics.Complex)">
            <summary>
            Trigonometric Sine of a <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The sine of the complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.Tangent(System.Double)">
            <summary>
            Trigonometric Tangent of an angle in radian
            </summary>
            <param name="radian">
            The angle in radian.
            </param>
            <returns>
            The tangent of the radian angle.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.Tangent(System.Numerics.Complex)">
            <summary>
            Trigonometric Tangent of a <c>Complex</c> number.
            </summary>
            <param name="value">
            The complex value.
            </param>
            <returns>
            The tangent of the complex number.
            </returns>
        </member>
        <member name="T:MathNet.Numerics.Distributions.StudentT">
            <summary>
            Implements the univariate Student t-distribution. For details about this
            distribution, see 
            <a href="http://en.wikipedia.org/wiki/Student%27s_t-distribution">
            Wikipedia - Student's t-distribution</a>.
            </summary>
            <remarks><para>We use a slightly generalized version (compared to
            Wikipedia) of the Student t-distribution. Namely, one which also
            parameterizes the location and scale. See the book "Bayesian Data
            Analysis" by Gelman et al. for more details.</para>
            <para>The density of the Student t-distribution  p(x|mu,scale,dof) =
            Gamma((dof+1)/2) (1 + (x - mu)^2 / (scale * scale * dof))^(-(dof+1)/2) /
            (Gamma(dof/2)*Sqrt(dof*pi*scale)).</para>
            <para>The distribution will use the <see cref="T:System.Random"/> by
            default.  Users can get/set the random number generator by using the 
            <see cref="P:MathNet.Numerics.Distributions.StudentT.RandomSource"/> property.</para>
            <para>The statistics classes will check all the incoming parameters
            whether they are in the allowed range. This might involve heavy
            computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="F:MathNet.Numerics.Distributions.StudentT._location">
            <summary>
            Keeps track of the location of the Student t-distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.StudentT._dof">
            <summary>
            Keeps track of the degrees of freedom for the Student t-distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.StudentT._scale">
            <summary>
            Keeps track of the scale for the Student t-distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.StudentT._random">
            <summary>
            The distribution's random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StudentT.#ctor">
            <summary>
            Initializes a new instance of the StudentT class. This is a Student t-distribution with location 0.0
            scale 1.0 and degrees of freedom 1. The distribution will
            be initialized with the default <seealso cref="T:System.Random"/> random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StudentT.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the StudentT class with a particular location, scale and degrees of
            freedom. The distribution will
            be initialized with the default <seealso cref="T:System.Random"/> random number generator.
            </summary>
            <param name="location">The location of the Student t-distribution.</param>
            <param name="scale">The scale of the Student t-distribution.</param>
            <param name="dof">The degrees of freedom for the Student t-distribution.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StudentT.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StudentT.IsValidParameterSet(System.Double,System.Double,System.Double)">
            <summary>
            Checks whether the parameters of the distribution are valid. 
            </summary>
            <param name="location">The location of the Student t-distribution.</param>
            <param name="scale">The scale of the Student t-distribution.</param>
            <param name="dof">The degrees of freedom for the Student t-distribution.</param>
            <returns><c>true</c> when the parameters are valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StudentT.SetParameters(System.Double,System.Double,System.Double)">
            <summary>
            Sets the parameters of the distribution after checking their validity.
            </summary>
            <param name="location">The location of the Student t-distribution.</param>
            <param name="scale">The scale of the Student t-distribution.</param>
            <param name="dof">The degrees of freedom for the Student t-distribution.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the parameters don't pass the <see cref="M:MathNet.Numerics.Distributions.StudentT.IsValidParameterSet(System.Double,System.Double,System.Double)"/> function.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StudentT.Density(System.Double)">
            <summary>
            Computes the density of the Student t-distribution.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StudentT.DensityLn(System.Double)">
            <summary>
            Computes the log density of the Student t-distribution.
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StudentT.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution function of the Student t-distribution.
            </summary>
            <param name="x">The location at which to compute the cumulative density.</param>
            <returns>the cumulative density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StudentT.SampleUnchecked(System.Random,System.Double,System.Double,System.Double)">
            <summary>
            Samples student-t distributed random variables.
            </summary>
            <remarks>The algorithm is method 2 in section 5, chapter 9 
            in L. Devroye's "Non-Uniform Random Variate Generation"</remarks>
            <param name="rnd">The random number generator to use.</param>
            <param name="location">The location of the Student t-distribution.</param>
            <param name="scale">The scale of the Student t-distribution.</param>
            <param name="dof">The degrees of freedom for the standard student-t distribution.</param>
            <returns>a random number from the standard student-t distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StudentT.Sample">
            <summary>
            Generates a sample from the Student t-distribution.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StudentT.Samples">
            <summary>
            Generates a sequence of samples from the Student t-distribution.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StudentT.Sample(System.Random,System.Double,System.Double,System.Double)">
            <summary>
            Generates a sample from the Student t-distribution.
            </summary>
            <param name="rng">The random number generator to use.</param>
            <param name="location">The location of the Student t-distribution.</param>
            <param name="scale">The scale of the Student t-distribution.</param>
            <param name="dof">The degrees of freedom for the Student t-distribution.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StudentT.Samples(System.Random,System.Double,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the Student t-distribution using the <i>Box-Muller</i> algorithm.
            </summary>
            <param name="rng">The random number generator to use.</param>
            <param name="location">The location of the Student t-distribution.</param>
            <param name="scale">The scale of the Student t-distribution.</param>
            <param name="dof">The degrees of freedom for the Student t-distribution.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StudentT.Location">
            <summary>
            Gets or sets the location of the Student t-distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StudentT.Scale">
            <summary>
            Gets or sets the scale of the Student t-distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StudentT.DegreesOfFreedom">
            <summary>
            Gets or sets the degrees of freedom of the Student t-distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StudentT.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StudentT.Mean">
            <summary>
            Gets the mean of the Student t-distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StudentT.Variance">
            <summary>
            Gets the variance of the Student t-distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StudentT.StdDev">
            <summary>
            Gets the standard deviation of the Student t-distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StudentT.Entropy">
            <summary>
            Gets the entropy of the Student t-distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StudentT.Skewness">
            <summary>
            Gets the skewness of the Student t-distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StudentT.Mode">
            <summary>
            Gets the mode of the Student t-distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StudentT.Median">
            <summary>
            Gets the median of the Student t-distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StudentT.Minimum">
            <summary>
            Gets the minimum of the Student t-distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StudentT.Maximum">
            <summary>
            Gets the maximum of the Student t-distribution.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.MeanPrecisionPair">
            <summary>
            This structure represents the type over which the <see cref="T:MathNet.Numerics.Distributions.NormalGamma"/> distribution
            is defined.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.MeanPrecisionPair._mean">
            <summary>
            The mean value.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.MeanPrecisionPair._precision">
            <summary>
            The precision value.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.MeanPrecisionPair.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.MeanPrecisionPair"/> struct. 
            </summary>
            <param name="m">
            The mean of the pair.
            </param>
            <param name="p">
            The precision of the pair.
            </param>
        </member>
        <member name="P:MathNet.Numerics.Distributions.MeanPrecisionPair.Mean">
            <summary>
            Gets or sets the mean of the pair.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.MeanPrecisionPair.Precision">
            <summary>
            Gets or sets the precision of the pair.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.NormalGamma">
            <summary>
            <para>The <see cref="T:MathNet.Numerics.Distributions.NormalGamma"/> distribution is the conjugate prior distribution for the <see cref="T:MathNet.Numerics.Distributions.Normal"/>
            distribution. It specifies a prior over the mean and precision of the <see cref="T:MathNet.Numerics.Distributions.Normal"/> distribution.</para>
            <para>It is parameterized by four numbers: the mean location, the mean scale, the precision shape and the
            precision inverse scale.</para>
            <para>The distribution NG(mu, tau | mloc,mscale,psscale,pinvscale) = Normal(mu | mloc, 1/(mscale*tau)) * Gamma(tau | psscale,pinvscale).</para>
            <para>The following degenerate cases are special: when the precision is known,
            the precision shape will encode the value of the precision while the precision inverse scale is positive
            infinity. When the mean is known, the mean location will encode the value of the mean while the scale
            will be positive infinity. A completely degenerate NormalGamma distribution with known mean and precision is possible as well.</para>
            <a href="http://en.wikipedia.org/wiki/Normal-gamma_distribution">Wikipedia - Normal-Gamma distribution</a>.
            </summary>
            <remarks><para>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can get/set the random number generator by using the <see cref="P:MathNet.Numerics.Distributions.NormalGamma.RandomSource"/> property.</para>
            <para>The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="F:MathNet.Numerics.Distributions.NormalGamma._meanLocation">
            <summary>
            The location of the mean.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.NormalGamma._meanScale">
            <summary>
            The scale of the mean.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.NormalGamma._precisionShape">
            <summary>
            The shape of the precision.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.NormalGamma._precisionInvScale">
            <summary>
            The inverse scale of the precision.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.NormalGamma._random">
            <summary>
            The distribution's random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NormalGamma.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.NormalGamma"/> class. 
            </summary>
            <param name="meanLocation">
            The location of the mean.
            </param>
            <param name="meanScale">
            The scale of the mean.
            </param>
            <param name="precisionShape">
            The shape of the precision.
            </param>
            <param name="precisionInverseScale">
            The inverse scale of the precision.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NormalGamma.IsValidParameterSet(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Checks whether the parameters of the distribution are valid. 
            </summary>
            <param name="meanLocation">The location of the mean.</param>
            <param name="meanScale">The scale of the mean.</param>
            <param name="precShape">The shape of the precision.</param>
            <param name="precInvScale">The inverse scale of the precision.</param>
            <returns><c>true</c> when the parameters are valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NormalGamma.SetParameters(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the parameters of the distribution after checking their validity.
            </summary>
            <param name="meanLocation">The location of the mean.</param>
            <param name="meanScale">The scale of the mean.</param>
            <param name="precShape">The shape of the precision.</param>
            <param name="precInvScale">The inverse scale of the precision.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the parameters don't pass the <see cref="M:MathNet.Numerics.Distributions.NormalGamma.IsValidParameterSet(System.Double,System.Double,System.Double,System.Double)"/> function.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NormalGamma.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NormalGamma.MeanMarginal">
            <summary>
            Returns the marginal distribution for the mean of the <c>NormalGamma</c> distribution.
            </summary>
            <returns>the marginal distribution for the mean of the <c>NormalGamma</c> distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NormalGamma.PrecisionMarginal">
            <summary>
            Returns the marginal distribution for the precision of the <see cref="T:MathNet.Numerics.Distributions.NormalGamma"/> distribution.
            </summary>
            <returns>The marginal distribution for the precision of the <see cref="T:MathNet.Numerics.Distributions.NormalGamma"/> distribution/</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NormalGamma.Density(MathNet.Numerics.Distributions.MeanPrecisionPair)">
            <summary>
            Evaluates the probability density function for a NormalGamma distribution.
            </summary>
            <param name="mp">The mean/precision pair of the distribution</param>
            <returns>Density value</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NormalGamma.Density(System.Double,System.Double)">
            <summary>
            Evaluates the probability density function for a NormalGamma distribution.
            </summary>
            <param name="mean">The mean of the distribution</param>
            <param name="prec">The precision of the distribution</param>
            <returns>Density value</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NormalGamma.DensityLn(MathNet.Numerics.Distributions.MeanPrecisionPair)">
            <summary>
            Evaluates the log probability density function for a NormalGamma distribution.
            </summary>
            <param name="mp">The mean/precision pair of the distribution</param>
            <returns>The log of the density value</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NormalGamma.DensityLn(System.Double,System.Double)">
            <summary>
            Evaluates the log probability density function for a NormalGamma distribution.
            </summary>
            <param name="mean">The mean of the distribution</param>
            <param name="prec">The precision of the distribution</param>
            <returns>The log of the density value</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NormalGamma.Sample">
            <summary>
            Generates a sample from the <c>NormalGamma</c> distribution.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NormalGamma.Samples">
            <summary>
            Generates a sequence of samples from the <c>NormalGamma</c> distribution
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NormalGamma.Sample(System.Random,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Generates a sample from the <c>NormalGamma</c> distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="meanLocation">The location of the mean.</param>
            <param name="meanScale">The scale of the mean.</param>
            <param name="precisionShape">The shape of the precision.</param>
            <param name="precisionInverseScale">The inverse scale of the precision.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NormalGamma.Samples(System.Random,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the NormalGamma distribution
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="meanLocation">The location of the mean.</param>
            <param name="meanScale">The scale of the mean.</param>
            <param name="precisionShape">The shape of the precision.</param>
            <param name="precisionInvScale">The inverse scale of the precision.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NormalGamma.MeanLocation">
            <summary>
            Gets or sets the location of the mean.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NormalGamma.MeanScale">
            <summary>
            Gets or sets the scale of the mean.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NormalGamma.PrecisionShape">
            <summary>
            Gets or sets the shape of the precision.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NormalGamma.PrecisionInverseScale">
            <summary>
            Gets or sets the inverse scale of the precision.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NormalGamma.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NormalGamma.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
            <value>The mean of the distribution.</value>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NormalGamma.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
            <value>The mean of the distribution.</value>
        </member>
    </members>
</doc>
